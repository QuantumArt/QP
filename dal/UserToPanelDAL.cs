//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
namespace Quantumart.QP8.DAL
{
    
    // ReSharper disable CollectionNeverUpdated.Global
    // ReSharper disable InconsistentNaming
    // ReSharper disable UnusedMember.Global
    // ReSharper disable UnusedAutoPropertyAccessor.Global
    public partial class UserToPanelDAL
    {
    
        public decimal UserId { get; set; }
        public decimal PanelId { get; set; }
        public decimal PanelBlockNo { get; set; }
        public decimal PanelOrder { get; set; }
        public decimal PanelHeight { get; set; }
        public decimal SaveBlockNo { get; set; }
        public decimal SaveOrder { get; set; }
    
        public TodayPanelsDAL TodayPanels { get; set; }
        public UserDAL Users { get; set; }
    }
        public class UserToPanelDALConfiguration : IEntityTypeConfiguration<UserToPanelDAL>
        {
            public void Configure(EntityTypeBuilder<UserToPanelDAL> builder)
            {
                builder.ToTable("user_to_panel");
    
                builder.Property(x => x.UserId).HasColumnName("user_id");
				builder.Property(x => x.PanelId).HasColumnName("panel_id");
				builder.Property(x => x.PanelBlockNo).HasColumnName("panel_block_no");
				builder.Property(x => x.PanelOrder).HasColumnName("panel_order");
				builder.Property(x => x.PanelHeight).HasColumnName("panel_height");
				builder.Property(x => x.SaveBlockNo).HasColumnName("save_block_no");
				builder.Property(x => x.SaveOrder).HasColumnName("save_order");
				
    
                builder.HasKey(x => new { x.UserId, x.PanelId });

    
                builder.HasOne(x => x.TodayPanels).WithMany(y => y.UserToPanel).HasForeignKey(x => x.PanelId);
    			builder.HasOne(x => x.Users).WithMany(y => y.UserToPanel).HasForeignKey(x => x.UserId);
    			
            }
        }
}
