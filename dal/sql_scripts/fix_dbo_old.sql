-- **************************************
-- Pavel Celut
-- version 7.5.7.0
-- Label
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.0', 'Copyright &copy; 1998-2007 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.0 completed'
GO


-- **************************************
-- Leonid Barenblit
-- version 7.5.7.1
-- Enable child groups override parent permissions, user overrides group
-- **************************************
,
ALTER PROCEDURE [dbo].[qp_GetPermittedItemsAsQuery]
(
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @entity_name varchar(100)='content_item',
  @parent_entity_name varchar(100)='',
  @parent_entity_id numeric(18,0)=0,
  @SQLOut varchar(8000) OUTPUT
)
AS

SET NOCOUNT ON

Declare @sPermissionTable varchar(200)
Declare @NewLine char(2)
Declare @sUnion varchar(20)
Declare @sSelectUser varchar(200)
Declare @sSelectGroup varchar(8000)
Declare @sSQL varchar(8000)
Declare @srGroupInList varchar (30)
Declare @srLevelIncrement varchar (30)
Declare @sTemp varchar(8000)
Declare @sWhereParentEntity varchar (8000)
Declare @sDefaultSQL varchar (8000)
Declare @sGroupBy varchar (200)
Declare @intIncrement int
Declare @CurrentLevelAddition int
Declare @sSQLStart varchar(300)
Declare @sSQLEnd varchar (600)

/***********************************/
/**** Declare Table Variables   ****/
/***********************************/
declare @ChildGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @ParentGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @UsedGroups table
(
  group_id numeric(18,0)
)

declare @TempParentGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)
/***********************************/

select @NewLine = CHAR(13) + CHAR(10)
Select @intIncrement = 10
Select @CurrentLevelAddition = 0
Select @sSQLStart = ' select ' + @entity_name + '_id, cast(min(pl) as int)%10 as permission_level from ('
Select @sSQLEnd = ') as qp_zzz group by qp_zzz.' + @entity_name + '_id HAVING cast(min(pl) as int)%10 >= ' + Cast(@start_level AS varchar) + ' AND cast(min(pl) as int)%10 <= ' + Cast(@end_level AS varchar)

Select @sGroupBy =  ' group by ' + @entity_name + '_id '
Select @sWhereParentEntity = ''
select @sPermissionTable = @entity_name + '_access_PermLevel'

if @parent_entity_name != '' and @parent_entity_id != 0
Begin
   Select @sPermissionTable = @sPermissionTable + '_' + @parent_entity_name
   Select @sWhereParentEntity = ' and ' + @parent_entity_name+ '_id=' + Cast(@parent_entity_id As varchar) + ' '
End

select @sSQL = ''
select @sTemp = null
Select @srGroupInList = '<@_group_in_list_@>'
Select @srLevelIncrement = '<@_increment_level_@>'
select @sUnion = @NewLine + ' Union All ' + @NewLine
select @sSelectUser = ' select ' + @entity_name + '_id, max(permission_level) as pl from ' + @sPermissionTable +  ' where user_id=' + Cast(@user_id AS varchar) + @NewLine
                      + @sWhereParentEntity + @NewLine
select @sSelectGroup = ' select ' + @entity_name + '_id, max(permission_level) + ' + @srLevelIncrement + ' as pl from ' + @sPermissionTable +  ' where group_id in (' + @srGroupInList + ')' + @NewLine
                      + @sWhereParentEntity + @NewLine
select @sDefaultSQL = ' select 0 as ' + @entity_name + '_id, 0 as permission_level from ' + @sPermissionTable


if @user_id > 0
Begin
   Select @sSQL = @sSelectUser + @sGroupBy
   insert into @ChildGroups (group_id) select distinct group_id from user_group_bind where user_id = @user_id
   Select @CurrentLevelAddition = @CurrentLevelAddition + @intIncrement
End

if @group_id > 0 AND @user_id <= 0
Begin
   insert into @ChildGroups(group_id) values (@group_id)
End

if (select count(*) from @ChildGroups) = 0
Begin
   if @sSQL != '' Select @SQLOut = @sSQL
   else Select @SQLOut = @sDefaultSQL
   return
End

SELECT @sTemp = COALESCE(@sTemp + ', ', '') + CAST(group_id AS varchar) FROM @ChildGroups
if @sSQL != '' Select @sSQL = @sSQL + @sUnion
Select @sSQL = @sSQL + Replace( Replace(@sSelectGroup,@srLevelIncrement,@CurrentLevelAddition), @srGroupInList, @sTemp )
Select @sSQL = @sSQL + @sGroupBy

insert into @UsedGroups(group_id) select group_id from @ChildGroups

WHILE 1=1
BEGIN
    Select @CurrentLevelAddition = @CurrentLevelAddition + @intIncrement
    select @sTemp = null
  insert into @ParentGroups (group_id) select distinct gtg.parent_group_id from group_to_group gtg inner join @ChildGroups cg on gtg.child_group_id = cg.group_id
    if (select count(*) from @ParentGroups) = 0 BREAK

    /* need to check that parent groups are not appearing in child groups */
    insert into @TempParentGroups (group_id) select pg.group_id from @ParentGroups pg where pg.group_id not in(select cg.group_id from @ChildGroups cg) and pg.group_id not in (select group_id from @UsedGroups)
    if (select count(*) from @TempParentGroups) != 0
    Begin
    SELECT @sTemp = COALESCE(@sTemp + ', ', '') + CAST(group_id AS varchar) FROM @TempParentGroups
    if @sSQL != '' Select @sSQL = @sSQL + @sUnion
    Select @sSQL = @sSQL + Replace( Replace(@sSelectGroup,@srLevelIncrement,@CurrentLevelAddition), @srGroupInList, @sTemp )
    Select @sSQL = @sSQL + @sGroupBy
        insert into @UsedGroups (group_id) select group_id from @TempParentGroups
    End

    delete @ChildGroups
    delete @TempParentGroups
    insert into @ChildGroups (group_id) select (group_id) from @ParentGroups
    delete @ParentGroups
    CONTINUE
END

Select @SQLOut = @sSQLStart + @sSQL + @sSQLEnd
return

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.1', 'Copyright &copy; 1998-2007 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.1 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.5.7.2
-- Custom Classes
-- **************************************

if not exists (select * From information_schema.columns where table_name = 'page_template' and column_name = 'custom_class_for_pages')
begin
  alter table page_template
  add custom_class_for_pages nvarchar(255) NULL
end
GO

if not exists (select * From information_schema.columns where table_name = 'page' and column_name = 'page_custom_class')
begin
  alter table page
  add page_custom_class nvarchar(255) NULL
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.2', 'Copyright &copy; 1998-2007 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.2 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.7.3
-- Custom Classes. Part 2
-- **************************************

if not exists (select * From information_schema.columns where table_name = 'page_template' and column_name = 'template_custom_class')
begin
  alter table page_template
  add template_custom_class nvarchar(255) NULL
end
GO

if not exists (select * From information_schema.columns where table_name = 'page_template' and column_name = 'custom_class_for_generics')
begin
  alter table page_template
  add custom_class_for_generics nvarchar(255) NULL
end
GO

if not exists (select * From information_schema.columns where table_name = 'page_template' and column_name = 'custom_class_for_containers')
begin
  alter table page_template
  add custom_class_for_containers nvarchar(255) NULL
end
GO

if not exists (select * From information_schema.columns where table_name = 'page_template' and column_name = 'custom_class_for_forms')
begin
  alter table page_template
  add custom_class_for_forms nvarchar(255) NULL
end
GO

if not exists (select * From information_schema.columns where table_name = 'object' and column_name = 'control_custom_class')
begin
  alter table object
  add control_custom_class nvarchar(255) NULL
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.3', 'Copyright &copy; 1998-2007 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.3 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.7.4
-- Custom Classes. Part 3
-- **************************************

ALTER   PROCEDURE [dbo].[qp_save_object]
-- input parametrs
-- If @page_id is Null -> create template object else page object
@page_template_id numeric(18,0),
@page_id numeric(18,0) = Null,
@object_overrided bit, -- //0 = false, 1 = true
@object_name nvarchar(255) = Null,
@parent_object_id numeric(18,0) = Null,
@object_type_id numeric(18,0),
@net_object_name nvarchar(255) = Null,
@description nvarchar(512) = Null,
@user_id numeric(18,0),
@global bit = 0,
@enable_viewState bit = 0,
@custom_class nvarchar(255) = null
AS
-- Local variables
DECLARE @strSQL nvarchar(2000)
DECLARE @parent_fmt_id numeric(18,0)
DECLARE @parent_type_id numeric(18,0)
DECLARE @parent_fmt_name nvarchar(255)
DECLARE @use_default_values numeric(18,0)
DECLARE @allow_stage_edit numeric(18,0)
DECLARE @object_id numeric(18,0)
-- body function
IF @object_overrided = 0
BEGIN
  SELECT @parent_object_id = object_id FROM object WHERE page_id IS Null AND object_name= @object_name AND page_template_id = @page_template_id
  IF @parent_object_id Is NOT Null
    Set @object_overrided = 1
END
IF @object_overrided <> 0
  SELECT @object_name = o.object_name, @net_object_name = o.net_object_name,
    @parent_fmt_id = o.object_format_id, @parent_type_id = o.object_type_id,
    @parent_fmt_name = f.format_name, @use_default_values = o.use_default_values, @allow_stage_edit = o.allow_stage_edit
  FROM object AS o
  LEFT OUTER JOIN object_format AS f ON f.object_format_id = o.object_format_id
  WHERE o.object_id = @parent_object_id
IF @allow_stage_edit IS Null
      IF @object_type_id = 1 OR @object_type_id = 2 OR @object_type_id = 9
        Set @allow_stage_edit = 1
      ELSE
        Set @allow_stage_edit = 0
INSERT INTO object
  (page_template_id, page_id, object_name, net_object_name, object_type_id, parent_object_id, description, last_modified_by, allow_stage_edit, global, enable_viewState, control_custom_class)
VALUES
  (@page_template_id, @page_id, @object_name, @net_object_name, @object_type_id, @parent_object_id, @description, @user_id, @allow_stage_edit, @global, @enable_viewState, @custom_class )
Set @object_id = CAST(SCOPE_IDENTITY() AS NUMERIC)
-- Copy object parameters for publishing container
IF @object_overrided <> 0 AND @object_type_id = 2
BEGIN
  exec qp_copy_parent_container @parent_object_id, @object_id
  IF @use_default_values <> 0
  BEGIN
    UPDATE object SET use_default_values = 1 WHERE object_id = @object_id

    INSERT INTO object_values
      (object_id, variable_name, variable_value)
    SELECT @object_id, variable_name, variable_value
    FROM object_values WHERE object_id = @parent_object_id
  END
END
IF @parent_fmt_id is NOT Null
BEGIN
  INSERT INTO object_format
    (object_id, format_name, description, format_body, last_modified_by, net_language_id, net_format_name, code_behind)
  SELECT
    @object_id, format_name, description, format_body, @user_id, net_language_id, net_format_name, code_behind
  FROM object_format
  WHERE object_id = @parent_object_id

  UPDATE object SET object_format_id =
    (SELECT object_format_id FROM object_format
    WHERE object_id = @object_id AND format_name = @parent_fmt_name)
  WHERE object_id = @object_id
END
IF @GLOBAL = 1 AND @object_type_id = 3
  UPDATE object SET global = 0 WHERE object_type_id = 3 AND page_template_id IN (
    SELECT page_template_id FROM page_template WHERE site_id = (
      SELECT site_id FROM page_template WHERE page_template_id = @page_template_id))
    AND object_id <> @object_id
SELECT @object_id AS object_id
RETURN 0
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.4', 'Copyright &copy; 1998-2007 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.4 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.7.5
-- Site Info
-- **************************************

ALTER TRIGGER [dbo].[tu_site_formats_modified] ON [dbo].[SITE]
FOR UPDATE
AS

  declare @upload_url nvarchar(255), @new_upload_url nvarchar(255)
  declare @use_absolute_upload_url numeric, @new_use_absolute_upload_url numeric
  declare @upload_url_prefix nvarchar(255), @new_upload_url_prefix nvarchar(255)
  declare @live_virtual_root nvarchar(255), @new_live_virtual_root nvarchar(255)
  declare @allow_user_sessions numeric, @new_allow_user_sessions numeric
  declare @site_id numeric, @i numeric, @count numeric
  declare @oldDataTable table (
    id numeric identity(1,1) primary key,
    site_id numeric,
    upload_url nvarchar(255),
    use_absolute_upload_url numeric,
    upload_url_prefix nvarchar(255),
    live_virtual_root nvarchar(255),
    allow_user_sessions numeric
  )

  --insert old data into temp table
  insert into @oldDataTable (site_id, upload_url, use_absolute_upload_url, upload_url_prefix, live_virtual_root, allow_user_sessions)
  select site_id, upload_url, use_absolute_upload_url, upload_url_prefix, live_virtual_root, allow_user_sessions from deleted

  set @i = 1
  select @count = count(id) from @oldDataTable
  while @i < @count + 1
  begin
    --get old data
    select  @site_id = site_id ,
        @upload_url = upload_url,
        @use_absolute_upload_url = use_absolute_upload_url,
        @upload_url_prefix = upload_url_prefix,
        @live_virtual_root = live_virtual_root,
        @allow_user_sessions = allow_user_sessions
    from @oldDataTable where id = @i

    --get new data
    select  @new_upload_url = upload_url,
        @new_use_absolute_upload_url = use_absolute_upload_url,
        @new_upload_url_prefix = upload_url_prefix,
        @new_live_virtual_root = live_virtual_root,
        @new_allow_user_sessions = allow_user_sessions
    from site where site_id = @site_id

    --if at least one required was changed we update 'modified' field for all site templates and formats
    if  IsNull(@new_upload_url, '') <> IsNull(@upload_url, '')
      or IsNull(@new_use_absolute_upload_url, '') <> IsNull(@use_absolute_upload_url, '')
      or IsNull(@new_upload_url_prefix, '') <> IsNull(@upload_url_prefix, '')
      or IsNull(@new_live_virtual_root, '') <> IsNull(@live_virtual_root, '')
      or IsNull(@new_allow_user_sessions, '') <> IsNull(@allow_user_sessions, '')

    begin
      update page_template set modified = Getdate() where site_id = @site_id
      update object_format set modified = Getdate() where object_id in (
        select object_id from object o
        join page_template pt on o.page_template_id = pt.page_template_id
        where pt.site_id = @site_id
      )
    end

    set @i = @i + 1
  end

GO

create procedure [dbo].[qp_delete_default]
@table_name nvarchar(255),
@column_name nvarchar(255)
as
declare @constraint_name nvarchar(255)

declare @table_id numeric
select @table_id = id from sysobjects where xtype = 'U ' and name = @table_name

select @constraint_name = name from sysobjects as main inner join sysconstraints as c
on main.id = c.constid where c.id = @table_id and colid in (

select colid from syscolumns c where c.name = @column_name and c.id = @table_id
)

exec('ALTER TABLE ' + @table_name + ' DROP CONSTRAINT '+ @constraint_name)
GO

exec qp_delete_default 'site', 'assemble_all_objects'
go
alter table site
drop column assemble_all_objects
go

exec qp_delete_default 'site', 'assemble_using_partial_classes'
go
alter table site
drop column assemble_using_partial_classes
go

alter table site
drop column framework_version
go

alter table container
drop column data_access_class
go

ALTER PROCEDURE [dbo].[qp_copy_parent_container]
@parent_object_id numeric(18,0),
@object_id numeric(18,0)
AS

  INSERT INTO container
    (object_id, content_id, allow_order_dynamic, order_static, order_dynamic, filter_value,
    select_start, select_total, schedule_dependence, rotate_content, apply_security, show_archived,
    duration, enable_cache_invalidation, dynamic_content_variable, start_level, end_level, use_level_filtration)
  SELECT
           @object_id, content_id, allow_order_dynamic, order_static, order_dynamic, filter_value,
    select_start, select_total, schedule_dependence, rotate_content, apply_security, show_archived,
    duration, enable_cache_invalidation, dynamic_content_variable, start_level, end_level, use_level_filtration
  FROM container
  WHERE object_id = @parent_object_id
GO




INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.5', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.5 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.7.6
-- Site Info
-- **************************************

declare @user_list_id numeric
declare @button_name nvarchar(30)
set @button_name = 'Search'
select @user_list_id = tab_id from tabs where tab_name = 'Users'

if not exists(select * from toolbar_buttons where location_tab_id = @user_list_id  and button_name = @button_name)
begin
  insert into toolbar_buttons(permission_level_id, location_tab_id, image_disabled, image_enabled, button_name, buttons_order, action_tab_id, always_enabled, action_function)
  values(1, @user_list_id , 'images/toolbar/search_disabled.gif', 'images/toolbar/search.gif', @button_name, 2, @user_list_id, 1, 'search')
end

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.6', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.6 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.7.7
-- Small fix
-- **************************************

ALTER PROCEDURE [dbo].[qp_GetContentData]
(
  @SiteName nvarchar(255),
  @ContentName nvarchar(255),
  @WhereExpression nvarchar(4000) = '',
  @OrderExpression nvarchar(4000) = '',
  @StartRow int = 1,
  @PageSize int = 0,
  @TotalRecords int = 0 output,
  @UseSchedule bit = 1,
  @StatusName nvarchar(255) = '',
  @ShowSplittedArticle bit = 0,
  @IncludeArchive bit = 0,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @filter_records bit = 1
)
AS
DECLARE @siteId numeric
DECLARE @contentId numeric
DECLARE @virtualType numeric

DECLARE @maxStatusId numeric
DECLARE @currentStatusId numeric
DECLARE @total numeric
DECLARE @tableSuffix nvarchar(20)
DECLARE @fromExpression nvarchar(1000)
DECLARE @fullWhereExpression nvarchar(4000)

DECLARE @insert_key varchar(200)
DECLARE @Select varchar(200)

set @insert_key ='<$_security_insert_$>'
set @Select = 'c.*'

select @siteId = site_id from site where site_name = @SiteName
if @siteId is null return 1

select @contentId = content_id, @virtualType = virtual_type from content where site_id = @SiteId and content_name = @ContentName
if @contentId is null return 2

select top 1 @maxStatusId = status_type_id from status_type where site_id = @SiteId order by weight desc

set @currentStatusId = NULL
if @StatusName <> '' begin
  select @currentStatusId = status_type_id from status_type where status_type_name = @StatusName and site_id = @SiteId
    if @currentStatusId is null return 3
end
if @currentStatusId is null begin
  set @currentStatusId = @maxStatusId
end

if @virtualType = 3 Or @currentStatusId = @maxStatusId Or @ShowSplittedArticle = 0 begin
  set @tableSuffix = ''
end
else begin
  set @tableSuffix = '_united'
end

if @WhereExpression = '' begin
  set @fullWhereExpression = '1 = 1'
end
else begin
  set @fullWhereExpression = @WhereExpression
end

if @UseSchedule = 1 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.visible = 1'
end

if @IncludeArchive = 0 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.archive = 0'
end

set @fullWhereExpression = @fullWhereExpression + ' and c.status_type_id = ' + CONVERT(NVARCHAR, @currentStatusId)

set @fromExpression = 'content_' + CONVERT(NVARCHAR, @ContentId) + @tableSuffix + ' as c WITH(NOLOCK) '

if @use_security>0
begin
  if @filter_records > 0
  begin
    set @fromExpression = @fromExpression + ' INNER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
  end
  else
  begin
        set @fromExpression = @fromExpression + ' LEFT OUTER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
    set @Select = @Select + ', IsNull(pi.permission_level,0) as current_permission_level  '
  end
end

exec qp_GetContentPage  @Select = @Select,
            @From=@fromExpression,
            @Where=@fullWhereExpression,
            @OrderBy=@OrderExpression,
            @StartRow=@StartRow,
            @PageSize=@PageSize,
            @GetCount=1,
            @TotalRecords=@TotalRecords output,

              @use_security = @use_security,
              @user_id = @user_id,
              @group_id = @group_id,
              @start_level = @start_level,
              @end_level = @end_level,
              @entity_name = 'content_item',
              @parent_entity_name = 'content',
              @parent_entity_id = @ContentId,
              @insert_key = @insert_key
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.7', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.7 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.7.8
-- Assemble fields for page template
-- **************************************

ALTER TABLE [dbo].[PAGE_TEMPLATE] ADD
  [ASSEMBLE_IN_LIVE] [bit] NOT NULL CONSTRAINT [DF_ASSEMBLE_IN_LIVE]  DEFAULT ((1)),
  [ASSEMBLE_IN_STAGE] [bit] NOT NULL CONSTRAINT [DF_ASSEMBLE_IN_STAGE]  DEFAULT ((1))
GO

ALTER TRIGGER [dbo].[tu_reassemble] ON [dbo].[PAGE_TEMPLATE]
FOR  UPDATE
AS
  if update(template_name) or update(template_body) or update(code_behind) or update(net_template_name) or update(net_language_id) or update(template_custom_class)
  begin
      update page set reassemble = 1 where page_template_id in (select page_template_id from inserted)
      update page_template set modified = getdate(), assemble_in_live = 1, assemble_in_stage = 1 where page_template_id in (select page_template_id from inserted)
  end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.8', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.8 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.5.7.9
-- Assemble fields for object formats and pages
-- **************************************

ALTER TABLE [dbo].[OBJECT_FORMAT] ADD
  [ASSEMBLE_IN_LIVE] [bit] NOT NULL CONSTRAINT [DF_OBJECT_FORMAT_ASSEMBLE_IN_LIVE]  DEFAULT ((1)),
  [ASSEMBLE_IN_STAGE] [bit] NOT NULL CONSTRAINT [DF_OBJECT_FORMAT_ASSEMBLE_IN_STAGE]  DEFAULT ((1))
GO

ALTER TABLE [dbo].[PAGE] ADD
  [ASSEMBLE_IN_LIVE] [bit] NOT NULL CONSTRAINT [DF_PAGE_ASSEMBLE_IN_LIVE]  DEFAULT ((1)),
  [ASSEMBLE_IN_STAGE] [bit] NOT NULL CONSTRAINT [DF_PAGE_ASSEMBLE_IN_STAGE]  DEFAULT ((1))
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.9', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.9 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.7.10
-- Triggers fix
-- **************************************

ALTER TRIGGER [dbo].[tu_site_formats_modified] ON [dbo].[SITE]
FOR UPDATE
AS

  declare @live_directory nvarchar(255), @new_live_directory nvarchar(255)
  declare @stage_directory nvarchar(255), @new_stage_directory nvarchar(255)
  declare @allow_user_sessions numeric, @new_allow_user_sessions numeric
  declare @site_id numeric, @i numeric, @count numeric
  declare @oldDataTable table (
    id numeric identity(1,1) primary key,
    site_id numeric,
    live_directory nvarchar(255),
    stage_directory nvarchar(255),
    stage_edit_field_border nvarchar(255),
    allow_user_sessions numeric
  )

  --insert old data into temp table
  insert into @oldDataTable (site_id, live_directory, stage_directory, stage_edit_field_border, allow_user_sessions)
  select site_id, live_directory, stage_directory, stage_edit_field_border, allow_user_sessions from deleted

  set @i = 1
  select @count = count(id) from @oldDataTable
  while @i < @count + 1
  begin
    --get old data
    select  @site_id = site_id ,
        @live_directory = live_directory,
        @stage_directory = stage_directory,
        @allow_user_sessions = allow_user_sessions
    from @oldDataTable where id = @i

    --get new data
    select  @new_live_directory = live_directory,
        @new_stage_directory = stage_directory,
        @new_allow_user_sessions = allow_user_sessions
    from site where site_id = @site_id

    --if at least one required was changed we update 'modified' field for all site templates and formats
    if  IsNull(@new_live_directory, '') <> IsNull(@live_directory, '')
    begin
      update page_template set assemble_in_live = 1
      where site_id = @site_id

      update page set assemble_in_live = 1
      from page p inner join page_template pt on pt.page_template_id = p.page_template_id
      where pt.site_id = @site_id

      update object_format set assemble_in_live = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      inner join page_template pt on pt.page_template_id = obj.page_template_id
      where pt.site_id = @site_id
    end

    if  IsNull(@new_stage_directory, '') <> IsNull(@stage_directory, '')
    begin
      update page_template set assemble_in_stage = 1
      where site_id = @site_id

      update page set assemble_in_stage = 1
      from page p inner join page_template pt on pt.page_template_id = p.page_template_id
      where pt.site_id = @site_id

      update object_format set assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      inner join page_template pt on pt.page_template_id = obj.page_template_id
      where pt.site_id = @site_id
    end

    if  IsNull(@new_allow_user_sessions, '') <> IsNull(@allow_user_sessions, '')
    begin
      update page set assemble_in_live = 1
      from page p inner join page_template pt on pt.page_template_id = p.page_template_id
      where pt.site_id = @site_id
    end
    set @i = @i + 1
  end
GO

ALTER  TRIGGER [dbo].[tu_page_template_modified] ON [dbo].[PAGE_TEMPLATE]
FOR UPDATE
AS
BEGIN
  declare @template_folder nvarchar(255), @new_template_folder nvarchar(255)
  declare @page_template_id numeric
  declare @i numeric, @count numeric
  declare @pt table (
    id numeric identity(1,1) primary key,
    page_template_id numeric,
    template_folder nvarchar(255)
  )

  /* Collect affected items */
  insert into @pt (page_template_id, template_folder)
  select page_template_id, template_folder from deleted d

  set @i = 1
  select @count = count(id) from @pt

  while @i < @count + 1
  begin
    select @template_folder = template_folder, @page_template_id = page_template_id from @pt where id = @i
    select @new_template_folder = template_folder from page_template where page_template_id = @page_template_id

    if IsNull(@template_folder, '') <> IsNull(@new_template_folder, '')
    begin

      update page set assemble_in_live = 1, assemble_in_stage = 1
      where page_template_id = @page_template_id

      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
    end

    /* Curtail Format Stored Versions */
    exec qp_wrapper_curtail_object_format_versions NULL, @page_template_id

    set @i = @i + 1
  end
END
GO

ALTER TRIGGER [dbo].[tu_template_formats_modified] ON [dbo].[PAGE]
FOR UPDATE
AS
BEGIN
  declare @page_folder nvarchar(255), @new_page_folder nvarchar(255)
  declare @page_trace bit, @new_page_trace bit
  declare @page_id numeric
  declare @i numeric, @count numeric
  declare @p table (
    id numeric identity(1,1) primary key,
    page_id numeric,
    page_folder nvarchar(255),
    generate_trace bit
  )

  /* Collect affected items */
  insert into @p (page_id, page_folder, generate_trace)
  select page_id, page_folder, generate_trace from deleted d

  set @i = 1
  select @count = count(id) from @p

  while @i < @count + 1
  begin
    select @page_folder = page_folder, @page_id = page_id, @page_trace = generate_trace from @p where id = @i
    select @new_page_folder = page_folder, @new_page_trace = generate_trace from page where page_id = @page_id

    if IsNull(@page_folder, '') <> IsNull(@new_page_folder, '') or @page_trace <> @new_page_trace
    begin
        update object_format set assemble_in_live = 1, assemble_in_stage = 1 where object_id in (
          select object_id from object where page_id = @page_id)
    end
    set @i = @i + 1
  end
END
GO


ALTER TRIGGER [dbo].[tu_object_format_modified] ON [dbo].[OBJECT]
FOR UPDATE
AS
if update(page_id) or update([object_name]) or update(object_type_id) or update(net_object_name) or update(enable_viewstate)
  update object_format set assemble_in_live = 1, assemble_in_stage = 1 where object_id in (select object_id from inserted)
GO


ALTER TRIGGER [dbo].[tu_container_format_modified] ON [dbo].[CONTAINER]
FOR UPDATE
AS
if not update(locked_by) begin
  update object_format set assemble_in_live = 1, assemble_in_stage = 1 where object_id in (select object_id from inserted)
end

GO


ALTER   TRIGGER [dbo].[tbu_format] ON [dbo].[OBJECT_FORMAT]
INSTEAD OF UPDATE
AS
IF UPDATE(locked) or UPDATE(locked_by)
BEGIN
  UPDATE objF
    SET objF.LOCKED = i.LOCKED,
      objF.LOCKED_BY = i.LOCKED_BY
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(modified) BEGIN
  UPDATE objF
    SET
      objF.MODIFIED = i.MODIFIED
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(last_modified_by) BEGIN
  UPDATE objF
    SET
      objF.LAST_MODIFIED_BY = i.LAST_MODIFIED_BY
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(assemble_in_live) or UPDATE(assemble_in_stage) BEGIN
  UPDATE objF
    SET
      objF.assemble_in_live = i.assemble_in_live,
      objF.assemble_in_stage = i.assemble_in_stage
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END


IF UPDATE(format_name) or UPDATE(format_body) or UPDATE(code_behind) or UPDATE(net_format_name) or UPDATE(net_language_id) or UPDATE(description)
BEGIN
  -- Create object format version
  DECLARE @object_format_id NUMERIC
  SELECT @object_format_id = object_format_id FROM deleted

  INSERT INTO object_format_version (object_format_id, object_id, format_name, description, created, modified,
  last_modified_by, format_body, net_language_id, net_format_name, code_behind, assembled )
  SELECT object_format_id, object_id, format_name, description, created, modified,
  last_modified_by, format_body, net_language_id, net_format_name, code_behind, assembled
  FROM deleted

  declare @i numeric, @count numeric
  declare @objf table (
      id numeric identity(1,1) primary key,
      object_format_id numeric
  )

  insert into @objf (object_format_id)
    select object_format_id
    from deleted d

  set @i = 1
  select @count = count(id) from @objf

  while @i < @count + 1
  begin
    select @object_format_id = object_format_id from @objf where id = @i
    EXEC qp_curtail_object_format_versions @object_format_id
    set @i = @i + 1
  end

  UPDATE
    objF
  SET
    objF.FORMAT_NAME    = i.FORMAT_NAME,
    objF.DESCRIPTION    = i.DESCRIPTION,
    objF.MODIFIED       = i.MODIFIED,
    objF.LAST_MODIFIED_BY   = i.LAST_MODIFIED_BY,
    objF.FORMAT_BODY    = i.FORMAT_BODY,
    objF.NET_LANGUAGE_ID  = i.NET_LANGUAGE_ID,
    objF.NET_FORMAT_NAME  = i.NET_FORMAT_NAME,
    objF.CODE_BEHIND    = i.CODE_BEHIND
  FROM
    inserted AS i
  INNER JOIN OBJECT_FORMAT AS objF ON i.object_format_id = objF.object_format_id
END

IF UPDATE(object_id) or UPDATE(created) or UPDATE(assembled)
BEGIN
  UPDATE
    objF
  SET
    objF.OBJECT_ID      = i.OBJECT_ID,
    objF.CREATED      = i.CREATED,
    objF.ASSEMBLED      = i.ASSEMBLED
  FROM
    inserted AS i
  INNER JOIN OBJECT_FORMAT AS objF ON i.object_format_id = objF.object_format_id
END
GO



ALTER TRIGGER [dbo].[tu_format] ON [dbo].[OBJECT_FORMAT]
FOR UPDATE
AS
if update(format_name) or update(format_body) or update(code_behind) or update(net_format_name) or update(net_language_id)
begin
  update page set reassemble = 1 where page_id in (
               (select o.page_id from object o, inserted i where o.object_id = i.object_id)
           union
               (select p.page_id from page p , inserted i , object o where p.page_template_id = o.page_template_id and o.page_id is Null and o.object_id = i.object_id
                )
  )
  update object_format set modified = getdate(), assemble_in_live = 1, assemble_in_stage = 1 where object_format_id in (select object_format_id from inserted)
end
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.7.10', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.7.10 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.8.0
-- Label
-- **************************************
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.8.0', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.8.0 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.8.1
-- Some new fields + Triggers
-- **************************************

alter table page_template add DISABLE_DATABIND bit not null constraint DF_PAGE_TEMPLATE_DISABLE_DATABIND default 0
alter table object add DISABLE_DATABIND bit not null constraint DF_OBJECT_DISABLE_DATABIND default 0
alter table page_template add using nvarchar(512) null
alter table object_format ADD ASSEMBLE_NOTIFICATION_IN_LIVE bit not null constraint DF_OBJECT_FORMAT_ASSEMBLE_NOTIFICATION_IN_LIVE default 1
alter table object_format ADD ASSEMBLE_NOTIFICATION_IN_STAGE bit not null constraint DF_OBJECT_FORMAT_ASSEMBLE_NOTIFICATION_IN_STAGE default 1
alter table object_format ADD ASSEMBLE_PREVIEW_IN_LIVE bit not null constraint DF_OBJECT_FORMAT_ASSEMBLE_PREVIEW_IN_LIVE default 1
alter table object_format ADD ASSEMBLE_PREVIEW_IN_STAGE bit not null constraint DF_OBJECT_FORMAT_ASSEMBLE_PREVIEW_IN_STAGE default 1
GO

ALTER TRIGGER [dbo].[tu_object_format_modified] ON [dbo].[OBJECT]
FOR UPDATE
AS
if update(page_id) or update([object_name]) or update(object_type_id) or update(net_object_name) or update(enable_viewstate) or update(control_custom_class) or update(disable_databind)
  update object_format set assemble_in_live = 1, assemble_in_stage = 1 where object_id in (select object_id from inserted)
    UPDATE page SET reassemble = 1 WHERE page_id IN
  (
    SELECT page_id FROM inserted
    UNION
    SELECT DISTINCT p.page_id FROM inserted AS i LEFT OUTER JOIN page AS p ON p.page_template_id = i.page_template_id
    WHERE i.page_id IS NULL
  )

GO

DROP TRIGGER [dbo].[tu_obj_reass]
GO

CREATE TRIGGER [dbo].[tiud_values_format_modified] ON [dbo].[OBJECT_VALUES]
FOR UPDATE, INSERT, DELETE
AS
begin
  update object_format set assemble_in_live = 1, assemble_in_stage = 1, modified = getdate() where object_id in (select object_id from deleted union select object_id from inserted)
end
GO

CREATE TRIGGER [dbo].[tiud_statuses_format_modified] ON [dbo].[CONTAINER_STATUSES]
FOR UPDATE, INSERT, DELETE
AS
begin
  update object_format set assemble_in_live = 1, assemble_in_stage = 1, modified = getdate() where object_id in (select object_id from deleted union select object_id from inserted)
end
GO

ALTER TRIGGER [dbo].[tu_format] ON [dbo].[OBJECT_FORMAT]
FOR UPDATE
AS
if update(format_name) or update(format_body) or update(code_behind) or update(net_format_name) or update(net_language_id)
begin
  update page set reassemble = 1 where page_id in (
               (select o.page_id from object o, inserted i where o.object_id = i.object_id)
           union
               (select p.page_id from page p , inserted i , object o where p.page_template_id = o.page_template_id and o.page_id is Null and o.object_id = i.object_id
                )
  )
  update object_format set assemble_in_live = 1, assemble_in_stage = 1, modified = getdate() where object_format_id in (select object_format_id from inserted)
end
GO


CREATE TRIGGER [dbo].[tu_assemble_format_preview_notification] ON [dbo].[OBJECT_FORMAT]
FOR UPDATE
AS
  update object_format set assemble_preview_in_live = 1, assemble_notification_in_live = 1 from object_format inner join
  inserted i on object_format.object_format_id = i.object_format_id inner join deleted d on i.object_format_id = d.object_format_id where i.assemble_in_live = 1 and d.assemble_in_live = 0

  update object_format set assemble_preview_in_stage = 1, assemble_notification_in_stage = 1 from object_format inner join
  inserted i on object_format.object_format_id = i.object_format_id inner join deleted d on i.object_format_id = d.object_format_id where i.assemble_in_stage = 1 and d.assemble_in_stage = 0
GO

ALTER   PROCEDURE [dbo].[qp_save_object]
-- input parametrs
-- If @page_id is Null -> create template object else page object
@page_template_id numeric(18,0),
@page_id numeric(18,0) = Null,
@object_overrided bit, -- //0 = false, 1 = true
@object_name nvarchar(255) = Null,
@parent_object_id numeric(18,0) = Null,
@object_type_id numeric(18,0),
@net_object_name nvarchar(255) = Null,
@description nvarchar(512) = Null,
@user_id numeric(18,0),
@global bit = 0,
@enable_viewState bit = 0,
@custom_class nvarchar(255) = null,
@disable_databind bit = 0

AS
-- Local variables
DECLARE @strSQL nvarchar(2000)
DECLARE @parent_fmt_id numeric(18,0)
DECLARE @parent_type_id numeric(18,0)
DECLARE @parent_fmt_name nvarchar(255)
DECLARE @use_default_values numeric(18,0)
DECLARE @allow_stage_edit numeric(18,0)
DECLARE @object_id numeric(18,0)
-- body function
IF @object_overrided = 0
BEGIN
  SELECT @parent_object_id = object_id FROM object WHERE page_id IS Null AND object_name= @object_name AND page_template_id = @page_template_id
  IF @parent_object_id Is NOT Null
    Set @object_overrided = 1
END
IF @object_overrided <> 0
  SELECT @object_name = o.object_name, @net_object_name = o.net_object_name,
    @parent_fmt_id = o.object_format_id, @parent_type_id = o.object_type_id,
    @parent_fmt_name = f.format_name, @use_default_values = o.use_default_values, @allow_stage_edit = o.allow_stage_edit
  FROM object AS o
  LEFT OUTER JOIN object_format AS f ON f.object_format_id = o.object_format_id
  WHERE o.object_id = @parent_object_id
IF @allow_stage_edit IS Null
      IF @object_type_id = 1 OR @object_type_id = 2 OR @object_type_id = 9
        Set @allow_stage_edit = 1
      ELSE
        Set @allow_stage_edit = 0
INSERT INTO object
  (page_template_id, page_id, object_name, net_object_name, object_type_id, parent_object_id, description, last_modified_by, allow_stage_edit, global, enable_viewState, disable_databind, control_custom_class)
VALUES
  (@page_template_id, @page_id, @object_name, @net_object_name, @object_type_id, @parent_object_id, @description, @user_id, @allow_stage_edit, @global, @enable_viewState, @disable_databind, @custom_class )
Set @object_id = CAST(SCOPE_IDENTITY() AS NUMERIC)
-- Copy object parameters for publishing container
IF @object_overrided <> 0 AND @object_type_id = 2
BEGIN
  exec qp_copy_parent_container @parent_object_id, @object_id
  IF @use_default_values <> 0
  BEGIN
    UPDATE object SET use_default_values = 1 WHERE object_id = @object_id

    INSERT INTO object_values
      (object_id, variable_name, variable_value)
    SELECT @object_id, variable_name, variable_value
    FROM object_values WHERE object_id = @parent_object_id
  END
END
IF @parent_fmt_id is NOT Null
BEGIN
  INSERT INTO object_format
    (object_id, format_name, description, format_body, last_modified_by, net_language_id, net_format_name, code_behind)
  SELECT
    @object_id, format_name, description, format_body, @user_id, net_language_id, net_format_name, code_behind
  FROM object_format
  WHERE object_id = @parent_object_id

  UPDATE object SET object_format_id =
    (SELECT object_format_id FROM object_format
    WHERE object_id = @object_id AND format_name = @parent_fmt_name)
  WHERE object_id = @object_id
END
IF @GLOBAL = 1 AND @object_type_id = 3
  UPDATE object SET global = 0 WHERE object_type_id = 3 AND page_template_id IN (
    SELECT page_template_id FROM page_template WHERE site_id = (
      SELECT site_id FROM page_template WHERE page_template_id = @page_template_id))
    AND object_id <> @object_id
SELECT @object_id AS object_id
RETURN 0
GO

ALTER TRIGGER [dbo].[tu_site_formats_modified] ON [dbo].[SITE]
FOR UPDATE
AS

  declare @live_directory nvarchar(255), @new_live_directory nvarchar(255)
  declare @stage_directory nvarchar(255), @new_stage_directory nvarchar(255)
  declare @allow_user_sessions numeric, @new_allow_user_sessions numeric
  declare @site_id numeric, @i numeric, @count numeric
  declare @oldDataTable table (
    id numeric identity(1,1) primary key,
    site_id numeric,
    live_directory nvarchar(255),
    stage_directory nvarchar(255),
    stage_edit_field_border nvarchar(255),
    allow_user_sessions numeric
  )

  --insert old data into temp table
  insert into @oldDataTable (site_id, live_directory, stage_directory, stage_edit_field_border, allow_user_sessions)
  select site_id, live_directory, stage_directory, stage_edit_field_border, allow_user_sessions from deleted

  set @i = 1
  select @count = count(id) from @oldDataTable
  while @i < @count + 1
  begin
    --get old data
    select  @site_id = site_id ,
        @live_directory = live_directory,
        @stage_directory = stage_directory,
        @allow_user_sessions = allow_user_sessions
    from @oldDataTable where id = @i

    --get new data
    select  @new_live_directory = live_directory,
        @new_stage_directory = stage_directory,
        @new_allow_user_sessions = allow_user_sessions
    from site where site_id = @site_id

    --if at least one required was changed we update 'modified' field for all site templates and formats
    if  IsNull(@new_live_directory, '') <> IsNull(@live_directory, '')
    begin
      update page_template set assemble_in_live = 1
      where site_id = @site_id

      update page set assemble_in_live = 1
      from page p inner join page_template pt on pt.page_template_id = p.page_template_id
      where pt.site_id = @site_id

      update object_format set assemble_in_live = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      inner join page_template pt on pt.page_template_id = obj.page_template_id
      where pt.site_id = @site_id
    end

    if  IsNull(@new_stage_directory, '') <> IsNull(@stage_directory, '')
    begin
      update page_template set assemble_in_stage = 1
      where site_id = @site_id

      update page set assemble_in_stage = 1
      from page p inner join page_template pt on pt.page_template_id = p.page_template_id
      where pt.site_id = @site_id

      update object_format set assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      inner join page_template pt on pt.page_template_id = obj.page_template_id
      where pt.site_id = @site_id
    end

    if  IsNull(@new_allow_user_sessions, '') <> IsNull(@allow_user_sessions, '')
    begin
      update page set assemble_in_live = 1, assemble_in_stage = 1
      from page p inner join page_template pt on pt.page_template_id = p.page_template_id
      where pt.site_id = @site_id
    end
    set @i = @i + 1
  end
GO

ALTER  TRIGGER [dbo].[tu_page_template_modified] ON [dbo].[PAGE_TEMPLATE]
FOR UPDATE
AS
BEGIN
  declare @template_folder nvarchar(255), @new_template_folder nvarchar(255)
  declare @page_template_id numeric
  declare @custom_class_for_pages nvarchar(255), @new_custom_class_for_pages nvarchar(255)
  declare @custom_class_for_generics nvarchar(255), @new_custom_class_for_generics nvarchar(255)
  declare @custom_class_for_containers nvarchar(255), @new_custom_class_for_containers nvarchar(255)
  declare @custom_class_for_forms nvarchar(255), @new_custom_class_for_forms nvarchar(255)
  declare @using nvarchar(512), @new_using nvarchar(512)
  declare @i numeric, @count numeric
  declare @pt table (
    id numeric identity(1,1) primary key,
    page_template_id numeric,
    template_folder nvarchar(255),
    custom_class_for_pages nvarchar(255),
    custom_class_for_generics nvarchar(255),
    custom_class_for_containers nvarchar(255),
    custom_class_for_forms nvarchar(255),
    using nvarchar(512)

  )

  /* Collect affected items */
  insert into @pt (page_template_id, template_folder, custom_class_for_pages, custom_class_for_generics, custom_class_for_containers, custom_class_for_forms, using)
  select page_template_id, template_folder, custom_class_for_pages, custom_class_for_generics, custom_class_for_containers, custom_class_for_forms, using from deleted d

  set @i = 1
  select @count = count(id) from @pt

  while @i < @count + 1
  begin
    select @custom_class_for_pages = custom_class_for_pages, @custom_class_for_generics = custom_class_for_generics, @custom_class_for_containers = custom_class_for_containers, @custom_class_for_forms = custom_class_for_forms, @using = using, @template_folder = template_folder, @page_template_id = page_template_id from @pt where id = @i
    select @new_custom_class_for_pages = custom_class_for_pages, @new_custom_class_for_generics = custom_class_for_generics, @new_custom_class_for_containers = custom_class_for_containers, @new_custom_class_for_forms = custom_class_for_forms, @new_using = using, @new_template_folder = template_folder from page_template where page_template_id = @page_template_id

    if IsNull(@template_folder, '') <> IsNull(@new_template_folder, '')
    or IsNull(@custom_class_for_pages, '') <> IsNull(@new_custom_class_for_pages, '')
    begin
      update page set assemble_in_live = 1, assemble_in_stage = 1
      where page_template_id = @page_template_id
    end

    if IsNull(@template_folder, '') <> IsNull(@new_template_folder, '')
    or IsNull(@using, '') <> IsNull(@new_using, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
    end

    if IsNull(@custom_class_for_generics, '') <> IsNull(@new_custom_class_for_generics, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
      and obj.object_type_id <> 2 and obj.object_type_id <> 9
    end

    if IsNull(@custom_class_for_containers, '') <> IsNull(@new_custom_class_for_containers, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
      and obj.object_type_id = 2
    end

    if IsNull(@custom_class_for_forms, '') <> IsNull(@new_custom_class_for_forms, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
      and obj.object_type_id = 9
    end

    /* Curtail Format Stored Versions */
    exec qp_wrapper_curtail_object_format_versions NULL, @page_template_id

    set @i = @i + 1
  end
END
GO

ALTER TRIGGER [dbo].[tu_reassemble] ON [dbo].[PAGE_TEMPLATE]
FOR  UPDATE
AS
  if update(template_name) or update(template_body) or update(code_behind) or update(net_template_name) or update(net_language_id) or update(template_custom_class)
    or update(enable_viewstate) or update(disable_databind) or update(using)
  begin
      update page set reassemble = 1 where page_template_id in (select page_template_id from inserted)
      update page_template set modified = getdate(), assemble_in_live = 1, assemble_in_stage = 1 where page_template_id in (select page_template_id from inserted)
  end
GO

ALTER TRIGGER [dbo].[tu_template_formats_modified] ON [dbo].[PAGE]
FOR UPDATE
AS
BEGIN
  declare @page_folder nvarchar(255), @new_page_folder nvarchar(255)
  declare @page_filename nvarchar(255), @new_page_filename nvarchar(255)
  declare @page_trace bit, @new_page_trace bit
  declare @page_custom_class nvarchar(255), @new_page_custom_class nvarchar(255)
  declare @enable_viewstate bit, @new_enable_viewstate bit
  declare @page_id numeric
  declare @i numeric, @count numeric
  declare @p table (
    id numeric identity(1,1) primary key,
    page_id numeric,
    page_folder nvarchar(255),
    page_filename nvarchar(255),
    page_custom_class nvarchar(255),
    enable_viewstate bit,
    generate_trace bit
  )

  /* Collect affected items */
  insert into @p (page_id, page_folder, generate_trace, page_filename, page_custom_class, enable_viewstate)
  select page_id, page_folder, generate_trace, page_filename, page_custom_class, enable_viewstate from deleted d

  set @i = 1
  select @count = count(id) from @p

  while @i < @count + 1
  begin
    select @page_folder = page_folder, @page_id = page_id, @page_trace = generate_trace, @page_filename = page_filename, @enable_viewstate = enable_viewstate, @page_custom_class = page_custom_class from @p where id = @i
    select @new_page_folder = page_folder, @new_page_trace = generate_trace, @new_page_filename = page_filename, @new_enable_viewstate = enable_viewstate, @new_page_custom_class = page_custom_class from page where page_id = @page_id

    if IsNull(@page_folder, '') <> IsNull(@new_page_folder, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1 where object_id in (
        select object_id from object where page_id = @page_id)
    end

    if @page_trace <> @new_page_trace
    or @enable_viewstate <> @new_enable_viewstate
    or IsNull(@page_filename, '') <> IsNull(@new_page_filename, '')
    or IsNull(@page_custom_class, '') <> IsNull(@new_page_custom_class, '')
    or IsNull(@page_folder, '') <> IsNull(@new_page_folder, '')
    begin
      update page set modified = getdate(), reassemble = 1, assemble_in_live = 1, assemble_in_stage = 1 where page_id in (select page_id from inserted)
    end


    set @i = @i + 1
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.8.1', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.8.1 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.8.2
-- Some new fields + Triggers
-- **************************************

ALTER TRIGGER [dbo].[tu_reassemble] ON [dbo].[PAGE_TEMPLATE]
FOR  UPDATE
AS
  if update(template_name) or update(template_body) or update(code_behind) or update(net_template_name) or update(net_language_id) or update(template_custom_class)
    or update(enable_viewstate) or update(disable_databind) or update(using)
  begin
      update page set reassemble = 1 where page_template_id in (select page_template_id from inserted)
      update page_template set modified = getdate(), assemble_in_live = 1, assemble_in_stage = 1 where page_template_id in (select page_template_id from inserted)
  end

  if update(preview_template_body) or update(preview_code_behind)
  begin
    update object_format
    set assemble_preview_in_live = 1, assemble_preview_in_stage = 1
    from object_format
    inner join object obj on object_format.object_id = obj.object_id
    inner join inserted i on obj.page_template_id = i.page_template_id

  end
GO

ALTER TABLE [dbo].[SITE] ADD
  [ASSEMBLE_FORMATS_IN_LIVE] [bit] NOT NULL CONSTRAINT [DF_SITE_ASSEMBLE_FORMATS_IN_LIVE]  DEFAULT ((1))
GO


DROP TRIGGER [dbo].[tu_assemble_format_preview_notification]
GO


ALTER   TRIGGER [dbo].[tbu_format] ON [dbo].[OBJECT_FORMAT]
INSTEAD OF UPDATE
AS
IF UPDATE(locked) or UPDATE(locked_by)
BEGIN
  UPDATE objF
    SET objF.LOCKED = i.LOCKED,
      objF.LOCKED_BY = i.LOCKED_BY
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(modified) BEGIN
  UPDATE objF
    SET
      objF.MODIFIED = i.MODIFIED
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(last_modified_by) BEGIN
  UPDATE objF
    SET
      objF.LAST_MODIFIED_BY = i.LAST_MODIFIED_BY
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(assemble_in_live) or UPDATE(assemble_in_stage) BEGIN
  UPDATE objF
    SET
      objF.assemble_in_live = i.assemble_in_live,
      objF.assemble_in_stage = i.assemble_in_stage
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id

  update objF set assemble_preview_in_live = 1, assemble_notification_in_live = 1 from object_format as objF inner join
  inserted i on objF.object_format_id = i.object_format_id where i.assemble_in_live = 1

  update objF set assemble_preview_in_stage = 1, assemble_notification_in_stage = 1 from object_format as objF inner join
  inserted i on objF.object_format_id = i.object_format_id where i.assemble_in_stage = 1


END

IF UPDATE(assemble_preview_in_live) or UPDATE(assemble_preview_in_stage) or UPDATE(assemble_notification_in_stage) or UPDATE(assemble_notification_in_live) BEGIN
  UPDATE objF
    SET
      objF.assemble_preview_in_live = i.assemble_preview_in_live,
      objF.assemble_preview_in_stage = i.assemble_preview_in_stage,
      objF.assemble_notification_in_live = i.assemble_notification_in_live,
      objF.assemble_notification_in_stage = i.assemble_notification_in_stage
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END


IF UPDATE(format_name) or UPDATE(format_body) or UPDATE(code_behind) or UPDATE(net_format_name) or UPDATE(net_language_id) or UPDATE(description)
BEGIN
  -- Create object format version
  DECLARE @object_format_id NUMERIC
  SELECT @object_format_id = object_format_id FROM deleted

  INSERT INTO object_format_version (object_format_id, object_id, format_name, description, created, modified,
  last_modified_by, format_body, net_language_id, net_format_name, code_behind, assembled )
  SELECT object_format_id, object_id, format_name, description, created, modified,
  last_modified_by, format_body, net_language_id, net_format_name, code_behind, assembled
  FROM deleted

  declare @i numeric, @count numeric
  declare @objf table (
      id numeric identity(1,1) primary key,
      object_format_id numeric
  )

  insert into @objf (object_format_id)
    select object_format_id
    from deleted d

  set @i = 1
  select @count = count(id) from @objf

  while @i < @count + 1
  begin
    select @object_format_id = object_format_id from @objf where id = @i
    EXEC qp_curtail_object_format_versions @object_format_id
    set @i = @i + 1
  end

  UPDATE
    objF
  SET
    objF.FORMAT_NAME    = i.FORMAT_NAME,
    objF.DESCRIPTION    = i.DESCRIPTION,
    objF.MODIFIED       = i.MODIFIED,
    objF.LAST_MODIFIED_BY   = i.LAST_MODIFIED_BY,
    objF.FORMAT_BODY    = i.FORMAT_BODY,
    objF.NET_LANGUAGE_ID  = i.NET_LANGUAGE_ID,
    objF.NET_FORMAT_NAME  = i.NET_FORMAT_NAME,
    objF.CODE_BEHIND    = i.CODE_BEHIND
  FROM
    inserted AS i
  INNER JOIN OBJECT_FORMAT AS objF ON i.object_format_id = objF.object_format_id
END

IF UPDATE(object_id) or UPDATE(created) or UPDATE(assembled)
BEGIN
  UPDATE
    objF
  SET
    objF.OBJECT_ID      = i.OBJECT_ID,
    objF.CREATED      = i.CREATED,
    objF.ASSEMBLED      = i.ASSEMBLED
  FROM
    inserted AS i
  INNER JOIN OBJECT_FORMAT AS objF ON i.object_format_id = objF.object_format_id
END
GO

update page set assemble_in_live = 1, assemble_in_stage = 1
update object_format set assemble_in_live = 1, assemble_in_stage = 1
update page_template set assemble_in_live = 1, assemble_in_stage = 1
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.8.2', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.8.2 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.9.0
-- Label
-- **************************************
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.9.0', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.9.0 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.9.1
-- Small fix
-- **************************************
update toolbar_buttons set image_enabled = 'images/toolbar/search_enabled.gif' where image_enabled like '%search.gif%'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.9.1', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.9.1 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.5.9.2
-- Home Optimizations for MTS
-- **************************************

SET QUOTED_IDENTIFIER ON
GO

declare @db_name nvarchar(255)
set @db_name = db_name()
exec sp_dboption @db_name , 'concat null yields null', 'true'
exec sp_dboption @db_name , 'ansi nulls', 'true'
exec sp_dboption @db_name , 'ansi warnings', 'true'
exec sp_dboption @db_name , 'ansi padding', 'true'
exec sp_dboption @db_name , 'numeric roundabort', 'false'
exec sp_dboption @db_name , 'arithabort', 'true'

GO

create view [dbo].[site_content_item_modified] with schemabinding as
select ci.content_item_id, c.site_id, ci.modified from dbo.content_item ci inner join dbo.content c on ci.content_id = c.content_id
GO

CREATE UNIQUE CLUSTERED INDEX [ix_site_id_modified] ON [dbo].[site_content_item_modified]
(
  [site_id] ASC,
  [modified] ASC,
  [content_item_id] ASC
)
GO

ALTER PROCEDURE [dbo].[qp_lastArticles]
@user_id numeric
AS
DECLARE @sites table (rownum int IDENTITY (1, 1) Primary key NOT NULL, site_id INT)
DECLARE @temp table (rownum int IDENTITY (1, 1) Primary key NOT NULL, content_item_id NUMERIC, content_id NUMERIC, content_name NVARCHAR (200), modified DATETIME, site_id INT, site_name NVARCHAR (100), title NVARCHAR (200), archive BIT )
DECLARE @site NUMERIC, @content_id NUMERIC, @content_item_id NUMERIC, @titleName NVARCHAR (200), @title NVARCHAR (200), @sql nvarchar(2000)
DECLARE @RowCnt int
DECLARE @MaxRows int
select @RowCnt = 1

insert into @sites(site_id) select * from qp_sites_list_ids(@user_id, 1)

select @MaxRows=count(*) from @sites
while @RowCnt <= @MaxRows
begin
  select @site = site_id
  from @sites
  where rownum = @RowCnt

  INSERT INTO @temp
  SELECT ci.content_item_id, c.content_id, c.content_name, ci.modified, c.site_id, site_name, dbo.qp_get_article_title_func(ci.content_item_id, c.content_id) title, cast(archive as bit) archive FROM content_item ci
  INNER JOIN content c ON ci.content_id = c.content_id
  INNER JOIN site ON site.site_id = c.site_id
    where ci.content_item_id in (select top 5 content_item_id from site_content_item_modified with(noexpand) where site_id = @site order by modified desc)

    Select @RowCnt = @RowCnt + 1
end
SELECT * from @temp
GO

CREATE NONCLUSTERED INDEX [ix_user_id] ON [dbo].[CONTENT_ITEM_STATUS_HISTORY] ([USER_ID] ASC)
GO

ALTER PROCEDURE [dbo].[qp_create_content_item]
@content_id numeric(18,0),
@status_type_id numeric(18,0),
@last_modified_by numeric(18,0)= 1,
@visible numeric(18,0) = 1,
@not_for_replication bit = 1
AS
  SET NOCOUNT ON
  INSERT INTO content_item (content_id, status_type_id, last_modified_by, visible, not_for_replication)
  VALUES (@content_id, @status_type_id, @last_modified_by, @visible, @not_for_replication)
  select scope_identity() as content_item_id


GO

ALTER PROCEDURE [dbo].[qp_insert_content_item]
  @content_id NUMERIC,
  @last_modified_by NUMERIC,
  @status_type_id NUMERIC,
  @content_item_id NUMERIC OUTPUT,
  @not_for_replication bit = 1
AS BEGIN
  INSERT INTO content_item (content_id, last_modified_by, status_type_id, visible, not_for_replication)
  VALUES (@content_id, @last_modified_by, @status_type_id, 1, @not_for_replication)
  SELECT @content_item_id = SCOPE_IDENTITY()
END
GO

SET QUOTED_IDENTIFIER OFF
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.9.2', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.9.2 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.5.9.3
-- Missed trigger
-- **************************************

CREATE TRIGGER [dbo].[tbd_delete_content_to_content] ON [dbo].[content_to_content] INSTEAD OF DELETE
AS
BEGIN

delete content_attribute from content_attribute ca
inner join deleted d on d.link_id = ca.link_id

delete content_to_content from content_to_content cc inner join deleted d on cc.link_id = d.link_id

END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.9.3', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.9.3 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.5.10.0
-- Label
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.10.0', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.10.0 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.5.10.1
-- Fix Null Net_Language_Id
-- **************************************

update object_format set net_language_id = 1 from object_format objf
inner join object obj on objf.object_id = obj.object_id
inner join page_template pt on pt.page_template_id = obj.page_template_id
inner join site s on pt.site_id = s.site_id
where objf.net_language_id is null and s.script_language = '.net final'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.5.10.1', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.5.10.1 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.0.0
-- Label
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.0.0', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.0.0 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.1.0
-- Label
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.1.0', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.1.0 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.1.1
-- Publishing Form Relation fix
-- **************************************

update content_data set data = NULL, blob_data = NULL where data = 'NULL' and attribute_id in (select attribute_id from content_attribute where attribute_type_id = 11 and link_id is null)
update content_data set data = NULL, blob_data = NULL where data = '-1' and attribute_id in (select attribute_id from content_attribute where attribute_type_id = 11 and link_id is null)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.1.1', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.1.1 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.6.1.2
-- Tags
-- **************************************

ALTER TABLE OBJECT_FORMAT
ADD TAG_NAME nvarchar(255) NULL

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.1.2', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.1.2 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.0
-- Label
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.0', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.0 completed'
GO
-----------------------------------------------------------------------------------------------
-- **************************************
-- Gaas Alex
-- version 7.6.2.1
-- Multilingual
-- **************************************

CREATE TABLE [dbo].[MULTILINGUAL] (
  [MLANGUAGE_ID]      [numeric](18, 0) IDENTITY(1, 1) NOT NULL PRIMARY KEY CLUSTERED,
  [SITE_ID]       [numeric](18, 0) NOT NULL CONSTRAINT [FK_ML_SITE_ID] FOREIGN KEY ([SITE_ID]) REFERENCES [dbo].[SITE] ([SITE_ID]),
  [MLANGUAGE_NAME]    [nvarchar](255)  NOT NULL,
  [POSTFIX]       [nvarchar](50)   NOT NULL,
  [IS_MAIN]       [bit]      NOT NULL,
  [CREATED]       [datetime]     NOT NULL CONSTRAINT [DF__ML_CREATED] DEFAULT (getdate()),
  [MODIFIED]        [datetime]     NOT NULL CONSTRAINT [DF__ML_MODIFIED] DEFAULT (getdate()),
  [LAST_MODIFIED_BY]    [numeric](18, 0) NOT NULL
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] ADD
  [MULTILINGUAL]  [bit] NOT NULL CONSTRAINT [DF_CONTENT_ATTRIBUTE_MULTILINGUAL] DEFAULT (0),
  [PARENT_CONTENT_ATTRIBUTE_ID] [numeric](18, 0) NULL,
  [MLANGUAGE_ID]  [numeric](18, 0) NULL CONSTRAINT [FK_CONTENT_ATTRIBUTE_MLANGUAGE_ID] FOREIGN KEY ([MLANGUAGE_ID]) REFERENCES [dbo].[MULTILINGUAL]([MLANGUAGE_ID])
GO

SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO

CREATE FUNCTION [dbo].[qp_construct_lfield_name_friendly]
(
  @parent_content_attribute_friendly_name nvarchar(255),
  @mlanguage_postfix nvarchar(5)
)
RETURNS nvarchar(255)
AS
BEGIN
  declare @result nvarchar(255)

  if @parent_content_attribute_friendly_name is not null
    if @parent_content_attribute_friendly_name <> ''
      set @result = @parent_content_attribute_friendly_name + '_' + @mlanguage_postfix
    else
      set @result = ''
  else
    set @result = null

  return @result
END
GO

CREATE PROCEDURE [dbo].[qp_create_fields_for_multilingual]
  @parent_content_attribute_id_param numeric (18, 0)
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  -- Gets count all languages whichs is not MAIN
  declare @multilingual_count int
  select @multilingual_count = count(mlanguage_id) from multilingual
  set @multilingual_count = @multilingual_count - 1
  declare @content_id int
  if @multilingual_count <> 0
  begin

    set @content_id = (select top 1 content_id from content_attribute
      where attribute_id = @parent_content_attribute_id_param group by content_id)

    declare @mlanguage_id numeric, @mlanguage_postfix nvarchar(5)

    declare @multilingual_list table(
      mlanguage_item_id int identity(1, 1) primary key,
      mlanguage_id numeric,
      postfix nvarchar(5)
    );
    insert into @multilingual_list
    select mlanguage_id, postfix from multilingual where is_main = 0

    declare @j int
    set @j = 1
    while @j <= @multilingual_count
    begin
      select * into #temp_insert_content_attribute from content_attribute where attribute_id = @parent_content_attribute_id_param

      select @mlanguage_id = mlanguage_id, @mlanguage_postfix = postfix from @multilingual_list where mlanguage_item_id = @j

      update #temp_insert_content_attribute
      set parent_content_attribute_id = @parent_content_attribute_id_param,
        attribute_name = [dbo].[qp_construct_lfield_name](attribute_name, @mlanguage_postfix),
        friendly_name = [dbo].[qp_construct_lfield_name_friendly](friendly_name, @mlanguage_postfix),
        mlanguage_id = @mlanguage_id

      insert into content_attribute
        ([CONTENT_ID]
           ,[ATTRIBUTE_NAME]
           ,[FORMAT_MASK]
           ,[INPUT_MASK]
           ,[ATTRIBUTE_SIZE]
           ,[DEFAULT_VALUE]
           ,[ATTRIBUTE_TYPE_ID]
           ,[RELATED_ATTRIBUTE_ID]
           ,[INDEX_FLAG]
           ,[DESCRIPTION]
           ,[MODIFIED]
           ,[CREATED]
           ,[LAST_MODIFIED_BY]
           ,[ATTRIBUTE_ORDER]
           ,[REQUIRED]
           ,[PERMANENT_FLAG]
           ,[PRIMARY_FLAG]
           ,[RELATION_CONDITION]
           ,[display_as_radio_button]
           ,[view_in_list]
           ,[READONLY_FLAG]
           ,[allow_stage_edit]
           ,[ATTRIBUTE_CONFIGURATION]
           ,[RELATED_IMAGE_ATTRIBUTE_ID]
           ,[persistent_attr_id]
           ,[join_attr_id]
           ,[link_id]
           ,[DEFAULT_BLOB_VALUE]
           ,[AUTO_LOAD]
           ,[FRIENDLY_NAME]
           ,[use_site_library]
           ,[use_archive_articles]
           ,[AUTO_EXPAND]
           ,[relation_page_size]
           ,[doctype]
           ,[full_page]
           ,[MULTILINGUAL]
           ,[PARENT_CONTENT_ATTRIBUTE_ID]
           ,[MLANGUAGE_ID])
      select
        t1.CONTENT_ID
         ,[ATTRIBUTE_NAME]
         ,[FORMAT_MASK]
         ,[INPUT_MASK]
         ,[ATTRIBUTE_SIZE]
         ,NULL--[DEFAULT_VALUE]
         ,[ATTRIBUTE_TYPE_ID]
         ,NULL--[RELATED_ATTRIBUTE_ID]
         ,[INDEX_FLAG]
         ,t1.DESCRIPTION
         ,GETDATE()--[MODIFIED]
         ,GETDATE()--[CREATED]
         ,t1.LAST_MODIFIED_BY
         ,[ATTRIBUTE_ORDER]
         ,0--[REQUIRED]
         ,[PERMANENT_FLAG]
         ,0--[PRIMARY_FLAG]
         ,NULL--[RELATION_CONDITION]
         ,0--[display_as_radio_button]
         ,[view_in_list]
         ,[READONLY_FLAG]
         ,[allow_stage_edit]
         ,[ATTRIBUTE_CONFIGURATION]
         ,NULL--[RELATED_IMAGE_ATTRIBUTE_ID]
         ,NULL--[persistent_attr_id]
         ,NULL--[join_attr_id]
         ,NULL--[link_id]
         ,NULL--[DEFAULT_BLOB_VALUE]
         ,[AUTO_LOAD]
         ,[FRIENDLY_NAME]
         ,[use_site_library]
         ,0--[use_archive_articles]
         ,[AUTO_EXPAND]
         ,NULL--[relation_page_size]
         ,[doctype]
         ,[full_page]
         ,[MULTILINGUAL]
         ,[PARENT_CONTENT_ATTRIBUTE_ID]
         ,[MLANGUAGE_ID]
      from #temp_insert_content_attribute t1 inner join content t2
        on t1.content_id = t2.content_id
      where t2.virtual_type = 0


      insert into content_attribute
      ([CONTENT_ID]
         ,[ATTRIBUTE_NAME]
         ,[FORMAT_MASK]
         ,[INPUT_MASK]
         ,[ATTRIBUTE_SIZE]
         ,[DEFAULT_VALUE]
         ,[ATTRIBUTE_TYPE_ID]
         ,[RELATED_ATTRIBUTE_ID]
         ,[INDEX_FLAG]
         ,[DESCRIPTION]
         ,[MODIFIED]
         ,[CREATED]
         ,[LAST_MODIFIED_BY]
         ,[ATTRIBUTE_ORDER]
         ,[REQUIRED]
         ,[PERMANENT_FLAG]
         ,[PRIMARY_FLAG]
         ,[RELATION_CONDITION]
         ,[display_as_radio_button]
         ,[view_in_list]
         ,[READONLY_FLAG]
         ,[allow_stage_edit]
         ,[ATTRIBUTE_CONFIGURATION]
         ,[RELATED_IMAGE_ATTRIBUTE_ID]
         ,[persistent_attr_id]
         ,[join_attr_id]
         ,[link_id]
         ,[DEFAULT_BLOB_VALUE]
         ,[AUTO_LOAD]
         ,[FRIENDLY_NAME]
         ,[use_site_library]
         ,[use_archive_articles]
         ,[AUTO_EXPAND]
         ,[relation_page_size]
         ,[doctype]
         ,[full_page]
         ,[MULTILINGUAL]
         ,[PARENT_CONTENT_ATTRIBUTE_ID]
         ,[MLANGUAGE_ID])
      select  ca2.CONTENT_ID
         ,[ATTRIBUTE_NAME]
         ,[FORMAT_MASK]
         ,[INPUT_MASK]
         ,[ATTRIBUTE_SIZE]
         ,NULL--[DEFAULT_VALUE]
         ,[ATTRIBUTE_TYPE_ID]
         ,NULL--[RELATED_ATTRIBUTE_ID]
         ,[INDEX_FLAG]
         ,[DESCRIPTION]
         ,GETDATE()--[MODIFIED]
         ,GETDATE()--[CREATED]
         ,[LAST_MODIFIED_BY]
         ,[ATTRIBUTE_ORDER]
         ,0--[REQUIRED]
         ,[PERMANENT_FLAG]
         ,0--[PRIMARY_FLAG]
         ,NULL--[RELATION_CONDITION]
         ,0--[display_as_radio_button]
         ,0--[view_in_list]
         ,[READONLY_FLAG]
         ,0--[allow_stage_edit]
         ,[ATTRIBUTE_CONFIGURATION]
         ,NULL--[RELATED_IMAGE_ATTRIBUTE_ID]
         ,ca1.ATTRIBUTE_ID--[persistent_attr_id]
         ,[join_attr_id]
         ,[link_id]
         ,NULL--[DEFAULT_BLOB_VALUE]
         ,[AUTO_LOAD]
         ,NULL--[FRIENDLY_NAME]
         ,[use_site_library]
         ,0--[use_archive_articles]
         ,[AUTO_EXPAND]
         ,NULL--[relation_page_size]
         ,[doctype]
         ,[full_page]
         ,[MULTILINGUAL]
         ,NULL--[PARENT_CONTENT_ATTRIBUTE_ID]
         ,[MLANGUAGE_ID]
      from #temp_insert_content_attribute ca1 cross join (select v_content.CONTENT_ID from Content base_content inner join Content v_content
        on base_content.content_id = v_content.virtual_join_primary_content_id
        where base_content.content_id = @content_id) ca2
      drop table #temp_insert_content_attribute
      set @j = @j + 1
    end
  end
END
GO

CREATE FUNCTION [dbo].[qp_construct_lfield_name ]
(
  @parent_content_attribute_name nvarchar(255),
  @mlanguage_postfix nvarchar(5)
)
RETURNS nvarchar(255)
AS
BEGIN
  declare @result nvarchar(255)

  set @result = @parent_content_attribute_name + '_' + @mlanguage_postfix

  return @result
END
GO

CREATE FUNCTION [dbo].[qp_construct_lfield_name_with_id]
(
  @parent_content_attribute_name nvarchar(255),
  @mlanguage_id numeric
)
RETURNS nvarchar(255)
AS
BEGIN
  declare @result nvarchar(255)
  declare @mlanguage_postfix nvarchar(5)

  select @mlanguage_postfix = postfix from multilingual where mlanguage_id = @mlanguage_id

  set @result = [dbo].[qp_construct_lfield_name](@parent_content_attribute_name, @mlanguage_postfix)

  return @result
END
GO

CREATE FUNCTION [dbo].[qp_construct_lfield_name_with_id_friendly]
(
  @parent_content_attribute_name_friendly nvarchar(255),
  @mlanguage_id numeric
)
RETURNS nvarchar(255)
AS
BEGIN
  declare @result nvarchar(255)
  declare @mlanguage_postfix nvarchar(5)

  select @mlanguage_postfix = postfix from multilingual where mlanguage_id = @mlanguage_id

  set @result = [dbo].[qp_construct_lfield_name_friendly](@parent_content_attribute_name_friendly, @mlanguage_postfix)

  return @result
END
GO


CREATE PROCEDURE [dbo].[qp_delete_fields_for_multilingual]
  @parent_content_attribute_id_param numeric (18, 0)
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;
/*
  declare @multilingual_count int
  select @multilingual_count = count(mlanguage_id) from multilingual

  if @multilingual_count <> 0
  begin

    declare @multilingual_list table(
      mlanguage_item_id int identity(1, 1) primary key,
      mlanguage_id numeric,
      postfix nvarchar(5)
    );
    insert into @multilingual_list
    select mlanguage_id, postfix from multilingual

    declare @j int
    set @j = 1
    while @j <= @multilingual_count
    begin
*/
      delete from content_attribute
      where parent_content_attribute_id = @parent_content_attribute_id_param
/*
      set @j = @j + 1
    end
  end
*/
END
GO

CREATE FUNCTION [dbo].[qp_compare_strings]
(
  @FIRST_STRING VARCHAR(255),
  @SECOND_STRING VARCHAR(255)
)
RETURNS BIT
AS
BEGIN
  DECLARE @STRINGS_IS_IDENTICAL AS BIT
  SET @STRINGS_IS_IDENTICAL = 1

  IF DATALENGTH(@FIRST_STRING) <> DATALENGTH(@SECOND_STRING) BEGIN
  SET @STRINGS_IS_IDENTICAL = 0
  END

  DECLARE @I AS INT
  SET @I = 1
  WHILE @STRINGS_IS_IDENTICAL = 1 AND @I <= DATALENGTH(@FIRST_STRING)
  BEGIN
    IF UNICODE(SUBSTRING(@FIRST_STRING, @I, 1)) <> UNICODE(SUBSTRING(@SECOND_STRING, @I, 1))
    BEGIN
      SET @STRINGS_IS_IDENTICAL = 0
    END
    SET @I = @I + 1
  END
  RETURN @STRINGS_IS_IDENTICAL
END
GO

ALTER TRIGGER [dbo].[td_reorder_fields] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN

  --declare @test bit set @test = 0
  declare @attribute_id numeric, @content_id numeric
  declare @i numeric, @j numeric
  declare @content_count numeric, @attribute_count numeric
  declare @max numeric

  declare @c table (
    id numeric identity(1,1) primary key,
    content_id numeric
  )

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric
  )

  /* Collect affected items */
  insert into @c(content_id)
  select distinct content_id from deleted where parent_content_attribute_id is null

  select @content_count = count(id) from @c
  set @i = 1

  while @i < @content_count + 1
  begin
    select @content_id = content_id from @c where id = @i

    delete from @ca

    insert into @ca (attribute_id)
    select attribute_id from content_attribute where content_id = @content_id and parent_content_attribute_id is null order by attribute_order asc

    select @attribute_count = count(id) from @ca
    set @j = 1

    while @j < @attribute_count + 1
    begin
      select @attribute_id = attribute_id from @ca where id = @j

      update content_attribute set attribute_order = @j where attribute_id = @attribute_id

      set @j = @j + 1
    end

    set @i = @i + 1
  end
END
GO

CREATE TRIGGER [dbo].[td_remove_field_ml] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @attribute_id numeric, @parent_content_attribute_id numeric, @multilingual bit

  declare @base_table_name nvarchar(30), @table_name nvarchar(30)

  declare @i numeric, @count numeric

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric,
    parent_content_attribute_id numeric,
    multilingual bit
  )

  /* Collect affected items */
  insert into @ca (attribute_id, parent_content_attribute_id, multilingual)
  select d.attribute_id, d.parent_content_attribute_id, d.multilingual
  from deleted d

  set @i = 1
  select @count = count(id) from @ca

  while @i < @count + 1
  begin
    select @attribute_id = attribute_id, @parent_content_attribute_id = parent_content_attribute_id, @multilingual = multilingual
      from @ca where id = @i

      /*
        Check and drop from CONTENT_<N> table fields, that non-multilingual
        or related to specific language only
      */
      if  (@multilingual = 1 and @parent_content_attribute_id is null)
      begin
        /* Drop from CONTENT_<N> all language related fields */
        delete from content_attribute
        where parent_content_attribute_id = @attribute_id
      end
    set @i = @i + 1
  end

END
GO

CREATE TRIGGER [dbo].[ti_insert_field_ml] ON [dbo].[CONTENT_ATTRIBUTE] FOR INSERT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @attribute_id numeric (18, 0), @multilingual bit, @parent_content_attribute_id numeric (18, 0)
  declare @i int, @count int

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric,
    parent_content_attribute_id numeric,
    multilingual bit
  )
  insert into @ca
  select attribute_id, parent_content_attribute_id, multilingual from inserted

  set @i = 1
  select @count = count(id) from @ca

  while @i < @count + 1
  begin
    select @attribute_id = attribute_id, @parent_content_attribute_id = parent_content_attribute_id, @multilingual = multilingual
    from @ca
    where id = @i

    if  @multilingual = 1 and @parent_content_attribute_id is null
    begin
      exec qp_create_fields_for_multilingual @attribute_id

      -- Set mlanguage's identifier for ml-field
      update content_attribute
      set mlanguage_id = (select mlanguage_id from multilingual where is_main = 1)
      where attribute_id = @attribute_id
    end
    set @i = @i + 1
  end

END
GO

ALTER  TRIGGER [dbo].[tu_update_field] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
if not update(attribute_order) and
    (
      update(attribute_name) or update(attribute_type_id)
      or update(attribute_size) or update(index_flag)
    )
  begin
    declare @attribute_id numeric, @attribute_name nvarchar(255), @attribute_size numeric, @content_id numeric
    declare @indexed numeric, @required numeric
    declare @attribute_type_id numeric, @type_name nvarchar(255), @database_type nvarchar(255)
    declare @multilingual bit, @parent_content_attribute_id numeric, @mlanguage_id numeric

    declare @new_attribute_name nvarchar(255), @new_attribute_size numeric
    declare @new_indexed numeric, @new_required numeric
    declare @new_attribute_type_id numeric, @new_type_name nvarchar(255), @new_database_type nvarchar(255)
    declare @new_multilingual bit, @new_parent_content_attribute_id numeric, @new_mlanguage_id numeric

    declare @base_table_name nvarchar(30), @table_name nvarchar(30)

    declare @i numeric, @count numeric, @preserve_index bit

    declare @parent_content_attribute_name nvarchar(255), @mlanguage_postfix nvarchar(5)

    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      attribute_name nvarchar(255),
      attribute_size numeric,
      indexed numeric,
      required numeric,
      attribute_type_id numeric,
      type_name nvarchar(255),
      database_type nvarchar(255),
      content_id numeric,
      multilingual bit,
      parent_content_attribute_id numeric,
      mlanguage_id numeric
    )

    /* Collect affected items */
    insert into @ca (attribute_id, attribute_name, attribute_size, indexed, required, attribute_type_id, type_name, database_type, content_id, multilingual, parent_content_attribute_id, mlanguage_id)
      select d.attribute_id, d.attribute_name, d.attribute_size, d.index_flag, d.required, d.attribute_type_id, at.type_name, at.database_type, d.content_id, d.multilingual, d.parent_content_attribute_id, mlanguage_id
      from deleted d
      inner join attribute_type at on d.attribute_type_id = at.attribute_type_id
      inner join content c on d.content_id = c.content_id
      where c.virtual_type = 0

    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @attribute_id = attribute_id, @attribute_name = attribute_name, @attribute_size = attribute_size,
        @indexed = indexed, @required = required, @attribute_type_id = attribute_type_id,
        @type_name = type_name, @database_type = database_type, @content_id = content_id,
        @multilingual = multilingual, @parent_content_attribute_id = parent_content_attribute_id, @mlanguage_id = mlanguage_id
        from @ca where id = @i

      select @new_attribute_name = ca.attribute_name, @new_attribute_size = ca.attribute_size,
        @new_indexed = ca.index_flag, @new_required = ca.required, @new_attribute_type_id = ca.attribute_type_id,
        @new_type_name = at.type_name, @new_database_type = at.database_type,
        @new_multilingual = ca.multilingual, @new_parent_content_attribute_id = ca.parent_content_attribute_id, @new_mlanguage_id = ca.mlanguage_id
        from content_attribute ca
        inner join attribute_type at on ca.attribute_type_id = at.attribute_type_id
        where attribute_id = @attribute_id

        set @base_table_name = 'content_' + convert(nvarchar, @content_id)
        set @table_name = @base_table_name + '_ASYNC'

        if @indexed = 1 and @new_indexed = 1
          set @preserve_index = 1
        else
          set @preserve_index = 0


        if (@indexed = 1 and @new_indexed = 0)
        begin
          exec qp_drop_index @base_table_name, @attribute_name
          exec qp_drop_index @table_name, @attribute_name
        end

        if @database_type <> @new_database_type or @attribute_size <> @new_attribute_size
        begin

          if @database_type = 'ntext' and @new_database_type <> 'ntext'
            exec qp_copy_blob_data_to_data @attribute_id
          else if @database_type <> 'ntext' and @new_database_type = 'ntext'
            exec qp_copy_data_to_blob_data @attribute_id

          exec qp_recreate_column @base_table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_recreate_column @table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_content_united_view_recreate @content_id
        end
        else begin
          if @attribute_name <> @new_attribute_name
          begin
            if (@multilingual = 1 and @parent_content_attribute_id is not null)
            begin
              select @parent_content_attribute_name = attribute_name from content_attribute where attribute_id = @parent_content_attribute_id
              select @mlanguage_postfix = postfix from multilingual where mlanguage_id = @mlanguage_id
              set @new_attribute_name = [dbo].[qp_construct_lfield_name](@parent_content_attribute_name, @mlanguage_postfix)
            end

            exec qp_rename_column @base_table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_rename_column @table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_content_united_view_recreate @content_id
          end
        end
        if @attribute_name <> @new_attribute_name
          UPDATE container Set order_static = REPLACE(order_static, @attribute_name, @new_attribute_name) WHERE content_id = @content_id AND order_static LIKE '%'+ @attribute_name +'%'

        if (@indexed = 0 and @new_indexed = 1)
        begin
          exec qp_add_index @base_table_name, @new_attribute_name
          exec qp_add_index @table_name, @new_attribute_name
        end

      set @i = @i + 1
    end
  end
END
GO



exec qp_drop_existing 'ManageMLFieldsForVirtualContents', 'IsProcedure'
GO


EXEC dbo.sp_executesql @statement = N'CREATE proc [dbo].[ManageMLFieldsForVirtualContents]
(
  @content_id int,
  @column_name nvarchar(4000)
)
AS
BEGIN
  --if @content_id IS NULL or @content_id<=0 or @column_name IS NULL
  declare @content_name nvarchar(1000)
  declare @counter int, @count int
  set @counter = 0
  set @count = (select  count(*) from content c1 inner join content c2
    on c1.CONTENT_ID = c2.virtual_join_primary_content_id
  where c1.CONTENT_ID = @content_id)
  if @count>0 begin
    --cursor for all virtual contents relating with selected content
    DECLARE c_cursor CURSOR FOR
    select  c2.CONTENT_ID from content c1 inner join content c2
      on c1.CONTENT_ID = c2.virtual_join_primary_content_id
    where c1.CONTENT_ID = @content_id
    OPEN c_cursor
    WHILE @counter<@count begin
      FETCH NEXT FROM c_cursor INTO @content_name
      --create content name by content id
      set @content_name = ''content_'' + @content_name
      SET @Counter = @Counter + 1

      declare @internal_counter int, @internal_count int
      set @internal_counter = 0
      set @internal_count = (SELECT count(*) FROM sysobjects so inner join syscomments sc on so.id = sc.id
        where xtype=''V'' and [name] like @content_name + ''%'')
      declare @test nvarchar(4000)
      declare @view_name nvarchar (4000)
      DECLARE text_cursor CURSOR FOR
        SELECT sc.[text], so.[name] FROM sysobjects so inner join syscomments sc on so.id = sc.id
        where xtype=''V'' and [name] like @content_name + ''%''
      OPEN text_cursor
      WHILE @internal_counter<@internal_count begin
        FETCH NEXT FROM text_cursor INTO @test, @view_name
        set @internal_counter = @internal_counter + 1
      ----------------------------------------------------------------------------------------
        --first temp table
        --temporary table for parse virtual content view
        create table #temp(
          rid int IDENTITY(1,1),
          Item nvarchar(4000)
        )
        --Filling of the table #temp with use added Split function
        insert into #temp SELECT Items FROM dbo.Split(@test,'','')
        if (select count(*) from #temp)>0 begin
          declare @release_string nvarchar(4000)
          set @release_string = ''''
          declare @first_row int , @last_row int
          set @first_row = 1
          set @last_row = (select count(*) from #temp)
          --second temp table
          create table #temp2(
            rid int IDENTITY(1,1),
            Item nvarchar(4000)
          )
          --third temp table
          create table #temp3(
            rid int
          )

          declare @tmp_variable nvarchar(4000)
          --parse internal row into #temp for search binding @column_name
          declare @internal_rid int
          DECLARE temptable_cursor CURSOR FOR
            select rid from #temp where rid<>1
          OPEN temptable_cursor
          FETCH NEXT FROM temptable_cursor INTO @internal_rid
          WHILE @@FETCH_STATUS = 0
          BEGIN
            --get row for parse
            set @tmp_variable = (select Item from #temp where rid = @internal_rid)
            set @tmp_variable = rtrim(@tmp_variable)
            print @tmp_variable
            insert into #temp2 select Items FROM dbo.Split(@tmp_variable,'' '')
            if (select count(*) from #temp2)>0 begin
              --check that into the row uses @column_name
              if exists(select top 1 * from #temp2 where Item like ''%'' + @column_name + ''_%'') begin
                -- add to list for delete
                insert into #temp3 select @internal_rid
              end
            end
            --clear the buffer of #temp2 table
            delete from #temp2
            FETCH NEXT FROM temptable_cursor INTO @internal_rid
          END
          CLOSE temptable_cursor
          DEALLOCATE temptable_cursor
          --clear relaton columns
          delete from #temp where rid<>1 and rid in (select rid from #temp3)
          drop table #temp2
          drop table #temp3
          ----------------------------------------------------------------
          if (select count(*) from #temp where rid=@last_row)=0 begin
            insert into #temp select substring(@test, charindex(''FROM'', @test), len(@test))
          end
          else
            update #temp set Item = '','' + Item where rid=@last_row
          set @last_row = (select max(rid) from #temp)

          declare @temp_name nvarchar(4000), @temp_rid int
          DECLARE t_cursor CURSOR FOR
            select Item, rid from #temp

          OPEN t_cursor
          FETCH NEXT FROM t_cursor INTO @temp_name, @temp_rid
          WHILE @@FETCH_STATUS = 0
          BEGIN
            if (len(@release_string)>0) begin
              if (@temp_rid=@last_row)
                set @release_string = @release_string + '' '' +@temp_name
              else
                set @release_string = @release_string + '', '' + @temp_name
            end
            else begin
              set @release_string = @temp_name
            end
            FETCH NEXT FROM t_cursor INTO @temp_name, @temp_rid
          END
          CLOSE t_cursor
          DEALLOCATE t_cursor
          if rtrim(@test)<>rtrim(@release_string) begin
            --select @release_string
            declare @executed_text varchar(8000)
            set @executed_text = ''ALTER '' + substring(rtrim(@release_string), LEN(''CREATE'')+2, LEN(rtrim(@release_string)))
            EXEC(@executed_text)
            exec sp_refreshview @viewname = @view_name
          end
        end
        drop table #temp
      end
      CLOSE text_cursor
      DEALLOCATE text_cursor
    end
    CLOSE c_cursor
    DEALLOCATE c_cursor
    ----------------------------------------------------------------------------------------
    --1
    delete from CONTENT_ATTRIBUTE where ATTRIBUTE_ID IN (select ATTRIBUTE_ID from CONTENT_ATTRIBUTE where persistent_attr_id in
    (select ca_child.ATTRIBUTE_ID from CONTENT_ATTRIBUTE ca_parent inner join
        CONTENT_ATTRIBUTE ca_child on ca_parent.ATTRIBUTE_ID = ca_child.PARENT_CONTENT_ATTRIBUTE_ID
        where ca_parent.ATTRIBUTE_NAME=@column_name) and content_id in
      (
        select v_content.CONTENT_ID from Content base_content inner join Content v_content
        on base_content.content_id = v_content.virtual_join_primary_content_id
        where base_content.content_id = @content_id
      )
    )
    --2
    delete from CONTENT_ATTRIBUTE where ATTRIBUTE_ID IN (select ca_child.ATTRIBUTE_ID from CONTENT_ATTRIBUTE ca_parent inner join
      CONTENT_ATTRIBUTE ca_child on ca_parent.ATTRIBUTE_ID = ca_child.persistent_attr_id
      where ca_parent.ATTRIBUTE_NAME = @column_name and ca_child.MULTILINGUAL = 1 and ca_parent.content_id = @content_id)
    ----------------------------------------------------------------------------------------
  end
  --3
  delete from CONTENT_ATTRIBUTE where persistent_attr_id is not null
  and ATTRIBUTE_ID NOT IN
  (
    select c2.ATTRIBUTE_ID from CONTENT_ATTRIBUTE c1 inner join CONTENT_ATTRIBUTE c2 on
    c1.Attribute_id = c2.persistent_attr_id
  )
END'
GO


CREATE TRIGGER [dbo].[tu_update_field_ml] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

if update(multilingual)
  begin
    declare @content_id numeric, @attribute_id numeric, @attribute_name nvarchar(255), @indexed bit, @multilingual bit, @parent_content_attribute_id numeric
    declare @new_multilingual bit, @new_indexed bit
    declare @main_language_field_name nvarchar(255), @preserve_index bit
    declare @i int, @count int

    declare @base_table_name nvarchar(30), @table_name nvarchar(30)

    declare @ca table (
      id numeric identity(1,1) primary key,
      content_id numeric,
      attribute_id numeric,
      attribute_name nvarchar(255),
      indexed bit,
      parent_content_attribute_id numeric,
      multilingual bit
    )

    insert into @ca
    select content_id, attribute_id, attribute_name, index_flag, parent_content_attribute_id, multilingual from deleted

    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @content_id = content_id, @attribute_id = attribute_id, @attribute_name = attribute_name, @indexed=indexed, @parent_content_attribute_id = parent_content_attribute_id, @multilingual = multilingual
      from @ca
      where id = @i

      select @new_multilingual = multilingual, @new_indexed = index_flag from inserted where attribute_id = @attribute_id

      if @indexed = 1 and @new_indexed = 1
        set @preserve_index = 1
      else
        set @preserve_index = 0

      -- Construct content's tables names
      set @base_table_name = 'content_' + convert(nvarchar, @content_id)
      set @table_name = @base_table_name + '_ASYNC'

      -- If multilingual capability switch ON
      if  (@multilingual = 0 and @new_multilingual = 1) and @parent_content_attribute_id is null
      begin
        -- Create l-fields in content's tables
        exec qp_create_fields_for_multilingual @attribute_id

        -- Set mlanguage's identifier for ml-field
        update content_attribute
        set mlanguage_id = (select mlanguage_id from multilingual where is_main = 1)
        where attribute_id = @attribute_id
      end

      -- If multilingual capability switch OF
      if  (@multilingual = 1 and @new_multilingual = 0) and @parent_content_attribute_id is null
      begin
        -- Delete all l-fields
        delete from content_attribute
        where parent_content_attribute_id = @attribute_id

        -- Set mlanguage's identifier for ml-field
        update content_attribute
        set mlanguage_id = null
        where attribute_id = @attribute_id
      end

      set @i = @i + 1
    end
  end

  if  update(attribute_name) or update(attribute_type_id) or update(attribute_size) or update(index_flag)
    or update(attribute_order) or update(friendly_name)
  begin
    -- Copies all parent's ml-field's properies to l-fields
    declare @ca_inserted table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      attribute_name nvarchar(255),
      attribute_type_id numeric,
      attribute_size numeric,
      index_flag numeric,
      attribute_order numeric,
      friendly_name nvarchar(300),
      parent_content_attribute_id numeric,
      multilingual bit
    )
    insert into @ca_inserted
    select  attribute_id, attribute_name, attribute_type_id, attribute_size, index_flag, attribute_order,
        friendly_name, parent_content_attribute_id, multilingual
    from inserted

    declare @count_inserted int, @j int
    select @count_inserted = count(attribute_id) from inserted
    set @j = 1

    declare @attribute_id_inserted numeric, @parent_content_attribute_id_inserted numeric, @multilingual_inserted bit
    declare @attribute_name_inserted nvarchar(255), @attribute_type_id numeric, @attribute_size numeric
    declare @index_flag numeric,  @attribute_order numeric, @friendly_name nvarchar(300)

    while @j < @count_inserted + 1
    begin
      select  @attribute_id_inserted = attribute_id, @attribute_name_inserted = attribute_name,
          @attribute_type_id = attribute_type_id, @attribute_size = attribute_size,
          @index_flag = index_flag, @attribute_order = attribute_order, @friendly_name = friendly_name,
          @parent_content_attribute_id_inserted = parent_content_attribute_id,
          @multilingual_inserted = multilingual
      from @ca_inserted
      where id = @j

      if  (@multilingual_inserted = 1 and @parent_content_attribute_id_inserted is null)
        and
        (
          update(attribute_name) or update(attribute_type_id)
          or update(attribute_size) or update(index_flag) or update(attribute_order)
          or update(friendly_name)
        )
      begin
        if update(attribute_name)
        begin
          update content_attribute
          set attribute_name = [dbo].[qp_construct_lfield_name_with_id](@attribute_name_inserted, mlanguage_id)
          where parent_content_attribute_id = @attribute_id_inserted
        end

        if update(attribute_type_id) and update(attribute_size)
          update content_attribute
          set attribute_type_id = @attribute_type_id, attribute_size = @attribute_size
          where parent_content_attribute_id = @attribute_id_inserted
        else
        begin
          if update(attribute_type_id)
            update content_attribute
            set attribute_type_id = @attribute_type_id
            where parent_content_attribute_id = @attribute_id_inserted

          if update(attribute_size)
            update content_attribute
            set attribute_size = @attribute_size
            where parent_content_attribute_id = @attribute_id_inserted
        end

        if update(index_flag)
          update content_attribute
          set index_flag = @index_flag
          where parent_content_attribute_id = @attribute_id_inserted

        if update(attribute_order)
          update content_attribute
          set attribute_order = @attribute_order
          where parent_content_attribute_id = @attribute_id_inserted

        if update(friendly_name)
          update content_attribute
          set friendly_name = [dbo].[qp_construct_lfield_name_with_id_friendly](@friendly_name, mlanguage_id)
          where parent_content_attribute_id = @attribute_id_inserted
      end

      set @j = @j + 1

    end
    update CONTENT_ATTRIBUTE SET REQUIRED = 0, DEFAULT_VALUE = NULL
      where attribute_id in (select attribute_id from inserted where PARENT_CONTENT_ATTRIBUTE_ID IS NULL AND MULTILINGUAL = 1)

  end
END
GO


insert into tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id)
values
('Globalization','multilingual/dsp_multilingual_list.asp', 2, 10, 'Languages for multilingual fields', 1)

declare @globalize_tab_id numeric
select @globalize_tab_id = tab_id from tabs where tab_name = 'Globalization'

insert into tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id, pre_action)
values
('New Language','multilingual/dsp_new_multilingual.asp', 1, 1, 'Add language for multilingual fields', @globalize_tab_id, 'multilingual/act_new_multilingual.asp')

declare @new_lang_tab_id numeric
select @new_lang_tab_id = tab_id from tabs where tab_name = 'New Language'

insert into buttons (permission_level_id, button_type, action_file, buttons_order, cancel_action, button_name, action_tab_id, location_tab_id, confirm_phrase)
values
(2, 'submit', NULL, 1, 0, 'Add New Language', @new_lang_tab_id, @globalize_tab_id,  NULL)


insert into tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id)
values
('Language Info','multilingual/dsp_multilingual_info.asp', 2, 1, 'Edit language for multilingual fields', @globalize_tab_id)

declare @edit_lang_tab_id numeric
select @edit_lang_tab_id =  tab_id from tabs where tab_name = 'Language Info'


insert into toolbar_buttons
(
   permission_level_id, location_tab_id, image_disabled, image_enabled, button_name, buttons_order, action_tab_id, always_enabled, action_function
)
values
(
   3, @globalize_tab_id, 'images/toolbar/edit_disabled.gif', 'images/toolbar/edit.gif', 'Properties', 1, @edit_lang_tab_id, 0, NULL
)

insert into buttons (permission_level_id, button_type, action_file, buttons_order, cancel_action, button_name, action_tab_id, location_tab_id, confirm_phrase)
values
(2, 'submit', 'multilingual/act_save_multilingual.asp', 1, 0, 'Save', @edit_lang_tab_id, @new_lang_tab_id, NULL)


insert into buttons (permission_level_id, button_type, action_file, buttons_order, cancel_action, button_name, action_tab_id, location_tab_id, confirm_phrase)
values
(3, 'submit', NULL, 3, 1, 'Cancel', @globalize_tab_id, @new_lang_tab_id, NULL)



insert into buttons (permission_level_id, button_type, action_file, buttons_order, cancel_action, button_name, action_tab_id, location_tab_id, confirm_phrase)
values
(2, 'submit', 'multilingual/act_update_multilingual.asp', 1, 0, 'Update', @edit_lang_tab_id, @edit_lang_tab_id, NULL)

insert into buttons (permission_level_id, button_type, action_file, buttons_order, cancel_action, button_name, action_tab_id, location_tab_id, confirm_phrase)
values
(1, 'submit', 'multilingual/act_delete_multilingual.asp', 2, 0, 'Remove', @globalize_tab_id, @edit_lang_tab_id, 'Delete language. Are you sure?')

insert into buttons (permission_level_id, button_type, action_file, buttons_order, cancel_action, button_name, action_tab_id, location_tab_id, confirm_phrase)
values
(3, 'submit', NULL, 3, 1, 'Cancel', @globalize_tab_id, @edit_lang_tab_id, NULL)
GO

update tabs set tree_keyword = 'mlanguage' where tab_name = 'Globalization'
update tabs set show_in_tree_list = 1, hide_in_tree = 1 where tab_name = 'New Language'

update tabs set nav_table = 'multilingual', nav_item_id = 'mlanguage_id', nav_dictionary = 'mlanguage_id', nav_item_name = 'mlanguage_name' where tab_name = 'Language Info'


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.1', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.1 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.2
-- SQL injection fix
-- **************************************

ALTER    PROCEDURE [dbo].[qp_fulltextSiteSearch]
@tabname varchar(255),
@use_morphology int = 0,
@expression varchar(2000),
@minrank int = -1,
@startpos int = 1,
@count int = 20
AS
CREATE TABLE #temp(RowNum int identity, link_id  int)
DECLARE @str varchar(4000)
IF @use_morphology  =  1
  SET @str = ' INSERT INTO #temp(link_id)' +
    ' SELECT link_id '+
    ' FROM '+
    @tabname +' as s'+
    ' INNER JOIN'+
    ' FREETEXTTABLE('+@tabname+', *,''' + replace(@expression, '''', '') + ' dsfsdf4fjkhj'') AS KEY_TBL'+
    ' ON s.link_id = KEY_TBL.[KEY]'+
    ' WHERE KEY_TBL.RANK >'+ cast(@minrank as varchar)+
    ' ORDER BY cast(keywords as nvarchar) desc, KEY_TBL.RANK DESC'
ELSE
  SET @str = ' INSERT INTO #temp(link_id)' +
    ' SELECT link_id '+
    ' FROM '+
    @tabname +' as s'+
    ' INNER JOIN'+
    ' CONTAINSTABLE('+@tabname+', *,''"'+ replace(@expression, '"', '') + '" OR "dsfsdf4fjkhj"'') AS KEY_TBL'+
    ' ON s.link_id = KEY_TBL.[KEY]'+
    '  WHERE KEY_TBL.RANK >'+ cast(@minrank as varchar)+
    ' ORDER BY cast(keywords as nvarchar) desc, KEY_TBL.RANK DESC'

EXEC( @str)
select count(*) as total from #temp

SET @str = 'SELECT t.link_id, s.title, s.description, s.keywords, s.text_from_document,s.link'+
                        ' FROM #temp t '+
                        ' INNER JOIN '+ @tabname + ' s'+
                        '  ON s.link_id = t.link_id' +
                        '  WHERE t.RowNum BETWEEN '+ cast(@startpos as varchar) +'  AND ' + cast( (@startpos + @count -1) as varchar) +
                        '   Order by cast(keywords as nvarchar) desc, t.Rownum'
   exec (@str)
GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.2', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.2 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.3
-- Multilingual fixes
-- **************************************

ALTER PROCEDURE [dbo].[qp_create_fields_for_multilingual]
  @parent_content_attribute_id_param numeric (18, 0)
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  -- Gets count all languages whichs is not MAIN
  declare @multilingual_count int
  select @multilingual_count = count(mlanguage_id) from multilingual
  set @multilingual_count = @multilingual_count - 1
  declare @content_id int
  if @multilingual_count <> 0
  begin

    set @content_id = (select top 1 content_id from content_attribute
      where attribute_id = @parent_content_attribute_id_param group by content_id)

    declare @mlanguage_id numeric, @mlanguage_postfix nvarchar(5)

    declare @multilingual_list table(
      mlanguage_item_id int identity(1, 1) primary key,
      mlanguage_id numeric,
      postfix nvarchar(5)
    );
    insert into @multilingual_list
    select mlanguage_id, postfix from multilingual where is_main = 0

    declare @j int
    set @j = 1
    while @j <= @multilingual_count
    begin
      select * into #temp_insert_content_attribute from content_attribute where attribute_id = @parent_content_attribute_id_param

      select @mlanguage_id = mlanguage_id, @mlanguage_postfix = postfix from @multilingual_list where mlanguage_item_id = @j

      update #temp_insert_content_attribute
      set parent_content_attribute_id = @parent_content_attribute_id_param,
        attribute_name = [dbo].[qp_construct_lfield_name](attribute_name, @mlanguage_postfix),
        friendly_name = [dbo].[qp_construct_lfield_name_friendly](friendly_name, @mlanguage_postfix),
        mlanguage_id = @mlanguage_id

      insert into content_attribute
        ([CONTENT_ID]
           ,[ATTRIBUTE_NAME]
           ,[FORMAT_MASK]
           ,[INPUT_MASK]
           ,[ATTRIBUTE_SIZE]
           ,[DEFAULT_VALUE]
           ,[ATTRIBUTE_TYPE_ID]
           ,[RELATED_ATTRIBUTE_ID]
           ,[INDEX_FLAG]
           ,[DESCRIPTION]
           ,[MODIFIED]
           ,[CREATED]
           ,[LAST_MODIFIED_BY]
           ,[ATTRIBUTE_ORDER]
           ,[REQUIRED]
           ,[PERMANENT_FLAG]
           ,[PRIMARY_FLAG]
           ,[RELATION_CONDITION]
           ,[display_as_radio_button]
           ,[view_in_list]
           ,[READONLY_FLAG]
           ,[allow_stage_edit]
           ,[ATTRIBUTE_CONFIGURATION]
           ,[RELATED_IMAGE_ATTRIBUTE_ID]
           ,[persistent_attr_id]
           ,[join_attr_id]
           ,[link_id]
           ,[DEFAULT_BLOB_VALUE]
           ,[AUTO_LOAD]
           ,[FRIENDLY_NAME]
           ,[use_site_library]
           ,[use_archive_articles]
           ,[AUTO_EXPAND]
           ,[relation_page_size]
           ,[doctype]
           ,[full_page]
           ,[MULTILINGUAL]
           ,[PARENT_CONTENT_ATTRIBUTE_ID]
           ,[MLANGUAGE_ID])
      select
        t1.CONTENT_ID
         ,[ATTRIBUTE_NAME]
         ,[FORMAT_MASK]
         ,[INPUT_MASK]
         ,[ATTRIBUTE_SIZE]
         ,NULL--[DEFAULT_VALUE]
         ,[ATTRIBUTE_TYPE_ID]
         ,NULL--[RELATED_ATTRIBUTE_ID]
         ,[INDEX_FLAG]
         ,t1.DESCRIPTION
         ,GETDATE()--[MODIFIED]
         ,GETDATE()--[CREATED]
         ,t1.LAST_MODIFIED_BY
         ,[ATTRIBUTE_ORDER]
         ,0--[REQUIRED]
         ,[PERMANENT_FLAG]
         ,0--[PRIMARY_FLAG]
         ,NULL--[RELATION_CONDITION]
         ,0--[display_as_radio_button]
         ,[view_in_list]
         ,[READONLY_FLAG]
         ,[allow_stage_edit]
         ,[ATTRIBUTE_CONFIGURATION]
         ,NULL--[RELATED_IMAGE_ATTRIBUTE_ID]
         ,NULL--[persistent_attr_id]
         ,NULL--[join_attr_id]
         ,NULL--[link_id]
         ,NULL--[DEFAULT_BLOB_VALUE]
         ,[AUTO_LOAD]
         ,[FRIENDLY_NAME]
         ,[use_site_library]
         ,0--[use_archive_articles]
         ,[AUTO_EXPAND]
         ,NULL--[relation_page_size]
         ,[doctype]
         ,[full_page]
         ,[MULTILINGUAL]
         ,[PARENT_CONTENT_ATTRIBUTE_ID]
         ,[MLANGUAGE_ID]
      from #temp_insert_content_attribute t1 inner join content t2
        on t1.content_id = t2.content_id
      where t2.virtual_type = 0


      insert into content_attribute
      ([CONTENT_ID]
         ,[ATTRIBUTE_NAME]
         ,[FORMAT_MASK]
         ,[INPUT_MASK]
         ,[ATTRIBUTE_SIZE]
         ,[DEFAULT_VALUE]
         ,[ATTRIBUTE_TYPE_ID]
         ,[RELATED_ATTRIBUTE_ID]
         ,[INDEX_FLAG]
         ,[DESCRIPTION]
         ,[MODIFIED]
         ,[CREATED]
         ,[LAST_MODIFIED_BY]
         ,[ATTRIBUTE_ORDER]
         ,[REQUIRED]
         ,[PERMANENT_FLAG]
         ,[PRIMARY_FLAG]
         ,[RELATION_CONDITION]
         ,[display_as_radio_button]
         ,[view_in_list]
         ,[READONLY_FLAG]
         ,[allow_stage_edit]
         ,[ATTRIBUTE_CONFIGURATION]
         ,[RELATED_IMAGE_ATTRIBUTE_ID]
         ,[persistent_attr_id]
         ,[join_attr_id]
         ,[link_id]
         ,[DEFAULT_BLOB_VALUE]
         ,[AUTO_LOAD]
         ,[FRIENDLY_NAME]
         ,[use_site_library]
         ,[use_archive_articles]
         ,[AUTO_EXPAND]
         ,[relation_page_size]
         ,[doctype]
         ,[full_page]
         ,[MULTILINGUAL]
         ,[PARENT_CONTENT_ATTRIBUTE_ID]
         ,[MLANGUAGE_ID])
      select  ca2.CONTENT_ID
         ,[ATTRIBUTE_NAME]
         ,[FORMAT_MASK]
         ,[INPUT_MASK]
         ,[ATTRIBUTE_SIZE]
         ,NULL--[DEFAULT_VALUE]
         ,[ATTRIBUTE_TYPE_ID]
         ,NULL--[RELATED_ATTRIBUTE_ID]
         ,[INDEX_FLAG]
         ,[DESCRIPTION]
         ,GETDATE()--[MODIFIED]
         ,GETDATE()--[CREATED]
         ,[LAST_MODIFIED_BY]
         ,[ATTRIBUTE_ORDER]
         ,0--[REQUIRED]
         ,[PERMANENT_FLAG]
         ,0--[PRIMARY_FLAG]
         ,NULL--[RELATION_CONDITION]
         ,0--[display_as_radio_button]
         ,0--[view_in_list]
         ,[READONLY_FLAG]
         ,0--[allow_stage_edit]
         ,[ATTRIBUTE_CONFIGURATION]
         ,NULL--[RELATED_IMAGE_ATTRIBUTE_ID]
         ,ca1.ATTRIBUTE_ID--[persistent_attr_id]
         ,[join_attr_id]
         ,[link_id]
         ,NULL--[DEFAULT_BLOB_VALUE]
         ,[AUTO_LOAD]
         ,NULL--[FRIENDLY_NAME]
         ,[use_site_library]
         ,0--[use_archive_articles]
         ,[AUTO_EXPAND]
         ,NULL--[relation_page_size]
         ,[doctype]
         ,[full_page]
         ,[MULTILINGUAL]
         ,NULL--[PARENT_CONTENT_ATTRIBUTE_ID]
         ,[MLANGUAGE_ID]
      from #temp_insert_content_attribute ca1 cross join (select v_content.CONTENT_ID from Content base_content inner join Content v_content
        on base_content.content_id = v_content.virtual_join_primary_content_id
        where base_content.content_id = @content_id) ca2
      drop table #temp_insert_content_attribute
      set @j = @j + 1
    end
  end
END
GO

ALTER TRIGGER [dbo].[td_remove_field_ml] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @attribute_id numeric

  declare @i numeric, @count numeric

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric
  )

  /* Collect affected items */
  insert into @ca (attribute_id) select d.attribute_id from deleted d
  where multilingual = 1 and parent_content_attribute_id is null

  set @i = 1
  select @count = count(id) from @ca

  while @i < @count + 1
  begin
    select @attribute_id = attribute_id from @ca where id = @i

    delete from content_attribute
    where parent_content_attribute_id = @attribute_id

    set @i = @i + 1
  end

END
GO

ALTER TRIGGER [dbo].[tu_update_field_ml] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

    declare @attribute_id numeric
    declare @attribute_name nvarchar(255), @attribute_type_id numeric, @attribute_size numeric
    declare @indexed bit, @attribute_order numeric, @friendly_name nvarchar(255), @multilingual bit
    declare @new_attribute_name nvarchar(255), @new_attribute_type_id numeric, @new_attribute_size numeric
    declare @new_indexed bit, @new_attribute_order numeric, @new_friendly_name nvarchar(255), @new_multilingual bit

    declare @i int, @count int

    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      attribute_name nvarchar(255),
      attribute_type_id numeric,
      attribute_size numeric,
      index_flag numeric,
      attribute_order numeric,
      friendly_name nvarchar(300),
      multilingual bit
    )

    insert into @ca
    select attribute_id, attribute_name, attribute_type_id, attribute_size, index_flag, attribute_order, friendly_name, multilingual
    from deleted d
    where parent_content_attribute_id is null

    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @attribute_id = attribute_id, @attribute_name = attribute_name,
          @attribute_type_id = attribute_type_id, @attribute_size = attribute_size,
          @indexed = index_flag, @attribute_order = attribute_order, @friendly_name = friendly_name,
          @multilingual = multilingual from @ca where id = @i

      select @new_attribute_name = attribute_name,
          @new_attribute_type_id = attribute_type_id, @new_attribute_size = attribute_size,
          @new_indexed = index_flag, @new_attribute_order = attribute_order, @new_friendly_name = friendly_name,
          @new_multilingual = multilingual from inserted where attribute_id = @attribute_id

      -- If multilingual capability switch ON
      if  (@multilingual = 0 and @new_multilingual = 1)
      begin
        -- Create l-fields in content's tables
        exec qp_create_fields_for_multilingual @attribute_id

        -- Set mlanguage's identifier for ml-field
        update content_attribute
        set mlanguage_id = (select mlanguage_id from multilingual where is_main = 1)
        where attribute_id = @attribute_id
      end

      -- If multilingual capability switch OFF
      if  (@multilingual = 1 and @new_multilingual = 0)
      begin
        -- Delete all l-fields
        delete from content_attribute
        where parent_content_attribute_id = @attribute_id

        -- Set mlanguage's identifier for ml-field
        update content_attribute
        set mlanguage_id = null
        where attribute_id = @attribute_id
      end

      if (@new_multilingual = 1)
      begin
        update CONTENT_ATTRIBUTE SET REQUIRED = 0, DEFAULT_VALUE = NULL
        where attribute_id = @attribute_id
      end

      if (@multilingual = 1 and @new_multilingual = 1)
      begin
        if @attribute_name <> @new_attribute_name
          update content_attribute
          set attribute_name = [dbo].[qp_construct_lfield_name_with_id](@new_attribute_name, mlanguage_id)
          where parent_content_attribute_id = @attribute_id

        if @attribute_type_id <> @new_attribute_type_id
          update content_attribute
          set attribute_type_id = @new_attribute_type_id
          where parent_content_attribute_id = @attribute_id

        if @attribute_size <> @new_attribute_size
          update content_attribute
          set attribute_size = @new_attribute_size
          where parent_content_attribute_id = @attribute_id

        if @indexed <> @new_indexed
          update content_attribute
          set index_flag = @new_indexed
          where parent_content_attribute_id = @attribute_id

        if @attribute_order <> @new_attribute_order
          update content_attribute
          set attribute_order = @new_attribute_order
          where parent_content_attribute_id = @attribute_id

        if @friendly_name <> @new_friendly_name
          update content_attribute
          set friendly_name = [dbo].[qp_construct_lfield_name_with_id_friendly](@new_friendly_name, mlanguage_id)
          where parent_content_attribute_id = @attribute_id
      end
      set @i = @i + 1
    end
END
GO

ALTER TRIGGER [dbo].[ti_insert_field_ml] ON [dbo].[CONTENT_ATTRIBUTE] FOR INSERT
AS
BEGIN
   --print 'insert field ml'
   -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @attribute_id numeric (18, 0), @multilingual bit, @parent_content_attribute_id numeric (18, 0)
  declare @i int, @count int

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric
  )
  insert into @ca select attribute_id from inserted where multilingual = 1 and parent_content_attribute_id is null

  set @i = 1
  select @count = count(id) from @ca

  while @i < @count + 1
  begin
    select @attribute_id = attribute_id from @ca where id = @i

    exec qp_create_fields_for_multilingual @attribute_id

    -- Set mlanguage's identifier for ml-field
    update content_attribute
    set mlanguage_id = (select mlanguage_id from multilingual where is_main = 1)
    where attribute_id = @attribute_id

    set @i = @i + 1
  end

END
GO
ALTER  TRIGGER [td_users_pass_objs_ownership_to_admin] ON [dbo].[USERS]
FOR DELETE
AS
  DECLARE @uid NUMERIC
  DECLARE usr CURSOR FOR SELECT user_id FROM deleted
  OPEN usr
  FETCH NEXT FROM usr INTO @uid
  WHILE @@FETCH_STATUS = 0 BEGIN
    UPDATE SITE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_ITEM SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 WHERE last_modified_by = @uid

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE PAGE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE PAGE SET last_assembled_by = 1 WHERE last_assembled_by = @uid
    UPDATE OBJECT SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 WHERE last_modified_by = @uid

    UPDATE FOLDER SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE CODE_SNIPPET SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE STYLE SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE STATUS_TYPE SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE WORKFLOW SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE SITE_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid

    UPDATE USER_GROUP SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE USERS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE NOTIFICATIONS SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id = @uid
    UPDATE DOC SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE MULTILINGUAL SET last_modified_by = 1 WHERE last_modified_by = @uid

  FETCH NEXT FROM usr INTO @uid
  END
  CLOSE usr
  DEALLOCATE usr
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.3', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.3 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.6.2.4
-- Multilingual undo
-- **************************************


exec qp_drop_existing 'qp_create_fields_for_multilingual', 'IsStoredProcedure'
GO
exec qp_drop_existing 'ManageMLFieldsForVirtualContents', 'IsStoredProcedure'
GO
exec qp_drop_existing 'qp_construct_lfield_name_friendly', 'IsScalarFunction'
GO
exec qp_drop_existing 'qp_construct_lfield_name', 'IsScalarFunction'
GO
exec qp_drop_existing 'qp_construct_lfield_name_with_id', 'IsScalarFunction'
GO
exec qp_drop_existing 'qp_construct_lfield_name_with_id_friendly', 'IsScalarFunction'
GO
exec qp_drop_existing 'qp_delete_fields_for_multilingual', 'IsScalarFunction'
GO
exec qp_drop_existing 'qp_compare_strings', 'IsScalarFunction'

drop trigger [dbo].[ti_insert_field_ml]
GO

drop trigger [dbo].[tu_update_field_ml]
GO

drop trigger [dbo].[td_remove_field_ml]
GO

ALTER  TRIGGER [td_users_pass_objs_ownership_to_admin] ON [dbo].[USERS]
FOR DELETE
AS
  DECLARE @uid NUMERIC
  DECLARE usr CURSOR FOR SELECT user_id FROM deleted
  OPEN usr
  FETCH NEXT FROM usr INTO @uid
  WHILE @@FETCH_STATUS = 0 BEGIN
    UPDATE SITE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_ITEM SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 WHERE last_modified_by = @uid

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE PAGE SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE PAGE SET last_assembled_by = 1 WHERE last_assembled_by = @uid
    UPDATE OBJECT SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 WHERE last_modified_by = @uid

    UPDATE FOLDER SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE CODE_SNIPPET SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE STYLE SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE STATUS_TYPE SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE WORKFLOW SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE SITE_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 WHERE last_modified_by = @uid

    UPDATE USER_GROUP SET last_modified_by = 1 WHERE last_modified_by = @uid
    UPDATE USERS SET last_modified_by = 1 WHERE last_modified_by = @uid
  UPDATE NOTIFICATIONS SET last_modified_by = 1 WHERE last_modified_by = @uid

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id = @uid
    UPDATE DOC SET last_modified_by = 1 WHERE last_modified_by = @uid

  FETCH NEXT FROM usr INTO @uid
  END
  CLOSE usr
  DEALLOCATE usr
GO


ALTER TRIGGER [td_reorder_fields] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN

  declare @attribute_id numeric, @content_id numeric
  declare @i numeric, @j numeric
  declare @content_count numeric, @attribute_count numeric
  declare @max numeric

  declare @c table (
    id numeric identity(1,1) primary key,
    content_id numeric
  )

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric
  )

  /* Collect affected items */
  insert into @c(content_id)
  select distinct content_id from deleted

  select @content_count = count(id) from @c
  set @i = 1

  while @i < @content_count + 1
  begin
    select @content_id = content_id from @c where id = @i

    delete from @ca

    insert into @ca (attribute_id)
    select attribute_id from content_attribute where content_id = @content_id order by attribute_order asc

    select @attribute_count = count(id) from @ca
    set @j = 1

    while @j < @attribute_count + 1
    begin
      select @attribute_id = attribute_id from @ca where id = @j

      update content_attribute set attribute_order = @j where attribute_id = @attribute_id

      set @j = @j + 1
    end

    set @i = @i + 1
  end
END
GO

ALTER  TRIGGER [tu_update_field] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
if not update(attribute_order) and
    (
      update(attribute_name) or update(attribute_type_id)
      or update(attribute_size) or update(index_flag)
    )
  begin
    declare @attribute_id numeric, @attribute_name nvarchar(255), @attribute_size numeric, @content_id numeric
    declare @indexed numeric, @required numeric
    declare @attribute_type_id numeric, @type_name nvarchar(255), @database_type nvarchar(255)

    declare @new_attribute_name nvarchar(255), @new_attribute_size numeric
    declare @new_indexed numeric, @new_required numeric
    declare @new_attribute_type_id numeric, @new_type_name nvarchar(255), @new_database_type nvarchar(255)

    declare @base_table_name nvarchar(30), @table_name nvarchar(30)

    declare @i numeric, @count numeric, @preserve_index bit

    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      attribute_name nvarchar(255),
      attribute_size numeric,
      indexed numeric,
      required numeric,
      attribute_type_id numeric,
      type_name nvarchar(255),
      database_type nvarchar(255),
      content_id numeric
    )

  /* Collect affected items */
    insert into @ca (attribute_id, attribute_name, attribute_size, indexed, required, attribute_type_id, type_name, database_type, content_id)
      select d.attribute_id, d.attribute_name, d.attribute_size, d.index_flag, d.required, d.attribute_type_id, at.type_name, at.database_type, d.content_id
      from deleted d
      inner join attribute_type at on d.attribute_type_id = at.attribute_type_id
      inner join content c on d.content_id = c.content_id
      where c.virtual_type = 0

    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @attribute_id = attribute_id, @attribute_name = attribute_name, @attribute_size = attribute_size,
        @indexed = indexed, @required = required, @attribute_type_id = attribute_type_id,
        @type_name = type_name, @database_type = database_type, @content_id = content_id
        from @ca where id = @i

      select @new_attribute_name = ca.attribute_name, @new_attribute_size = ca.attribute_size,
        @new_indexed = ca.index_flag, @new_required = ca.required, @new_attribute_type_id = ca.attribute_type_id,
        @new_type_name = at.type_name, @new_database_type = at.database_type
        from content_attribute ca
        inner join attribute_type at on ca.attribute_type_id = at.attribute_type_id
        where attribute_id = @attribute_id

        set @base_table_name = 'content_' + convert(nvarchar, @content_id)
        set @table_name = @base_table_name + '_ASYNC'

        if @indexed = 1 and @new_indexed = 1
          set @preserve_index = 1
        else
          set @preserve_index = 0


        if @indexed = 1 and @new_indexed = 0
        begin
          exec qp_drop_index @base_table_name, @attribute_name
          exec qp_drop_index @table_name, @attribute_name
        end

        if @database_type <> @new_database_type or @attribute_size <> @new_attribute_size
        begin

          if @database_type = 'ntext' and @new_database_type <> 'ntext'
            exec qp_copy_blob_data_to_data @attribute_id
          else if @database_type <> 'ntext' and @new_database_type = 'ntext'
            exec qp_copy_data_to_blob_data @attribute_id

          exec qp_recreate_column @base_table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_recreate_column @table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_content_united_view_recreate @content_id
        end
        else begin
          if @attribute_name <> @new_attribute_name
          begin
            exec qp_rename_column @base_table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_rename_column @table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_content_united_view_recreate @content_id
          end
        end
        if @attribute_name <> @new_attribute_name
          UPDATE container Set order_static = REPLACE(order_static, @attribute_name, @new_attribute_name) WHERE content_id = @content_id AND order_static LIKE '%'+ @attribute_name +'%'

        if @indexed = 0 and @new_indexed = 1
        begin
          exec qp_add_index @base_table_name, @new_attribute_name
          exec qp_add_index @table_name, @new_attribute_name
        end
      set @i = @i + 1
    end
  end
END
GO

ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] DROP [DF_CONTENT_ATTRIBUTE_MULTILINGUAL]
GO
ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] DROP [FK_CONTENT_ATTRIBUTE_MLANGUAGE_ID]
GO
ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] DROP COLUMN [MULTILINGUAL]
GO
ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] DROP COLUMN [PARENT_CONTENT_ATTRIBUTE_ID]
GO
ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] DROP COLUMN [MLANGUAGE_ID]
GO
DROP TABLE multilingual
GO

declare @globalize_tab_id numeric
select @globalize_tab_id = tab_id from tabs where tab_name = 'Globalization'

declare @new_lang_tab_id numeric
select @new_lang_tab_id = tab_id from tabs where tab_name = 'New Language'

declare @edit_lang_tab_id numeric
select @edit_lang_tab_id =  tab_id from tabs where tab_name = 'Language Info'

delete from buttons where location_tab_id in (@globalize_tab_id, @new_lang_tab_id, @edit_lang_tab_id)
delete from toolbar_buttons where location_tab_id in (@globalize_tab_id, @new_lang_tab_id, @edit_lang_tab_id)
delete from tabs where tab_id in (@globalize_tab_id, @new_lang_tab_id, @edit_lang_tab_id)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.4', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.4 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.5
-- Parallel Workflow (Part 1)
-- **************************************

alter table user_group add [use_parallel_workflow] bit not null constraint [df_user_group_use_parallel_workflow] default (0)
GO

CREATE TABLE [dbo].[WAITING_FOR_APPROVAL](
  [CONTENT_ITEM_ID] [numeric](18, 0) NOT NULL,
  [USER_ID] [numeric](18, 0) NOT NULL,
  [STATUS_TYPE_ID] numeric (18,0) NOT NULL
 CONSTRAINT [PK_WAITING_FOR_APPROVAL] PRIMARY KEY CLUSTERED
(
  [CONTENT_ITEM_ID] ASC,
  [USER_ID] ASC
)
)
GO
ALTER TABLE [dbo].[WAITING_FOR_APPROVAL]  WITH CHECK ADD  CONSTRAINT [FK_CONTENT_ITEM_ID] FOREIGN KEY([CONTENT_ITEM_ID])
REFERENCES [dbo].[CONTENT_ITEM] ([CONTENT_ITEM_ID])
GO
ALTER TABLE [dbo].[WAITING_FOR_APPROVAL] CHECK CONSTRAINT [FK_CONTENT_ITEM_ID]
GO
ALTER TABLE [dbo].[WAITING_FOR_APPROVAL]  WITH CHECK ADD  CONSTRAINT [FK_USER_ID] FOREIGN KEY([USER_ID])
REFERENCES [dbo].[USERS] ([USER_ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[WAITING_FOR_APPROVAL] CHECK CONSTRAINT [FK_USER_ID]
GO
ALTER TABLE [dbo].[WAITING_FOR_APPROVAL]  WITH CHECK ADD  CONSTRAINT [FK_STATUS_TYPE_ID] FOREIGN KEY([STATUS_TYPE_ID])
REFERENCES [dbo].[STATUS_TYPE] ([STATUS_TYPE_ID])
GO
ALTER TABLE [dbo].[WAITING_FOR_APPROVAL] CHECK CONSTRAINT [FK_STATUS_TYPE_ID]
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.5', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.5 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.6
-- Parallel Workflow (Part 2)
-- **************************************

ALTER TRIGGER [dbo].[tbd_delete_content_item] ON [dbo].[CONTENT_ITEM] INSTEAD OF DELETE
AS
BEGIN

delete waiting_for_approval from waiting_for_approval wa inner join deleted d on wa.content_item_id = d.content_item_id

IF dbo.qp_get_version_control() IS NOT NULL BEGIN
  delete item_to_item_version from item_to_item_version iiv
  inner join content_item_version civ on civ.content_item_version_id = iiv.content_item_version_id
  inner join deleted d on d.content_item_id = civ.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join deleted d on d.content_item_id = iiv.linked_item_id
END

delete item_to_item from item_to_item ii
inner join deleted d on d.content_item_id = ii.r_item_id or d.content_item_id = ii.l_item_id

delete content_data from content_data cd inner join deleted d on cd.content_item_id = d.content_item_id

delete content_item from content_item ci inner join deleted d on ci.content_item_id = d.content_item_id

END

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.6', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.6 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.7
-- Parallel Workflow (Part 3)
-- **************************************

CREATE VIEW [dbo].[content_item_workflow] AS

select ci.content_item_id, ISNULL(awb.workflow_id, cwb.workflow_id) as workflow_id
from content_item ci
left join article_workflow_bind awb on ci.content_item_id = awb.content_item_id
left join content_workflow_bind cwb on ci.content_id = cwb.content_id

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.7', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.7 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.8
-- Parallel Workflow (Part 4)
-- **************************************


alter table content_workflow_bind add [is_async] bit not null constraint [df_content_workflow_bind_is_async] default (1)
GO

alter table article_workflow_bind add [is_async] bit not null constraint [df_article_workflow_bind_is_async] default (1)
GO

update content_workflow_bind
set is_async = c.async_workflow
from content_workflow_bind cwb
inner join content c on cwb.content_id = c.content_id
GO

ALTER VIEW [dbo].[content_item_workflow] AS
select ci.content_item_id, ISNULL(awb.workflow_id, cwb.workflow_id) as workflow_id, ISNULL(awb.is_async, cwb.is_async) as is_async
from content_item ci
left join article_workflow_bind awb on ci.content_item_id = awb.content_item_id
left join content_workflow_bind cwb on ci.content_id = cwb.content_id
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.8', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.8 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.9
-- Parallel Workflow (Part 5)
-- **************************************

ALTER VIEW [dbo].[content_item_workflow] AS

select ci.content_item_id, ci.content_id, ISNULL(awb.workflow_id, cwb.workflow_id) as workflow_id, ISNULL(awb.is_async, cwb.is_async) as is_async
from content_item ci
left join article_workflow_bind awb on ci.content_item_id = awb.content_item_id
left join content_workflow_bind cwb on ci.content_id = cwb.content_id
GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.9', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.9 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.10
-- Parallel Workflow (Part 5)
-- **************************************

ALTER VIEW [dbo].[content_item_workflow] AS
select
ci.content_item_id, ci.content_id, ISNULL(awb.workflow_id, cwb.workflow_id) as workflow_id, ISNULL(awb.is_async, cwb.is_async) as is_async, CASE WHEN awb.workflow_id IS NULL THEN 0 ELSE 1 END as article_worfklow
from content_item ci
left join article_workflow_bind awb on ci.content_item_id = awb.content_item_id
left join content_workflow_bind cwb on ci.content_id = cwb.content_id
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.10', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.10 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.11
-- Article Workflow + qp_latestApproval MTS Optimization
-- **************************************

ALTER     PROCEDURE [dbo].[qp_latestApproval]
@user_id numeric
AS
DECLARE @temp table (rownum int IDENTITY (1, 1) Primary key NOT NULL,content_item_id NUMERIC, content_id  NUMERIC, modified DATETIME, site_id INT, site_name NVARCHAR (100), archive BIT)
declare @ids table(content_item_id NUMERIC)
DECLARE @sites table (rownum int IDENTITY (1, 1) Primary key NOT NULL,site_id INT)
DECLARE @site NUMERIC, @content_id NUMERIC, @content_item_id NUMERIC, @titleName NVARCHAR (200), @title NVARCHAR (200), @sql nvarchar(2000)
DECLARE @RowCnt int
DECLARE @MaxRows int
select @RowCnt = 1

insert into @sites(site_id) select * from qp_sites_list_ids(@user_id, 1)


select @MaxRows=count(*) from @sites
while @RowCnt <= @MaxRows
begin
  select @site = site_id
  from @sites
  where rownum = @RowCnt

insert into @temp(content_item_id, modified)
select distinct top 5 ch.content_item_id, max(ch.status_history_date)
from content_item_status_history ch with(nolock)
inner join content_item_workflow ciw on ch.content_item_id = ciw.content_item_id
inner join content c on ciw.content_id = c.content_id
where c.site_id = @site and user_id = @user_id and ch.status_type_id is not null
and datediff(d, ch.status_history_date, getdate()) < 30
group by ch.content_item_id
order by max(ch.status_history_date) desc

    Select @RowCnt = @RowCnt + 1
END

SELECT s.site_name, ci.archive, c.site_id, c.content_id, dbo.qp_get_article_title_func(ci.content_item_id, ci.content_id) as title, t.content_item_id, t.modified from @temp t
inner join content_item ci on ci.content_item_id = t.content_item_id
inner join content c on ci.content_id = c.content_id
inner join site s on s.site_id = c.site_id

GO


ALTER      PROCEDURE [dbo].[qp_approvalArticles]
@user_id numeric
AS
DECLARE @temp table (rownum int IDENTITY (1, 1) Primary key NOT NULL,content_item_id NUMERIC, content_id  NUMERIC, modified DATETIME, site_id INT, site_name NVARCHAR (100), title NVARCHAR (200), archive BIT )
DECLARE @sites table (rownum int IDENTITY (1, 1) Primary key NOT NULL, site_id INT)
DECLARE @site NUMERIC, @content_id NUMERIC, @content_item_id NUMERIC, @titleName NVARCHAR (200), @title NVARCHAR (200), @sql nvarchar(2000)
DECLARE @RowCnt int
DECLARE @MaxRows int
select @RowCnt = 1

insert into @sites(site_id) select * from qp_sites_list_ids(@user_id, 1)

select @MaxRows=count(*) from @sites
while @RowCnt <= @MaxRows
begin
  select @site = site_id
  from @sites
  where rownum = @RowCnt

  INSERT INTO @temp
  SELECT ci.content_item_id, c.content_id, ci.modified, s.site_id, s.site_name, dbo.qp_get_article_title_func(ci.content_item_id, c.content_id) title, cast(archive as bit) archive FROM content c
  INNER JOIN content_item AS ci ON c.content_id = ci.content_id
  INNER JOIN site s ON s.site_id = c.site_id
  INNER JOIN content_item_workflow ciw ON ci.content_item_id = ciw.content_item_id
  INNER JOIN workflow_rules as wr on ciw.workflow_id = wr.workflow_id AND ci.status_type_id = wr.successor_status_id
  INNER JOIN workflow_rules as wr2 on wr.workflow_id = wr2.workflow_id
  WHERE wr2.rule_order = wr.rule_order + 1 AND s.site_id = @site AND
      (wr2.user_id=@user_id OR wr2.group_id IN (
      SELECT group_id FROM user_group_bind WHERE user_id=@user_id))

    Select @RowCnt = @RowCnt + 1
END

SELECT * from @temp
GO

ALTER TRIGGER [dbo].[td_content_and_article_workflow_bind]
ON [dbo].[workflow]
FOR DELETE
AS
DELETE content_workflow_bind FROM content_workflow_bind cwb inner join deleted d on cwb.workflow_id = d.workflow_id
DELETE article_workflow_bind FROM article_workflow_bind awb inner join deleted d on awb.workflow_id = d.workflow_id
DELETE waiting_for_approval from waiting_for_approval wa
inner join content_item_workflow ciw on wa.content_item_id = ciw.content_item_id
inner join deleted d on ciw.workflow_id = d.workflow_id
GO

ALTER TRIGGER [dbo].[tu_update_item] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
begin
  if not update(locked_by) and not update(not_for_replication)
  begin
    declare @content_id numeric , @content_item_id numeric, @last_modified_by numeric, @modified datetime, @created datetime, @status_type_id numeric, @visible numeric, @archive numeric
    declare @char_content_id nvarchar(10), @char_content_item_id nvarchar(10)
    declare @sql nvarchar(2000), @nsql nvarchar(4000)
    declare @async_string varchar(20), @table_name varchar(25), @is_target_table_async bit
    declare @async_id numeric, @item_exists bit
    declare @workflow_id numeric, @is_async NUMERIC
    declare @i numeric, @count numeric

    DECLARE @ci table (
      id numeric identity(1,1) primary key,
      content_item_id numeric,
      content_id numeric,
      workflow_id numeric,
      is_async numeric
    )

    insert into @ci(content_item_id, content_id, workflow_id, is_async)
      select i.content_item_id, i.content_id, ciw.workflow_id, ciw.is_async
      FROM inserted AS i
      INNER JOIN content AS c ON i.content_id = c.content_id
      LEFT OUTER JOIN content_item_workflow ciw on i.content_item_id = ciw.content_item_id
      where i.not_for_replication = 0 and c.virtual_type = 0
    select @count = count(id) from @ci

    set @i = 1
    while @i < @count + 1
    begin
      select
        @content_item_id = content_item_id, @content_id = content_id,
        @workflow_id = workflow_id, @is_async = is_async
        from @ci where id = @i

      select @modified = modified, @created = created, @status_type_id = status_type_id,
        @archive = archive, @visible = visible, @last_modified_by = last_modified_by
        from content_item where content_item_id = @content_item_id

      set @char_content_item_id = convert(nvarchar, @content_item_id)
      set @char_content_id = convert(nvarchar, @content_id)

      exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

      if @is_target_table_async = 1
      begin
        exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out
        if @item_exists = 0
        begin
          exec qp_get_insert_item_sql @table_name, @content_item_id, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out, @created = @created, @modified = @modified
          print @sql
          exec sp_executesql @sql
        end
      end

      exec qp_get_update_item_sql @table_name, @content_item_id, @modified, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out
      print @sql
      exec sp_executesql @sql

      if @is_target_table_async = 1 and (update(archive) or update(visible)) begin
        set @table_name = 'content_' + @char_content_id
        exec qp_get_update_flags_sql @table_name, @content_item_id, @visible, @archive, @sql = @sql out
        exec sp_executesql @sql
      end

      if @is_target_table_async = 0
      begin
        set @table_name = 'content_' + @char_content_id + '_ASYNC'
        exec qp_get_delete_item_sql @table_name, @content_item_id, @sql = @sql out
        exec sp_executesql @sql
      end
      set @i = @i + 1
    end
  end
end
GO

ALTER TRIGGER [dbo].[tiu_content_fill] ON [dbo].[CONTENT_DATA] FOR INSERT, UPDATE AS
BEGIN
  set nocount on
  IF EXISTS(select content_data_id from inserted where not_for_replication = 0)
  BEGIN
    IF NOT (UPDATE(not_for_replication) AND EXISTS(select content_data_id from deleted))
    BEGIN
      DECLARE @attribute_id NUMERIC, @attribute_type_id NUMERIC, @attribute_size NUMERIC, @default_value NVARCHAR(255), @attribute_name NVARCHAR(255)
      DECLARE @content_item_id NUMERIC, @content_id NUMERIC
      DECLARE @workflow_id NUMERIC, @is_async NUMERIC
      DECLARE @async_string varchar(10), @is_target_table_async bit, @table_name nvarchar(25)
      DECLARE @sql NVARCHAR(4000)
      DECLARE @i numeric, @count numeric

      DECLARE @cd table (
        id numeric identity(1,1) primary key,
        attribute_id numeric,
        attribute_name nvarchar(255),
        attribute_type_id numeric,
        attribute_size numeric,
        default_value nvarchar(255),
        content_item_id numeric,
        content_id numeric,
        workflow_id numeric,
        is_async numeric
      )

      insert into @cd(attribute_id, attribute_name, attribute_type_id, attribute_size, default_value, content_item_id, content_id, workflow_id, is_async)
        select i.attribute_id, ca.attribute_name, ca.attribute_type_id, ca.attribute_size, ca.default_value, i.content_item_id, ci.content_id, ciw.workflow_id, ciw.is_async
        FROM inserted AS i
        INNER JOIN content_item AS ci ON ci.content_item_id = i.content_item_id
        INNER JOIN content_attribute AS ca ON ca.attribute_id = i.attribute_id
        INNER JOIN content AS c ON c.content_id = ci.content_id
        LEFT OUTER JOIN content_item_workflow ciw on ci.content_item_id = ciw.content_item_id
        WHERE i.not_for_replication = 0 and c.virtual_type = 0
      select @count = count(id) from @cd

      set @i = 1
      while @i < @count + 1
      begin
        select
          @attribute_id = attribute_id, @attribute_name = attribute_name, @attribute_type_id = attribute_type_id, @attribute_size = attribute_size, @default_value = default_value,
          @content_item_id = content_item_id, @content_id = content_id,
          @workflow_id = workflow_id, @is_async = is_async
          from @cd where id = @i
          exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

          exec qp_get_update_cell_sql @table_name, @content_item_id, @attribute_id, @attribute_type_id, @attribute_size, @default_value, @attribute_name, @sql = @sql out
          exec(@sql)

        set @i = @i + 1
      end --while
    end --if
  end --if
END
GO

ALTER PROCEDURE [dbo].[qp_replicate]
@content_item_id numeric,
@debug bit = 0
AS
BEGIN
  set nocount on

  declare @sql nvarchar(4000), @sql_piece nvarchar(500)
  declare @source_column nvarchar(10), @table_name nvarchar(25)

  declare @attribute_name nvarchar(255), @attribute_type_id numeric, @attribute_id numeric, @attribute_size numeric, @default_value nvarchar(255)

  declare @content_id numeric, @virtual_type numeric
  declare @workflow_id numeric, @is_async numeric, @is_target_table_async bit

  declare @status_type_id numeric, @visible numeric, @archive numeric
  declare @last_modified_by numeric, @created datetime, @modified datetime

  declare @item_exists bit

  declare @i numeric, @count numeric -- cycle variables

  /* Replicate content_item */

  select
    @status_type_id = ci.status_type_id, @visible = ci.visible, @archive = ci.archive,
    @last_modified_by = ci.last_modified_by, @created = ci.created, @modified = ci.modified,
    @content_id = c.content_id, @workflow_id = ciw.workflow_id, @is_async = ciw.is_async
    from content_item ci
    inner join content c on ci.content_id = c.content_id
    left outer join content_item_workflow ciw on ci.content_item_id = ciw.content_item_id
    where ci.content_item_id = @content_item_id


  exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

  exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out

  if @item_exists = 0 begin
    exec qp_get_insert_item_sql @table_name, @content_item_id, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out, @created = @created, @modified = @modified
    if @debug = 0
      exec sp_executesql @sql
    else
      print(@sql)
  end
  else begin
    exec qp_get_update_item_sql @table_name, @content_item_id, @modified, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out
    if @debug = 0
      exec sp_executesql @sql
    else
      print(@sql)
  end

  /* Replicate content_data */

  /* get attribute list */

  declare @ca table (
    number int identity(1,1) primary key,
    attribute_name nvarchar(255),
    attribute_id numeric,
    attribute_type_id numeric,
    attribute_size numeric,
    default_value nvarchar(255)
  )

  insert into @ca (attribute_name, attribute_id, attribute_type_id, attribute_size, default_value)
  select attribute_name, attribute_id, attribute_type_id, attribute_size, default_value
  from content_attribute where content_id = @content_id

  select @count = count(attribute_id) from @ca

  set @i = 1
  set @sql = ''

  /* collect dynamic sql for each attribute */
  while @i < @count + 1
  begin
    if @sql <> ''
      set @sql = @sql + ';'

    select @attribute_name = attribute_name, @attribute_id = attribute_id, @attribute_type_id = attribute_type_id, @attribute_size = attribute_size, @default_value = default_value
    from @ca where number = @i

    exec qp_get_update_cell_sql @table_name, @content_item_id, @attribute_id, @attribute_type_id, @attribute_size, @default_value, @attribute_name, @sql = @sql_piece out

    if len(@sql) + len(@sql_piece) > 4000
    begin
      if @debug = 0
        exec sp_executesql @sql
      else
        print(@sql)
      set @sql = @sql_piece
    end
    else
      set @sql = @sql + @sql_piece
    set @i = @i + 1
  end

  /* execute collected sql */

  if @debug = 0
    exec sp_executesql @sql
  else
    print(@sql)
  update content_item set not_for_replication = 0 where content_item_id = @content_item_id
END
GO
exec qp_delete_constraint 'content', 'async_workflow'
GO
exec qp_delete_default 'content', 'async_workflow'
GO
ALTER TABLE CONTENT DROP COLUMN async_workflow
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.11', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.11 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.12
-- Parallel Workflow (Part 6)
-- **************************************

ALTER VIEW [dbo].[content_item_workflow] AS
select
ci.content_item_id, ci.content_id, CASE WHEN awb.content_item_id IS NOT NULL THEN awb.workflow_id ELSE cwb.workflow_id END as workflow_id, ISNULL(awb.is_async, cwb.is_async) as is_async, CASE WHEN awb.content_item_id IS NULL THEN 0 ELSE 1 END as article_worfklow
from content_item ci
left join article_workflow_bind awb on ci.content_item_id = awb.content_item_id
left join content_workflow_bind cwb on ci.content_id = cwb.content_id
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.12', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.12 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.6.2.13
-- Workflow
-- **************************************

alter table workflow add [apply_by_default] bit not null constraint [df_workflow_apply_by_default] default (0)
GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.13', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.13 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.6.2.14
-- Audit Trail
-- **************************************

update system_status_type set description = null
update system_status_type set name = 'Clear Log' where id = 1
update system_status_type set name = 'Create Version' where id = 2
update system_status_type set name = 'Remove Version' where id = 3
update system_status_type set name = 'Restore Version' where id = 4
update system_status_type set name = 'Clear All Versions' where id = 5
update system_status_type set name = 'Add Permissions' where id = 6
update system_status_type set name = 'Change Permissions' where id = 7
update system_status_type set name = 'Remove Permissions' where id = 8
update system_status_type set name = 'Promoting By Workflow' where id = 9
update system_status_type set name = 'Demoting By Workflow' where id = 10
update system_status_type set name = 'Forced Demoting' where id = 11
GO
insert into system_status_type(id, name) values (12, 'Partial Approving')
insert into system_status_type(id, name) values (13, 'Partial Cancelling')
GO
update system_status_type set name = 'Partial Promoting' where id = 12
update system_status_type set name = 'Partial Demoting' where id = 13
GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.14', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.14 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.6.2.15
-- Parallel Workflow
-- **************************************

ALTER TABLE notifications ADD
for_status_partially_changed BIT NOT NULL constraint [df_notifications_for_status_partially_changed] default (0)
GO
ALTER TABLE notifications_sent ADD
event_txt2 nvarchar(50) NULL
GO
update notifications_sent set event_txt2 = event_txt
GO
ALTER TABLE notifications_sent DROP COLUMN event_txt
GO
exec sp_rename 'notifications_sent.event_txt2', 'event_txt'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.15', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.15 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.16
-- Parallel Workflow (misspelling)
-- **************************************

ALTER VIEW [dbo].[content_item_workflow] AS
select
ci.content_item_id, ci.content_id, CASE WHEN awb.content_item_id IS NOT NULL THEN awb.workflow_id ELSE cwb.workflow_id END as workflow_id, ISNULL(awb.is_async, cwb.is_async) as is_async, CASE WHEN awb.content_item_id IS NULL THEN 0 ELSE 1 END as article_workflow
from content_item ci
left join article_workflow_bind awb on ci.content_item_id = awb.content_item_id
left join content_workflow_bind cwb on ci.content_id = cwb.content_id
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.16', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.16 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.17
-- Translations
-- **************************************
exec qp_update_translations 'parallel approving', 'параллельное утверждение'
exec qp_update_translations 'Apply Rules By Default', 'Применять правила по умолчанию'
exec qp_update_translations 'Use Parallel Workflow', 'Использовать параллельный Workflow'
exec qp_update_translations 'Clear Log', 'Очистить лог'
exec qp_update_translations 'Create Version', 'Создание версии'
exec qp_update_translations 'Remove Version', 'Удаление версии'
exec qp_update_translations 'Restore Version', 'Восстановление версии'
exec qp_update_translations 'Clear All Versions', 'Удаление всех версий'
exec qp_update_translations 'Add Permissions', 'Добавление прав доступа'
exec qp_update_translations 'Change Permissions', 'Изменение прав доступа'
exec qp_update_translations 'Remove Permissions', 'Удаление прав доступа'
exec qp_update_translations 'Promoting By Workflow', 'Повышение статуса по Workflow'
exec qp_update_translations 'Demoting By Workflow', 'Понижение статуса по Workflow'
exec qp_update_translations 'Forced Demoting', 'Принудительное понижение статуса'
exec qp_update_translations 'Partial Approving', 'Частичное утверждение'
exec qp_update_translations 'Partial Cancelling', 'Частичная отмена'
exec qp_update_translations 'Partial Promoting', 'Частичное повышение статуса'
exec qp_update_translations 'Partial Demoting', 'Частичное понижение статуса'
exec qp_update_translations 'Use Only In Conjunction With', 'Использовать только совместно с'
exec qp_update_translations 'Warning! This notificaton was generated automatically. Upon changes in its associated workflow, the notification and the object format that it uses may be deleted', 'Внимание! Это уведомление создано автоматически. При изменениях в связанном Workflow, уведомление и соответствующий формат объекта могут быть удалены!'
exec qp_update_translations 'While updating the article status will be demoted', 'При обновлении статьи статус будет понижен'
exec qp_update_translations 'Forced Status Demoting', 'Принудительное понижение статуса'
exec qp_update_translations 'Comments', 'Комментарии'
exec qp_update_translations 'Comments From', 'Комментарии от'
exec qp_update_translations 'On Status Partially Changed', 'При частичном изменении статуса'
exec qp_update_translations 'From Default Name', 'От имени по умолчанию'
exec qp_update_translations 'From Name (optional)', 'От имени (опционально)'
exec qp_update_translations 'From User Email Address', 'От e-mail адреса пользователя'
exec qp_update_translations 'From Email Address', 'От e-mail адреса'
exec qp_update_translations 'Notification From', 'Уведомление от'
exec qp_update_translations 'Please enter notification name', 'Пожалуйста, введите название уведомления'
exec qp_update_translations 'Please select notification sender', 'Пожалуйста, выберите отправителя'
exec qp_update_translations 'Please select notification recipient', 'Пожалуйста, выберите получателя'
exec qp_update_translations 'Everyone in History', 'Все пользователи из истории изменений'
exec qp_update_translations 'Status Promoting', 'Повышение статуса'
exec qp_update_translations 'Status Demoting', 'Понижение статуса'
exec qp_update_translations 'Status To Be Achieved', 'Следующий статус'
exec qp_update_translations 'Waiting For Approval', 'Ожидается утверждение'
exec qp_update_translations 'Already Approved', 'Уже утвердили'
exec qp_update_translations 'System Status', 'Системный статус'
exec qp_update_translations 'Error occurred while data was loading.', 'Во время загрузки данных произошла ошибка.'
exec qp_update_translations 'Field value must be an integer!', 'Значение поля должно быть целым числом!'
exec qp_update_translations 'Unique constraint violation! Please specify other values. Fields:', 'Нарушение уникальности! Пожалуйста, задайте другие значения. Поля:'
exec qp_update_translations 'Split Article', 'Расщеплять статью'
exec qp_update_translations ' for this workflow step', ' на данном этапе workflow'
exec qp_update_translations 'You are not a workflow member<@0@>.  You cannot <@1@>. Please, contact backend administrator.', 'Вы не являетесь членом workflow<@0@>. Вы не можете <@1@>. Пожалуйста, свяжитесь с администратором бэкенда.'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.17', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.17 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.18
-- DB Architecture fixes
-- **************************************

exec qp_drop_existing 'qp_create_fields_for_multilingual', 'IsProcedure'
GO
exec qp_drop_existing 'ManageMLFieldsForVirtualContents', 'IsProcedure'
GO
exec qp_drop_existing 'qp_delete_fields_for_multilingual', 'IsProcedure'
GO
exec qp_drop_existing 'qp_schedule_check_date', 'IsProcedure'
GO
exec qp_drop_existing 'qp_schedule_update', 'IsProcedure'
GO
exec qp_drop_existing 'qp_schedule_update_today', 'IsProcedure'
GO
drop index object_format_version.ix_object_format_version_id
GO
ALTER procedure [dbo].[qp_delete_constraint]
@table_name nvarchar(255),
@column_name nvarchar(255)
as
declare @constraint_name nvarchar(255)
select @constraint_name = constraint_name from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE where table_name = @table_name and column_name = @column_name
and constraint_name not in (select constraint_name from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE where table_name = @table_name group by constraint_name having count(*) > 1)
if @constraint_name <> ''
exec('ALTER TABLE ' + @table_name + ' DROP CONSTRAINT '+ @constraint_name)
GO
exec qp_delete_constraint 'buttons', 'location_tab_id'
GO
exec qp_delete_constraint 'buttons', 'location_tab_id'
GO
exec qp_delete_constraint 'user_to_panel', 'user_id'
GO
exec qp_delete_constraint 'user_to_panel', 'user_id'
GO
exec qp_delete_constraint 'user_to_panel', 'panel_id'
GO
exec qp_delete_constraint 'user_to_panel', 'panel_id'
GO
ALTER TABLE BUTTONS ADD CONSTRAINT FK_BUTTONS_LOCATION_TAB_ID FOREIGN KEY (location_tab_id) REFERENCES TABS (tab_id)
GO
ALTER TABLE USER_TO_PANEL ADD CONSTRAINT FK_USER_TO_PANEL_USER_ID FOREIGN KEY (user_id) REFERENCES USERS (user_id)
GO
ALTER TABLE USER_TO_PANEL ADD CONSTRAINT FK_USER_TO_PANEL_PANEL_ID FOREIGN KEY (panel_id) REFERENCES TODAY_PANELS (panel_id)
GO

exec qp_delete_constraint 'SITE', 'stage_edit_field_border'
GO
exec qp_delete_constraint 'SITE', 'stage_edit_object_border'
GO
exec qp_delete_constraint 'CONTENT', 'virtual_type'
GO

ALTER TABLE SITE ADD CONSTRAINT CK_SITE_STAGE_EDIT_FIELD_BORDER CHECK (stage_edit_field_border = 0 OR stage_edit_field_border = 1 OR stage_edit_field_border = 2)
GO
ALTER TABLE SITE ADD CONSTRAINT CK_SITE_STAGE_EDIT_OBJECT_BORDER CHECK (stage_edit_object_border = 0 OR stage_edit_object_border = 1 OR stage_edit_object_border = 2)
GO
ALTER TABLE CONTENT ADD CONSTRAINT CK_CONTENT_VIRTUAL_TYPE CHECK (virtual_type = 0 OR virtual_type = 1 OR virtual_type = 2 or virtual_type = 3)
GO
exec qp_delete_default 'sessions_log', 'visual_editor_url'
GO
exec qp_delete_default 'system_status_type', 'disable_clear'
GO
ALTER TABLE BUTTON_TRACE ADD CONSTRAINT U_BUTTON_TRACE UNIQUE CLUSTERED (user_id, button_id, tbutton_id, activated)
GO
DROP INDEX CONTENT_ITEM_ACCESS.PERMISSION_LEVEL_IDX
GO
ALTER TABLE CONTENT_ITEM_ACCESS ADD CONSTRAINT U_CONTENT_ITEM_ACCESS UNIQUE CLUSTERED (content_item_id, user_id, group_id)
GO
ALTER TABLE WORKFLOW_ACCESS ADD CONSTRAINT U_WORKFLOW_ACCESS UNIQUE CLUSTERED (workflow_id, user_id, group_id)
GO
ALTER TABLE TAB_ACCESS ADD CONSTRAINT U_TAB_ACCESS UNIQUE CLUSTERED (tab_id, user_id, group_id)
GO

ALTER TABLE DEVELOPER ADD CONSTRAINT PK_DEVELOPER PRIMARY KEY CLUSTERED (name)
GO
DROP INDEX NOTIFICATIONS_SENT.IX_USER_ID
GO
ALTER TABLE NOTIFICATIONS_SENT ADD CONSTRAINT PK_NOTIFICATIONS_SENT PRIMARY KEY CLUSTERED (user_id, sent)
GO

CREATE TABLE [dbo].[SYSTEM_INFO_COPY](
  [field_name] [nvarchar](255) NULL,
  [field_value] [nvarchar](255) NULL,
  [copyright] [nvarchar](500) NULL
)
GO
truncate table system_info_copy
GO
insert into SYSTEM_INFO_COPY
select distinct * from system_info
GO
truncate table system_info
GO

insert into system_info
select * from system_info_copy
GO

drop table system_info_copy
GO

ALTER TABLE SYSTEM_INFO ADD CONSTRAINT U_SYSTEM_INFO UNIQUE CLUSTERED (field_name, field_value)
GO

alter table object_values disable trigger tiud_values_format_modified

CREATE TABLE [dbo].[OBJECT_VALUES_COPY](
  ID numeric (18,0) IDENTITY NOT NULL,
  [OBJECT_ID] [numeric](18, 0) NOT NULL,
  [VARIABLE_NAME] [nvarchar](255) NOT NULL,
  [VARIABLE_VALUE] [nvarchar](255) NOT NULL
) ON [PRIMARY]

GO

insert into object_values_copy(object_id, variable_name, variable_value)
select * from object_values
GO
truncate table object_values
GO
delete ovc1 from object_values_copy ovc1 inner join object_values_copy ovc2
on ovc1.object_id = ovc2.object_id and ovc1.variable_name = ovc2.variable_name and ovc1.id > ovc2.id
GO
insert into object_values
select object_id, variable_name, variable_value from object_values_copy
GO
drop table object_values_copy
GO
alter table object_values enable trigger tiud_values_format_modified
GO

ALTER TABLE OBJECT_VALUES ADD CONSTRAINT PK_OBJECT_VALUES PRIMARY KEY CLUSTERED (object_id, variable_name)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.18', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.18 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.19
-- Translations
-- **************************************

exec qp_update_translations 'One of the selected articles has related ones. Removing can cause errors on the site. Continue?',
'На одну из выбранных статей ссылаются другие статьи. Ее удаление может привести к ошибкам на сайте. Продолжить?'

exec qp_update_translations 'There are some articles related to the current one. Removing can cause errors on the site. Continue?',
'На текущую статью ссылаются другие статьи. Ее удаление может привести к ошибкам на сайте. Продолжить?'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.19', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.19 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.20
-- Workflow Rules for Home
-- **************************************
create view dbo.full_workflow_rules as
select * from workflow_rules
union all
select 0, 1, null, 0, null, null, status_type_id, '(no comments)', workflow_id
from workflow w inner join
status_type st on w.site_id = st.site_id
where status_type_name = 'None'
GO

ALTER      PROCEDURE [dbo].[qp_approvalArticles]
@user_id numeric
AS

SELECT ci.content_item_id, c.content_id, ci.modified, s.site_id, s.site_name, dbo.qp_get_article_title_func(ci.content_item_id, c.content_id) title, cast(archive as bit) archive
FROM content_item_workflow ciw
INNER JOIN content_item ci ON ci.content_item_id = ciw.content_item_id
INNER JOIN full_workflow_rules wr on ciw.workflow_id = wr.workflow_id AND ci.status_type_id = wr.successor_status_id
INNER JOIN full_workflow_rules wr2 on wr.workflow_id = wr2.workflow_id AND wr2.rule_order = wr.rule_order + 1
INNER JOIN content c ON ci.content_id = c.content_id
INNER JOIN site s ON c.site_id = s.site_id
WHERE (
  wr2.user_id = @user_id
  OR wr2.group_id IN (SELECT group_id FROM user_group_bind WHERE user_id=@user_id)
)
AND (
  ci.content_item_id not in (select content_item_id from waiting_for_approval)
  OR ci.content_item_id in (select content_item_id from waiting_for_approval where user_id = @user_id)
)
ORDER BY c.site_id, ciw.content_item_id
GO

ALTER     PROCEDURE [dbo].[qp_latestApproval]
@user_id numeric
AS
DECLARE @temp table (rownum int IDENTITY (1, 1) Primary key NOT NULL,content_item_id NUMERIC, content_id  NUMERIC, modified DATETIME, site_id INT, site_name NVARCHAR (100), archive BIT)
declare @ids table(content_item_id NUMERIC)
DECLARE @sites table (rownum int IDENTITY (1, 1) Primary key NOT NULL,site_id INT)
DECLARE @site NUMERIC, @content_id NUMERIC, @content_item_id NUMERIC, @titleName NVARCHAR (200), @title NVARCHAR (200), @sql nvarchar(2000)
DECLARE @RowCnt int
DECLARE @MaxRows int
select @RowCnt = 1

insert into @sites(site_id) select * from qp_sites_list_ids(@user_id, 1)


select @MaxRows=count(*) from @sites
while @RowCnt <= @MaxRows
begin
  select @site = site_id
  from @sites
  where rownum = @RowCnt

insert into @temp(content_item_id, modified)
select distinct top 5 ch.content_item_id, max(ch.status_history_date)
from content_item_status_history ch with(nolock)
inner join content_item ci on ch.content_item_id = ci.content_item_id
inner join content c on ci.content_id = c.content_id
where c.site_id = @site and user_id = @user_id
and ch.system_status_type_id in (9, 12)
group by ch.content_item_id
order by max(ch.status_history_date) desc

    Select @RowCnt = @RowCnt + 1
END

SELECT s.site_name, ci.archive, c.site_id, c.content_id, dbo.qp_get_article_title_func(ci.content_item_id, ci.content_id) as title, t.content_item_id, t.modified from @temp t
inner join content_item ci on ci.content_item_id = t.content_item_id
inner join content c on ci.content_id = c.content_id
inner join site s on s.site_id = c.site_id
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.20', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.20 completed'
GO
-- **************************************
-- Pavel Celut
-- version 7.6.2.21
-- Some translations
-- **************************************

exec qp_update_translations 'Saving/Updating', 'Сохранение/Обновление'
exec qp_update_translations 'Locking/Unlocking', 'Блокировка/Разблокировка'
exec qp_update_translations 'Workflow Rule will be applied, overriding Forced Status Demoting setting.', 'Будет применено правило Workflow, не смотря на установку принудительного понижения статуса'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.21', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.21 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.22
-- Missed cascade delete
-- **************************************

exec qp_delete_constraint 'user_to_panel', 'user_id'
GO
exec qp_delete_constraint 'user_to_panel', 'panel_id'
GO
ALTER TABLE USER_TO_PANEL ADD CONSTRAINT FK_USER_TO_PANEL_USER_ID FOREIGN KEY (user_id) REFERENCES USERS (user_id) ON DELETE CASCADE
GO
ALTER TABLE USER_TO_PANEL ADD CONSTRAINT FK_USER_TO_PANEL_PANEL_ID FOREIGN KEY (panel_id) REFERENCES TODAY_PANELS (panel_id) ON DELETE CASCADE
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.22', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.22 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.23
-- Fix procedure
-- **************************************
ALTER procedure [dbo].[qp_delete_default]
@table_name nvarchar(255),
@column_name nvarchar(255)
as
declare @constraint_name nvarchar(255)

declare @table_id numeric
select @table_id = id from sysobjects where xtype = 'U ' and name = @table_name

select @constraint_name = name from sysobjects as main inner join sysconstraints as c
on main.id = c.constid where main.xtype = 'D ' and c.id = @table_id and colid in (

select colid from syscolumns c where c.name = @column_name and c.id = @table_id
)

exec('ALTER TABLE ' + @table_name + ' DROP CONSTRAINT '+ @constraint_name)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.23', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.23 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.6.2.24
-- LINQ Integration
-- **************************************

declare @contents_id numeric
declare @button_name nvarchar(30)
set @button_name = 'Assemble Contents'
select @contents_id = tab_id from tabs where tab_name = 'Contents'

if not exists(select * from toolbar_buttons where location_tab_id = @contents_id and button_name = @button_name)
begin
  insert into toolbar_buttons(permission_level_id, location_tab_id, image_disabled, image_enabled, button_name, buttons_order, action_tab_id, always_enabled, action_function)
  values(1, @contents_id, 'images/toolbar/assemble_disabled.gif', 'images/toolbar/assemble.gif', @button_name, 2, @contents_id, 1, 'assembleContents')
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.24', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.24 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.25
-- QUOTED_IDENTIFIER
-- **************************************

SET QUOTED_IDENTIFIER ON
GO

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
alter table content_item disable trigger td_delete_item
alter table content_attribute disable trigger td_content_attribute_clean_empty_links
alter table content_attribute disable trigger td_remove_field
alter table content_attribute disable trigger td_reorder_fields
alter table content_constraint disable trigger td_content_indexes

delete content_item_status_history from content_item_status_history cis
inner join content_item ci on ci.content_item_id = cis.content_item_id
inner join content c on c.content_id = ci.content_id
inner join deleted d on d.site_id = c.site_id

delete content_item from content_item ci
inner join content c on c.content_id = ci.content_id
inner join deleted d on d.site_id = c.site_id

delete content from content c
inner join deleted d on d.site_id = c.site_id

delete page_template from page_template pt
inner join deleted d on d.site_id = pt.site_id

delete site from site s inner join deleted d on s.site_id = d.site_id


alter table content_item enable trigger td_delete_item
alter table content_attribute enable trigger td_content_attribute_clean_empty_links
alter table content_attribute enable trigger td_remove_field
alter table content_attribute enable trigger td_reorder_fields
alter table content_constraint enable trigger td_content_indexes
END

GO

ALTER TRIGGER [dbo].[tbd_delete_content] ON [dbo].[CONTENT] INSTEAD OF DELETE
AS
BEGIN
alter table content_item disable trigger td_delete_item

UPDATE content_attribute SET related_attribute_id = NULL
where related_attribute_id in (
  select attribute_id from content_attribute ca
  inner join deleted d on ca.content_id = d.content_id
)

update content_attribute set link_id = null where link_id in (select link_id from content_link cl
inner join deleted d on cl.content_id = d.content_id)

delete content_to_content from content_to_content cc
inner join deleted d on d.content_id = cc.r_content_id or d.content_id = cc.l_content_id

delete container from container c
inner join deleted d on d.content_id = c.content_id

delete content_form from content_form cf
inner join deleted d on d.content_id = cf.content_id

delete content_item from content_item ci
inner join deleted d on d.content_id = ci.content_id

delete content from content c inner join deleted d on c.content_id = d.content_id

alter table content_item enable trigger td_delete_item
END

GO

ALTER TRIGGER [dbo].[tbd_delete_content_item] ON [dbo].[CONTENT_ITEM] INSTEAD OF DELETE
AS
BEGIN

delete waiting_for_approval from waiting_for_approval wa inner join deleted d on wa.content_item_id = d.content_item_id

IF dbo.qp_get_version_control() IS NOT NULL BEGIN
  delete item_to_item_version from item_to_item_version iiv
  inner join content_item_version civ on civ.content_item_version_id = iiv.content_item_version_id
  inner join deleted d on d.content_item_id = civ.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join deleted d on d.content_item_id = iiv.linked_item_id
END

delete item_to_item from item_to_item ii
inner join deleted d on d.content_item_id = ii.r_item_id or d.content_item_id = ii.l_item_id

delete content_data from content_data cd inner join deleted d on cd.content_item_id = d.content_item_id

delete content_item from content_item ci inner join deleted d on ci.content_item_id = d.content_item_id

END

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.25', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.25 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.6.2.26
-- Explicit notification assembling
-- **************************************

declare @notifications_id numeric
declare @button_name nvarchar(30)
set @button_name = 'Assemble Notification'
select @notifications_id = tab_id from tabs where tab_name = 'Notifications'

if not exists(select * from toolbar_buttons where location_tab_id = @notifications_id and button_name = @button_name)
begin
  insert into toolbar_buttons(permission_level_id, location_tab_id, image_disabled, image_enabled, button_name, buttons_order, action_tab_id, always_enabled, action_function)
  values(1, @notifications_id, 'images/toolbar/assemble_disabled.gif', 'images/toolbar/assemble.gif', @button_name, 2, @notifications_id, 1, 'assembleNotification')
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.26', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.26 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.6.2.27
-- Constraints
-- **************************************


ALTER   PROCEDURE [dbo].[qp_content_constraint_list]
  @constraint_id NUMERIC(18, 0) =0,
  @content_id NUMERIC(18, 0) =0,
  @order_by varchar(256) = 'c.constraint_id'
AS

CREATE TABLE #constraints
(
  [constraint_id] [numeric](18, 0),
   [attribute_names] [nvarchar](512),
  [attribute_ids] [varchar](256),
  [attribute_types] [varchar](256)

)
DECLARE @constraint NUMERIC
DECLARE @attribute  NUMERIC
DECLARE @attribute_names  NVARCHAR(512)
DECLARE @attribute_ids  VARCHAR(256)
DECLARE @attribute_types  VARCHAR(256)
DECLARE @fuffix NVARCHAR(2)
DECLARE ConstraintsCursor CURSOR FOR SELECT constraint_id FROM content_constraint WHERE content_id = @content_id OR constraint_id = @constraint_id
OPEN ConstraintsCursor
FETCH NEXT FROM ConstraintsCursor INTO @constraint
WHILE @@FETCH_STATUS = 0 BEGIN
  DECLARE AttributesCursor CURSOR FOR SELECT attribute_id FROM content_constraint_rule WHERE constraint_id = @constraint
  OPEN AttributesCursor
  set @fuffix= ''
  set @attribute_names = ''
  set @attribute_ids = ''
  set @attribute_types = ''
  FETCH NEXT FROM AttributesCursor INTO @attribute
  WHILE @@FETCH_STATUS = 0 BEGIN
    SELECT @attribute_names = @attribute_names + @fuffix +' ['+ attribute_name +']',
      @attribute_ids = @attribute_ids + @fuffix + cast(attribute_id as varchar), @attribute_types = @attribute_types + @fuffix + cast(attribute_type_id as varchar)
    FROM CONTENT_ATTRIBUTE WHERE attribute_id=@attribute
    set @fuffix= ','
    FETCH NEXT FROM AttributesCursor INTO @attribute
  END
  INSERT INTO #constraints VALUES(@constraint, @attribute_names, @attribute_ids, @attribute_types)
  CLOSE AttributesCursor
  DEALLOCATE AttributesCursor
  FETCH NEXT FROM ConstraintsCursor INTO @constraint
END
CLOSE ConstraintsCursor
DEALLOCATE ConstraintsCursor
DECLARE @strsql varchar(2000)
set @strsql = 'SELECT c.*, tmp.attribute_names, tmp.attribute_ids, tmp.attribute_types FROM #constraints AS tmp
  INNER JOIN content_constraint AS c ON c.constraint_id = tmp.constraint_id'
IF @constraint_id <> 0
  set @strsql = @strsql + ' WHERE tmp.constraint_id ='+ cast(@constraint_id as varchar)
set @strsql = @strsql + ' ORDER BY ' + cast(@order_by as varchar)
exec( @strsql )
DROP TABLE #constraints

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.27', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.27 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.28
-- SQL 2005 fix (SQL 2000 is not supported later)
-- ***********************************************

ALTER  PROCEDURE [dbo].[qp_GetContentPage]
(
  @Select nvarchar(max),
  @From nvarchar(max),
  @Where nvarchar(max),
  @OrderBy nvarchar(max),
  @StartRow int,
  @PageSize int,
  @GetCount bit,
  @TotalRecords int output,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @entity_name varchar(100) = 'content_item',
  @parent_entity_name varchar(100)='',
  @parent_entity_id numeric(18,0)=0,

  @insert_key varchar(200)='<$_security_insert_$>'
)
AS
  SET NOCOUNT ON

----------------------------------
-- First Get the Security Filter
----------------------------------
  DECLARE @SecuritySQL varchar(max)
  SET @SecuritySQL = ''

  if @use_security = 1
  Begin
    EXEC  dbo.qp_GetPermittedItemsAsQuery
        @user_id = @user_id,
        @group_id = @group_id,
                @start_level = @start_level,
        @end_level = @end_level,
                @entity_name = 'content_item',
        @parent_entity_name = @parent_entity_name,
        @parent_entity_id = @parent_entity_id,

        @SQLOut = @SecuritySQL OUTPUT

        SET @From = Replace(@From,@insert_key,@SecuritySQL)
  End

----------------------------------
-- Now for the rest
----------------------------------
  DECLARE @Columns nvarchar(max)
  DECLARE @ColumnName nvarchar(max)
  DECLARE @ColumnOrder nvarchar(4)
  DECLARE @CompareOperator nvarchar(2)
  DECLARE @Pos int
  DECLARE @BracketsPos int
  DECLARE @LoopCount int
  DECLARE @BracketedExpressionInOrderBy bit

  DECLARE @VariableName nvarchar(max)
  DECLARE @VariableDeclarations nvarchar(max)
  DECLARE @VariableAssignments nvarchar(max)
  DECLARE @VariableSubConditions nvarchar(max)
  DECLARE @VariableSubConditions2 nvarchar(max)
  DECLARE @VariableConditions nvarchar(max)
  DECLARE @VariableConditions2 nvarchar(max)
  DECLARE @TemplateConditions nvarchar(max)


        DECLARE @strPageSize nvarchar(300)
        DECLARE @strCountSQL nvarchar(max)

        SET @LoopCount = 0

        IF @StartRow = 0 SET @StartRow = 1
        SET @TotalRecords = -1

        IF @StartRow = 0 Or @StartRow = 1
        BEGIN

          SET @strPageSize = CAST(@PageSize AS nvarchar)
          SET @Select = 'SELECT ' + @Select
          SET @From = ' FROM ' + @From
          IF @Where <> '' SET @Where = ' WHERE ' + @Where
          IF @OrderBy <> '' Set @OrderBy = ' ORDER BY ' + @OrderBy
          EXEC ('SET ROWCOUNT ' + @strPageSize + ';' + @Select + @From + @Where + @OrderBy + ';' + 'SET ROWCOUNT 0;')
          IF @Getcount = 1
          BEGIN
             SET @strCountSQL = N'SELECT @TotalRecords = Count(*) ' + @From + @Where
             exec sp_executesql @strCountSQL, N'@TotalRecords int output', @TotalRecords = @TotalRecords output
          END
          RETURN 0
        END

        IF @OrderBy = ''
        BEGIN
           SET @OrderBy = 'c.content_item_id'
        END

        SET @Columns = @OrderBy

  WHILE(LEN(@Columns) > 0)
  BEGIN
      SET @LoopCount = @LoopCount + 1
    /*
      Get the order-by-expression (i.e., "TableAlias.ColumnName [ASC|DESC]")
      and then remove it from the list
    */
    SET @BracketsPos = CHARINDEX('(', @Columns)
    SET @Pos = CHARINDEX(',', @Columns)
    -- Находим выражение 'IsNull( sel.fieldName, 99.. ) asc', или 'convert(nvarchar(50) , rel_888.[Title]) asc' по скобкам '('
    IF @BracketsPos > 0 AND @BracketsPos < @Pos
    BEGIN
  -- Возводим флаг для последующего ветвления алгоритма
  SET @BracketedExpressionInOrderBy = 1
  -- Если имя ф-ии = convert или qp_abs_time, то оперируем всем выражением, а не только тем что в скобках
  IF CHARINDEX('dbo.qp_abs_time', SUBSTRING(@Columns, 0, @Pos))  > 0
    -- Выделяем ф-ию целиком
    SET @ColumnName = SUBSTRING(@Columns, 0, @Pos)
  ELSE
    BEGIN
    IF CHARINDEX('convert', SUBSTRING(@Columns, 0, @Pos))  > 0
      -- Выделяем ф-ию целиком
      SET @ColumnName = SUBSTRING(@Columns, 0, @Pos)
    ELSE
      -- Иначе выделяем имя поля sel.fieldName
      SET @ColumnName = SUBSTRING(@Columns, @BracketsPos + 1, (@Pos - @BracketsPos) - 1)
    SET @Pos = CHARINDEX(',', @Columns, @Pos + 1)
    END
  IF @Pos = 0
    Set @Pos = LEN(@Columns) + 1
  -- Выделяем 'asc', 'desc', ', rel_888.[Title]) asc' и добавляем к имени поля
  SET @ColumnName = @ColumnName +' '+ SUBSTRING(@Columns, CHARINDEX(')',@Columns) + 1, (@Pos) - CHARINDEX(')',@Columns) - 1)
  SET @Columns = SUBSTRING(@Columns, @Pos + 1, 4000)
    END
    ELSE IF @Pos > 0
    BEGIN
      SET @ColumnName = LEFT(@Columns, @Pos - 1)
      SET @Columns = SUBSTRING(@Columns, @Pos + 1, 4000)
    END
    ELSE
    BEGIN
      SET @ColumnName = @Columns
      SET @Columns = ''
    END

    /*
      Get the sort direction from the order-by-expression so that we
      can determine the comparison operator.
    */
    SET @Pos = CHARINDEX(' ASC', @ColumnName)
    IF @Pos = 0 SET @Pos = CHARINDEX(' DESC', @ColumnName)
    IF @Pos > 0
    BEGIN
      SET @ColumnOrder = RTRIM(SUBSTRING(@ColumnName, @Pos + 1, 4))
      SET @ColumnName = LEFT(@ColumnName, @Pos - 1)
    END
    ELSE
    BEGIN
      SET @ColumnOrder = 'ASC'
    END


                /*
                       Add content_item_id if it's missing
                */
                IF @LoopCount = 1
                BEGIN
                   IF CHARINDEX('content_item_id', @OrderBy) <= 0
                   BEGIN
          DECLARE @content_item_str nvarchar(300)
      Set @content_item_str = 'c.content_item_id '
                      SET @OrderBy = @OrderBy + ','+ @content_item_str + @ColumnOrder
                      IF LEN(@Columns) <> 0 SET @Columns = @Columns + ','
                      SET @Columns = @Columns + @content_item_str + @ColumnOrder
                   END
                END

    /*
      Get the comparison operator based on the sort direction.
    */
    IF @ColumnOrder = 'DESC'
    BEGIN
      SET @CompareOperator = '<'
    END
    ELSE
    BEGIN
      SET @CompareOperator = '>'
    END

    /*
      If this is the last order-by-expression in the list the comparison
      operator also needs to be set for equal values.
    */
    IF LEN(@Columns) = 0
    BEGIN
      SET @CompareOperator = @CompareOperator + '='
    END

    /*
      Remove extra whitespace from the column name
    */
    SET @ColumnName = REPLACE(@ColumnName, CHAR(9), '')  -- Remove tabs
    SET @ColumnName = REPLACE(@ColumnName, CHAR(10), '')  -- Remove line feeds
    SET @ColumnName = REPLACE(@ColumnName, CHAR(13), '')  -- Remove carriage returns
    SET @ColumnName = LTRIM(RTRIM(@ColumnName)) -- Remove leading/trailing spaces

    /*
      Get variable declarations for use in determining the first
      row in the page.
    */
    SET @VariableName = REPLACE(@ColumnName, '.', '_')
    SET @VariableName = REPLACE(@VariableName, ',', '_')
    SET @VariableName = REPLACE(@VariableName, ' ', '_')
    SET @VariableName = REPLACE(@VariableName, '[', '_')
    SET @VariableName = REPLACE(@VariableName, ']', '_')
    SET @VariableName = REPLACE(@VariableName, '(', '_')
    SET @VariableName = REPLACE(@VariableName, ')', '_')
    SET @VariableName = REPLACE(@VariableName, '-', '_')
    SET @VariableName = '@' + @VariableName
    SET @VariableDeclarations = ISNULL(@VariableDeclarations + ', ', '') + @VariableName + ' AS sql_variant'
    SET @VariableAssignments = ISNULL(@VariableAssignments + ', ', '') + @VariableName + ' = ' + @ColumnName

    /*
      Get the where clause that will be used to find the first
      row in the page.
    */
-- Если шаблон уже создан, то заполняем второе условие @VariableConditions2
-- PS необходимо пропустить перую итерацию при создании шаблона, что бы во второе условие
-- непопало вычисляемое выражение
-- (для элементов с нулевым значением вычисляемого выражения)
    IF @BracketedExpressionInOrderBy = 0
    BEGIN
  SET @VariableSubConditions2 = REPLACE(@VariableSubConditions2, '>', '=')
  SET @VariableSubConditions2 = REPLACE(@VariableSubConditions2, '<', '=')
  SET @VariableSubConditions2 = ISNULL(@VariableSubConditions2 + ' AND ', '') +
    'ISNULL(CAST(' + @ColumnName + ' AS sql_variant), '''') ' +
    @CompareOperator + ' ' +
    'ISNULL(' + @VariableName + ', '''')'
  SET @VariableConditions2 = ISNULL(@VariableConditions2 + ' OR ', '') + '(' + @VariableSubConditions2 + ')'
    END
-- Если встретили вычисляемое выражение, то создаём шаблон (предыдущие условия + шаблон),
-- а последующие условия собираем по отдельности в @VariableConditions и @VariableConditions2
-- для последующей вставки в шаблон
-- для элементов с не нулевым значением вычисляемого выражения)
    IF @BracketedExpressionInOrderBy = 1
    BEGIN
  SET @VariableSubConditions = REPLACE(@VariableSubConditions, '>', '=')
  SET @VariableSubConditions = REPLACE(@VariableSubConditions, '<', '=')
  SET @VariableSubConditions = ISNULL('('+ @VariableSubConditions + ') AND ', '')
  SET @TemplateConditions = ISNULL(@VariableConditions + ' OR ', '') + @VariableSubConditions +'(('+ @VariableName +' Is Not Null AND (<@0@> OR ('+ @ColumnName +' Is Null))) OR ('+ @ColumnName +' Is Null AND (<@1@>)))'
  SET @VariableConditions = Null
  SET @VariableSubConditions  = Null
  SET @BracketedExpressionInOrderBy = 0
    END
    SET @VariableSubConditions = REPLACE(@VariableSubConditions, '>', '=')
    SET @VariableSubConditions = REPLACE(@VariableSubConditions, '<', '=')
    SET @VariableSubConditions = ISNULL(@VariableSubConditions + ' AND ', '') +
      'ISNULL(CAST(' + @ColumnName + ' AS sql_variant), '''') ' +
      @CompareOperator + ' ' +
      'ISNULL(' + @VariableName + ', '''')'
    SET @VariableConditions = ISNULL(@VariableConditions + ' OR ', '') + '(' + @VariableSubConditions + ')'
  END
-- Если вычисляемое выражение имело место быть, то собираем шаблон
-- PS если вычисляемое выражение находится в конце OrderBy, то вставляем 1=1
-- для экранации 2-го условия, т.к. следующей итерации не будет
  IF @BracketedExpressionInOrderBy = 0
  BEGIN
  SET @VariableConditions = REPLACE(@TemplateConditions, '<@0@>', @VariableConditions)
  SET @VariableConditions = REPLACE(@VariableConditions, '<@1@>', ISNULL(@VariableConditions2, '1 = 1'))
  END
  /*
    Format @Select, @From, @Where, @OrderBy, etc., for EXEC
  */
  SET @VariableDeclarations = 'DECLARE ' + @VariableDeclarations + CHAR(13) + CHAR(10)
  SET @VariableAssignments = 'SET ROWCOUNT ' + CAST(@StartRow AS nvarchar) + '; ' + CHAR(13) + CHAR(10) + 'SELECT ' + @VariableAssignments + CHAR(13) + CHAR(10)
  SET @Select = 'SET ROWCOUNT ' + CAST(@PageSize AS nvarchar) + '; ' + CHAR(13) + CHAR(10) + 'SELECT ' + @Select + CHAR(13) + CHAR(10)
  SET @From = 'FROM ' + @From + CHAR(13) + CHAR(10)
  IF LEN(@Where) > 0
  BEGIN
    SET @VariableConditions = 'WHERE (' + @Where + ') AND (' + @VariableConditions + ')' + CHAR(13) + CHAR(10)
    SET @Where = 'WHERE ' + @Where + CHAR(13) + CHAR(10)
  END
  ELSE
  BEGIN
    SET @VariableConditions = 'WHERE ' + @VariableConditions + CHAR(13) + CHAR(10)
  END
  SET @OrderBy = 'ORDER BY ' + @OrderBy + CHAR(13) + CHAR(10)

  /*
    Return page and total row count
  */

  SET @strCountSQL = N'SELECT @TotalRecords = Count(*) ' + @From + @Where
  exec sp_executesql @strCountSQL, N'@TotalRecords int output', @TotalRecords = @TotalRecords output

  IF @StartRow <= @TotalRecords
   BEGIN
  EXEC( @VariableDeclarations + @VariableAssignments + @From + @Where + @OrderBy + @Select + @From + @VariableConditions + @OrderBy + ';' + 'SET ROWCOUNT 0;' )
   END

   RETURN 0

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.28', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.28 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.29
-- Get Article Title
-- ***********************************************

ALTER Function [dbo].[qp_get_article_title_func]
(
@content_item_id numeric,
@content_id numeric
)
Returns nvarchar(200)
AS

BEGIN
        declare @titleName NVARCHAR(200)
        set @titleName = null

        Select @titleName = data from content_data where content_item_id = @content_item_id
        and attribute_id in (
                    select top 1 attribute_id from content_attribute
                    WHERE content_id = @content_id AND attribute_name = dbo.qp_get_display_field(@content_id, 1)
        )

        return @titleName
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.29', 'Copyright &copy; 1998-2008 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.29 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.30
-- File/Image field functionality expansion
-- ***********************************************

ALTER TABLE CONTENT_ATTRIBUTE ADD RENAME_MATCHED BIT NOT NULL CONSTRAINT DF_RENAME_MATCHED DEFAULT 0
GO
ALTER TABLE CONTENT_ATTRIBUTE ADD SUBFOLDER NVARCHAR(255) NULL
GO
ALTER TABLE CONTENT_ATTRIBUTE ADD DISABLE_VERSION_CONTROL BIT NOT NULL CONSTRAINT DF_DISABLE_VERSION_CONTROL DEFAULT 0
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.30', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.30 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.6.2.31
-- Full-text optimization
-- ***********************************************

CREATE FUNCTION [dbo].[qp_select_data_field] (@attribute_type_id numeric, @data nvarchar(max), @blob_data nvarchar(max))
RETURNS nvarchar(max)
AS
BEGIN
            declare @result nvarchar(max)
            If @attribute_type_id = 9 OR @attribute_type_id = 10
        set @result = @blob_data
      else
        set @result = @data
      return @result

END
GO

CREATE FUNCTION [dbo].qp_get_visibility_code(@visible bit, @id numeric)
RETURNS varchar(50)
AS
BEGIN
RETURN
CASE
WHEN (@visible = 1) AND (@id IS NULL) THEN '_visible'
WHEN (@visible = 1) AND (@id IS NOT NULL) THEN '_visible_scheduled'
WHEN (@visible <> 1) AND (@id IS NULL) THEN 'invisible'
WHEN (@visible <> 1) AND (@id IS NOT NULL) THEN 'invisible_scheduled'
END
END
GO

CREATE FUNCTION [dbo].[qp_fullText](@text nvarchar(255), @site_id numeric)
returns @data table(content_item_id numeric, attribute_id numeric, content_id numeric, rownumber numeric)
as
begin
  declare @text2 nvarchar(255)
  set @text2 = @text + ' d1234DSFTd'
  insert into @data
  select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
  from content_data cd
  INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
  INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
  WHERE cinfo.site_id = @site_id and FREETEXT( cd.* ,@text2)
  return
end
GO

CREATE function [dbo].[qp_fullTextIds](@text nvarchar(255), @content_id numeric)
returns @ids table (id numeric primary key)
as
begin
  declare @text2 nvarchar(255)
  set @text2 = @text + ' d1234DSFTd'
  insert into @ids
  select distinct cd.content_item_id from content_data cd inner join content_item ci on ci.content_item_id = cd.content_item_id where ci.content_id = @content_id and freetext(cd.*, @text2 )
  return
end
GO

CREATE FUNCTION [dbo].[qp_like](@text nvarchar(255), @site_id numeric)
returns @data table(content_item_id numeric, attribute_id numeric, content_id numeric, rownumber numeric)
as
begin
  declare @text2 nvarchar(255)
  set @text2 = '%' + @text + '%'
  insert into @data
  select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
  from content_data cd
  INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
  INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
  WHERE cinfo.site_id = @site_id and cd.data like @text2 or cd.blob_data like @text2
  return
end
GO

CREATE function [dbo].[qp_likeIds](@text nvarchar(255), @content_id numeric)
returns @ids table (id numeric primary key)
as
begin
  declare @text2 nvarchar(255)
  set @text2 = '%' + @text + '%'
  insert into @ids
  select distinct cd.content_item_id from content_data cd inner join content_item ci on ci.content_item_id = cd.content_item_id where ci.content_id = @content_id and cd.data like @text2 or cd.blob_data like @text2
  return
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.31', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.31 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.32
-- Version Control optimization
-- ***********************************************

CREATE NONCLUSTERED INDEX [IX_HISTORY_CONTENT_ITEM_VERSION] ON [dbo].[CONTENT_ITEM_STATUS_HISTORY]
(
  [content_item_version_id] ASC
) ON [PRIMARY]
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.32', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.32 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.33
-- Additional test directory
-- ***********************************************

ALTER TABLE site ADD
  [TEST_DIRECTORY] nvarchar(255) NULL
GO

ALTER TABLE site ADD
  [FORCE_TEST_DIRECTORY] bit NOT NULL CONSTRAINT DF_FORCE_TEST_DIRECTORY DEFAULT 0
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.33', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.33 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.6.2.34
-- Home Optimization
-- ***********************************************
ALTER  PROCEDURE [dbo].[qp_mostUpdated]
@user_id numeric
AS
select * from
(
select s2.site_name, c.content_name, cnt.content_id, cnt.count, c.site_id,
row_number() over (partition by c.site_id order by cnt.count desc) as 'RowNumber'
from content c
inner join qp_sites_list_ids(@user_id, 1) s on c.site_id = s.site_id
inner join site s2 on c.site_id = s2.site_id
inner join
(select count(*) as count , ci.content_id from content_item as ci with(nolock)
WHERE ci.modified > DATEADD(month, -1, GetDate())
group by ci.content_id) as cnt
on cnt.content_id = c.content_id
) as result
where result.rownumber <= 5
GO

ALTER      PROCEDURE [dbo].[qp_approvalArticles]
@user_id numeric
AS

SELECT top 100 ci.content_item_id, c.content_id, ci.modified, s.site_id, s.site_name, dbo.qp_get_article_title_func(ci.content_item_id, c.content_id) title, cast(archive as bit) archive
FROM content_item_workflow ciw with(nolock)
INNER JOIN content_item ci with(nolock) ON ci.content_item_id = ciw.content_item_id
INNER JOIN full_workflow_rules wr with(nolock) on ciw.workflow_id = wr.workflow_id AND ci.status_type_id = wr.successor_status_id
INNER JOIN full_workflow_rules wr2 with(nolock) on wr.workflow_id = wr2.workflow_id AND wr2.rule_order = wr.rule_order + 1
INNER JOIN content c with(nolock) ON ci.content_id = c.content_id
INNER JOIN site s with(nolock) ON c.site_id = s.site_id
WHERE (
  wr2.user_id = @user_id
  OR wr2.group_id IN (SELECT group_id FROM user_group_bind with(nolock) WHERE user_id=@user_id)
)
AND (
  ci.content_item_id not in (select content_item_id from waiting_for_approval with(nolock))
  OR ci.content_item_id in (select content_item_id from waiting_for_approval with(nolock) where user_id = @user_id)
)
ORDER BY c.site_id, ciw.content_item_id
GO

ALTER     PROCEDURE [dbo].[qp_latestApproval]
@user_id numeric
AS
DECLARE @temp table (rownum int IDENTITY (1, 1) Primary key NOT NULL,content_item_id NUMERIC, content_id  NUMERIC, modified DATETIME, site_id INT, site_name NVARCHAR (100), archive BIT)
declare @ids table(content_item_id NUMERIC)
DECLARE @sites table (rownum int IDENTITY (1, 1) Primary key NOT NULL,site_id INT)
DECLARE @site NUMERIC, @content_id NUMERIC, @content_item_id NUMERIC, @titleName NVARCHAR (200), @title NVARCHAR (200), @sql nvarchar(2000)
DECLARE @RowCnt int
DECLARE @MaxRows int
select @RowCnt = 1

insert into @sites(site_id) select * from qp_sites_list_ids(@user_id, 1)


select @MaxRows=count(*) from @sites
while @RowCnt <= @MaxRows
begin
  select @site = site_id
  from @sites
  where rownum = @RowCnt

insert into @temp(content_item_id, modified)
select distinct top 5 ch.content_item_id, max(ch.status_history_date)
from content_item_status_history ch with(nolock)
inner join content_item ci with(nolock) on ch.content_item_id = ci.content_item_id
inner join content c with(nolock) on ci.content_id = c.content_id
where c.site_id = @site and user_id = @user_id
and ch.system_status_type_id in (9, 12)
group by ch.content_item_id
order by max(ch.status_history_date) desc

    Select @RowCnt = @RowCnt + 1
END

SELECT s.site_name, ci.archive, c.site_id, c.content_id, dbo.qp_get_article_title_func(ci.content_item_id, ci.content_id) as title, t.content_item_id, t.modified from @temp t
inner join content_item ci with(nolock) on ci.content_item_id = t.content_item_id
inner join content c with(nolock) on ci.content_id = c.content_id
inner join site s with(nolock) on s.site_id = c.site_id
GO

ALTER PROCEDURE [dbo].[qp_lastArticles]
@user_id numeric
AS
DECLARE @sites table (rownum int IDENTITY (1, 1) Primary key NOT NULL, site_id INT)
DECLARE @temp table (rownum int IDENTITY (1, 1) Primary key NOT NULL, content_item_id NUMERIC, content_id NUMERIC, content_name NVARCHAR (200), modified DATETIME, site_id INT, site_name NVARCHAR (100), title NVARCHAR (200), archive BIT )
DECLARE @site NUMERIC, @content_id NUMERIC, @content_item_id NUMERIC, @titleName NVARCHAR (200), @title NVARCHAR (200), @sql nvarchar(2000)
DECLARE @RowCnt int
DECLARE @MaxRows int
select @RowCnt = 1

insert into @sites(site_id) select * from qp_sites_list_ids(@user_id, 1)

select @MaxRows=count(*) from @sites
while @RowCnt <= @MaxRows
begin
  select @site = site_id
  from @sites
  where rownum = @RowCnt

  INSERT INTO @temp
  SELECT ci.content_item_id, c.content_id, c.content_name, ci.modified, c.site_id, site_name, dbo.qp_get_article_title_func(ci.content_item_id, c.content_id) title, cast(archive as bit) archive FROM content_item ci with (nolock)
  INNER JOIN content c with (nolock) ON ci.content_id = c.content_id
  INNER JOIN site with (nolock) ON site.site_id = c.site_id
    where ci.content_item_id in (select top 5 content_item_id from site_content_item_modified with(noexpand) where site_id = @site order by modified desc)

    Select @RowCnt = @RowCnt + 1
end
SELECT * from @temp
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.34', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.34 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.35
-- Notification Migration
-- ***********************************************
ALTER TABLE NOTIFICATIONS ADD
  [USE_QA_MAIL] bit NOT NULL CONSTRAINT DF_USE_QA_MAIL DEFAULT 1
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.35', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.35 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.36
-- Full Text 2.0
-- ***********************************************

ALTER FUNCTION [dbo].[qp_fullText](@text nvarchar(255), @site_id numeric, @exact bit)
returns @data table(content_item_id numeric, attribute_id numeric, content_id numeric, rownumber numeric)
as
begin
  declare @text2 nvarchar(255)

  declare @use_fulltext bit
  select @use_fulltext = fulltextserviceproperty('IsFulltextInstalled')

  if @use_fulltext = 1 begin
    if @exact = 0 begin
      insert into @data
      select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
      from content_data cd
      INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
      INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
      WHERE cinfo.site_id = @site_id and FREETEXT( cd.* ,@text)
    end
    else begin
      set @text2 = '"' + @text + '"'

      insert into @data
      select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
      from content_data cd
      INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
      INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
      WHERE cinfo.site_id = @site_id and CONTAINS( cd.* ,@text2)
    end
  end
  else begin
    set @text2 = '%' + @text + '%'
    insert into @data
    select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
    from content_data cd
    INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
    INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
    WHERE cinfo.site_id = @site_id and cd.data like @text2 or cd.blob_data like @text2
  end

  return
end
GO

ALTER function [dbo].[qp_fullTextIds](@text nvarchar(255), @content_id numeric, @exact bit)
returns @ids table (id numeric primary key, data nvarchar(max))
as
begin
  declare @text2 nvarchar(255)

  declare @use_fulltext bit
  select @use_fulltext = fulltextserviceproperty('IsFulltextInstalled')

  if @use_fulltext = 1 begin
    if @exact = 0 begin
      insert into @ids
      select id, data from (
      select cd.content_item_id as id, dbo.qp_select_data_field(ca.attribute_type_id, cd.data, cd.blob_data) as data, row_number() over (partition by cd.content_item_id order by cd.attribute_id desc) as 'rownumber'
      from content_data cd
      inner join content_item ci on ci.content_item_id = cd.content_item_id
      inner join content_attribute ca on ca.attribute_id = cd.attribute_id
      where ci.content_id = @content_id and freetext(cd.*, @text )
      ) s where s.rownumber = 1
    end
    else begin
      set @text2 = '"' + @text + '"'
      insert into @ids
      select id, data from (
      select cd.content_item_id as id, dbo.qp_select_data_field(ca.attribute_type_id, cd.data, cd.blob_data) as data, row_number() over (partition by cd.content_item_id order by cd.attribute_id desc) as 'rownumber'
      from content_data cd
      inner join content_item ci on ci.content_item_id = cd.content_item_id
      inner join content_attribute ca on ca.attribute_id = cd.attribute_id
      where ci.content_id = @content_id and contains(cd.*, @text2 )
      ) s where s.rownumber = 1
    end
  end
  else begin
    set @text2 = '%' + @text + '%'
    insert into @ids
    select id, data from (
    select cd.content_item_id as id, dbo.qp_select_data_field(ca.attribute_type_id, cd.data, cd.blob_data) as data, row_number() over (partition by cd.content_item_id order by cd.attribute_id desc) as 'rownumber'
    from content_data cd
    inner join content_item ci on ci.content_item_id = cd.content_item_id
    inner join content_attribute ca on ca.attribute_id = cd.attribute_id
    where ci.content_id = @content_id and cd.data like @text2 or cd.blob_data like @text2
    ) s where s.rownumber = 1

  end
  return
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.36', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.36 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.2.37
-- Custom User Query United View
-- ***********************************************

ALTER TABLE CONTENT ADD
  [ALT_QUERY] ntext NULL
GO

ALTER  PROCEDURE [dbo].[qp_build_query_vcontent_view]
  @content_id NUMERIC,
  @uid NUMERIC
AS BEGIN
  DECLARE @view_name NVARCHAR(128), @sql NVARCHAR(max), @alt_sql NVARCHAR(MAX)
  DECLARE @fld_name NVARCHAR(255), @fld_type NVARCHAR(128)
  DECLARE @fld_size NUMERIC, @fld_scale NUMERIC
  DECLARE @tbl_name SYSNAME, @tbl_id NUMERIC

  DECLARE @attr_found NUMERIC, @do_field_creation NUMERIC

  DECLARE @attr_size NUMERIC, @attr_type NUMERIC, @attr_rel_id NUMERIC, @view_in_list BIT
  DECLARE @attr_related_image_attribute_id NUMERIC, @attr_use_site_library BIT
  DECLARE @link_id NUMERIC

  SET @view_name = 'content_' + CAST(@content_id AS NVARCHAR)

  SELECT @sql = query, @alt_sql = alt_query FROM content WHERE content_id = @content_id
  SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + ' AS ' + @sql
  EXEC(@sql)

  DELETE FROM content_link_view_option
  WHERE
    attribute_id IN (SELECT attribute_id FROM content_attribute WHERE content_id = @content_id)
    OR relation_attribute_id IN (SELECT attribute_id FROM content_attribute WHERE content_id = @content_id)
  DELETE FROM content_attribute WHERE content_id = @content_id

  DECLARE fields CURSOR
  FOR SELECT
    column_name, data_type, character_maximum_length, numeric_scale
  FROM
    information_schema.columns
  WHERE table_name = @view_name AND column_name NOT IN (
    'content_item_id', 'created', 'modified', 'last_modified_by', 'status_type_id', 'visible', 'archive'
  )
  OPEN fields
  FETCH NEXT FROM fields INTO @fld_name, @fld_type, @fld_size, @fld_scale
  WHILE @@FETCH_STATUS = 0 BEGIN
    SET @tbl_name = NULL
    SET @attr_found = 0
    SET @do_field_creation = 1
    SET @attr_type = NULL
    SET @attr_size = NULL
    SET @attr_type = NULL
    SET @attr_rel_id = NULL
    SET @attr_related_image_attribute_id = NULL
    SET @attr_use_site_library = 0
  SET @view_in_list = 0

    SELECT @tbl_name = table_name FROM INFORMATION_SCHEMA.VIEW_COLUMN_USAGE
    WHERE view_name = @view_name AND table_name LIKE 'content_%' AND column_name = @fld_name
    IF @tbl_name IS NOT NULL BEGIN
      SET @tbl_name = RIGHT(@tbl_name, LEN(@tbl_name) - 8)
      IF ISNUMERIC(@tbl_name) = 1 BEGIN
        SET @tbl_id = CAST(@tbl_name AS NUMERIC)
        SELECT
          @attr_size = attribute_size,
          @attr_type = attribute_type_id,
          @attr_rel_id = related_attribute_id,
      @attr_related_image_attribute_id = related_image_attribute_id,
      @attr_use_site_library = use_site_library,
      @view_in_list = view_in_list,
          @link_id = link_id
        FROM content_attribute
        WHERE content_id = @tbl_id AND attribute_name = @fld_name
        IF @attr_type IS NOT NULL SET @attr_found = 1
      END
    END

    SET @do_field_creation = 1
    IF @attr_found = 0 BEGIN
      IF LOWER(@fld_type) IN (
        'char', 'nchar', 'varchar', 'nvarchar'
      ) BEGIN
        SET @attr_type = 1
        SET @attr_size = @fld_size
      END ELSE IF LOWER(@fld_type) IN (
        'uniqueidentifier'
      ) BEGIN
        SET @attr_type = 1
        SET @attr_size = 100
      END ELSE IF LOWER(@fld_type) IN (
        'numeric', 'bigint', 'bit', 'decimal', 'int', 'money', 'smallint', 'smallmoney', 'tinyint'
      ) BEGIN
        SET @attr_type = 2
        SET @attr_size = @fld_scale
      END ELSE IF LOWER(@fld_type) IN (
        'float', 'real'
      ) BEGIN
        SET @attr_type = 2
        SET @attr_size = 10
      END ELSE IF LOWER(@fld_type) IN (
        'datetime', 'smalldatetime'
      ) BEGIN
        SET @attr_type = 6
        SET @attr_size = 0
      END ELSE IF LOWER(@fld_type) IN (
        'text', 'ntext'
      ) BEGIN
        SET @attr_type = 10
        SET @attr_size = 0
      END ELSE BEGIN
        SET @do_field_creation = 0
      END
    END

    IF @do_field_creation = 1 BEGIN
      INSERT INTO content_attribute (
        content_id, attribute_name, attribute_size, attribute_type_id, last_modified_by,
        attribute_order, related_attribute_id, related_image_attribute_id, use_site_library,
    view_in_list, link_id
      ) VALUES (
        @content_id, @fld_name, @attr_size, @attr_type, @uid,
        1, @attr_rel_id , @attr_related_image_attribute_id, @attr_use_site_library,
    @view_in_list, @link_id
      )
    END

    FETCH NEXT FROM fields INTO @fld_name, @fld_type, @fld_size, @fld_scale
  END
  CLOSE fields
  DEALLOCATE fields

  IF @alt_sql IS NULL
    SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + '_united AS select * from dbo.content_' + + CAST(@content_id AS NVARCHAR)
  ELSE
    SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + '_united  AS ' + @alt_sql
  EXEC(@sql)

END
GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.2.37', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.2.37 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.3.0
-- Label
-- ***********************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.3.0', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.3.0 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.3.1
-- M2M Splitting
-- ***********************************************

CREATE TABLE [dbo].[item_link_async](
  [link_id] [numeric](18, 0) NOT NULL,
  [item_id] [numeric](18, 0) NOT NULL,
  [linked_item_id] [numeric](18, 0) NOT NULL,
PRIMARY KEY CLUSTERED
(
  [link_id] ASC,
  [item_id] ASC,
  [linked_item_id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[item_link_async]  WITH CHECK ADD FOREIGN KEY([item_id])
REFERENCES [dbo].[CONTENT_ITEM] ([CONTENT_ITEM_ID])
GO

ALTER TABLE [dbo].[item_link_async]  WITH CHECK ADD FOREIGN KEY([linked_item_id])
REFERENCES [dbo].[CONTENT_ITEM] ([CONTENT_ITEM_ID])
GO

ALTER TABLE [dbo].[item_link_async]  WITH CHECK ADD FOREIGN KEY([link_id])
REFERENCES [dbo].[content_to_content] ([link_id])
GO

exec qp_delete_constraint 'item_to_item', 'link_id'
GO

CREATE view [dbo].[item_link_united] as  select i.* from item_link i left join item_link_async i2  on i.item_id = i2.item_id  where i2.item_id is null  union all  select * from item_link_async
GO

CREATE view [dbo].[item_link_united_full] as  select i.* from item_link i union all select * from item_link_async
GO

CREATE TRIGGER [dbo].[td_item_link_united_full] ON [dbo].[item_link_united_full] INSTEAD OF DELETE
AS BEGIN
  delete item_link_async from item_link_async ii
  inner join deleted d on d.link_id = ii.link_id and (
  (d.item_id = ii.item_id and d.linked_item_id = ii.linked_item_id)
  or
  (d.item_id = ii.linked_item_id and d.linked_item_id = ii.item_id)
  )

  delete item_to_item from item_to_item ii
  inner join deleted d on d.link_id = ii.link_id and (
  (d.item_id = ii.l_item_id and d.linked_item_id = ii.r_item_id)
  or
  (d.item_id = ii.r_item_id and d.linked_item_id = ii.l_item_id)
  )
END
GO

ALTER TRIGGER [dbo].[tbd_delete_content_to_content] ON [dbo].[content_to_content] INSTEAD OF DELETE
AS
BEGIN

delete content_attribute from content_attribute ca
inner join deleted d on d.link_id = ca.link_id

delete from item_link_united_full where link_id in (select link_id from deleted)

delete content_to_content from content_to_content cc inner join deleted d on cc.link_id = d.link_id

END
GO

ALTER TRIGGER [dbo].[tbd_delete_content_item] ON [dbo].[CONTENT_ITEM] INSTEAD OF DELETE
AS
BEGIN

delete waiting_for_approval from waiting_for_approval wa inner join deleted d on wa.content_item_id = d.content_item_id

IF dbo.qp_get_version_control() IS NOT NULL BEGIN
  delete item_to_item_version from item_to_item_version iiv
  inner join content_item_version civ on civ.content_item_version_id = iiv.content_item_version_id
  inner join deleted d on d.content_item_id = civ.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join deleted d on d.content_item_id = iiv.linked_item_id
END

delete item_link_united_full from item_link_united_full ii where ii.item_id in (select content_item_id from deleted)

delete content_data from content_data cd inner join deleted d on cd.content_item_id = d.content_item_id

delete content_item from content_item ci inner join deleted d on ci.content_item_id = d.content_item_id

END
GO

ALTER TRIGGER [dbo].[td_site_item_link] ON [dbo].[site_item_link] INSTEAD OF DELETE
AS BEGIN
  delete item_to_item from item_to_item ii
  inner join deleted d on d.link_id = ii.link_id and d.l_item_id = ii.l_item_id and d.r_item_id = ii.r_item_id

  delete item_link_async from item_link_async ii
  inner join deleted d on d.link_id = ii.link_id and (
  (ii.item_id = d.l_item_id and ii.linked_item_id = d.r_item_id)
  or
  (ii.item_id = d.r_item_id and ii.linked_item_id = d.l_item_id)
  )
END
GO


CREATE PROCEDURE [dbo].[qp_check_article_splitted] @content_item_id numeric, @result int output
AS
  declare @content_id numeric, @id numeric
  select @content_id = content_id from content_item with(nolock) where content_item_id = @content_item_id
  declare @sql nvarchar(3500)
  set @sql = 'select @id = content_item_id from content_' + convert(nvarchar, @content_id) + '_async with(nolock) where content_item_id = @content_item_id'
  exec sp_executesql @sql, N'@id numeric out, @content_item_id numeric', @id = @id out, @content_item_id = @content_item_id
  if @id is null
    set @result = 0
  else
    set @result = 1

GO

CREATE PROCEDURE [dbo].[qp_merge_links]
@content_item_id numeric
AS

  declare @result int, @delayed_publication bit
  exec dbo.qp_check_article_splitted @content_item_id, @result = @result out
  select @delayed_publication = schedule_new_version_publication from content_item with(nolock) where content_item_id = @content_item_id
  if @result = 1 and @delayed_publication = 1
  begin
    DELETE item_to_item with (rowlock)
    WHERE link_id in (select link_id from content_attribute ca inner join content_item ci on ca.content_id = ci.content_id where ci.content_item_id = @content_item_id)
    AND (l_item_id = @content_item_id OR r_item_id = @content_item_id )

    insert into item_to_item (link_id, l_item_id, r_item_id)
    select link_id, item_id, linked_item_id from item_link_async where item_id = @content_item_id

    delete from item_link_async with(rowlock) where item_id = @content_item_id
  end
GO

ALTER TRIGGER [dbo].[ti_content_item_schedule_add_job] ON [dbo].[CONTENT_ITEM_SCHEDULE] FOR INSERT AS BEGIN
  DECLARE @current_db SYSNAME, @item_id NUMERIC, @qp_job_name SYSNAME, @sql NVARCHAR(1024)
  DECLARE @freq_type INT, @freq_interval INT, @freq_relative_interval INT, @freq_recurrence_factor INT
  DECLARE @active_start_date INT, @active_end_date INT, @active_start_time INT, @active_end_time INT
  DECLARE @use_duration INT, @deactivate BIT
  DECLARE @pre_sql NVARCHAR(1024)
  declare @str_set_params nvarchar(255)
  SELECT @current_db = DB_NAME()
  DECLARE items CURSOR FOR
    SELECT content_item_id, freq_type, freq_interval, freq_relative_interval, freq_recurrence_factor,
      active_start_date, active_end_date, active_start_time, active_end_time, use_duration, deactivate
    FROM inserted
  OPEN items

  FETCH NEXT FROM items
  INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
    @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  WHILE @@FETCH_STATUS = 0 BEGIN

    DECLARE @delete_level INT

    IF @freq_type = 1 OR @freq_type = 2 BEGIN
      DECLARE @now_date DATETIME
      DECLARE @now_date_int BIGINT, @start_date_int BIGINT, @end_date_int BIGINT

      SET @now_date = DATEADD(mi, 1, GETDATE())
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))
      SET @start_date_int = CAST(@active_start_time AS BIGINT) + CAST(@active_start_date AS BIGINT) * 1000000
      SET @end_date_int   = CAST(@active_end_time AS BIGINT) + CAST(@active_end_date AS BIGINT) * 1000000

      IF @now_date_int > @start_date_int BEGIN
        SET @active_start_date = @now_date_int / 1000000
        SET @active_start_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_start_date = @active_start_date, active_start_time = @active_start_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @now_date = DATEADD(ss, 10, @now_date)
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))

      IF @now_date_int > @end_date_int BEGIN
        SET @active_end_date = @now_date_int / 1000000
        SET @active_end_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_end_date = @active_end_date, active_end_time = @active_end_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @delete_level  = 1

    END ELSE BEGIN
      SET @delete_level  = 0
    END

    SET @qp_job_name = 'Q-Publishing Schedule for ' + @current_db + ' item '
      + CAST(@item_id AS NVARCHAR) + ' on'
    IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = @qp_job_name) BEGIN
      EXEC msdb.dbo.sp_delete_job @job_name = @qp_job_name
    END

  IF @deactivate = 0 BEGIN  --if schedule is deactivated then don't create job
    if dbo.qp_is_sql_2000() = 1
      set @str_set_params =  '@activation_start_dt=[STRTDT], @activation_start_tm=[STRTTM]'
    else if dbo.qp_is_early_sql_2005() = 1
      set @str_set_params =  '@activation_start_dt=$(STRTDT), @activation_start_tm=$(STRTTM)'
    else
      set @str_set_params =  '@activation_start_dt=$(ESCAPE_NONE(STRTDT)), @activation_start_tm=$(ESCAPE_NONE(STRTTM))'
    if @freq_type <> 2
      SET @sql = 'UPDATE content_item with(rowlock) SET visible = 1 WHERE content_item_id = '
        + CAST(@item_id AS NVARCHAR)
        + '
        EXECUTE qp_create_deactivation_job @item_id=' + CAST(@item_id AS NVARCHAR) + ', ' + @str_set_params
    else begin  --scheduleNewVersionPublication
      set @sql  = ';exec qp_merge_links ' + CAST(@item_id AS NVARCHAR) +
            ';UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0, not_for_replication = 1 WHERE content_item_id = ' + CAST(@item_id AS NVARCHAR) +
            ';exec qp_replicate ' + CAST(@item_id AS NVARCHAR)

      set @freq_type = 1
    end

    SET @pre_sql = 'Q-Publishing Schedule for ' + @current_db + ' item ' + CAST(@item_id AS NVARCHAR) + ' off'
    SET @pre_sql = 'IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = ''' + @pre_sql + ''') EXEC msdb.dbo.sp_delete_job @job_name = ''' + @pre_sql + ''' '

    EXEC msdb.dbo.sp_add_job @job_name = @qp_job_name, @delete_level  =  @delete_level
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Remove old deactivation job',
      @command = @pre_sql, @database_name = @current_db,
      @retry_attempts = 1,
      @on_success_action  = 3, @on_fail_action = 3
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Activate article',
      @command = @sql, @database_name = @current_db,
      @retry_attempts = 1
    EXEC msdb.dbo.sp_add_jobschedule @job_name = @qp_job_name, @name = 'Activate Schedule',
      @enabled = 1, @freq_type = @freq_type, @freq_interval = @freq_interval,
      @freq_relative_interval = @freq_relative_interval,
      @freq_recurrence_factor = @freq_recurrence_factor,
      @freq_subday_type = 0x1, @freq_subday_interval = 0,
      @active_start_date = @active_start_date, @active_end_date = @active_end_date,
      @active_start_time = @active_start_time, @active_end_time = @active_end_time
    EXEC msdb.dbo.sp_add_jobserver @job_name = @qp_job_name, @server_name = '(LOCAL)'
  END

    FETCH NEXT FROM items
    INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
      @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  END
  CLOSE items
  DEALLOCATE items
END
GO

CREATE procedure [dbo].[qp_check_target_table_async]
@content_item_id numeric,
@content_id numeric,
@workflow_id numeric,
@async_workflow numeric,
@is_target_table_async bit output
AS

  declare @new_status_weight numeric, @curr_status_weight numeric, @max_status_weight numeric
  declare @schedule_new_version_publication bit

  set @is_target_table_async = 0

  if @workflow_id is not null
  begin

    select @new_status_weight = st.weight, @schedule_new_version_publication = ci.schedule_new_version_publication
    from status_type st inner join content_item ci
    on st.status_type_id = ci.status_type_id
    where content_item_id = @content_item_id

    exec qp_get_workflow_max_status_weight @workflow_id, @max_status_weight = @max_status_weight out

      EXEC qp_get_frontend_status_weight @content_id, @content_item_id, @weight = @curr_status_weight out

    if (@new_status_weight < @curr_status_weight and @async_workflow = 1) or (@new_status_weight = @max_status_weight and @schedule_new_version_publication = 1)
    begin
      set @is_target_table_async = 1
    end

  end
GO


ALTER procedure [dbo].[qp_define_target_table]
@content_item_id numeric,
@content_id numeric,
@workflow_id numeric,
@async_workflow numeric,
@is_target_table_async bit output,
@table_name nvarchar(25) output
AS
  declare @async_string nvarchar(10)

  exec qp_check_target_table_async @content_item_id, @content_id, @workflow_id, @async_workflow, @is_target_table_async = @is_target_table_async out

  if @is_target_table_async = 0
    set @async_string = ''
  else
    set @async_string = '_ASYNC'

  set @table_name = 'CONTENT_' + convert(nvarchar, @content_id) + @async_string
GO

CREATE procedure [dbo].[qp_is_target_table_async](
  @content_item_id numeric (18,0),
  @is_target_table_async bit output
)
AS

  declare @content_id numeric, @workflow_id numeric, @is_async bit

  select @content_id = content_id from content_item where content_item_id = @content_item_id

  select @workflow_id = workflow_id, @is_async = is_async from content_item_workflow where content_item_id = @content_item_id

  exec qp_check_target_table_async @content_item_id, @content_id, @workflow_id, @is_async , @is_target_table_async = @is_target_table_async out

GO

ALTER TRIGGER [dbo].[ti_content_item_schedule_add_job] ON [dbo].[CONTENT_ITEM_SCHEDULE] FOR INSERT AS BEGIN
  DECLARE @current_db SYSNAME, @item_id NUMERIC, @qp_job_name SYSNAME, @sql NVARCHAR(1024)
  DECLARE @freq_type INT, @freq_interval INT, @freq_relative_interval INT, @freq_recurrence_factor INT
  DECLARE @active_start_date INT, @active_end_date INT, @active_start_time INT, @active_end_time INT
  DECLARE @use_duration INT, @deactivate BIT
  DECLARE @pre_sql NVARCHAR(1024)
  declare @str_set_params nvarchar(255)
  SELECT @current_db = DB_NAME()
  DECLARE items CURSOR FOR
    SELECT content_item_id, freq_type, freq_interval, freq_relative_interval, freq_recurrence_factor,
      active_start_date, active_end_date, active_start_time, active_end_time, use_duration, deactivate
    FROM inserted
  OPEN items

  FETCH NEXT FROM items
  INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
    @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  WHILE @@FETCH_STATUS = 0 BEGIN

    DECLARE @delete_level INT

    IF @freq_type = 1 OR @freq_type = 2 BEGIN
      DECLARE @now_date DATETIME
      DECLARE @now_date_int BIGINT, @start_date_int BIGINT, @end_date_int BIGINT

      SET @now_date = DATEADD(mi, 1, GETDATE())
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))
      SET @start_date_int = CAST(@active_start_time AS BIGINT) + CAST(@active_start_date AS BIGINT) * 1000000
      SET @end_date_int   = CAST(@active_end_time AS BIGINT) + CAST(@active_end_date AS BIGINT) * 1000000

      IF @now_date_int > @start_date_int BEGIN
        SET @active_start_date = @now_date_int / 1000000
        SET @active_start_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_start_date = @active_start_date, active_start_time = @active_start_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @now_date = DATEADD(ss, 10, @now_date)
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))

      IF @now_date_int > @end_date_int BEGIN
        SET @active_end_date = @now_date_int / 1000000
        SET @active_end_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_end_date = @active_end_date, active_end_time = @active_end_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @delete_level  = 1

    END ELSE BEGIN
      SET @delete_level  = 0
    END

    SET @qp_job_name = 'Q-Publishing Schedule for ' + @current_db + ' item '
      + CAST(@item_id AS NVARCHAR) + ' on'
    IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = @qp_job_name) BEGIN
      EXEC msdb.dbo.sp_delete_job @job_name = @qp_job_name
    END

  IF @deactivate = 0 BEGIN  --if schedule is deactivated then don't create job
    if dbo.qp_is_sql_2000() = 1
      set @str_set_params =  '@activation_start_dt=[STRTDT], @activation_start_tm=[STRTTM]'
    else if dbo.qp_is_early_sql_2005() = 1
      set @str_set_params =  '@activation_start_dt=$(STRTDT), @activation_start_tm=$(STRTTM)'
    else
      set @str_set_params =  '@activation_start_dt=$(ESCAPE_NONE(STRTDT)), @activation_start_tm=$(ESCAPE_NONE(STRTTM))'
    if @freq_type <> 2
      SET @sql = 'UPDATE content_item with(rowlock) SET visible = 1 WHERE content_item_id = '
        + CAST(@item_id AS NVARCHAR)
        + '
        EXECUTE qp_create_deactivation_job @item_id=' + CAST(@item_id AS NVARCHAR) + ', ' + @str_set_params
    else begin  --scheduleNewVersionPublication
      set @sql  = 'UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0, not_for_replication = 1 WHERE content_item_id = ' + CAST(@item_id AS NVARCHAR) + '
            exec qp_replicate ' + CAST(@item_id AS NVARCHAR) + '
            exec qp_merge_links ' + CAST(@item_id AS NVARCHAR) + '
            DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = ' + CAST(@item_id AS NVARCHAR)
      set @freq_type = 1
    end

    SET @pre_sql = 'Q-Publishing Schedule for ' + @current_db + ' item ' + CAST(@item_id AS NVARCHAR) + ' off'
    SET @pre_sql = 'IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = ''' + @pre_sql + ''') EXEC msdb.dbo.sp_delete_job @job_name = ''' + @pre_sql + ''' '

    EXEC msdb.dbo.sp_add_job @job_name = @qp_job_name, @delete_level  =  @delete_level
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Remove old deactivation job',
      @command = @pre_sql, @database_name = @current_db,
      @retry_attempts = 1,
      @on_success_action  = 3, @on_fail_action = 3
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Activate article',
      @command = @sql, @database_name = @current_db,
      @retry_attempts = 1
    EXEC msdb.dbo.sp_add_jobschedule @job_name = @qp_job_name, @name = 'Activate Schedule',
      @enabled = 1, @freq_type = @freq_type, @freq_interval = @freq_interval,
      @freq_relative_interval = @freq_relative_interval,
      @freq_recurrence_factor = @freq_recurrence_factor,
      @freq_subday_type = 0x1, @freq_subday_interval = 0,
      @active_start_date = @active_start_date, @active_end_date = @active_end_date,
      @active_start_time = @active_start_time, @active_end_time = @active_end_time
    EXEC msdb.dbo.sp_add_jobserver @job_name = @qp_job_name, @server_name = '(LOCAL)'
  END

    FETCH NEXT FROM items
    INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
      @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  END
  CLOSE items
  DEALLOCATE items
END
GO

ALTER  PROCEDURE [dbo].[restore_content_item_version]
  @uid NUMERIC,
  @version_id NUMERIC
AS
  DECLARE @id NUMERIC, @tm DATETIME
  DECLARE @content_id numeric
  SET @tm = GETDATE()
  SELECT @id = content_item_id FROM content_item_version WHERE content_item_version_id = @version_id
  IF @id IS NOT NULL BEGIN
    select @content_id = content_id from content_item where content_item_id = @id
    DELETE FROM content_data WHERE content_item_id = @id
    INSERT INTO content_data (attribute_id, content_item_id, data, blob_data)
    SELECT attribute_id, @id, data, blob_data
    FROM version_content_data
    WHERE content_item_version_id = @version_id
    -- Clear many-to-many
    IF exists(select count(linked_item_id) from item_link_async where item_id = @id)
    begin

    DELETE FROM item_link_async where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    INSERT INTO item_link_async
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id

    end else
    begin

    DELETE FROM item_link_united_full where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    -- Set many-to-many
    INSERT INTO item_to_item
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id
    end

    -- Write status history log
    INSERT INTO content_item_status_history
      (content_item_id, user_id, description, created,
      system_status_type_id, content_item_version_id)
    VALUES
      (@id, @uid, 'Record has been restored from version backup', @tm,
      4, @version_id)
  END
GO

ALTER PROCEDURE [dbo].[create_content_item_version]
  @uid NUMERIC,
  @content_item_id NUMERIC,
  @content_version_id NUMERIC = NULL
AS
  DECLARE @content_item_version_id NUMERIC, @tm DATETIME
  SET @tm = GETDATE()
  -- delete > max_num_of_stored_versions
  DECLARE @max_num_of_stored_versions NUMERIC
  DECLARE @content_id NUMERIC
  SELECT @max_num_of_stored_versions = c.max_num_of_stored_versions,
  @content_id = c.content_id
  FROM content AS c
  INNER JOIN content_item AS ci ON c.content_id = ci.content_id
  WHERE ci.content_item_id = @content_item_id
IF @max_num_of_stored_versions <> 0
BEGIN
  DECLARE @item_version_count INT
  SELECT @item_version_count = COUNT(content_item_version_id) FROM content_item_version
  WHERE content_item_id = @content_item_id
  IF @item_version_count >= @max_num_of_stored_versions
  BEGIN
  DECLARE @item_version_id NUMERIC
  SELECT TOP 1 @item_version_id = content_item_version_id FROM content_item_version
  WHERE content_item_id = @content_item_id ORDER BY content_item_version_id
  DELETE item_to_item_version WHERE content_item_version_id = @item_version_id
  DELETE content_item_version WHERE content_item_version_id = @item_version_id
  END
  -- Create content item version
  IF @content_version_id IS NOT NULL
    DELETE FROM content_item_version
    WHERE content_version_id = @content_version_id AND content_item_id = @content_item_id
  INSERT INTO content_item_version (version, version_label, content_version_id, content_item_id)
  VALUES (@tm, 'backup', @content_version_id, @content_item_id)
  SET @content_item_version_id = @@IDENTITY
  -- Store content item data
  INSERT INTO version_content_data (attribute_id, content_item_version_id, data, blob_data, created)
  SELECT attribute_id, @content_item_version_id, data, blob_data, @tm
  FROM content_data
  WHERE content_item_id = @content_item_id
  -- Store Many-to-Many slice
  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, ca.attribute_id, linked_item_id
  FROM item_link_united AS il
  INNER JOIN content_attribute AS ca ON ca.link_id = il.link_id
  INNER JOIN content_item AS ci ON ci.content_id =  ca.content_id AND ci.content_item_id = il.item_id
  WHERE il.item_id = @content_item_id
  -- Write status history log
  INSERT INTO content_item_status_history
    (content_item_id, user_id, description, created, content_item_version_id,
    system_status_type_id)
  VALUES
    (@content_item_id, @uid, 'Record version backup has been created', @tm, @content_item_version_id,
    2)
END
GO

insert into system_status_type (id, name) values (14, 'Forced Promoting')
GO
exec qp_update_translations 'Forced Promoting', 'Принудительное повышение статуса'
exec qp_update_translations 'Forced Status Changing', 'Принудительное изменение статуса'
exec qp_update_translations 'Workflow Rule will be applied, overriding Forced Status Changing setting.', 'Будет применено правило Workflow, несмотря на установку принудительного изменения статуса'
exec qp_update_translations 'Exact Search', 'Строгое соответствие'
exec qp_update_translations 'Exact Full Text Search', 'Строгий полнотекстовый поиск'
exec qp_update_translations 'Upload size exceeds allowed limit:', 'Размер загрузки превышает разрешенный предел:'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.3.1', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.3.1 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.6.3.2
-- Audit
-- ***********************************************

CREATE TABLE [dbo].[REMOVED_ENTITIES](
  [ENTITY_NAME] [nvarchar](25) NOT NULL,
  [ID] [numeric](18, 0) NOT NULL,
  [USER_ID] [numeric](18, 0) NOT NULL,
  [DELETED] [datetime] NOT NULL,
 CONSTRAINT [PK_REMOVED_ENTITIES] PRIMARY KEY CLUSTERED
(
  [ENTITY_NAME] ASC,
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_REMOVED_ENTITIES_DELETED] ON [dbo].[REMOVED_ENTITIES]
(
  [DELETED] DESC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

GO

CREATE TABLE [dbo].[REMOVED_FILES](
  [IS_FOLDER] [bit] NOT NULL,
  [IS_RENAMED] [bit] NOT NULL,
  [IS_MOVED] [bit] NOT NULL,
  [USER_ID] [numeric](18, 0) NOT NULL,
  [NAME] [nvarchar](255) NULL,
  [PATH] [nvarchar](1024) NOT NULL,
  [DESTINATION] [nvarchar] (1024) NULL,
  [DELETED] [datetime] NOT NULL
 CONSTRAINT [PK_REMOVED_FILES] PRIMARY KEY CLUSTERED
(
  [DELETED] DESC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[REMOVED_ENTITIES] ADD
  [PARENT_ID] [numeric](18, 0) NULL,
  [TITLE] [nvarchar](200) NULL
GO


CREATE TABLE [dbo].[DANGEROUS_ACTIONS](
  [ACTION_NAME] [nvarchar](50) NOT NULL,
  [ENTITY_NAME] [nvarchar](25) NOT NULL,
  [ID] [numeric](18, 0) NOT NULL,
  [USER_ID] [numeric](18, 0) NOT NULL,
  [PERFORMED] [datetime] NOT NULL,
  [DESCRIPTION] [nvarchar] (1024) NULL
 CONSTRAINT [PK_DANGEROUS_ACTIONS] PRIMARY KEY CLUSTERED
(
  [PERFORMED] DESC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_DANGEROUS_ACTIONS_ENTITY_NAME_ID] ON [dbo].[DANGEROUS_ACTIONS]
(
  [ENTITY_NAME] ASC,
  [ID] DESC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_DANGEROUS_ACTIONS_ACTION_NAME] ON [dbo].[DANGEROUS_ACTIONS]
(
  [ACTION_NAME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.6.3.2', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.6.3.2 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.0
-- Label
-- ***********************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.0', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.0 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.1
-- Reduce requred permission level
-- ***********************************************

declare @name sysname, @CmptLevel tinyint, @sql nvarchar(max)
set @name = db_name()
EXEC sp_dbcmptlevel @name , @CmptLevel output
if @CmptLevel < 90
EXEC sp_dbcmptlevel @name , '90'
GO

update buttons set permission_level_id = 2 where button_name = 'Restore' and location_tab_id in (
select tab_id from tabs where tab_name = 'Article Restore Preview')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.1', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.1 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.2
-- Charset must trigger reassembling
-- ***********************************************

ALTER  TRIGGER [dbo].[tu_page_template_modified] ON [dbo].[PAGE_TEMPLATE]
FOR UPDATE
AS
BEGIN
  declare @template_folder nvarchar(255), @new_template_folder nvarchar(255)
  declare @page_template_id numeric
  declare @custom_class_for_pages nvarchar(255), @new_custom_class_for_pages nvarchar(255)
  declare @custom_class_for_generics nvarchar(255), @new_custom_class_for_generics nvarchar(255)
  declare @custom_class_for_containers nvarchar(255), @new_custom_class_for_containers nvarchar(255)
  declare @custom_class_for_forms nvarchar(255), @new_custom_class_for_forms nvarchar(255)
  declare @using nvarchar(512), @new_using nvarchar(512)
  declare @charset nvarchar(512), @new_charset nvarchar(512)

  declare @i numeric, @count numeric
  declare @pt table (
    id numeric identity(1,1) primary key,
    page_template_id numeric,
    template_folder nvarchar(255),
    custom_class_for_pages nvarchar(255),
    custom_class_for_generics nvarchar(255),
    custom_class_for_containers nvarchar(255),
    custom_class_for_forms nvarchar(255),
    charset nvarchar(50),
    using nvarchar(512)

  )

  /* Collect affected items */
  insert into @pt (page_template_id, template_folder, custom_class_for_pages, custom_class_for_generics, custom_class_for_containers, custom_class_for_forms, using, charset)
  select page_template_id, template_folder, custom_class_for_pages, custom_class_for_generics, custom_class_for_containers, custom_class_for_forms, using, charset from deleted d

  set @i = 1
  select @count = count(id) from @pt

  while @i < @count + 1
  begin
    select @custom_class_for_pages = custom_class_for_pages, @custom_class_for_generics = custom_class_for_generics, @custom_class_for_containers = custom_class_for_containers, @custom_class_for_forms = custom_class_for_forms, @using = using, @charset = charset, @template_folder = template_folder, @page_template_id = page_template_id from @pt where id = @i
    select @new_custom_class_for_pages = custom_class_for_pages, @new_custom_class_for_generics = custom_class_for_generics, @new_custom_class_for_containers = custom_class_for_containers, @new_custom_class_for_forms = custom_class_for_forms, @new_using = using, @new_charset = charset, @new_template_folder = template_folder from page_template where page_template_id = @page_template_id

    if IsNull(@template_folder, '') <> IsNull(@new_template_folder, '')
    or IsNull(@custom_class_for_pages, '') <> IsNull(@new_custom_class_for_pages, '')
    begin
      update page set assemble_in_live = 1, assemble_in_stage = 1
      where page_template_id = @page_template_id
    end

    if IsNull(@template_folder, '') <> IsNull(@new_template_folder, '')
    or IsNull(@using, '') <> IsNull(@new_using, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
    end

    if IsNull(@charset, '') <> IsNull(@new_charset, '')
    begin

      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id and obj.page_id is null

    end

    if IsNull(@custom_class_for_generics, '') <> IsNull(@new_custom_class_for_generics, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
      and obj.object_type_id <> 2 and obj.object_type_id <> 9
    end

    if IsNull(@custom_class_for_containers, '') <> IsNull(@new_custom_class_for_containers, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
      and obj.object_type_id = 2
    end

    if IsNull(@custom_class_for_forms, '') <> IsNull(@new_custom_class_for_forms, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1
      from object_format objf
      inner join object obj on objf.object_id = obj.object_id
      where obj.page_template_id = @page_template_id
      and obj.object_type_id = 9
    end

    /* Curtail Format Stored Versions */
    exec qp_wrapper_curtail_object_format_versions NULL, @page_template_id

    set @i = @i + 1
  end
END

GO

ALTER TRIGGER [dbo].[tu_template_formats_modified] ON [dbo].[PAGE]
FOR UPDATE
AS
BEGIN
  declare @page_folder nvarchar(255), @new_page_folder nvarchar(255)
  declare @page_filename nvarchar(255), @new_page_filename nvarchar(255)
  declare @page_trace bit, @new_page_trace bit
  declare @page_custom_class nvarchar(255), @new_page_custom_class nvarchar(255)
  declare @charset nvarchar(50), @new_charset nvarchar(50)
  declare @enable_viewstate bit, @new_enable_viewstate bit
  declare @page_id numeric
  declare @i numeric, @count numeric
  declare @p table (
    id numeric identity(1,1) primary key,
    page_id numeric,
    page_folder nvarchar(255),
    page_filename nvarchar(255),
    page_custom_class nvarchar(255),
    charset nvarchar(50),
    enable_viewstate bit,
    generate_trace bit
  )

  /* Collect affected items */
  insert into @p (page_id, page_folder, generate_trace, page_filename, page_custom_class, charset, enable_viewstate)
  select page_id, page_folder, generate_trace, page_filename, page_custom_class, charset, enable_viewstate from deleted d

  set @i = 1
  select @count = count(id) from @p

  while @i < @count + 1
  begin
    select @page_folder = page_folder, @page_id = page_id, @page_trace = generate_trace, @page_filename = page_filename, @enable_viewstate = enable_viewstate, @page_custom_class = page_custom_class, @charset = charset from @p where id = @i
    select @new_page_folder = page_folder, @new_page_trace = generate_trace, @new_page_filename = page_filename, @new_enable_viewstate = enable_viewstate, @new_page_custom_class = page_custom_class, @new_charset = charset from page where page_id = @page_id

    if IsNull(@page_folder, '') <> IsNull(@new_page_folder, '')
    or IsNull(@charset, '') <> IsNull(@new_charset, '')
    begin
      update object_format set assemble_in_live = 1, assemble_in_stage = 1 where object_id in (
        select object_id from object where page_id = @page_id)
    end

    if @page_trace <> @new_page_trace
    or @enable_viewstate <> @new_enable_viewstate
    or IsNull(@page_filename, '') <> IsNull(@new_page_filename, '')
    or IsNull(@page_custom_class, '') <> IsNull(@new_page_custom_class, '')
    or IsNull(@page_folder, '') <> IsNull(@new_page_folder, '')
    begin
      update page set modified = getdate(), reassemble = 1, assemble_in_live = 1, assemble_in_stage = 1 where page_id in (select page_id from inserted)
    end


    set @i = @i + 1
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.2', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.2 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.3
-- some Translations
-- ***********************************************


exec qp_update_translations 'Assemble Preview and Notifications In Live Mode Only', 'Собирать страницы для предварительного просмотра и уведомлений в Основном режиме'
exec qp_update_translations 'Force Test Directory', 'Использовать тестовую папку'
exec qp_update_translations 'Test Directory', 'Тестовая папка'
exec qp_update_translations 'Data Binding', 'Связывание с данными'
exec qp_update_translations 'Disable Auto Data Binding', 'Отключить автоматическое связывание с данными'
exec qp_update_translations 'Page Inheritance', 'Наследование страниц'
exec qp_update_translations 'Control Inheritance', 'Наследование контролов'
exec qp_update_translations 'Custom Class for Pages', 'Пользовательский класс для страниц'
exec qp_update_translations 'Custom Class for Template', 'Пользовательский класс для шаблона'
exec qp_update_translations 'Custom Class for Generics', 'Пользовательский класс для объектов типа Generic'
exec qp_update_translations 'Custom Class for Publishing Containers', 'Пользовательский класс для для объектов типа Publishing Container'
exec qp_update_translations 'Custom Class for Publishing Forms', 'Пользовательский класс для для объектов типа Publishing Form'
exec qp_update_translations 'Override Page-level Settings', 'Перезаписать настройки страниц'
exec qp_update_translations 'Override Object-level Settings', 'Перезаписать настройки объектов'
exec qp_update_translations 'Additional Namespaces', 'Дополнительные пространства имен'
exec qp_update_translations 'Inheritance', 'Наследование'
exec qp_update_translations 'Custom Class', 'Пользовательский класс'
exec qp_update_translations 'Selection' , 'Выборка'
exec qp_update_translations 'Security', 'Безопасность'
exec qp_update_translations 'Use Backend Integrated Security', 'Использовать интеграцию с Backend'
exec qp_update_translations 'Use Level Filtration', 'Использовать фильтрацию по уровням'
exec qp_update_translations 'Return Only Matching Records', 'Возвращать только подходящие записи'
exec qp_update_translations 'Return All with Specified Permission Level', 'Возвращать все записи вместе с уровнями доступа'
exec qp_update_translations 'Start Level', 'Начальный уровень'
exec qp_update_translations 'End Level', 'Конечный уровень'
exec qp_update_translations 'Browse Server', 'Просмотр сервера'
exec qp_update_translations 'Disable Browse Server', 'Отключить режим просмотра сервера'
exec qp_update_translations 'Set Last Modified Header', 'Устанавливать заголовок Last-Modified'
exec qp_update_translations 'Use Alternative Query For United View', 'Использовать альтернативный запрос для United View'
exec qp_update_translations 'Rename Matched Files', 'Переименовывать совпадающие файлы'
exec qp_update_translations 'Disable Version Control', 'Отключить контроль версий'
exec qp_update_translations 'File Subfolder', 'Подпапка для файлов'
exec qp_update_translations 'Child Groups', 'Дочерние группы'
exec qp_update_translations 'Available Groups', 'Доступные группы'
exec qp_update_translations 'Use Separate Folder', 'Использовать отдельную папку'
exec qp_update_translations 'Custom Class for Publishing Forms','Пользовательский класс для для объектов типа Publishing Form'
exec qp_update_translations 'Regional and Language Options', 'Региональные и языковые настройки'
exec qp_update_translations 'Apply Regional and Language Options To Existing Pages', 'Применить региональные и языковые настройки к существующим страницам'
exec qp_update_translations 'Page Format Restore Preview', 'Просмотр формата перед восстановлением'
exec qp_update_translations 'Format Restore Preview', 'Просмотр формата перед восстановлением'
exec qp_update_translations 'Page Format History', 'История изменений формата'
exec qp_update_translations 'Format History', 'История изменений формата'
exec qp_update_translations 'Track Article Changes', 'Отследить изменения в статье'
exec qp_update_translations 'Track Format Changes', 'Отследить изменения в формате'
exec qp_update_translations 'Track Page Format Changes', 'Отследить изменения в формате'
exec qp_update_translations 'Compare Backups', 'Сравнить резервные копии'
exec qp_update_translations 'Compare Format Backups', 'Сравнить резервные копии форматов'
exec qp_update_translations 'Compare Page Format Backups', 'Сравнить резервные копии форматов'
exec qp_update_translations 'Use Separate Folder', 'Использовать отдельную папку'
exec qp_update_translations 'Custom Class for Publishing Forms','Пользовательский класс для для объектов типа Publishing Form'
exec qp_update_translations 'Regional and Language Options', 'Региональные и языковые настройки'
exec qp_update_translations 'Apply Regional and Language Options To Existing Pages', 'Применить региональные и языковые настройки к существующим страницам'
exec qp_update_translations 'Use Backend Integrated Security', 'Использовать правила доступа бэкенда'
exec qp_update_translations 'Return Last Modified', 'Возвращать дату последней модификации'
exec qp_update_translations 'Value', 'Значение'
exec qp_update_translations 'Select content from list', 'Выберите контент из списка'
exec qp_update_translations 'Generate code for updating/appending Articles', 'Генерировать код для создания/удаления статей'
exec qp_update_translations 'Submission response page', 'Перейти после заполнения формы на страницу'
exec qp_update_translations 'Start Time', 'Время начала'
exec qp_update_translations 'Daily', 'Ежедневно'
exec qp_update_translations 'Weekly', 'Еженедельно'
exec qp_update_translations 'Monthly', 'Ежемесячно'
exec qp_update_translations 'Yearly', 'Ежегодно'
exec qp_update_translations 'Range of Recurrence', 'Интервал повторения'
exec qp_update_translations 'Disabled', 'Заблокирован'
exec qp_update_translations 'Change Profile', 'Изменить профиль'
exec qp_update_translations 'More articles', 'Еще статьи'
exec qp_update_translations 'Ascending', 'По возрастанию'
exec qp_update_translations 'Descending', 'По убыванию'
exec qp_update_translations 'Assemble Notification', 'Собрать уведомление'
exec qp_update_translations 'From Name (optional)', 'От имени'
exec qp_update_translations 'Use QA_Mail Component in Backend', 'Использовать компонент QA_Mail в бэкенде'
exec qp_update_translations 'Download export file', 'Скачать файл экспорта'
exec qp_update_translations 'Rename imported contents automatically if contents with same names already exist', 'Автоматически переименовывать контент, если такое имя уже существует'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.3', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.3 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.4
-- Link Views for LINQ
-- ***********************************************

exec qp_drop_existing 'qp_build_link_view', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_build_link_view]
@link_id NUMERIC
AS BEGIN
  DECLARE @content_id numeric
  DECLARE @sql nvarchar(max), @sql2 nvarchar(max)

  DECLARE @view_name nvarchar(20), @view_name2 nvarchar(25)
  set @view_name = 'link_' + CAST(@link_id AS NVARCHAR)
  set @view_name2 = 'link_' + CAST(@link_id AS NVARCHAR) + '_united'

  select @content_id = l_content_id from content_to_content where link_id = @link_id
  SET @sql = 'CREATE VIEW dbo.' + @view_name + ' AS select il.item_id, il.linked_item_id from item_link il inner join content_item ci on il.item_id = ci.CONTENT_ITEM_ID  where CONTENT_ID = ' + CAST(@content_id AS NVARCHAR) + ' and link_id = ' + CAST(@link_id AS NVARCHAR)
  --print @sql
  SET @sql2 = REPLACE(@sql, @view_name, @view_name2)
  SET @sql2 = REPLACE(@sql2, 'item_link il', 'item_link_united il')

  exec qp_drop_existing @view_name , 'IsView'
  exec qp_drop_existing @view_name2, 'IsView'
  exec(@sql)
  exec(@sql2)
END
GO

exec qp_drop_existing 'qp_drop_link_view', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_drop_link_view]
@link_id NUMERIC
AS BEGIN
  DECLARE @view_name nvarchar(20), @view_name2 nvarchar(25)
  set @view_name = 'link_' + CAST(@link_id AS NVARCHAR)
  set @view_name2 = 'link_' + CAST(@link_id AS NVARCHAR) + '_united'
  exec qp_drop_existing @view_name , 'IsView'
  exec qp_drop_existing @view_name2, 'IsView'

END
GO

exec qp_drop_existing 'qp_rebuild_all_link_views', 'IsProcedure'
GO


CREATE PROCEDURE [dbo].[qp_rebuild_all_link_views]
AS

BEGIN
  declare @c table (
    id numeric identity(1,1) primary key,
    link_id numeric
  )

  insert into @c(link_id) select link_id from content_to_content where link_id in
  (select link_id from CONTENT_ATTRIBUTE where link_id is not null)

  declare @i int, @count int, @link_id numeric

  set @i = 1
  select @count = count(id) from @c

  while @i < @count + 1
  begin
    select @link_id = link_id from @c where id = @i
    exec qp_build_link_view @link_id
    set @i = @i + 1
  end
END

GO

exec qp_drop_existing 'ti_content_to_content', 'IsTrigger'
GO


CREATE TRIGGER [dbo].[ti_content_to_content] ON [dbo].[content_to_content] AFTER INSERT
AS
BEGIN

  declare @link_id numeric, @i numeric, @count numeric

  declare @cc table (
    id numeric identity(1,1) primary key,
    link_id numeric
  )

  insert into @cc (link_id) select i.link_id from inserted i

  set @i = 1
  select @count = count(id) from @cc

  while @i < @count + 1
  begin
    select @link_id = link_id from @cc where id = @i
    exec qp_build_link_view @link_id
    set @i = @i + 1
  end


END

GO

exec qp_drop_existing 'td_content_to_content', 'IsTrigger'
GO


CREATE TRIGGER [dbo].[td_content_to_content] ON [dbo].[content_to_content] AFTER DELETE
AS
BEGIN

  declare @link_id numeric, @i numeric, @count numeric

  declare @cc table (
    id numeric identity(1,1) primary key,
    link_id numeric
  )

  insert into @cc (link_id) select d.link_id from deleted d

  set @i = 1
  select @count = count(id) from @cc

  while @i < @count + 1
  begin
    select @link_id = link_id from @cc where id = @i
    exec qp_drop_link_view @link_id
    set @i = @i + 1
  end


END

exec qp_rebuild_all_link_views
GO

delete from content_to_content where link_id not in (select link_id from CONTENT_ATTRIBUTE where link_id is not null) and link_id not in (select link_id from item_to_item)
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.4', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.4 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.5
-- Link Views for LINQ
-- ***********************************************

ALTER PROCEDURE [dbo].[qp_GetContentData]
(
  @SiteName nvarchar(255),
  @ContentName nvarchar(255),
  @WhereExpression nvarchar(4000) = '',
  @OrderExpression nvarchar(4000) = '',
  @StartRow int = 1,
  @PageSize int = 0,
  @TotalRecords int = 0 output,
  @UseSchedule bit = 1,
  @StatusName nvarchar(255) = '',
  @ShowSplittedArticle bit = 0,
  @IncludeArchive bit = 0,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @filter_records bit = 1
)
AS
DECLARE @siteId numeric
DECLARE @contentId numeric
DECLARE @virtualType numeric

DECLARE @maxStatusId numeric
DECLARE @currentStatusId numeric
DECLARE @statusString nvarchar(max)
DECLARE @total numeric
DECLARE @tableSuffix nvarchar(20)
DECLARE @fromExpression nvarchar(1000)
DECLARE @fullWhereExpression nvarchar(max)

DECLARE @insert_key varchar(200)
DECLARE @Select varchar(200)

set @insert_key ='<$_security_insert_$>'
set @Select = 'c.*'

select @siteId = site_id from site where site_name = @SiteName
if @siteId is null return 1

select @contentId = content_id, @virtualType = virtual_type from content where site_id = @SiteId and content_name = @ContentName
if @contentId is null return 2

select top 1 @maxStatusId = status_type_id from status_type where site_id = @SiteId order by weight desc

set @currentStatusId = NULL
if @StatusName <> '' begin
  if not exists(select * from STATUS_TYPE where status_type_name = @StatusName) begin
    return 3
  end else begin
    set @statusString = 'select status_type_id from status_type where status_type_name = ''' + @StatusName + ''''
  end
end else begin
  set @statusString = cast(@maxStatusId as nvarchar)
end

if @virtualType = 3 Or @currentStatusId = @maxStatusId Or @ShowSplittedArticle = 0 begin
  set @tableSuffix = ''
end
else begin
  set @tableSuffix = '_united'
end

if @WhereExpression = '' begin
  set @fullWhereExpression = '1 = 1'
end
else begin
  set @fullWhereExpression = @WhereExpression
end

if @UseSchedule = 1 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.visible = 1'
end

if @IncludeArchive = 0 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.archive = 0'
end

set @fullWhereExpression = @fullWhereExpression + ' and c.status_type_id in (' + @statusString + ')'

set @fromExpression = 'content_' + CONVERT(NVARCHAR, @ContentId) + @tableSuffix + ' as c WITH(NOLOCK) '

if @use_security>0
begin
  if @filter_records > 0
  begin
    set @fromExpression = @fromExpression + ' INNER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
  end
  else
  begin
        set @fromExpression = @fromExpression + ' LEFT OUTER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
    set @Select = @Select + ', IsNull(pi.permission_level,0) as current_permission_level  '
  end
end

exec qp_GetContentPage  @Select = @Select,
            @From=@fromExpression,
            @Where=@fullWhereExpression,
            @OrderBy=@OrderExpression,
            @StartRow=@StartRow,
            @PageSize=@PageSize,
            @GetCount=1,
            @TotalRecords=@TotalRecords output,

              @use_security = @use_security,
              @user_id = @user_id,
              @group_id = @group_id,
              @start_level = @start_level,
              @end_level = @end_level,
              @entity_name = 'content_item',
              @parent_entity_name = 'content',
              @parent_entity_id = @ContentId,
              @insert_key = @insert_key


GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.5', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.5 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.6
-- Index
-- ***********************************************

IF EXISTS(SELECT * FROM SYSINDEXES WHERE NAME = 'IX_STATUS_TYPE_NAME')
DROP INDEX STATUS_TYPE.IX_STATUS_TYPE_NAME
GO

CREATE NONCLUSTERED INDEX [IX_STATUS_TYPE_NAME] ON [dbo].[STATUS_TYPE]
(
  [STATUS_TYPE_NAME] ASC
)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.6', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.6 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.7
-- Speed Up Virtual Content Rebuilding
-- ***********************************************

ALTER TRIGGER [dbo].[td_content_attribute_clean_empty_links] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN
  declare @link_id numeric
  declare @i numeric, @count numeric
  declare @links table (
    id numeric identity(1,1) primary key,
    link_id numeric
  )


  insert into @links (link_id)
  select link_id from deleted d where link_id is not null

  set @i = 1
  select @count = count(id) from @links

  while @i < @count + 1
  begin
    select @link_id = link_id from @links where id = @i
    exec qp_drop_link_with_check @link_id
    set @i = @i + 1
  end
END

GO

ALTER PROCEDURE [dbo].[qp_drop_link_with_check]
@link_id numeric
AS
IF @link_id is not null
BEGIN
  IF NOT EXISTS (SELECT link_id from content_attribute ca join content c on c.content_id = ca.content_id where link_id = @link_id and (c.virtual_type = 0 or c.virtual_type = 2))
  BEGIN
    DELETE FROM content_to_content WHERE link_id = @link_id
  END
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.7', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.7 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.8
-- GetContentData with Fields parameter
-- ***********************************************

exec qp_drop_existing 'Split', 'IsTableFunction'

GO
CREATE FUNCTION dbo.Split(@Str nvarchar(4000), @Delimiter char(1)) RETURNS @Results TABLE (Items nvarchar(4000))
AS BEGIN
  DECLARE @Counter int
  DECLARE @Slice nvarchar(4000)
  SELECT @Counter = 1
  IF @Str IS NULL RETURN

  WHILE @Counter !=0
  BEGIN
    SELECT @Counter = CHARINDEX(@Delimiter,@Str)
    IF @Counter !=0
      SELECT @Slice = LEFT(@Str,@Counter - 1)
    ELSE
      SELECT @Slice = @Str

    INSERT INTO @Results(Items) VALUES(@Slice)
    SELECT @Str = RIGHT(@Str,LEN(@Str) - @Counter)

    IF LEN(@Str) = 0 BREAK
  END
  RETURN
END
GO

exec qp_drop_existing 'qp_filter_columns', 'IsScalarFunction'
GO
CREATE FUNCTION dbo.qp_filter_columns(@content_id numeric, @str nvarchar(4000)) RETURNS nvarchar(4000)
AS BEGIN

  DECLARE @columns TABLE
  (
  id numeric identity(1,1) primary key,
  name nvarchar(255)
  )

  DECLARE @i numeric, @count numeric
  DECLARE @result nvarchar(4000), @name nvarchar(4000)

  set @result = '';


  WITH fields (name) AS (SELECT LTrim(items) from split(@str, ','))
  INSERT INTO @columns(name)
  select name from fields
  where name in (SELECT attribute_name from content_attribute where content_id = @content_id) or name in ('content_item_id', 'archive', 'visible', 'created', 'modified', 'last_modified_by')

  select @count = count(id) from @columns
  set @i = 1

  while @i <= @count
  begin
  if @i > 1 set @result = @result + ', '
  select @name = name from @columns where id = @i
  set @result = @result + @name

  set @i = @i + 1
  end

  if @result = '' set @result = 'c.*'


  RETURN @result
END
GO

exec qp_drop_existing 'qp_GetContentData', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_GetContentData]
(
  @SiteName nvarchar(255),
  @ContentName nvarchar(255),
  @Fields nvarchar(255) = '',
  @WhereExpression nvarchar(4000) = '',
  @OrderExpression nvarchar(4000) = '',
  @StartRow int = 1,
  @PageSize int = 0,
  @TotalRecords int = 0 output,
  @UseSchedule bit = 1,
  @StatusName nvarchar(255) = '',
  @ShowSplittedArticle bit = 0,
  @IncludeArchive bit = 0,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @filter_records bit = 1
)
AS
DECLARE @siteId numeric
DECLARE @contentId numeric
DECLARE @virtualType numeric

DECLARE @maxStatusId numeric
DECLARE @currentStatusId numeric
DECLARE @statusString nvarchar(max)
DECLARE @total numeric
DECLARE @tableSuffix nvarchar(20)
DECLARE @fromExpression nvarchar(1000)
DECLARE @fullWhereExpression nvarchar(max)

DECLARE @insert_key varchar(200)
DECLARE @Select varchar(200)

set @insert_key ='<$_security_insert_$>'


select @siteId = site_id from site where site_name = @SiteName
if @siteId is null return 1

select @contentId = content_id, @virtualType = virtual_type from content where site_id = @SiteId and content_name = @ContentName
if @contentId is null return 2

set @Select = dbo.qp_filter_columns(@contentId, @Fields)

select top 1 @maxStatusId = status_type_id from status_type where site_id = @SiteId order by weight desc

set @currentStatusId = NULL
if @StatusName <> '' begin
  if not exists(select * from STATUS_TYPE where status_type_name = @StatusName) begin
    return 3
  end else begin
    set @statusString = 'select status_type_id from status_type where status_type_name = ''' + @StatusName + ''''
  end
end else begin
  set @statusString = cast(@maxStatusId as nvarchar)
end

if @virtualType = 3 Or @currentStatusId = @maxStatusId Or @ShowSplittedArticle = 0 begin
  set @tableSuffix = ''
end
else begin
  set @tableSuffix = '_united'
end

if @WhereExpression = '' begin
  set @fullWhereExpression = '1 = 1'
end
else begin
  set @fullWhereExpression = @WhereExpression
end

if @UseSchedule = 1 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.visible = 1'
end

if @IncludeArchive = 0 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.archive = 0'
end

set @fullWhereExpression = @fullWhereExpression + ' and c.status_type_id in (' + @statusString + ')'

set @fromExpression = 'content_' + CONVERT(NVARCHAR, @ContentId) + @tableSuffix + ' as c WITH(NOLOCK) '

if @use_security>0
begin
  if @filter_records > 0
  begin
    set @fromExpression = @fromExpression + ' INNER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
  end
  else
  begin
        set @fromExpression = @fromExpression + ' LEFT OUTER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
    set @Select = @Select + ', IsNull(pi.permission_level,0) as current_permission_level  '
  end
end

exec qp_GetContentPage  @Select = @Select,
            @From=@fromExpression,
            @Where=@fullWhereExpression,
            @OrderBy=@OrderExpression,
            @StartRow=@StartRow,
            @PageSize=@PageSize,
            @GetCount=1,
            @TotalRecords=@TotalRecords output,

              @use_security = @use_security,
              @user_id = @user_id,
              @group_id = @group_id,
              @start_level = @start_level,
              @end_level = @end_level,
              @entity_name = 'content_item',
              @parent_entity_name = 'content',
              @parent_entity_id = @ContentId,
              @insert_key = @insert_key
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.8', 'Copyright &copy; 1998-2009 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.8 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.9
-- Fix insert link for Site Restore
-- ***********************************************


ALTER TRIGGER [dbo].[ti_content_to_content] ON [dbo].[content_to_content] AFTER INSERT
AS
BEGIN

  declare @link_id numeric, @i numeric, @count numeric, @inscount numeric

  declare @cc table (
    id numeric identity(1,1) primary key,
    link_id numeric
  )

  select @count = count(link_id) from inserted

  if (@count = 1) -- prevent @@identity change (for restore site)
  begin
    select @link_id = link_id from inserted
    exec qp_build_link_view @link_id
  end
  else if (@count > 1)
  begin
    insert into @cc (link_id) select i.link_id from inserted i

    set @i = 1

    while @i < @count + 1
    begin
      select @link_id = link_id from @cc where id = @i
      exec qp_build_link_view @link_id
      set @i = @i + 1
    end
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.9', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.9 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.10
-- Unify assembling buttons
-- ***********************************************

update toolbar_buttons set action_file = null, action_function = 'assemble' where button_name = 'Assemble Page' and ACTION_FUNCTION is null
update TOOLBAR_BUTTONS set action_function = 'assemble' where LOCATION_TAB_ID = 1 and BUTTON_NAME = 'Assemble'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.10', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.10 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.11
-- Fix unique for splitted articles
-- ***********************************************

ALTER   PROCEDURE [dbo].[qp_check_unique_data_in_set]
@str_fields nvarchar(256)
AS
DECLARE @str AS NVARCHAR(2000)
DECLARE @where AS NVARCHAR(2000)
DECLARE @name nvarchar(255)
DECLARE @fuffix VARCHAR(1)
DECLARE @Wfuffix VARCHAR(5)
DECLARE @content_id NUMERIC(18, 0)
DECLARE @i NUMERIC, @count NUMERIC
Set @str = @str_fields
CREATE TABLE #tmp(
  id numeric identity(1,1) primary key,
  [attribute_name] [nvarchar] (255),
  [content_id] [numeric](18, 0)
)
exec ('INSERT INTO #tmp SELECT attribute_name, content_id FROM content_attribute WHERE attribute_id in ('+ @str +')')
Set @str = ''
Set @fuffix = ''
Set @Wfuffix = ''
Set @where = ''
set @i = 1
SELECT @count = count(id) from #tmp
WHILE @i < @count + 1
BEGIN
  SELECT @name = attribute_name, @content_id = content_id FROM #tmp WHERE id = @i
  Set @str = @str + @fuffix +'['+ cast(@name AS nvarchar) +']'
  Set @where = @where + @Wfuffix +'['+ cast(@name AS nvarchar) +']' + ' Is Not Null'
  Set @fuffix = ','
  Set @Wfuffix = ' and '
  Set @i = @i + 1
END
drop table #tmp
Set @str = 'SELECT '+ @str +' FROM content_'+ cast(@content_id AS varchar) +'_united WHERE '+ @where +' GROUP BY '+ @str +' HAVING COUNT(content_item_id) > 1'
exec (@str)

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.11', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.11 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.12
-- Hash for password, authentication
-- ***********************************************
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'hash' and TABLE_NAME = 'users')
alter table users
add hash binary(20)
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'salt' and TABLE_NAME = 'users')
alter table users
add salt bigint
GO

update users set salt = cast(substring(cast(NEWID() as binary(16)), 1, 8) as bigint) where salt is null
GO

exec qp_drop_existing 'qp_get_hash', 'IsScalarFunction'
GO

create function dbo.qp_get_hash(@password as char(20), @salt as bigint) returns binary(20)
as
begin
  return cast(hashbytes('sha1', @password + cast(@salt as nvarchar(30))) as binary(20))
end
go


update USERS set hash = dbo.qp_get_hash(password, salt) where hash is null
GO

exec qp_drop_existing 'qp_authenticate', 'IsProcedure'
GO

create procedure dbo.qp_authenticate(@login nvarchar(255), @password varchar(20), @use_nt_login bit = 0, @check_admin_access bit = 0)
as
begin
  declare @disabled bit, @hash binary(20), @salt binary(20), @user_id numeric, @auto_login bit
  if @use_nt_login = 1
  begin
    select @disabled = disabled, @user_id = user_id, @auto_login = AUTO_LOGIN from users where NT_LOGIN = @login
    if @user_id is null
    begin
      RAISERROR('Your Windows account is not mapped to any QP user', 16, 1)
      RETURN 5
    end
    else if @disabled = 1
    begin
      RAISERROR('Account is disabled. Contact <@MailForErrors@>', 16, 1)
      RETURN 2
    end
    else if @auto_login = 0
    begin
      RAISERROR('Auto login option is switched off for your account. Contact <@MailForErrors@>', 16, 1)
      RETURN 6
    end
  end
  else
  begin
    select @disabled = disabled, @hash = hash, @salt = salt, @user_id = user_id from users where login = @login
    if @user_id is null
    begin
      RAISERROR('Login doesn''t exist', 16, 1)
      RETURN 1
    end
    else if @disabled = 1
    begin
      RAISERROR('Account is disabled. Contact <@MailForErrors@>', 16, 1)
      RETURN 2
    end
    else if dbo.qp_get_hash(cast(@password as CHAR(20)), @salt) <> @hash
    begin
      RAISERROR('Password is incorrect', 16, 1)
      RETURN 3
    end
    else if @check_admin_access = 1
    begin
      if not exists(select * from USER_GROUP_BIND where GROUP_ID = 1 and USER_ID = @user_id)
      begin
        RAISERROR('Account is not a member of Administrators group', 16, 1)
        RETURN 4
      end
    end
  end
  select * from USERS where USER_ID = @user_id
  RETURN 0
end
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'PASSWORD_MODIFIED' and TABLE_NAME = 'users')
alter table users
add PASSWORD_MODIFIED datetime not null CONSTRAINT [DF_PASSWORD_MODIFIED]  DEFAULT ((getdate()))
GO

exec qp_drop_existing 'tiu_update_hash', 'IsTrigger'
GO

create trigger tiu_update_hash on dbo.users after insert, update
as
begin
  if update(password)
  begin
    declare @salt bigint, @hash binary(20), @old_hash binary(20)
    declare @id numeric, @user_id numeric, @password nvarchar(255)
    declare @is_insert bit, @update_modified bit, @i numeric, @count numeric
    declare @users table
    (
      id numeric primary key identity(1,1),
      user_id numeric,
      salt bigint,
      password nvarchar(255)
    )

    if not exists (select user_id from deleted)
      set @is_insert = 1
    else
      set @is_insert = 0

    insert into @users(user_id, password, salt)
    select user_id, password, salt from inserted

    set @i = 1
    select @count = count(user_id) from @users

    while @i < @count + 1
    begin
      select @user_id = user_id, @password = password, @salt = salt from @users where id = @i
      if @is_insert = 1
        set @salt = cast(substring(cast(NEWID() as binary(16)), 1, 8) as bigint)
      if @password <> ''
        set @hash = dbo.qp_get_hash(@password, @salt)
        set @update_modified = 1
        if @is_insert = 0
        begin
          select @old_hash = hash from deleted where user_id = @user_id
          if @hash = @old_hash
            set @update_modified = 0
        end
        if @update_modified = 1
          update users set password = '', salt = @salt, hash = @hash, password_modified = getdate() where user_id = @user_id
        else
          update users set password = '', salt = @salt, hash = @hash where user_id = @user_id
        --update users set salt = @salt, hash = dbo.qp_get_hash(@password, @salt) where user_id = @user_id
      set @i = @i + 1
    end
  end
end
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.12', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.12 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.13
-- Expand User Query content fields
-- ***********************************************

alter table content add query2 nvarchar(max) null
GO
alter table content add alt_query2 nvarchar(max) null
GO
update content set query2 = query, ALT_QUERY2 = ALT_QUERY
GO
alter table content drop column query
GO
alter table content drop column alt_query
GO
EXECUTE sp_rename N'content.query2', N'query', 'COLUMN'
GO
EXECUTE sp_rename N'content.alt_query2', N'alt_query', 'COLUMN'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.13', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.13 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.14
-- Output parameter instead of result code
-- ***********************************************

ALTER procedure dbo.qp_authenticate(@login nvarchar(255), @password varchar(20), @use_nt_login bit = 0, @check_admin_access bit = 0, @return_code int = 0 output )
as
begin
  declare @disabled bit, @hash binary(20), @salt binary(20), @user_id numeric, @auto_login bit
  set @return_code = 0
  if @use_nt_login = 1
  begin
    select @disabled = disabled, @user_id = user_id, @auto_login = AUTO_LOGIN from users where NT_LOGIN = @login
    if @user_id is null
    begin
      set @return_code = 5
      RAISERROR('Your Windows account is not mapped to any QP user', 16, 1)
    end
    else if @disabled = 1
    begin
      set @return_code = 2
      RAISERROR('Account is disabled. Contact <@MailForErrors@>', 16, 1)
    end
    else if @auto_login = 0
    begin
      set @return_code = 6
      RAISERROR('Auto login option is switched off for your account. Contact <@MailForErrors@>', 16, 1)
    end
  end
  else
  begin
    select @disabled = disabled, @hash = hash, @salt = salt, @user_id = user_id from users where login = @login
    if @user_id is null
    begin
      set @return_code = 1
      RAISERROR('Login doesn''t exist', 16, 1)
    end
    else if @disabled = 1
    begin
      set @return_code = 2
      RAISERROR('Account is disabled. Contact <@MailForErrors@>', 16, 1)
    end
    else if dbo.qp_get_hash(cast(@password as CHAR(20)), @salt) <> @hash
    begin
      set @return_code = 3
      RAISERROR('Password is incorrect', 16, 1)
    end
    else if @check_admin_access = 1
    begin
      if not exists(select * from USER_GROUP_BIND where GROUP_ID = 1 and USER_ID = @user_id)
      begin
        set @return_code = 4
        RAISERROR('Account is not a member of Administrators group', 16, 1)
      end
    end
  end
  if @return_code = 0
    select * from USERS where USER_ID = @user_id
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.14', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.14 completed'
GO

-- ***********************************************
-- Andrey Taritsyn
-- version 7.7.0.15
-- Error state instead of output parameter
-- ***********************************************

ALTER procedure [dbo].[qp_authenticate](@login nvarchar(255), @password varchar(20), @use_nt_login bit = 0, @check_admin_access bit = 0)
as
begin
  declare @disabled bit, @hash binary(20), @salt binary(20), @user_id numeric, @auto_login bit
  if @use_nt_login = 1
  begin
    select @disabled = disabled, @user_id = user_id, @auto_login = AUTO_LOGIN from users where NT_LOGIN = @login
    if @user_id is null
    begin
      RAISERROR('Your Windows account is not mapped to any QP user', 16, 5)
      RETURN
    end
    else if @disabled = 1
    begin
      RAISERROR('Account is disabled. Contact <@MailForErrors@>', 16, 2)
      RETURN
    end
    else if @auto_login = 0
    begin
      RAISERROR('Auto login option is switched off for your account. Contact <@MailForErrors@>', 16, 6)
      RETURN
    end
  end
  else
  begin
    select @disabled = disabled, @hash = hash, @salt = salt, @user_id = user_id from users where login = @login
    if @user_id is null
    begin
      RAISERROR('Login doesn''t exist', 16, 1)
      RETURN
    end
    else if @disabled = 1
    begin
      RAISERROR('Account is disabled. Contact <@MailForErrors@>', 16, 2)
      RETURN
    end
    else if dbo.qp_get_hash(cast(@password as CHAR(20)), @salt) <> @hash
    begin
      RAISERROR('Password is incorrect', 16, 3)
      RETURN
    end
    else if @check_admin_access = 1
    begin
      if not exists(select * from USER_GROUP_BIND where GROUP_ID = 1 and USER_ID = @user_id)
      begin
        RAISERROR('Account is not a member of Administrators group', 16, 4)
        RETURN
      end
    end
  end

  select * from USERS where USER_ID = @user_id
  RETURN
end

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.15', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.15 completed'
GO

-- ***********************************************
-- Andrey Taritsyn
-- version 7.7.0.16
-- Add relation for tables SITE and USERS by
-- column LAST_MODIFIED_BY
-- ***********************************************

ALTER TABLE dbo.SITE ADD CONSTRAINT
  FK_SITE_LAST_MODIFIED_BY FOREIGN KEY
  (
  LAST_MODIFIED_BY
  ) REFERENCES dbo.USERS
  (
  USER_ID
  ) ON UPDATE  NO ACTION
   ON DELETE  NO ACTION

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.16', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.16 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.17
-- Fix for user query and nvarchar(max)
-- ***********************************************
ALTER PROCEDURE [dbo].[qp_GetContentData]
(
  @SiteName nvarchar(255),
  @ContentName nvarchar(255),
  @Fields nvarchar(max) = '',
  @WhereExpression nvarchar(max) = '',
  @OrderExpression nvarchar(max) = '',
  @StartRow int = 1,
  @PageSize int = 0,
  @TotalRecords int = 0 output,
  @UseSchedule bit = 1,
  @StatusName nvarchar(255) = '',
  @ShowSplittedArticle bit = 0,
  @IncludeArchive bit = 0,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @filter_records bit = 1
)
AS
DECLARE @siteId numeric
DECLARE @contentId numeric
DECLARE @virtualType numeric

DECLARE @maxStatusId numeric
DECLARE @currentStatusId numeric
DECLARE @statusString nvarchar(max)
DECLARE @total numeric
DECLARE @tableSuffix nvarchar(20)
DECLARE @fromExpression nvarchar(max)
DECLARE @fullWhereExpression nvarchar(max)

DECLARE @insert_key varchar(200)
DECLARE @Select varchar(max)

set @insert_key ='<$_security_insert_$>'


select @siteId = site_id from site where site_name = @SiteName
if @siteId is null return 1

select @contentId = content_id, @virtualType = virtual_type from content where site_id = @SiteId and content_name = @ContentName
if @contentId is null return 2

set @Select = dbo.qp_filter_columns(@contentId, @Fields)

select top 1 @maxStatusId = status_type_id from status_type where site_id = @SiteId order by weight desc

set @currentStatusId = NULL
if @StatusName <> '' begin
  if not exists(select * from STATUS_TYPE where status_type_name = @StatusName) begin
    return 3
  end else begin
    set @statusString = 'select status_type_id from status_type where status_type_name = ''' + @StatusName + ''''
  end
end else begin
  set @statusString = cast(@maxStatusId as nvarchar)
end

if @currentStatusId = @maxStatusId Or @ShowSplittedArticle = 0 begin
  set @tableSuffix = ''
end
else begin
  set @tableSuffix = '_united'
end

if @WhereExpression = '' begin
  set @fullWhereExpression = '1 = 1'
end
else begin
  set @fullWhereExpression = @WhereExpression
end

if @UseSchedule = 1 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.visible = 1'
end

if @IncludeArchive = 0 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.archive = 0'
end

set @fullWhereExpression = @fullWhereExpression + ' and c.status_type_id in (' + @statusString + ')'

set @fromExpression = 'content_' + CONVERT(NVARCHAR, @ContentId) + @tableSuffix + ' as c WITH(NOLOCK) '

if @use_security>0
begin
  if @filter_records > 0
  begin
    set @fromExpression = @fromExpression + ' INNER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
  end
  else
  begin
        set @fromExpression = @fromExpression + ' LEFT OUTER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
    set @Select = @Select + ', IsNull(pi.permission_level,0) as current_permission_level  '
  end
end

exec qp_GetContentPage  @Select = @Select,
            @From=@fromExpression,
            @Where=@fullWhereExpression,
            @OrderBy=@OrderExpression,
            @StartRow=@StartRow,
            @PageSize=@PageSize,
            @GetCount=1,
            @TotalRecords=@TotalRecords output,

              @use_security = @use_security,
              @user_id = @user_id,
              @group_id = @group_id,
              @start_level = @start_level,
              @end_level = @end_level,
              @entity_name = 'content_item',
              @parent_entity_name = 'content',
              @parent_entity_id = @ContentId,
              @insert_key = @insert_key
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.17', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.17 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.18
-- LINQ-to-SQL Fields
-- ***********************************************
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'IMPORT_MAPPING_TO_DB' and TABLE_NAME = 'SITE')
ALTER TABLE SITE
  ADD
    IMPORT_MAPPING_TO_DB bit NOT NULL CONSTRAINT [DF_IMPORT_MAPPING_TO_DB] DEFAULT ((0)),
    PROCEED_MAPPING_WITH_DB bit NOT NULL CONSTRAINT [DF_PROCEED_MAPPING_WITH_DB] DEFAULT ((0)),
    REPLACE_URLS bit NOT NULL CONSTRAINT [DF_REPLACE_URLS] DEFAULT ((0)),
    USE_LONG_URLS bit NOT NULL CONSTRAINT [DF_USE_LONG_URLS] DEFAULT ((0)),
    NAMESPACE NVARCHAR(255) NULL,
    CONNECTION_STRING_NAME NVARCHAR(255) NULL,
    CONTEXT_CLASS_NAME NVARCHAR(255) NULL


GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'MAP_AS_CLASS' and TABLE_NAME = 'CONTENT')
ALTER TABLE CONTENT
  ADD
    MAP_AS_CLASS bit NOT NULL CONSTRAINT [DF_MAP_CONTENT_AS_CLASS] DEFAULT ((0)),
    NET_CONTENT_NAME nvarchar(255) NULL,
    NET_PLURAL_CONTENT_NAME nvarchar(255) NULL,
    USE_DEFAULT_FILTRATION bit NOT NULL CONSTRAINT [DF_USE_DEFAULT_FILTRATION] DEFAULT ((0))
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'MAP_AS_PROPERTY' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE
  ADD
    MAP_AS_PROPERTY bit NOT NULL CONSTRAINT [DF_MAP_AS_PROPERTY] DEFAULT ((0)),
    NET_ATTRIBUTE_NAME nvarchar(255) NULL,
    NET_BACK_ATTRIBUTE_NAME nvarchar(255) NULL
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'MAP_AS_CLASS' and TABLE_NAME = 'CONTENT_TO_CONTENT')
ALTER TABLE CONTENT_TO_CONTENT
  ADD
    MAP_AS_CLASS bit NOT NULL CONSTRAINT [DF_MAP_LINK_AS_CLASS] DEFAULT ((0)),
    NET_LINK_NAME nvarchar(255) NULL,
    NET_PLURAL_LINK_NAME nvarchar(255) NULL
GO

exec qp_drop_existing 'dbo.qp_workflow_max_status_name', 'IsScalarFunction'
GO

exec qp_drop_existing 'dbo.qp_content_max_status_name', 'IsScalarFunction'
GO
CREATE FUNCTION [dbo].[qp_workflow_max_status_name](@workflow_id numeric) returns nvarchar(255)
AS
BEGIN

return (select top 1 st.status_type_name from workflow_rules wr
inner join status_type st on wr.successor_status_id = st.status_type_id
where wr.workflow_id = @workflow_id order by wr.RULE_ORDER desc)

END
GO

CREATE FUNCTION [dbo].[qp_content_max_status_name](@content_id numeric) returns nvarchar(255)
AS
BEGIN
  declare @workflow_id numeric
  declare @result nvarchar(255)

  select @workflow_id = workflow_id from CONTENT_WORKFLOW_BIND where content_id = @content_id
  if @workflow_id is null
    set @result = 'Published'
  else
    set @result = dbo.qp_workflow_max_status_name(@workflow_id)
  return @result
END
GO


exec qp_drop_existing 'dbo.qp_content_frontend_views_create', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_content_frontend_views_recreate', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_content_frontend_views_create]
  @content_id NUMERIC
  AS
  DECLARE @str_sql nvarchar(max), @char_content_id nvarchar(20)
  SET @char_content_id = CONVERT(nvarchar,@content_id)

  SET @str_sql =  ' create view dbo.content_' + @char_content_id + '_live as ' +
      ' select * from dbo.content_' + @char_content_id + ' where visible = 1 and archive = 0  and status_type_id in (' +
      ' select status_type_id from status_type where status_type_name = ''' + dbo.qp_content_max_status_name(@content_id) + ''')'
  EXEC(@str_sql)

  SET @str_sql = ' create view dbo.content_' + @char_content_id + '_stage as ' +
      ' select * from dbo.content_' + @char_content_id + '_united where visible = 1 and archive = 0  '
  EXEC(@str_sql)


GO

CREATE PROCEDURE [dbo].[qp_content_frontend_views_recreate]
  @content_id NUMERIC
  AS

  declare @view_name nvarchar(50)
  SET @view_name = 'dbo.content_' + CONVERT(varchar,@content_id) + '_live'
  EXEC qp_drop_existing @view_name, 'IsView'
  SET @view_name = 'dbo.content_' + CONVERT(varchar,@content_id) + '_stage'
  EXEC qp_drop_existing @view_name, 'IsView'

  exec qp_content_frontend_views_create @content_id
GO


ALTER PROCEDURE [dbo].[qp_content_table_drop]
  @content_id numeric
AS BEGIN
  DECLARE @base_table_name VARCHAR(100), @table_name VARCHAR(100)

  SET @base_table_name = 'dbo.content_' + CONVERT(VARCHAR, @content_id)
  exec qp_drop_existing @base_table_name, 'IsView'
  exec qp_drop_existing @base_table_name, 'IsUserTable'

  set @table_name = @base_table_name + '_ASYNC'
  exec qp_drop_existing @table_name, 'IsView'
  exec qp_drop_existing @table_name, 'IsUserTable'

  set @table_name = @base_table_name + '_UNITED'
  exec qp_drop_existing @table_name, 'IsView'

  set @table_name = @base_table_name + '_live'
  exec qp_drop_existing @table_name, 'IsView'

  set @table_name = @base_table_name + '_stage'
  exec qp_drop_existing @table_name, 'IsView'

  set @table_name = @base_table_name + '_item_versions'
  exec qp_drop_existing @table_name, 'IsView'
END
GO


ALTER  PROCEDURE [dbo].[qp_build_query_vcontent_view]
  @content_id NUMERIC,
  @uid NUMERIC
AS BEGIN
  DECLARE @view_name NVARCHAR(128), @sql NVARCHAR(max), @alt_sql NVARCHAR(MAX)
  DECLARE @fld_name NVARCHAR(255), @fld_type NVARCHAR(128)
  DECLARE @fld_size NUMERIC, @fld_scale NUMERIC
  DECLARE @tbl_name SYSNAME, @tbl_id NUMERIC

  DECLARE @attr_found NUMERIC, @do_field_creation NUMERIC

  DECLARE @attr_size NUMERIC, @attr_type NUMERIC, @attr_rel_id NUMERIC, @view_in_list BIT
  DECLARE @attr_related_image_attribute_id NUMERIC, @attr_use_site_library BIT
  DECLARE @link_id NUMERIC

  SET @view_name = 'content_' + CAST(@content_id AS NVARCHAR)

  SELECT @sql = query, @alt_sql = alt_query FROM content WHERE content_id = @content_id
  SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + ' AS ' + @sql
  EXEC(@sql)

  DELETE FROM content_link_view_option
  WHERE
    attribute_id IN (SELECT attribute_id FROM content_attribute WHERE content_id = @content_id)
    OR relation_attribute_id IN (SELECT attribute_id FROM content_attribute WHERE content_id = @content_id)
  DELETE FROM content_attribute WHERE content_id = @content_id

  DECLARE fields CURSOR
  FOR SELECT
    column_name, data_type, character_maximum_length, numeric_scale
  FROM
    information_schema.columns
  WHERE table_name = @view_name AND column_name NOT IN (
    'content_item_id', 'created', 'modified', 'last_modified_by', 'status_type_id', 'visible', 'archive'
  )
  OPEN fields
  FETCH NEXT FROM fields INTO @fld_name, @fld_type, @fld_size, @fld_scale
  WHILE @@FETCH_STATUS = 0 BEGIN
    SET @tbl_name = NULL
    SET @attr_found = 0
    SET @do_field_creation = 1
    SET @attr_type = NULL
    SET @attr_size = NULL
    SET @attr_type = NULL
    SET @attr_rel_id = NULL
    SET @attr_related_image_attribute_id = NULL
    SET @attr_use_site_library = 0
  SET @view_in_list = 0

    SELECT @tbl_name = table_name FROM INFORMATION_SCHEMA.VIEW_COLUMN_USAGE
    WHERE view_name = @view_name AND table_name LIKE 'content_%' AND column_name = @fld_name
    IF @tbl_name IS NOT NULL BEGIN
      SET @tbl_name = RIGHT(@tbl_name, LEN(@tbl_name) - 8)
      IF ISNUMERIC(@tbl_name) = 1 BEGIN
        SET @tbl_id = CAST(@tbl_name AS NUMERIC)
        SELECT
          @attr_size = attribute_size,
          @attr_type = attribute_type_id,
          @attr_rel_id = related_attribute_id,
      @attr_related_image_attribute_id = related_image_attribute_id,
      @attr_use_site_library = use_site_library,
      @view_in_list = view_in_list,
          @link_id = link_id
        FROM content_attribute
        WHERE content_id = @tbl_id AND attribute_name = @fld_name
        IF @attr_type IS NOT NULL SET @attr_found = 1
      END
    END

    SET @do_field_creation = 1
    IF @attr_found = 0 BEGIN
      IF LOWER(@fld_type) IN (
        'char', 'nchar', 'varchar', 'nvarchar'
      ) BEGIN
        SET @attr_type = 1
        SET @attr_size = @fld_size
      END ELSE IF LOWER(@fld_type) IN (
        'uniqueidentifier'
      ) BEGIN
        SET @attr_type = 1
        SET @attr_size = 100
      END ELSE IF LOWER(@fld_type) IN (
        'numeric', 'bigint', 'bit', 'decimal', 'int', 'money', 'smallint', 'smallmoney', 'tinyint'
      ) BEGIN
        SET @attr_type = 2
        SET @attr_size = @fld_scale
      END ELSE IF LOWER(@fld_type) IN (
        'float', 'real'
      ) BEGIN
        SET @attr_type = 2
        SET @attr_size = 10
      END ELSE IF LOWER(@fld_type) IN (
        'datetime', 'smalldatetime'
      ) BEGIN
        SET @attr_type = 6
        SET @attr_size = 0
      END ELSE IF LOWER(@fld_type) IN (
        'text', 'ntext'
      ) BEGIN
        SET @attr_type = 10
        SET @attr_size = 0
      END ELSE BEGIN
        SET @do_field_creation = 0
      END
    END

    IF @do_field_creation = 1 BEGIN
      INSERT INTO content_attribute (
        content_id, attribute_name, attribute_size, attribute_type_id, last_modified_by,
        attribute_order, related_attribute_id, related_image_attribute_id, use_site_library,
    view_in_list, link_id
      ) VALUES (
        @content_id, @fld_name, @attr_size, @attr_type, @uid,
        1, @attr_rel_id , @attr_related_image_attribute_id, @attr_use_site_library,
    @view_in_list, @link_id
      )
    END

    FETCH NEXT FROM fields INTO @fld_name, @fld_type, @fld_size, @fld_scale
  END
  CLOSE fields
  DEALLOCATE fields

  IF @alt_sql IS NULL
    SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + '_united AS select * from dbo.content_' + + CAST(@content_id AS NVARCHAR)
  ELSE
    SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + '_united  AS ' + @alt_sql
  EXEC(@sql)

  exec qp_content_frontend_views_create @content_id

END
GO

ALTER TRIGGER [dbo].[td_remove_field] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN

  declare @attribute_id numeric, @attribute_name nvarchar(255), @content_id numeric
  declare @indexed numeric, @type_name nvarchar(255)

  declare @base_table_name nvarchar(30), @table_name nvarchar(30)

  declare @i numeric, @count numeric

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric,
    attribute_name nvarchar(255),
    type_name nvarchar(255),
    indexed numeric,
    content_id numeric
  )

  /* Collect affected items */
  insert into @ca (attribute_id, attribute_name, indexed, type_name, content_id)
    select d.attribute_id, d.attribute_name, d.index_flag, at.type_name, d.content_id
    from deleted d
    inner join attribute_type at on d.attribute_type_id = at.attribute_type_id
    inner join content c on d.content_id = c.content_id
    where c.virtual_type = 0
  IF dbo.qp_get_version_control() IS NOT NULL BEGIN
    DELETE FROM VERSION_CONTENT_DATA WHERE ATTRIBUTE_ID IN (SELECT ATTRIBUTE_ID FROM @ca)
  END
  set @i = 1
  select @count = count(id) from @ca

  while @i < @count + 1
  begin
    select @attribute_id = attribute_id, @attribute_name = attribute_name, @indexed = indexed,
      @type_name = type_name, @content_id = content_id
      from @ca where id = @i

      set @base_table_name = 'content_' + convert(nvarchar, @content_id)

      /* Drop indexes if exists */
      set @table_name = @base_table_name + '_ASYNC'
      if @indexed = 1
      begin
        exec qp_drop_index @base_table_name, @attribute_name
        exec qp_drop_index @table_name, @attribute_name
      end

      /* Drop columns from both common and async tables */
      exec qp_drop_column @base_table_name, @attribute_name
      exec qp_drop_column @table_name, @attribute_name

      /* Recreate United View */
      exec qp_content_united_view_recreate @content_id
      exec qp_content_frontend_views_recreate @content_id

    set @i = @i + 1
  end
END

GO

ALTER TRIGGER [dbo].[ti_insert_field] ON [dbo].[CONTENT_ATTRIBUTE] FOR INSERT
AS
BEGIN

  declare @attribute_id numeric, @attribute_name nvarchar(255), @attribute_size numeric, @content_id numeric
  declare @indexed numeric, @required numeric
  declare @attribute_type_id numeric, @type_name nvarchar(255), @database_type nvarchar(255)

  declare @base_table_name nvarchar(30), @table_name nvarchar(30)

  declare @i numeric, @count numeric, @max numeric

  declare @ca table (
    id numeric identity(1,1) primary key,
    attribute_id numeric,
    attribute_name nvarchar(255),
    attribute_size numeric,
    indexed numeric,
    required numeric,
    attribute_type_id numeric,
    type_name nvarchar(255),
    database_type nvarchar(255),
    content_id numeric
  )

  /* Collect affected items */
  insert into @ca (attribute_id, attribute_name, attribute_size, indexed, required, attribute_type_id, type_name, database_type, content_id)
    select i.attribute_id, i.attribute_name, i.attribute_size, i.index_flag, i.required, i.attribute_type_id, at.type_name, at.database_type, i.content_id
    from inserted i
    inner join attribute_type at on i.attribute_type_id = at.attribute_type_id
    inner join content c on i.content_id = c.content_id
    where c.virtual_type = 0

  set @i = 1
  select @count = count(id) from @ca

  while @i < @count + 1
  begin
    select @attribute_id = attribute_id, @attribute_name = attribute_name, @attribute_size = attribute_size,
      @indexed = indexed, @required = required, @attribute_type_id = attribute_type_id,
      @type_name = type_name, @database_type = database_type, @content_id = content_id
      from @ca where id = @i

      set @base_table_name = 'content_' + convert(nvarchar, @content_id)

      IF NOT EXISTS(SELECT * FROM sysobjects WHERE id = OBJECT_ID(@base_table_name) AND OBJECTPROPERTY(id, 'IsUserTable') = 1)
      begin
        exec qp_rebuild_content @content_id
      end
      else begin

        /* Add column in common and async tables */
        set @table_name = @base_table_name + '_ASYNC'
        exec qp_add_column @base_table_name, @attribute_name, @type_name, @database_type, @attribute_size
        exec qp_add_column @table_name, @attribute_name, @type_name, @database_type, @attribute_size

        /* Create indexes on new fields if required */
        if @indexed = 1
        begin
          exec qp_add_index @base_table_name, @attribute_name
          exec qp_add_index @table_name, @attribute_name
        end

        /* Recreate United View */
        exec qp_content_united_view_recreate @content_id
        exec qp_content_frontend_views_recreate @content_id
      end
    set @i = @i + 1
  end
END
GO

ALTER  TRIGGER [dbo].[tu_update_field] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
if not update(attribute_order) and
    (
      update(attribute_name) or update(attribute_type_id)
      or update(attribute_size) or update(index_flag)
    )
  begin
    declare @attribute_id numeric, @attribute_name nvarchar(255), @attribute_size numeric, @content_id numeric
    declare @indexed numeric, @required numeric
    declare @attribute_type_id numeric, @type_name nvarchar(255), @database_type nvarchar(255)

    declare @new_attribute_name nvarchar(255), @new_attribute_size numeric
    declare @new_indexed numeric, @new_required numeric
    declare @new_attribute_type_id numeric, @new_type_name nvarchar(255), @new_database_type nvarchar(255)

    declare @base_table_name nvarchar(30), @table_name nvarchar(30)

    declare @i numeric, @count numeric, @preserve_index bit

    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      attribute_name nvarchar(255),
      attribute_size numeric,
      indexed numeric,
      required numeric,
      attribute_type_id numeric,
      type_name nvarchar(255),
      database_type nvarchar(255),
      content_id numeric
    )

  /* Collect affected items */
    insert into @ca (attribute_id, attribute_name, attribute_size, indexed, required, attribute_type_id, type_name, database_type, content_id)
      select d.attribute_id, d.attribute_name, d.attribute_size, d.index_flag, d.required, d.attribute_type_id, at.type_name, at.database_type, d.content_id
      from deleted d
      inner join attribute_type at on d.attribute_type_id = at.attribute_type_id
      inner join content c on d.content_id = c.content_id
      where c.virtual_type = 0

    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @attribute_id = attribute_id, @attribute_name = attribute_name, @attribute_size = attribute_size,
        @indexed = indexed, @required = required, @attribute_type_id = attribute_type_id,
        @type_name = type_name, @database_type = database_type, @content_id = content_id
        from @ca where id = @i

      select @new_attribute_name = ca.attribute_name, @new_attribute_size = ca.attribute_size,
        @new_indexed = ca.index_flag, @new_required = ca.required, @new_attribute_type_id = ca.attribute_type_id,
        @new_type_name = at.type_name, @new_database_type = at.database_type
        from content_attribute ca
        inner join attribute_type at on ca.attribute_type_id = at.attribute_type_id
        where attribute_id = @attribute_id

        set @base_table_name = 'content_' + convert(nvarchar, @content_id)
        set @table_name = @base_table_name + '_ASYNC'

        if @indexed = 1 and @new_indexed = 1
          set @preserve_index = 1
        else
          set @preserve_index = 0


        if @indexed = 1 and @new_indexed = 0
        begin
          exec qp_drop_index @base_table_name, @attribute_name
          exec qp_drop_index @table_name, @attribute_name
        end

        if @database_type <> @new_database_type or @attribute_size <> @new_attribute_size
        begin

          if @database_type = 'ntext' and @new_database_type <> 'ntext'
            exec qp_copy_blob_data_to_data @attribute_id
          else if @database_type <> 'ntext' and @new_database_type = 'ntext'
            exec qp_copy_data_to_blob_data @attribute_id

          exec qp_recreate_column @base_table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_recreate_column @table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_content_united_view_recreate @content_id
          exec qp_content_frontend_views_recreate @content_id
        end
        else begin
          if @attribute_name <> @new_attribute_name
          begin
            exec qp_rename_column @base_table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_rename_column @table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_content_united_view_recreate @content_id
            exec qp_content_frontend_views_recreate @content_id
          end
        end
        if @attribute_name <> @new_attribute_name
          UPDATE container Set order_static = REPLACE(order_static, @attribute_name, @new_attribute_name) WHERE content_id = @content_id AND order_static LIKE '%'+ @attribute_name +'%'

        if @indexed = 0 and @new_indexed = 1
        begin
          exec qp_add_index @base_table_name, @new_attribute_name
          exec qp_add_index @table_name, @new_attribute_name
        end
      set @i = @i + 1
    end
  end
END

GO

ALTER   PROCEDURE [dbo].[qp_rebuild_content]
@content_id numeric
AS
      EXEC qp_content_table_drop  @content_id
      EXEC qp_content_table_create @content_id, 1
      EXEC qp_content_table_create @content_id, 0
      EXEC qp_content_united_view_create @content_id
      EXEC qp_content_frontend_views_create @content_id
      EXEC qp_content_table_fill @content_id
GO



exec qp_drop_existing 'qp_recreate_all_frontend_views', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_recreate_all_frontend_views]
AS

  declare @content_id numeric

  declare @i numeric, @count numeric, @max numeric

  declare @c table (
    id numeric identity(1,1) primary key,
    content_id numeric
  )

  /* Collect affected items */
  insert into @c (content_id)
    select content_id from content order by content_id asc

  set @i = 1
  select @count = count(id) from @c

  while @i < @count + 1
  begin
    select @content_id = content_id from @c where id = @i
    if dbo.qp_check_existence('content_' + CAST(@content_id as nvarchar) + '_united', 'IsView') > 0
    begin
      --not broken user_query
      begin try
        exec qp_content_frontend_views_recreate @content_id
      end try
      begin catch
        print @content_id
        print ERROR_MESSAGE()
      end catch
    end
    set @i = @i + 1
  end

GO

exec qp_recreate_all_frontend_views
GO

exec qp_drop_existing 'qp_recreate_all_frontend_views', 'IsProcedure'
GO

exec qp_update_translations 'Context Class Name', 'Имя контекстного класса'
exec qp_update_translations 'LINQ Assembling Parameters', 'Параметры сборки в LINQ-классы'
exec qp_update_translations 'Import mapping file to database', 'Импортировать файл отображения в базу данных'
exec qp_update_translations 'Use direct mapping from database', 'Использовать прямое отображение из базы данных'
exec qp_update_translations 'Replace URLs', 'Заменять URL''ы'
exec qp_update_translations 'Use long URLs', 'Использовать длинные URL''ы'
exec qp_update_translations 'Namespace for generated classes', 'Пространство имен для генерируемых классов'
exec qp_update_translations 'Connection string name', 'Имя строки подключения'
exec qp_update_translations 'LINQ Mapping Parameters', 'Параметры отображения в LINQ-классы'
exec qp_update_translations 'Map as class', 'Отображать как класс'
exec qp_update_translations 'Name (singular)', 'Имя (единственное)'
exec qp_update_translations 'Name (plural)', 'Имя (множественное)'
exec qp_update_translations 'Use default filtration', 'Использовать фильтрацию по умолчанию'
exec qp_update_translations 'Map as LINQ Property', 'Отображать как LINQ-свойство'
exec qp_update_translations 'LINQ Property Name', 'Имя LINQ-свойства'
exec qp_update_translations 'LINQ Back Property Name', 'Имя обратного LINQ-свойства'
exec qp_update_translations 'Map Junction Table as Class', 'Отображать узловую таблицу как класс'
exec qp_update_translations 'LINQ Junction Class Name (singular)', 'Имя узлового LINQ-класса (единственное)'
exec qp_update_translations 'LINQ Junction Class Name (plural)', 'Имя узлового LINQ-класса (множественное)'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.18', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.18 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.19
-- Splitted field
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'SPLITTED' and TABLE_NAME = 'CONTENT_ITEM')
ALTER TABLE CONTENT_ITEM
  ADD SPLITTED BIT NOT NULL CONSTRAINT DF_SPLITTED DEFAULT (0)
GO


IF NOT EXISTS(SELECT * FROM SYSINDEXES WHERE NAME = 'IX_CONTENT_ITEM_SPLITTED')
CREATE NONCLUSTERED INDEX [IX_CONTENT_ITEM_SPLITTED]
  ON [dbo].[CONTENT_ITEM] ([SPLITTED])
  INCLUDE ([CONTENT_ITEM_ID])
GO


ALTER TRIGGER [dbo].[tu_update_item] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
begin
  if not update(locked_by) and not update(not_for_replication) and not update(splitted)
  begin
    declare @content_id numeric , @content_item_id numeric, @last_modified_by numeric, @modified datetime, @created datetime, @status_type_id numeric, @visible numeric, @archive numeric
    declare @char_content_id nvarchar(10), @char_content_item_id nvarchar(10)
    declare @sql nvarchar(2000), @nsql nvarchar(4000)
    declare @async_string varchar(20), @table_name varchar(25), @is_target_table_async bit
    declare @async_id numeric, @item_exists bit
    declare @workflow_id numeric, @is_async NUMERIC
    declare @i numeric, @count numeric

    DECLARE @ci table (
      id numeric identity(1,1) primary key,
      content_item_id numeric,
      content_id numeric,
      workflow_id numeric,
      is_async numeric
    )

    insert into @ci(content_item_id, content_id, workflow_id, is_async)
      select i.content_item_id, i.content_id, ciw.workflow_id, ciw.is_async
      FROM inserted AS i
      INNER JOIN content AS c ON i.content_id = c.content_id
      LEFT OUTER JOIN content_item_workflow ciw on i.content_item_id = ciw.content_item_id
      where i.not_for_replication = 0 and c.virtual_type = 0
    select @count = count(id) from @ci

    set @i = 1
    while @i < @count + 1
    begin
      select
        @content_item_id = content_item_id, @content_id = content_id,
        @workflow_id = workflow_id, @is_async = is_async
        from @ci where id = @i

      select @modified = modified, @created = created, @status_type_id = status_type_id,
        @archive = archive, @visible = visible, @last_modified_by = last_modified_by
        from content_item where content_item_id = @content_item_id

      set @char_content_item_id = convert(nvarchar, @content_item_id)
      set @char_content_id = convert(nvarchar, @content_id)

      exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

      update content_item set splitted = @is_target_table_async where content_item_id = @content_item_id

      if @is_target_table_async = 1
      begin
        exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out
        if @item_exists = 0
        begin
          exec qp_get_insert_item_sql @table_name, @content_item_id, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out, @created = @created, @modified = @modified
          print @sql
          exec sp_executesql @sql
        end
      end

      exec qp_get_update_item_sql @table_name, @content_item_id, @modified, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out
      print @sql
      exec sp_executesql @sql

      if @is_target_table_async = 1 and (update(archive) or update(visible)) begin
        set @table_name = 'content_' + @char_content_id
        exec qp_get_update_flags_sql @table_name, @content_item_id, @visible, @archive, @sql = @sql out
        exec sp_executesql @sql
      end

      if @is_target_table_async = 0
      begin
        set @table_name = 'content_' + @char_content_id + '_ASYNC'
        exec qp_get_delete_item_sql @table_name, @content_item_id, @sql = @sql out
        exec sp_executesql @sql
      end
      set @i = @i + 1
    end
  end
end
GO

exec qp_drop_existing 'qp_set_splitted', 'IsProcedure'
GO

create procedure dbo.[qp_set_splitted]
AS
begin
  declare @id numeric, @count numeric, @item_id numeric, @content_id numeric, @result bit, @sql nvarchar(max)
  declare @ids table (
    id numeric identity(1,1) primary key,
    item_id numeric,
    content_id numeric
  )
  insert into @ids(item_id, content_id)
  select content_item_id, content_id from content_item

  set @id = 1
  select @count = count(id) from @ids

  while @id < @count + 1
  begin
    select @item_id = item_id, @content_id = content_id from @ids where id = @id
    set @sql = 'delete from content_' + cast(@content_id as nvarchar) + '_async where content_item_id = @id'
    exec qp_is_target_table_async @item_id, @is_target_table_async = @result OUTPUT
    if @result = 1
      update content_item set splitted = 1 where CONTENT_ITEM_ID = @item_id
    else
      exec sp_executesql @sql, N'@id numeric', @id = @item_id
    set @id = @id + 1
  end
end
GO

exec qp_set_splitted
GO


exec qp_drop_existing 'qp_set_splitted', 'IsProcedure'
GO



INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.19', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.19 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.20
-- Get Version Control Data in plain view
-- **************************************

exec qp_drop_existing 'qp_get_data', 'IsScalarFunction'
GO
create function dbo.qp_get_data(@attribute_id numeric, @content_item_id numeric) returns nvarchar(max)
as
begin
declare @result nvarchar(max)
select @result = (case when attribute_type_id in (10, 11) THEN convert(nvarchar(max), cd.BLOB_DATA) ELSE cd.DATA end) from content_data cd inner join CONTENT_ATTRIBUTE ca on cd.ATTRIBUTE_ID = cd.ATTRIBUTE_ID where cd.attribute_id = @attribute_id and cd.content_item_id = @content_item_id
return @result
end
GO

exec qp_drop_existing 'qp_get_version_data', 'IsScalarFunction'
GO


CREATE function [dbo].[qp_get_version_data](@attribute_id numeric, @version_id numeric) returns nvarchar(max)
as
begin
declare @result nvarchar(max)
select @result = (case when attribute_type_id in (10, 11) THEN convert(nvarchar(max), cd.BLOB_DATA) ELSE cd.DATA end) from version_content_data cd inner join CONTENT_ATTRIBUTE ca on cd.ATTRIBUTE_ID = cd.ATTRIBUTE_ID where cd.attribute_id = @attribute_id and content_item_version_id = @version_id
return @result
end
GO

exec qp_drop_existing 'qp_get_content_field_list', 'IsScalarFunction'
GO


create function [dbo].[qp_get_content_field_list](@content_id numeric, @column_prefix nvarchar(10)) returns nvarchar(max)
as
begin
declare @result nvarchar(max)
declare @attrs table
(
  id numeric primary key identity(1,1),
  name nvarchar(255)

)

insert into @attrs(name)
select attribute_name from content_attribute where content_id = @content_id order by attribute_order

declare @i numeric, @count numeric, @name nvarchar(255)

set @i = 1
select @count = count(id) from @attrs
set @result = ''

while @i <= @count
begin
  if @i > 1 set @result = @result + ', '
  select @name = name from @attrs where id = @i
  set @result = @result + @column_prefix + '[' + @name  + ']'
  set @i = @i + 1
end
return @result
end
GO

CREATE NONCLUSTERED INDEX IX_CONTENT_ITEM_VERSION_ID
ON [dbo].[CONTENT_ITEM_STATUS_HISTORY] ([content_item_version_id])
INCLUDE ([STATUS_HISTORY_DATE],[USER_ID])
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.20', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.20 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.21
-- Fix some foreign key names
-- **************************************

exec qp_drop_existing 'add_update_foreign_key', 'IsProcedure'
GO

create procedure add_update_foreign_key
@constraint_name sysname,
@table_name sysname,
@ref_table_name sysname,
@column_name sysname,
@ref_column_name sysname,
@delete bit = 0
AS

declare @name sysname
select @name = name from sys.foreign_keys fk
inner join INFORMATION_SCHEMA.KEY_COLUMN_USAGE cku on fk.name = cku.CONSTRAINT_NAME
where fk.parent_object_id in (select object_id from sys.objects where name = @table_name)
  and fk.referenced_object_id in (select object_id from sys.objects where name = @ref_table_name)
  and cku.COLUMN_NAME = @column_name
print @name

if @name is not null
  exec sp_rename @name, @constraint_name
else
begin
  declare @sql nvarchar(max)
  declare @delete_sql nvarchar(20)
  if @delete = 1
    set @delete_sql = 'on delete cascade'
  else
    set @delete_sql = ''
  set @sql = 'alter table ' + @table_name + ' add constraint ' + @constraint_name + ' foreign key (' + @column_name + ') references ' + @ref_table_name + ' (' + @ref_column_name + ') ' + @delete_sql
  exec sp_executesql @sql
end
GO



exec add_update_foreign_key 'FK_CONTENT_SITE_ID', 'CONTENT', 'SITE', 'SITE_ID', 'SITE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_CONTENT_GROUP_ID', 'CONTENT', 'CONTENT_GROUP', 'CONTENT_GROUP_ID', 'CONTENT_GROUP_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_VIRTUAL_JOIN_PRIMARY_CONTENT_ID', 'CONTENT', 'CONTENT', 'VIRTUAL_JOIN_PRIMARY_CONTENT_ID', 'CONTENT_ID'
GO

exec add_update_foreign_key 'FK_SITE_LOCKED_BY', 'SITE', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_USER_GROUP_BIND_USER_ID', 'USER_GROUP_BIND', 'USERS', 'USER_ID', 'USER_ID', 1
GO

exec add_update_foreign_key 'FK_USER_GROUP_BIND_GROUP_ID', 'USER_GROUP_BIND', 'USER_GROUP', 'GROUP_ID', 'GROUP_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_CONTENT_ID', 'CONTENT_ATTRIBUTE', 'CONTENT', 'CONTENT_ID', 'CONTENT_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_RELATED_ATTRIBUTE_ID', 'CONTENT_ATTRIBUTE', 'CONTENT_ATTRIBUTE', 'RELATED_ATTRIBUTE_ID', 'ATTRIBUTE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_PERSISTENT_ATTR_ID', 'CONTENT_ATTRIBUTE', 'CONTENT_ATTRIBUTE', 'PERSISTENT_ATTR_ID', 'ATTRIBUTE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_JOIN_ATTR_ID', 'CONTENT_ATTRIBUTE', 'CONTENT_ATTRIBUTE', 'JOIN_ATTR_ID', 'ATTRIBUTE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_LINK_ID', 'CONTENT_ATTRIBUTE', 'CONTENT_TO_CONTENT', 'LINK_ID', 'LINK_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_ATTRIBUTE_TYPE_ID', 'CONTENT_ATTRIBUTE', 'ATTRIBUTE_TYPE', 'ATTRIBUTE_TYPE_ID', 'ATTRIBUTE_TYPE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_RELATED_IMAGE_ATTRIBUTE_ID', 'CONTENT_ATTRIBUTE', 'CONTENT_ATTRIBUTE', 'RELATED_IMAGE_ATTRIBUTE_ID', 'ATTRIBUTE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_LAST_MODIFIED_BY', 'CONTENT', 'USERS', 'LAST_MODIFIED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ATTRIBUTE_LAST_MODIFIED_BY', 'CONTENT_ATTRIBUTE', 'USERS', 'LAST_MODIFIED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_TO_CONTENT_L_CONTENT_ID', 'CONTENT_TO_CONTENT', 'CONTENT', 'L_CONTENT_ID', 'CONTENT_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_TO_CONTENT_R_CONTENT_ID', 'CONTENT_TO_CONTENT', 'CONTENT', 'R_CONTENT_ID', 'CONTENT_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ACCESS_CONTENT_ID', 'CONTENT_ACCESS', 'CONTENT', 'CONTENT_ID', 'CONTENT_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ACCESS_USER_ID', 'CONTENT_ACCESS', 'USERS', 'USER_ID', 'USER_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ACCESS_GROUP_ID', 'CONTENT_ACCESS', 'USER_GROUP', 'GROUP_ID', 'GROUP_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_FORM_OBJECT_ID', 'CONTENT_FORM', 'OBJECT', 'OBJECT_ID', 'OBJECT_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_FORM_CONTENT_ID', 'CONTENT_FORM', 'CONTENT', 'CONTENT_ID', 'CONTENT_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_FORM_THANK_YOU_PAGE_ID', 'CONTENT_FORM', 'PAGE', 'THANK_YOU_PAGE_ID', 'PAGE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_FORM_LOCKED_BY', 'CONTENT_FORM', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_FORM_NET_LANGUAGE_ID', 'CONTENT_FORM', 'NET_LANGUAGES', 'NET_LANGUAGE_ID', 'NET_LANGUAGE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_GROUP_SITE_ID', 'CONTENT_GROUP', 'SITE', 'SITE_ID', 'SITE_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_STATUS_TYPE_ID', 'CONTENT_ITEM', 'STATUS_TYPE', 'STATUS_TYPE_ID', 'STATUS_TYPE_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_CONTENT_ID', 'CONTENT_ITEM', 'CONTENT', 'CONTENT_ID', 'CONTENT_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_LOCKED_BY', 'CONTENT_ITEM', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_CONTAINER_LOCKED_BY', 'CONTAINER', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_PAGE_LOCKED_BY', 'PAGE', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_PAGE_TEMPLATE_LOCKED_BY', 'PAGE_TEMPLATE', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_OBJECT_LOCKED_BY', 'OBJECT', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_OBJECT_FORMAT_LOCKED_BY', 'OBJECT_FORMAT', 'USERS', 'LOCKED_BY', 'USER_ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_ACCESS_USER_ID', 'CONTENT_ITEM_ACCESS', 'USERS', 'USER_ID', 'USER_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_ACCESS_GROUP_ID', 'CONTENT_ITEM_ACCESS', 'USER_GROUP', 'GROUP_ID', 'GROUP_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_ACCESS_CONTENT_ITEM_ID', 'CONTENT_ITEM_ACCESS', 'CONTENT_ITEM', 'CONTENT_ITEM_ID', 'CONTENT_ITEM_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_SCHEDULE_CONTENT_ITEM_ID', 'CONTENT_ITEM_SCHEDULE', 'CONTENT_ITEM', 'CONTENT_ITEM_ID', 'CONTENT_ITEM_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_STATUS_HISTORY_CONTENT_ITEM_ID', 'CONTENT_ITEM_STATUS_HISTORY', 'CONTENT_ITEM', 'CONTENT_ITEM_ID', 'CONTENT_ITEM_ID', 1
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_STATUS_HISTORY_SYSTEM_STATUS_TYPE_ID', 'CONTENT_ITEM_STATUS_HISTORY', 'SYSTEM_STATUS_TYPE', 'SYSTEM_STATUS_TYPE_ID', 'ID'
GO

exec add_update_foreign_key 'FK_CONTENT_ITEM_VERSION_CONTENT_ITEM_ID', 'CONTENT_ITEM_VERSION', 'CONTENT_ITEM', 'CONTENT_ITEM_ID', 'CONTENT_ITEM_ID', 1
GO

exec add_update_foreign_key 'FK_SITE_ACCESS_USER_ID', 'SITE_ACCESS', 'USERS', 'USER_ID', 'USER_ID', 1
GO

exec add_update_foreign_key 'FK_SITE_ACCESS_GROUP_ID', 'SITE_ACCESS', 'USER_GROUP', 'GROUP_ID', 'GROUP_ID', 1
GO

exec add_update_foreign_key 'FK_SITE_ACCESS_SITE_ID', 'SITE_ACCESS', 'SITE', 'SITE_ID', 'SITE_ID', 1
GO

exec add_update_foreign_key 'FK_VERSION_CONTENT_DATA_ATTRIBUTE_ID', 'VERSION_CONTENT_DATA', 'CONTENT_ATTRIBUTE', 'ATTRIBUTE_ID', 'ATTRIBUTE_ID', 1
GO

exec add_update_foreign_key 'FK_ITEM_LINK_ASYNC_LINK_ID', 'ITEM_LINK_ASYNC', 'CONTENT_TO_CONTENT', 'LINK_ID', 'LINK_ID'
GO

exec add_update_foreign_key 'FK_ITEM_LINK_ASYNC_ITEM_ID', 'ITEM_LINK_ASYNC', 'CONTENT_ITEM', 'ITEM_ID', 'CONTENT_ITEM_ID'
GO

exec add_update_foreign_key 'FK_ITEM_LINK_ASYNC_LINKED_ITEM_ID', 'ITEM_LINK_ASYNC', 'CONTENT_ITEM', 'LINKED_ITEM_ID', 'CONTENT_ITEM_ID'
GO

exec qp_drop_existing 'content_link_view_option', 'IsUserTable'
GO

exec add_update_foreign_key 'FK_ITEM_TO_ITEM_LINK_ID', 'ITEM_TO_ITEM', 'CONTENT_TO_CONTENT', 'LINK_ID', 'LINK_ID'
GO

exec add_update_foreign_key 'FK_ITEM_TO_ITEM_L_ITEM_ID', 'ITEM_TO_ITEM', 'CONTENT_ITEM', 'L_ITEM_ID', 'CONTENT_ITEM_ID'
GO

exec add_update_foreign_key 'FK_ITEM_TO_ITEM_R_ITEM_ID', 'ITEM_TO_ITEM', 'CONTENT_ITEM', 'R_ITEM_ID', 'CONTENT_ITEM_ID'
GO

exec add_update_foreign_key 'FK_ITEM_TO_ITEM_VERSION_LINKED_ITEM_ID', 'ITEM_TO_ITEM_VERSION', 'CONTENT_ITEM', 'LINKED_ITEM_ID', 'CONTENT_ITEM_ID', 1
GO

exec add_update_foreign_key 'FK_ITEM_TO_ITEM_VERSION_CONTENT_ITEM_VERSION_ID', 'ITEM_TO_ITEM_VERSION', 'CONTENT_ITEM_VERSION', 'CONTENT_ITEM_VERSION_ID', 'CONTENT_ITEM_VERSION_ID'
GO

exec add_update_foreign_key 'FK_ITEM_TO_ITEM_VERSION_ATTRIBUTE_ID', 'ITEM_TO_ITEM_VERSION', 'CONTENT_ATTRIBUTE', 'ATTRIBUTE_ID', 'ATTRIBUTE_ID'
GO

exec add_update_foreign_key 'FK_NOTIFICATIONS_EMAIL_ATTRIBUTE_ID', 'NOTIFICATIONS', 'CONTENT_ATTRIBUTE', 'EMAIL_ATTRIBUTE_ID', 'ATTRIBUTE_ID'
GO

exec add_update_foreign_key 'FK_NOTIFICATIONS_FROM_BACKENDUSER_ID', 'NOTIFICATIONS', 'USERS', 'FROM_BACKENDUSER_ID', 'USER_ID'
GO

exec add_update_foreign_key 'FK_NOTIFICATIONS_NOTIFY_ON_STATUS_TYPE_ID', 'NOTIFICATIONS', 'STATUS_TYPE', 'NOTIFY_ON_STATUS_TYPE_ID', 'STATUS_TYPE_ID'
GO

exec add_update_foreign_key 'FK_UNION_ATTRS_VIRTUAL_ATTR_ID', 'UNION_ATTRS', 'CONTENT_ATTRIBUTE', 'VIRTUAL_ATTR_ID', 'ATTRIBUTE_ID', 1
GO

exec add_update_foreign_key 'FK_UNION_ATTRS_UNION_ATTR_ID', 'UNION_ATTRS', 'CONTENT_ATTRIBUTE', 'UNION_ATTR_ID', 'ATTRIBUTE_ID'
GO


exec qp_drop_existing 'td_users_pass_objs_ownership_to_admin', 'IsTrigger'
GO

exec qp_drop_existing 'tbd_user', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id

    UPDATE SITE SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE SITE SET locked = NULL, locked_by = NULL FROM SITE c inner join deleted d on c.locked_by = d.user_id

    UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
    UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
    UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

    delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.21', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.21 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.22
-- Fix some foreign key names #2
-- **************************************


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.22', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.22 completed'
GO



-- **************************************
-- Pavel Celut
-- version 7.7.0.23
-- Fix some foreign key names #3
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.23', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.23 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.24
-- Add some primary keys
-- **************************************


ALTER TABLE dbo.translations ADD CONSTRAINT
  PK_translations PRIMARY KEY CLUSTERED
  (
    phrase_id, language_id
  )
GO

alter table dbo.SITE_ACCESS ADD
  SITE_ACCESS_ID NUMERIC IDENTITY(1,1) CONSTRAINT PK_SITE_ACCESS PRIMARY KEY NONCLUSTERED
GO

alter table dbo.CONTENT_ACCESS ADD
  CONTENT_ACCESS_ID NUMERIC IDENTITY(1,1) CONSTRAINT PK_CONTENT_ACCESS PRIMARY KEY NONCLUSTERED
GO

alter table dbo.CONTENT_ITEM_ACCESS ADD
  CONTENT_ITEM_ACCESS_ID NUMERIC IDENTITY(1,1) CONSTRAINT PK_CONTENT_ITEM_ACCESS PRIMARY KEY NONCLUSTERED
GO

alter table dbo.WORKFLOW_ACCESS ADD
  WORKFLOW_ACCESS_ACCESS_ID NUMERIC IDENTITY(1,1) CONSTRAINT PK_WORKFLOW_ACCESS PRIMARY KEY NONCLUSTERED
GO

alter table dbo.FOLDER_ACCESS ADD
  FOLDER_ACCESS_ID NUMERIC IDENTITY(1,1) CONSTRAINT PK_FOLDER_ACCESS PRIMARY KEY NONCLUSTERED
GO

alter table dbo.CONTENT_FOLDER_ACCESS ADD
  CONTENT_FOLDER_ACCESS_ID NUMERIC IDENTITY(1,1) CONSTRAINT PK_CONTENT_FOLDER_ACCESS PRIMARY KEY NONCLUSTERED
GO

alter table dbo.GROUP_TO_GROUP ADD CONSTRAINT
  PK_GROUP_TO_GROUP PRIMARY KEY CLUSTERED
  (
    CHILD_GROUP_ID
  )
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.24', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.24 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.25
-- Version Control SP
-- **************************************

exec qp_drop_existing 'qp_get_versions', 'IsProcedure'
GO

create procedure [dbo].[qp_get_versions]
@item_id numeric,
@version_id numeric = 0
as
begin

declare @sql nvarchar(max), @version_sql nvarchar(100), @fields nvarchar(max), @prefixed_fields nvarchar(max)
declare @content_id numeric
select @content_id = content_id from content_item ci where ci.CONTENT_ITEM_ID = @item_id

if @content_id is not null
begin
  select @fields = dbo.qp_get_content_field_list(@content_id, '')
  select @prefixed_fields = dbo.qp_get_content_field_list(@content_id, 'pt.')


  if @version_id = 0
    set @version_sql = ''
  else
    set @version_sql = ' and vcd.CONTENT_ITEM_VERSION_ID= @version_id'


  set @sql = N'select pt.content_item_id, pt.version_id, s.STATUS_HISTORY_DATE AS MODIFIED, s.USER_ID as last_modified_by, ' + @prefixed_fields  + N' from
  (
  select civ.CONTENT_ITEM_ID, vcd.CONTENT_ITEM_VERSION_ID as version_id, ca.ATTRIBUTE_NAME, dbo.qp_get_version_data(vcd.ATTRIBUTE_ID, vcd.CONTENT_ITEM_VERSION_ID) as data from CONTENT_ATTRIBUTE ca
  left outer join VERSION_CONTENT_DATA vcd on ca.ATTRIBUTE_ID = vcd.ATTRIBUTE_ID
  inner join CONTENT_ITEM_VERSION civ on vcd.CONTENT_ITEM_VERSION_ID = civ.CONTENT_ITEM_VERSION_ID
  where ca.CONTENT_ID = @content_id and civ.CONTENT_ITEM_ID = @item_id ' + @version_sql + ') as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt INNER JOIN content_item_status_history AS s on s.CONTENT_ITEM_VERSION_ID = pt.version_id
  order by pt.version_id desc

  '

  exec sp_executesql @sql, N'@content_id numeric, @item_id numeric, @version_id numeric', @content_id = @content_id, @item_id = @item_id, @version_id = @version_id
end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.25', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.25 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.26
-- Rebuild Views
-- **************************************

exec sp_refreshview 'SITE_ACCESS_PermLevel'
GO

exec sp_refreshview 'CONTENT_ACCESS_PermLevel'
GO
exec sp_refreshview 'CONTENT_ACCESS_PermLevel_site'
GO

exec sp_refreshview 'CONTENT_ITEM_ACCESS_PermLevel'
GO
exec sp_refreshview 'CONTENT_ITEM_ACCESS_PermLevel_content'
GO

exec sp_refreshview 'content_FOLDER_ACCESS_PermLevel'
GO
exec sp_refreshview 'content_FOLDER_ACCESS_PermLevel_parent_folder'
GO
exec sp_refreshview 'content_FOLDER_ACCESS_PermLevel_content'
GO

exec sp_refreshview 'FOLDER_ACCESS_PermLevel'
GO
exec sp_refreshview 'FOLDER_ACCESS_PermLevel_parent_folder'
GO
exec sp_refreshview 'FOLDER_ACCESS_PermLevel_site'
GO

exec sp_refreshview 'WORKFLOW_ACCESS_PermLevel'
GO
exec sp_refreshview 'WORKFLOW_ACCESS_PermLevel_site'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.26', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.26 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.27
-- Many-to-Many changes
-- **************************************

exec qp_drop_existing 'ti_item_to_item', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[ti_item_to_item] ON [dbo].[item_to_item] AFTER INSERT
AS
BEGIN

with items (link_id, item_id, linked_item_id)
AS
(
  select i1.link_id, i1.l_item_id, i1.r_item_id From inserted i1 where not exists (select * from item_to_item i2 where i1.link_id = i2.link_id and i1.r_item_id = i2.l_item_id and i2.r_item_id = i1.l_item_id)
)
insert into item_to_item(link_id, l_item_id, r_item_id)
select link_id, linked_item_id, item_id from items

END
GO

with items (LINK_ID, ITEM_ID, LINKED_ITEM_ID)
AS
(
  select i1.link_id, i1.r_item_id, i1.l_item_id From item_to_item i1 where not exists (select * from item_to_item i2 where i1.link_id = i2.link_id and i1.r_item_id = i2.l_item_id and i2.r_item_id = i1.l_item_id)
)
insert into item_to_item (link_id, r_item_id, l_item_id)
select link_id, linked_item_id, item_id
from items
GO

ALTER VIEW [dbo].[item_link] AS
SELECT ii.link_id AS link_id, ii.l_item_id AS item_id, ii.r_item_id AS linked_item_id
FROM item_to_item AS ii
GO


ALTER view [dbo].[item_link_united] as
SELECT link_id, item_id, linked_item_id from item_link il where item_id not in (select CONTENT_ITEM_ID FROM CONTENT_ITEM where splitted = 1)
UNION
SELECT link_id, item_id, linked_item_id from item_link_async ila
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.27', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.27 completed'
GO


-- **************************************
-- Taritsyn Andrey
-- version 7.7.0.28
-- Cascading delete site references from
-- SITE_ACCESS table
-- **************************************
GO

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item
  alter table content_attribute disable trigger td_content_attribute_clean_empty_links
  alter table content_attribute disable trigger td_remove_field
  alter table content_attribute disable trigger td_reorder_fields
  alter table content_constraint disable trigger td_content_indexes

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete site_access from site_access as sa
  inner join deleted as d on d.site_id = sa.site_id

  delete site from site s inner join deleted d on s.site_id = d.site_id


  alter table content_item enable trigger td_delete_item
  alter table content_attribute enable trigger td_content_attribute_clean_empty_links
  alter table content_attribute enable trigger td_remove_field
  alter table content_attribute enable trigger td_reorder_fields
  alter table content_constraint enable trigger td_content_indexes
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.28', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.28 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.29
-- SITE_ACCESS table
-- **************************************
GO

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item
  alter table content_attribute disable trigger td_content_attribute_clean_empty_links
  alter table content_attribute disable trigger td_remove_field
  alter table content_attribute disable trigger td_reorder_fields
  alter table content_constraint disable trigger td_content_indexes

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete site from site s inner join deleted d on s.site_id = d.site_id


  alter table content_item enable trigger td_delete_item
  alter table content_attribute enable trigger td_content_attribute_clean_empty_links
  alter table content_attribute enable trigger td_remove_field
  alter table content_attribute enable trigger td_reorder_fields
  alter table content_constraint enable trigger td_content_indexes
END
GO

ALTER TABLE CONTENT_ACCESS DROP CONSTRAINT FK_CONTENT_ACCESS_CONTENT_ID
GO
ALTER TABLE CONTENT_ACCESS ADD CONSTRAINT FK_CONTENT_ACCESS_CONTENT_ID FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT (CONTENT_ID) ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ACCESS DROP CONSTRAINT FK_CONTENT_ACCESS_USER_ID
GO
ALTER TABLE CONTENT_ACCESS ADD CONSTRAINT FK_CONTENT_ACCESS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)  ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ACCESS DROP CONSTRAINT FK_CONTENT_ACCESS_GROUP_ID
GO
ALTER TABLE CONTENT_ACCESS ADD CONSTRAINT FK_CONTENT_ACCESS_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES USER_GROUP (GROUP_ID) ON DELETE CASCADE
GO

ALTER TABLE CONTENT_FORM DROP CONSTRAINT FK_CONTENT_FORM_OBJECT_ID
GO
ALTER TABLE CONTENT_FORM ADD CONSTRAINT FK_CONTENT_FORM_OBJECT_ID FOREIGN KEY (OBJECT_ID) REFERENCES OBJECT (OBJECT_ID)  ON DELETE CASCADE
GO

ALTER TABLE CONTENT_GROUP DROP CONSTRAINT FK_CONTENT_GROUP_SITE_ID
GO
ALTER TABLE CONTENT_GROUP ADD CONSTRAINT FK_CONTENT_GROUP_SITE_ID FOREIGN KEY (SITE_ID) REFERENCES SITE (SITE_ID)  ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ITEM_VERSION DROP CONSTRAINT FK_CONTENT_ITEM_VERSION_CONTENT_ITEM_ID
GO
ALTER TABLE CONTENT_ITEM_VERSION ADD CONSTRAINT FK_CONTENT_ITEM_VERSION_CONTENT_ITEM_ID FOREIGN KEY (CONTENT_ITEM_ID) REFERENCES CONTENT_ITEM (CONTENT_ITEM_ID)   ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ITEM_ACCESS DROP CONSTRAINT FK_CONTENT_ITEM_ACCESS_USER_ID
GO
ALTER TABLE CONTENT_ITEM_ACCESS ADD CONSTRAINT FK_CONTENT_ITEM_ACCESS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)   ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ITEM_ACCESS DROP CONSTRAINT FK_CONTENT_ITEM_ACCESS_GROUP_ID
GO
ALTER TABLE CONTENT_ITEM_ACCESS ADD CONSTRAINT FK_CONTENT_ITEM_ACCESS_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES USER_GROUP (GROUP_ID)   ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ITEM_ACCESS DROP CONSTRAINT FK_CONTENT_ITEM_ACCESS_CONTENT_ITEM_ID
GO
ALTER TABLE CONTENT_ITEM_ACCESS ADD CONSTRAINT FK_CONTENT_ITEM_ACCESS_CONTENT_ITEM_ID FOREIGN KEY (CONTENT_ITEM_ID) REFERENCES CONTENT_ITEM (CONTENT_ITEM_ID)   ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ITEM_SCHEDULE DROP CONSTRAINT FK_CONTENT_ITEM_SCHEDULE_CONTENT_ITEM_ID
GO
ALTER TABLE CONTENT_ITEM_SCHEDULE ADD CONSTRAINT FK_CONTENT_ITEM_SCHEDULE_CONTENT_ITEM_ID FOREIGN KEY (CONTENT_ITEM_ID) REFERENCES CONTENT_ITEM (CONTENT_ITEM_ID)   ON DELETE CASCADE
GO

ALTER TABLE ITEM_TO_ITEM_VERSION DROP CONSTRAINT FK_ITEM_TO_ITEM_VERSION_LINKED_ITEM_ID
GO
ALTER TABLE ITEM_TO_ITEM_VERSION ADD CONSTRAINT FK_ITEM_TO_ITEM_VERSION_LINKED_ITEM_ID FOREIGN KEY (LINKED_ITEM_ID) REFERENCES CONTENT_ITEM (CONTENT_ITEM_ID)  ON DELETE CASCADE
GO

ALTER TABLE SITE_ACCESS DROP CONSTRAINT FK_SITE_ACCESS_USER_ID
GO
ALTER TABLE SITE_ACCESS ADD CONSTRAINT FK_SITE_ACCESS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)   ON DELETE CASCADE
GO

ALTER TABLE SITE_ACCESS DROP CONSTRAINT FK_SITE_ACCESS_GROUP_ID
GO
ALTER TABLE SITE_ACCESS ADD CONSTRAINT FK_SITE_ACCESS_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES USER_GROUP (GROUP_ID)   ON DELETE CASCADE
GO

ALTER TABLE SITE_ACCESS DROP CONSTRAINT FK_SITE_ACCESS_SITE_ID
GO
ALTER TABLE SITE_ACCESS ADD CONSTRAINT FK_SITE_ACCESS_SITE_ID FOREIGN KEY (SITE_ID) REFERENCES SITE (SITE_ID)   ON DELETE CASCADE
GO

ALTER TABLE USER_GROUP_BIND DROP CONSTRAINT FK_USER_GROUP_BIND_USER_ID
GO
ALTER TABLE USER_GROUP_BIND ADD CONSTRAINT FK_USER_GROUP_BIND_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)  ON DELETE CASCADE
GO

ALTER TABLE USER_GROUP_BIND DROP CONSTRAINT FK_USER_GROUP_BIND_GROUP_ID
GO
ALTER TABLE USER_GROUP_BIND ADD CONSTRAINT FK_USER_GROUP_BIND_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES USER_GROUP (GROUP_ID)   ON DELETE CASCADE
GO

ALTER TABLE VERSION_CONTENT_DATA DROP CONSTRAINT FK_VERSION_CONTENT_DATA_ATTRIBUTE_ID
GO
ALTER TABLE VERSION_CONTENT_DATA ADD CONSTRAINT FK_VERSION_CONTENT_DATA_ATTRIBUTE_ID FOREIGN KEY (ATTRIBUTE_ID) REFERENCES CONTENT_ATTRIBUTE (ATTRIBUTE_ID)   ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ATTRIBUTE DROP CONSTRAINT FK_CONTENT_ATTRIBUTE_CONTENT_ID
GO
ALTER TABLE CONTENT_ATTRIBUTE ADD CONSTRAINT FK_CONTENT_ATTRIBUTE_CONTENT_ID FOREIGN KEY (CONTENT_ID) REFERENCES CONTENT (CONTENT_ID)  ON DELETE CASCADE
GO

ALTER TABLE CONTENT_ITEM_STATUS_HISTORY DROP CONSTRAINT FK_CONTENT_ITEM_STATUS_HISTORY_CONTENT_ITEM_ID
GO
ALTER TABLE CONTENT_ITEM_STATUS_HISTORY ADD CONSTRAINT FK_CONTENT_ITEM_STATUS_HISTORY_CONTENT_ITEM_ID FOREIGN KEY (CONTENT_ITEM_ID) REFERENCES CONTENT_ITEM (CONTENT_ITEM_ID)   ON DELETE CASCADE
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.29', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.29 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.30
-- with(nolock) fix
-- **************************************

ALTER FUNCTION [dbo].[qp_fullText](@text nvarchar(255), @site_id numeric, @exact bit)
returns @data table(content_item_id numeric, attribute_id numeric, content_id numeric, rownumber numeric)
as
begin
  declare @text2 nvarchar(255)

  declare @use_fulltext bit
  select @use_fulltext = fulltextserviceproperty('IsFulltextInstalled')

  if @use_fulltext = 1 begin
    if @exact = 0 begin
      insert into @data
      select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
      from content_data cd with(nolock)
      INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
      INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
      WHERE cinfo.site_id = @site_id and FREETEXT( cd.* ,@text)
    end
    else begin
      set @text2 = '"' + @text + '"'

      insert into @data
      select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
      from content_data cd with(nolock)
      INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
      INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
      WHERE cinfo.site_id = @site_id and CONTAINS( cd.* ,@text2)
    end
  end
  else begin
    set @text2 = '%' + @text + '%'
    insert into @data
    select cd.content_item_id, cd.attribute_id, ci.content_id, row_number() over (partition by cd.content_item_id order by attribute_id desc) as 'rownumber'
    from content_data cd with(nolock)
    INNER JOIN content_item AS ci with(nolock) ON ci.content_item_id = cd.content_item_id
    INNER JOIN content AS cinfo with(nolock) ON ci.content_id = cinfo.content_id
    WHERE cinfo.site_id = @site_id and cd.data like @text2 or cd.blob_data like @text2
  end

  return
end
GO

ALTER function [dbo].[qp_fullTextIds](@text nvarchar(255), @content_id numeric, @exact bit)
returns @ids table (id numeric primary key, data nvarchar(max))
as
begin
  declare @text2 nvarchar(255)

  declare @use_fulltext bit
  select @use_fulltext = fulltextserviceproperty('IsFulltextInstalled')

  if @use_fulltext = 1 begin
    if @exact = 0 begin
      insert into @ids
      select id, data from (
      select cd.content_item_id as id, dbo.qp_select_data_field(ca.attribute_type_id, cd.data, cd.blob_data) as data, row_number() over (partition by cd.content_item_id order by cd.attribute_id desc) as 'rownumber'
      from content_data cd with(nolock)
      inner join content_item ci with(nolock) on ci.content_item_id = cd.content_item_id
      inner join content_attribute ca with(nolock) on ca.attribute_id = cd.attribute_id
      where ci.content_id = @content_id and freetext(cd.*, @text )
      ) s where s.rownumber = 1
    end
    else begin
      set @text2 = '"' + @text + '"'
      insert into @ids
      select id, data from (
      select cd.content_item_id as id, dbo.qp_select_data_field(ca.attribute_type_id, cd.data, cd.blob_data) as data, row_number() over (partition by cd.content_item_id order by cd.attribute_id desc) as 'rownumber'
      from content_data cd with(nolock)
      inner join content_item ci with(nolock) on ci.content_item_id = cd.content_item_id
      inner join content_attribute ca with(nolock) on ca.attribute_id = cd.attribute_id
      where ci.content_id = @content_id and contains(cd.*, @text2 )
      ) s where s.rownumber = 1
    end
  end
  else begin
    set @text2 = '%' + @text + '%'
    insert into @ids
    select id, data from (
    select cd.content_item_id as id, dbo.qp_select_data_field(ca.attribute_type_id, cd.data, cd.blob_data) as data, row_number() over (partition by cd.content_item_id order by cd.attribute_id desc) as 'rownumber'
    from content_data cd with(nolock)
    inner join content_item ci with(nolock) on ci.content_item_id = cd.content_item_id
    inner join content_attribute ca with(nolock) on ca.attribute_id = cd.attribute_id
    where ci.content_id = @content_id and cd.data like @text2 or cd.blob_data like @text2
    ) s where s.rownumber = 1

  end
  return
end
GO

exec qp_drop_existing 'qp_like', 'IsTableFunction'
GO
exec qp_drop_existing 'qp_likeIds', 'IsTableFunction'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.30', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.30 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.31
-- Tree Auto Expand fix
-- **************************************


ALTER PROCEDURE [dbo].[qp_getNodeFullPath]
@content_item_id numeric,
@reverse bit = 0,
@attribute_id numeric = 0
AS

DECLARE @content_id numeric, @ret numeric
DECLARE @attribute_name  NVARCHAR(512)
DECLARE @strsql nvarchar(max)

SET @ret = @content_item_id
SELECT @content_id = content_id FROM content_item WHERE content_item_id = @content_item_id


declare @tmp0 table(
[ID]  [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,
[NODE_ID] [numeric])

declare @tmp table(
[ID]  [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,
[NODE_ID] [numeric])


if @attribute_id = 0 or not exists (select attribute_id from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @attribute_id and CONTENT_ID = @content_id)
  SELECT top 1 @attribute_name = ca.attribute_name FROM content_attribute AS ca
  INNER JOIN content_attribute AS ca2 ON ca.related_attribute_id = ca2.attribute_id AND ca2.content_id = ca.content_id
  WHERE ca.content_id = @content_id order by ca.ATTRIBUTE_ORDER
else
  SELECT @attribute_name = attribute_name FROM content_attribute where ATTRIBUTE_ID = @attribute_id



WHILE @ret IS NOT NULL
BEGIN
  -- infinite loop
  IF EXISTS(select ID from @tmp0 where NODE_ID = @ret)
    BREAK

  INSERT INTO @tmp0 (NODE_ID) values(@ret)
  SET @strsql = 'SELECT @ret=['+ @attribute_name +'] FROM content_'+ cast(@content_id AS NVARCHAR) + '_united WHERE content_item_id =' + cast(@ret AS NVARCHAR)
  SET @ret = NULL
  print @strsql
  EXEC sp_executesql @strsql, N'@ret numeric out', @ret out
END

if @reverse = 0
  INSERT INTO @tmp (NODE_ID)
  SELECT NODE_ID FROM @tmp0 ORDER BY ID ASC
else
  INSERT INTO @tmp (NODE_ID)
  SELECT NODE_ID FROM @tmp0 ORDER BY ID DESC


declare @count int, @i int, @node_id numeric

declare @result as nvarchar(max)
set @result = ''

select @count = COUNT(id) from @tmp

set @i = 1
while @i < @count + 1
begin
  select @node_id = node_id from @tmp where ID = @i
  set @result = @result + 'node' + CAST(@node_id as nvarchar)
  if @i < @count set @result = @result + ','
  set @i = @i + 1

end

SELECT @result AS NodeFullPath
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.31', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.31 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.32
-- Version reverse sorting
-- **************************************

exec qp_drop_existing 'qp_get_versions', 'IsProcedure'
GO

create procedure [dbo].[qp_get_versions]
@item_id numeric,
@version_id numeric = 0
as
begin

declare @sql nvarchar(max), @version_sql nvarchar(100), @fields nvarchar(max), @prefixed_fields nvarchar(max)
declare @content_id numeric
select @content_id = content_id from content_item ci where ci.CONTENT_ITEM_ID = @item_id

if @content_id is not null
begin
  select @fields = dbo.qp_get_content_field_list(@content_id, '')
  select @prefixed_fields = dbo.qp_get_content_field_list(@content_id, 'pt.')


  if @version_id = 0
    set @version_sql = ''
  else
    set @version_sql = ' and vcd.CONTENT_ITEM_VERSION_ID= @version_id'


  set @sql = N'select pt.content_item_id, pt.version_id, s.STATUS_HISTORY_DATE AS MODIFIED, s.USER_ID as last_modified_by, ' + @prefixed_fields  + N' from
  (
  select civ.CONTENT_ITEM_ID, vcd.CONTENT_ITEM_VERSION_ID as version_id, ca.ATTRIBUTE_NAME, dbo.qp_get_version_data(vcd.ATTRIBUTE_ID, vcd.CONTENT_ITEM_VERSION_ID) as data from CONTENT_ATTRIBUTE ca
  left outer join VERSION_CONTENT_DATA vcd on ca.ATTRIBUTE_ID = vcd.ATTRIBUTE_ID
  inner join CONTENT_ITEM_VERSION civ on vcd.CONTENT_ITEM_VERSION_ID = civ.CONTENT_ITEM_VERSION_ID
  where ca.CONTENT_ID = @content_id and civ.CONTENT_ITEM_ID = @item_id ' + @version_sql + ') as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt INNER JOIN content_item_status_history AS s on s.CONTENT_ITEM_VERSION_ID = pt.version_id
  order by pt.version_id desc

  '

  exec sp_executesql @sql, N'@content_id numeric, @item_id numeric, @version_id numeric', @content_id = @content_id, @item_id = @item_id, @version_id = @version_id
end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.32', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.32 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.33
-- Mandatory Version Control
-- **************************************

IF NOT EXISTS(SELECT * FROM system_info WHERE field_name = 'Version Control Add-on')
INSERT INTO system_info (field_name, field_value) VALUES ('Version Control Add-on', '0.0.0.0')
GO

if dbo.qp_get_version_control() = 0
CREATE TABLE [dbo].[CONTENT_ITEM_VERSION] (
  [CONTENT_ITEM_VERSION_ID] [numeric](18, 0) IDENTITY (1, 1) NOT NULL PRIMARY KEY CLUSTERED,
  [VERSION] [nvarchar] (255) NOT NULL,
  [VERSION_LABEL] [nvarchar] (255) NOT NULL,
  [CONTENT_VERSION_ID] [numeric](18, 0) NULL,
  [CONTENT_ITEM_ID] [numeric](18, 0) NOT NULL REFERENCES CONTENT_ITEM(CONTENT_ITEM_ID) ON DELETE CASCADE,
  [DESCRIPTION] [nvarchar] (512) NULL
) ON [PRIMARY]
GO

if dbo.qp_get_version_control() = 0
CREATE INDEX ix_content_item_id ON CONTENT_ITEM_VERSION (content_item_id)
GO

if dbo.qp_get_version_control() = 0
CREATE TABLE [dbo].[VERSION_CONTENT_DATA] (
  [ATTRIBUTE_ID] [numeric](18, 0) NOT NULL REFERENCES CONTENT_ATTRIBUTE(ATTRIBUTE_ID) ON DELETE CASCADE,
  [CONTENT_ITEM_VERSION_ID] [numeric](18, 0) NOT NULL,
  ---------------------------------------------------
  [DATA] [nvarchar] (3500) NULL,
  [BLOB_DATA] [ntext] NULL,
  [CREATED] [datetime] DEFAULT (GETDATE()) NOT NULL,
  PRIMARY KEY CLUSTERED (ATTRIBUTE_ID, CONTENT_ITEM_VERSION_ID) ON [PRIMARY],
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

if dbo.qp_get_version_control() = 0
CREATE INDEX ix_content_item_version_id ON VERSION_CONTENT_DATA (content_item_version_id)
GO

if dbo.qp_get_version_control() = 0
CREATE TABLE [dbo].[item_to_item_version] (
  [content_item_version_id] [numeric](18, 0) NOT NULL ,
  [attribute_id] [numeric](18, 0) NOT NULL ,
  [linked_item_id] [numeric](18, 0) NOT NULL ,
   PRIMARY KEY CLUSTERED
  (
    [content_item_version_id],
    [attribute_id],
    [linked_item_id]
  )  ON [PRIMARY] ,
   FOREIGN KEY
  (
    [content_item_version_id]
  ) REFERENCES [content_item_version] (
    [content_item_version_id]
  ),
  FOREIGN KEY
  (
    [linked_item_id]
  ) REFERENCES [CONTENT_ITEM] (
    [CONTENT_ITEM_ID]
  ),
   FOREIGN KEY
  (
    [attribute_id]
  ) REFERENCES [content_attribute] (
    [attribute_id]
  ) ON DELETE CASCADE
) ON [PRIMARY]
GO

if dbo.qp_get_version_control() = 0
CREATE INDEX ix_linked_item_id ON item_to_item_version (linked_item_id)
GO

if dbo.qp_get_version_control() = 0
CREATE INDEX ix_attribute_id ON item_to_item_version (attribute_id)
GO

if dbo.qp_get_version_control() = 0
ALTER TABLE content_item_status_history
  ADD content_item_version_id NUMERIC NULL
GO

exec qp_drop_existing 'content_attribute_delete_version', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[content_attribute_delete_version] ON CONTENT_ATTRIBUTE FOR DELETE
AS DELETE FROM VERSION_CONTENT_DATA WHERE ATTRIBUTE_ID IN (SELECT ATTRIBUTE_ID FROM deleted)
GO

exec qp_drop_existing 'content_item_version_delete', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[content_item_version_delete] ON [dbo].[CONTENT_ITEM_VERSION] FOR DELETE
AS
begin
  DELETE version_content_data
  FROM version_content_data as vcd
  INNER JOIN deleted d on d.content_item_version_id = vcd.content_item_version_id

    DELETE content_item_status_history
  FROM content_item_status_history as cish
  INNER JOIN deleted d on d.content_item_version_id = cish.content_item_version_id
    WHERE cish.system_status_type_id = 2

    DELETE item_to_item_version
  FROM item_to_item_version as iiv
  INNER JOIN deleted d on d.content_item_version_id = iiv.content_item_version_id
end
GO

exec qp_drop_existing 'create_content_item_version', 'IsProcedure'
go

CREATE PROCEDURE [dbo].[create_content_item_version]
  @uid NUMERIC,
  @content_item_id NUMERIC,
  @content_version_id NUMERIC = NULL
AS
  DECLARE @content_item_version_id NUMERIC, @tm DATETIME
  SET @tm = GETDATE()
  -- delete > max_num_of_stored_versions
  DECLARE @max_num_of_stored_versions NUMERIC
  DECLARE @content_id NUMERIC
  SELECT @max_num_of_stored_versions = c.max_num_of_stored_versions,
  @content_id = c.content_id
  FROM content AS c
  INNER JOIN content_item AS ci ON c.content_id = ci.content_id
  WHERE ci.content_item_id = @content_item_id
IF @max_num_of_stored_versions <> 0
BEGIN
  DECLARE @item_version_count INT
  SELECT @item_version_count = COUNT(content_item_version_id) FROM content_item_version
  WHERE content_item_id = @content_item_id
  IF @item_version_count >= @max_num_of_stored_versions
  BEGIN
  DECLARE @item_version_id NUMERIC
  SELECT TOP 1 @item_version_id = content_item_version_id FROM content_item_version
  WHERE content_item_id = @content_item_id ORDER BY content_item_version_id
  DELETE item_to_item_version WHERE content_item_version_id = @item_version_id
  DELETE content_item_version WHERE content_item_version_id = @item_version_id
  END
  -- Create content item version
  IF @content_version_id IS NOT NULL
    DELETE FROM content_item_version
    WHERE content_version_id = @content_version_id AND content_item_id = @content_item_id
  INSERT INTO content_item_version (version, version_label, content_version_id, content_item_id)
  VALUES (@tm, 'backup', @content_version_id, @content_item_id)
  SET @content_item_version_id = @@IDENTITY
  -- Store content item data
  INSERT INTO version_content_data (attribute_id, content_item_version_id, data, blob_data, created)
  SELECT attribute_id, @content_item_version_id, data, blob_data, @tm
  FROM content_data
  WHERE content_item_id = @content_item_id
  -- Store Many-to-Many slice
  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, ca.attribute_id, linked_item_id
  FROM item_link_united AS il
  INNER JOIN content_attribute AS ca ON ca.link_id = il.link_id
  INNER JOIN content_item AS ci ON ci.content_id =  ca.content_id AND ci.content_item_id = il.item_id
  WHERE il.item_id = @content_item_id
  -- Write status history log
  INSERT INTO content_item_status_history
    (content_item_id, user_id, description, created, content_item_version_id,
    system_status_type_id)
  VALUES
    (@content_item_id, @uid, 'Record version backup has been created', @tm, @content_item_version_id,
    2)
END
GO


exec qp_drop_existing 'clear_content_versions', 'IsProcedure'
go

CREATE PROCEDURE [dbo].[clear_content_versions]
  @uid NUMERIC,
  @content_id NUMERIC
AS
  -- Delete Many-to-Many versions of content's items
  DELETE item_to_item_version
  FROM item_to_item_version AS iiv
    INNER JOIN content_item_version AS v on iiv.content_item_version_id = v.content_item_version_id
    INNER JOIN content_item AS i ON i.content_item_id = v.content_item_id
  WHERE i.content_id = @content_id

  -- Delete versions of content's items
  DELETE content_item_version
  FROM content_item_version AS v
    INNER JOIN content_item AS i ON i.content_item_id = v.content_item_id
  WHERE i.content_id = @content_id
GO

exec qp_drop_existing 'restore_content_item_version', 'IsProcedure'
go

CREATE  PROCEDURE [dbo].[restore_content_item_version]
  @uid NUMERIC,
  @version_id NUMERIC
AS
  DECLARE @id NUMERIC, @tm DATETIME
  DECLARE @content_id numeric
  SET @tm = GETDATE()
  SELECT @id = content_item_id FROM content_item_version WHERE content_item_version_id = @version_id
  IF @id IS NOT NULL BEGIN
    select @content_id = content_id from content_item where content_item_id = @id
    DELETE FROM content_data WHERE content_item_id = @id
    INSERT INTO content_data (attribute_id, content_item_id, data, blob_data)
    SELECT attribute_id, @id, data, blob_data
    FROM version_content_data
    WHERE content_item_version_id = @version_id
    -- Clear many-to-many
    IF exists(select count(linked_item_id) from item_link_async where item_id = @id)
    begin

    DELETE FROM item_link_async where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    INSERT INTO item_link_async
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id

    end else
    begin

    DELETE FROM item_link_united_full where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    -- Set many-to-many
    INSERT INTO item_to_item
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id
    end

    -- Write status history log
    INSERT INTO content_item_status_history
      (content_item_id, user_id, description, created,
      system_status_type_id, content_item_version_id)
    VALUES
      (@id, @uid, 'Record has been restored from version backup', @tm,
      4, @version_id)
  END
GO
-------------------------------------
-- Create & update buttons for BACKUP
-------------------------------------
if dbo.qp_get_version_control() = 0
begin
  declare @atab_id numeric
  select @atab_id = tab_id from tabs where tab_name = 'Article Info'

  update buttons set buttons_order = 2 where location_tab_id = @atab_id and button_name = 'Archive'
  update buttons set buttons_order = 3 where location_tab_id = @atab_id and button_name = 'Remove'
  update buttons set buttons_order = 4 where location_tab_id = @atab_id and button_name = 'Cancel'
  UPDATE buttons SET action_file = 'permissions/act_check_modify.asp,contents/records/act_check_locked.asp,version_control/act_create_record_version.asp,contents/records/act_update_record.asp'
  WHERE location_tab_id = @atab_id AND button_name = 'Update'
  UPDATE buttons SET action_file = 'permissions/act_check_modify.asp,contents/records/act_check_locked.asp,version_control/act_create_record_version.asp,contents/records/act_update_record.asp'
  WHERE location_tab_id = @atab_id AND button_name = 'Update & Up'
end
GO

if dbo.qp_get_version_control() = 0
UPDATE buttons SET action_file = 'contents/fields/act_update_field.asp,version_control/act_clear_content_versions.asp'
  WHERE button_id = 43
GO

if dbo.qp_get_version_control() = 0
UPDATE buttons SET action_file = 'contents/fields/act_save_field.asp,version_control/act_clear_content_versions.asp'
  WHERE button_id = 41
GO

if dbo.qp_get_version_control() = 0
UPDATE buttons SET action_file = 'contents/fields/act_update_field.asp,version_control/act_clear_content_versions.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 24 AND button_name ='Update & Up')
GO

if dbo.qp_get_version_control() = 0
INSERT INTO buttons
 (permission_level_id, button_type, buttons_order,
 button_name, action_tab_id, location_tab_id, action_file,
 cancel_action, CONFIRM_PHRASE)
VALUES
 (1, 'submit', 2, 'Remove Backups',
 70, 70, 'permissions/act_check_delete.asp,contents/records/act_check_locked.asp,version_control/act_clear_backup_history.asp',
 0, 'Are you sure?')
GO

--------------------------------------
-- Create & update buttons for RESTORE
--------------------------------------
if dbo.qp_get_version_control() = 0
begin
declare @atab_id numeric
select @atab_id = tab_id from tabs where tab_name = 'Article Info'

DECLARE @id NUMERIC, @tab_goup NUMERIC
SELECT @tab_goup = MAX(tab_group) + 1 FROM tabs
INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id)
VALUES ('Article Restore Preview', 'version_control/dsp_record_version_preview.asp',
  @tab_goup, 1, 'Content Article Version Restore Preview', 70)
SET @id = @@IDENTITY
INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file,
 cancel_action, CONFIRM_PHRASE)
VALUES
 (1, 'submit', 1, 'Restore', @atab_id, @id,
 'permissions/act_check_modify.asp,contents/records/act_check_locked.asp,version_control/act_restore_record.asp',
 1, 'Are you sure?')
INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file,
 cancel_action, CONFIRM_PHRASE)
VALUES
 (1, 'submit', 2, 'Remove', 70, @id,
 'permissions/act_check_delete.asp,contents/records/act_check_locked.asp,version_control/act_remove_version.asp',
 0, 'Are you sure?')
INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', 70, @id, NULL, 1)
INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (1, 70, 'images/toolbar/backup_dis.gif', 'images/toolbar/backup.gif',
  'Preview & Restore', 1, @id, 0,
  'preview_backup')
end
GO
--------------------------------------
-- Alexander Vasiliev
-- Version Control for object formats
--------------------------------------
-- Template Object Format Version tabs
--------------------------------------
if dbo.qp_get_version_control() = 0
begin
DECLARE @format_history_tab_id NUMERIC
DECLARE @template_object_formats NUMERIC
SELECT @template_object_formats = tab_id FROM tabs WHERE tab_name = 'Template Object Formats'

INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id)
VALUES
('Format History','pages/templates/objects/formats/history/dsp_format_history_list.asp', 2, 2, 'Format History', @template_object_formats)
SET @format_history_tab_id = @@IDENTITY

DECLARE @object_format_info NUMERIC
SELECT @object_format_info = tab_id FROM tabs WHERE tab_name = 'Object Format Info'

DECLARE @format_restore_preview NUMERIC
INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id, hide_in_tree)
VALUES ('Format Restore Preview', 'pages/templates/objects/formats/history/dsp_format_version_preview.asp',
  2, 1, 'Object Format Version Restore Preview', @format_history_tab_id, 1)
SET @format_restore_preview = @@IDENTITY
--------------------------------------
-- Page Object Format Version tabs
--------------------------------------
DECLARE @page_format_history_tab_id NUMERIC
DECLARE @page_object_formats NUMERIC
SELECT @page_object_formats = tab_id FROM tabs WHERE tab_name = 'Page Object Formats'

INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id)
VALUES
('Page Format History','pages/objects/formats/history/dsp_page_format_history_list.asp', 2, 2, 'Page Format History', @page_object_formats)
SET @page_format_history_tab_id = @@IDENTITY

DECLARE @page_object_format_info NUMERIC
SELECT @page_object_format_info = tab_id FROM tabs WHERE tab_name = 'Page Object Format Info'

DECLARE @page_format_restore_preview NUMERIC
INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, description, parent_tab_id, hide_in_tree)
VALUES ('Page Format Restore Preview', 'pages/objects/formats/history/dsp_page_format_version_preview.asp',
  2, 1, 'Page Object Format Version Restore Preview', @page_format_history_tab_id, 1)
SET @page_format_restore_preview = @@IDENTITY
--------------------------------------
-- Create buttons and toolbar buttons for Page Format History tab
--------------------------------------
INSERT INTO BUTTONS (PERMISSION_LEVEL_ID,BUTTON_TYPE,ACTION_FILE,BUTTONS_ORDER,CANCEL_ACTION,BUTTON_NAME,ACTION_TAB_ID,LOCATION_TAB_ID,CONFIRM_PHRASE,hide_for_modal,show_for_modal)
VALUES (1, 'submit', 'pages/objects/formats/history/act_clear_page_format_versions.asp',  2,  0,  'Remove Backups', @page_format_history_tab_id,  @page_format_history_tab_id,  'Are you sure?', 0, 0)

INSERT INTO toolbar_buttons (
  permission_level_id,
  location_tab_id,
  image_disabled,
  image_enabled,
  button_name,
  buttons_order,
  action_tab_id,
  always_enabled,
  action_file
) VALUES (
  1,
  @page_format_history_tab_id,
  'images/toolbar/backup_dis.gif',
  'images/toolbar/backup.gif',
  'Preview & Restore',
  1,
  @page_format_restore_preview,
  0,
  'preview_backup'
)
--------------------------------------
--  Create buttons and toolbar buttons for Page Format Restore Preview tab
--------------------------------------
INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file,
 cancel_action, CONFIRM_PHRASE)
VALUES
 (1, 'submit', 1, 'Restore', @page_object_formats, @page_format_restore_preview,
 'pages/templates/objects/act_check_locked.asp,pages/objects/formats/history/act_restore_page_format.asp',
 1, 'Are you sure?')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file,
 cancel_action, CONFIRM_PHRASE)
VALUES
 (1, 'submit', 2, 'Remove', @page_format_history_tab_id, @page_format_restore_preview,
 'pages/templates/objects/act_check_locked.asp,pages/objects/formats/history/act_remove_page_version.asp',
 0, 'Are you sure?')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', @page_format_history_tab_id, @page_format_restore_preview, NULL, 1)
--------------------------------------
-- Create buttons and toolbar buttons for Format History tab
--------------------------------------
INSERT INTO BUTTONS (PERMISSION_LEVEL_ID,BUTTON_TYPE,ACTION_FILE,BUTTONS_ORDER,CANCEL_ACTION,BUTTON_NAME,ACTION_TAB_ID,LOCATION_TAB_ID,CONFIRM_PHRASE,hide_for_modal,show_for_modal)
VALUES (1, 'submit', 'pages/templates/objects/formats/history/act_clear_format_versions.asp', 2,  0,  'Remove Backups', @format_history_tab_id, @format_history_tab_id, 'Are you sure?', 0, 0)

INSERT INTO toolbar_buttons (
  permission_level_id,
  location_tab_id,
  image_disabled,
  image_enabled,
  button_name,
  buttons_order,
  action_tab_id,
  always_enabled,
  action_file
) VALUES (
  1,
  @format_history_tab_id,
  'images/toolbar/backup_dis.gif',
  'images/toolbar/backup.gif',
  'Preview & Restore',
  1,
  @format_restore_preview,
  0,
  'preview_backup'
)
--------------------------------------
--  Create buttons and toolbar buttons for Format Restore Preview tab
--------------------------------------
INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file,
 cancel_action, CONFIRM_PHRASE)
VALUES
 (1, 'submit', 1, 'Restore', @template_object_formats, @format_restore_preview,
 'pages/templates/objects/act_check_locked.asp,pages/templates/objects/formats/history/act_restore_format.asp',
 1, 'Are you sure?')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file,
 cancel_action, CONFIRM_PHRASE)
VALUES
 (1, 'submit', 2, 'Remove', @format_history_tab_id, @format_restore_preview,
 'pages/templates/objects/act_check_locked.asp,pages/templates/objects/formats/history/act_remove_version.asp',
 0, 'Are you sure?')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', @format_history_tab_id, @format_restore_preview, NULL, 1)
End
GO
--------------------------------------
--  Create table, stored procedures, triggers
--------------------------------------
if dbo.qp_get_version_control() = 0
CREATE TABLE [dbo].[OBJECT_FORMAT_VERSION] (
  [OBJECT_FORMAT_VERSION_ID] numeric(18, 0) identity(1,1),
  [OBJECT_FORMAT_ID] [numeric](18, 0) NOT NULL ,
  [OBJECT_ID] [numeric](18, 0) NOT NULL ,
  [FORMAT_NAME] [nvarchar] (255) NOT NULL ,
  [DESCRIPTION] [nvarchar] (512) NULL ,
  [CREATED] [datetime] NOT NULL ,
  [MODIFIED] [datetime] NOT NULL ,
  [LAST_MODIFIED_BY] [numeric](18, 0) NOT NULL ,
  [FORMAT_BODY] [ntext] NULL ,
  [NET_LANGUAGE_ID] [numeric](18, 0) NULL ,
  [NET_FORMAT_NAME] [nvarchar] (255) NULL ,
  [CODE_BEHIND] [ntext] NULL ,
  [LOCKED] [datetime] NULL ,
  [LOCKED_BY] [numeric](18, 0) NULL ,
  [ASSEMBLED] [datetime] NULL,
  CONSTRAINT [PK_OBJECT_FORMAT_VERSION] PRIMARY KEY  CLUSTERED
  (
    [OBJECT_FORMAT_VERSION_ID]
  )  ON [PRIMARY] ,
  CONSTRAINT [FK_OBJECT_FORMAT_VERSION_NET_LANGUAGES] FOREIGN KEY
  (
    [NET_LANGUAGE_ID]
  ) REFERENCES [NET_LANGUAGES] (
    [NET_LANGUAGE_ID]
  ),
  CONSTRAINT [FK_OBJECT_FORMAT_VERSION_ID] FOREIGN KEY
  (
    [OBJECT_FORMAT_ID]
  ) REFERENCES [OBJECT_FORMAT] (
    [OBJECT_FORMAT_ID]
  ) ON DELETE CASCADE
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

if dbo.qp_get_version_control() = 0
CREATE INDEX ix_object_format_version_id ON object_format_version (object_format_version_id)

if dbo.qp_get_version_control() = 0
CREATE INDEX ix_object_format_id ON object_format_version (object_format_id)
GO

exec qp_drop_existing 'restore_object_format_version' , 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[restore_object_format_version]
   @version_id NUMERIC
AS
  UPDATE obf
  SET obf.format_name = obfv.format_name,
  obf.description = obfv.description,
  obf.created = obfv.created,
  obf.modified = obfv.modified,
  obf.last_modified_by = obfv.last_modified_by,
  obf.format_body = obfv.format_body,
  obf.net_language_id = obfv.net_language_id,
  obf.net_format_name = obfv.net_format_name,
  obf.code_behind = obfv.code_behind,
  obf.assembled = obfv.assembled
  FROM object_format AS obf
  INNER JOIN object_format_version AS obfv ON obfv.object_format_id = obf.object_format_id
  WHERE obfv.object_format_version_id = @version_id
GO

exec qp_drop_existing 'clear_object_format_versions' , 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[clear_object_format_versions]
  @object_format_id NUMERIC
AS
  -- Delete versions of format's items
  DELETE FROM object_format_version
  WHERE object_format_id = @object_format_id

GO

if dbo.qp_get_version_control() = 0
ALTER TABLE page_template
  ADD max_num_of_format_stored_versions int NOT NULL CONSTRAINT DF_PAGE_TEMPLATE_STORED_VERSIONS DEFAULT 100
GO

exec qp_drop_existing 'qp_curtail_object_format_versions' , 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_curtail_object_format_versions]
  @object_format_id NUMERIC(18, 0) = NULL,
  @page_template_id NUMERIC(18, 0) = NULL
AS
  DECLARE @tb_object_format_id table (
    id NUMERIC identity(1,1) primary key,
    object_format_id NUMERIC(18, 0),
    max_num_of_format_stored_versions int
  )
  INSERT INTO @tb_object_format_id (object_format_id, max_num_of_format_stored_versions)
    SELECT obf.object_format_id, pt.max_num_of_format_stored_versions FROM object_format AS obf
    INNER JOIN object AS o ON o.object_id = obf.object_id
    INNER JOIN page_template AS pt ON o.page_template_id = pt.page_template_id
    WHERE pt.page_template_id = @page_template_id OR obf.object_format_id = @object_format_id

  DECLARE @i INT
  DECLARE @count INT
  DECLARE @item NUMERIC(18,0)
  DECLARE @max_length INT
  DECLARE @min_data datetime

  SET @i = 1
  SELECT @count = COUNT(id) FROM @tb_object_format_id
  WHILE @i < @count + 1
  BEGIN
    SELECT @item = object_format_id, @max_length = max_num_of_format_stored_versions
      FROM @tb_object_format_id WHERE id = @i
    SET ROWCOUNT @max_length
    SELECT @min_data = modified FROM object_format_version
      WHERE object_format_id = @item
      ORDER BY modified DESC
    SET ROWCOUNT 0;
    DELETE FROM object_format_version
      WHERE object_format_id = @item AND modified < @min_data
    SET @i = @i + 1
  END
GO

exec qp_drop_existing 'qp_wrapper_curtail_object_format_versions' , 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_wrapper_curtail_object_format_versions]
  @object_format_id NUMERIC(18, 0),
  @page_template_id NUMERIC(18, 0)
AS
  exec qp_curtail_object_format_versions @object_format_id, @page_template_id
GO

exec qp_drop_existing 'tbu_format' , 'IsTrigger'
GO

CREATE TRIGGER [dbo].[tbu_format] ON [dbo].[OBJECT_FORMAT]
INSTEAD OF UPDATE
AS
IF UPDATE(locked) or UPDATE(locked_by)
BEGIN
  UPDATE objF
    SET objF.LOCKED = i.LOCKED,
      objF.LOCKED_BY = i.LOCKED_BY
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(modified) BEGIN
  UPDATE objF
    SET
      objF.MODIFIED = i.MODIFIED
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(last_modified_by) BEGIN
  UPDATE objF
    SET
      objF.LAST_MODIFIED_BY = i.LAST_MODIFIED_BY
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END

IF UPDATE(assemble_in_live) or UPDATE(assemble_in_stage) BEGIN
  UPDATE objF
    SET
      objF.assemble_in_live = i.assemble_in_live,
      objF.assemble_in_stage = i.assemble_in_stage
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id

  update objF set assemble_preview_in_live = 1, assemble_notification_in_live = 1 from object_format as objF inner join
  inserted i on objF.object_format_id = i.object_format_id where i.assemble_in_live = 1

  update objF set assemble_preview_in_stage = 1, assemble_notification_in_stage = 1 from object_format as objF inner join
  inserted i on objF.object_format_id = i.object_format_id where i.assemble_in_stage = 1


END

IF UPDATE(assemble_preview_in_live) or UPDATE(assemble_preview_in_stage) or UPDATE(assemble_notification_in_stage) or UPDATE(assemble_notification_in_live) BEGIN
  UPDATE objF
    SET
      objF.assemble_preview_in_live = i.assemble_preview_in_live,
      objF.assemble_preview_in_stage = i.assemble_preview_in_stage,
      objF.assemble_notification_in_live = i.assemble_notification_in_live,
      objF.assemble_notification_in_stage = i.assemble_notification_in_stage
    FROM inserted AS i
      INNER JOIN OBJECT_FORMAT AS objF
      ON i.object_format_id = objF.object_format_id
END


IF UPDATE(format_name) or UPDATE(format_body) or UPDATE(code_behind) or UPDATE(net_format_name) or UPDATE(net_language_id) or UPDATE(description)
BEGIN
  -- Create object format version
  DECLARE @object_format_id NUMERIC
  SELECT @object_format_id = object_format_id FROM deleted

  INSERT INTO object_format_version (object_format_id, object_id, format_name, description, created, modified,
  last_modified_by, format_body, net_language_id, net_format_name, code_behind, assembled )
  SELECT object_format_id, object_id, format_name, description, created, modified,
  last_modified_by, format_body, net_language_id, net_format_name, code_behind, assembled
  FROM deleted

  declare @i numeric, @count numeric
  declare @objf table (
      id numeric identity(1,1) primary key,
      object_format_id numeric
  )

  insert into @objf (object_format_id)
    select object_format_id
    from deleted d

  set @i = 1
  select @count = count(id) from @objf

  while @i < @count + 1
  begin
    select @object_format_id = object_format_id from @objf where id = @i
    EXEC qp_curtail_object_format_versions @object_format_id
    set @i = @i + 1
  end

  UPDATE
    objF
  SET
    objF.FORMAT_NAME    = i.FORMAT_NAME,
    objF.DESCRIPTION    = i.DESCRIPTION,
    objF.MODIFIED       = i.MODIFIED,
    objF.LAST_MODIFIED_BY   = i.LAST_MODIFIED_BY,
    objF.FORMAT_BODY    = i.FORMAT_BODY,
    objF.NET_LANGUAGE_ID  = i.NET_LANGUAGE_ID,
    objF.NET_FORMAT_NAME  = i.NET_FORMAT_NAME,
    objF.CODE_BEHIND    = i.CODE_BEHIND
  FROM
    inserted AS i
  INNER JOIN OBJECT_FORMAT AS objF ON i.object_format_id = objF.object_format_id
END

IF UPDATE(object_id) or UPDATE(created) or UPDATE(assembled)
BEGIN
  UPDATE
    objF
  SET
    objF.OBJECT_ID      = i.OBJECT_ID,
    objF.CREATED      = i.CREATED,
    objF.ASSEMBLED      = i.ASSEMBLED
  FROM
    inserted AS i
  INNER JOIN OBJECT_FORMAT AS objF ON i.object_format_id = objF.object_format_id
END
GO

if dbo.qp_get_version_control() = 0
UPDATE system_info SET field_value = '1.0.0.0' WHERE field_name='Version Control Add-on'
GO

if dbo.qp_get_version_control() = 1
begin
DECLARE @id NUMERIC, @tab_goup NUMERIC
SELECT @tab_goup = MAX(tab_group) + 1 FROM tabs

INSERT INTO tabs
  (tab_name, tab_file, tab_group, tabs_order, parent_tab_id)
VALUES
  ('Track Article Changes', 'version_control/dsp_record_version_preview.asp', @tab_goup, 1, 70)
SET @id = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, 70, 'images/toolbar/track_disabled.gif', 'images/toolbar/track.gif',
  'Track Changes', 1, @id, 0,
  'track_changes')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', 70, @id, NULL, 1)

SET @tab_goup = @tab_goup + 1
INSERT INTO tabs
  (tab_name, tab_file, tab_group, tabs_order, parent_tab_id)
VALUES
  ('Compare Backups', 'version_control/dsp_record_version_preview.asp', @tab_goup, 1, 70)
SET @id = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, 70, 'images/toolbar/compare_dis.gif', 'images/toolbar/compare.gif',
  'Compare Backups', 1, @id, 0,
  'compare_backups')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', 70, @id, NULL, 1)
--------------------------------------
-- Alexander Vasiliev
--------------------------------------
-- Version Control for object formats
--------------------------------------
DECLARE @template_object_formats NUMERIC
SELECT @template_object_formats = tab_id FROM tabs WHERE tab_name = 'Template Object Formats'
DECLARE @format_history_tab_id NUMERIC
SELECT @format_history_tab_id = tab_id FROM tabs WHERE tab_name = 'Format History'
DECLARE @object_format_info NUMERIC
SELECT @object_format_info = tab_id FROM tabs WHERE tab_name = 'Object Format Info'
--------------------------------------
-- Track Format Changes
--------------------------------------
SET @tab_goup = @tab_goup + 1
DECLARE @format_track_changes NUMERIC
INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, parent_tab_id, hide_in_tree)
VALUES ('Track Format Changes', 'pages/templates/objects/formats/history/dsp_format_version_preview.asp',
  @tab_goup, 1, @format_history_tab_id, 1)
SET @format_track_changes = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, @format_history_tab_id, 'images/toolbar/track_disabled.gif', 'images/toolbar/track.gif',
  'Track Changes', 2, @format_track_changes, 0,
  'track_changes')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', @format_history_tab_id, @format_track_changes, NULL, 1)
--------------------------------------
-- Compare Backups
--------------------------------------
DECLARE @format_compare_backups NUMERIC
SET @tab_goup = @tab_goup + 1
INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, parent_tab_id, hide_in_tree)
VALUES ('Compare Format Backups', 'pages/templates/objects/formats/history/dsp_format_version_preview.asp',
  @tab_goup, 1, @format_history_tab_id, 1)
SET @format_compare_backups = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, @format_history_tab_id, 'images/toolbar/compare_dis.gif', 'images/toolbar/compare.gif',
  'Compare Backups', 3, @format_compare_backups, 0,
  'compare_backups')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', @format_history_tab_id, @format_compare_backups, NULL, 1)
--------------------------------------
-- Page Object Format Version tabs
--------------------------------------
DECLARE @page_object_formats NUMERIC
SELECT @page_object_formats = tab_id FROM tabs WHERE tab_name = 'Page Object Formats'
DECLARE @page_format_history_tab_id NUMERIC
SELECT @page_format_history_tab_id = tab_id FROM tabs WHERE tab_name = 'Page Format History'
DECLARE @page_object_format_info NUMERIC
SELECT @page_object_format_info = tab_id FROM tabs WHERE tab_name = 'Page Object Format Info'
--------------------------------------
-- Track Page Format Changes
--------------------------------------
DECLARE @page_format_track_changes NUMERIC

SET @tab_goup = @tab_goup + 1
INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, parent_tab_id, hide_in_tree)
VALUES ('Track Page Format Changes', 'pages/objects/formats/history/dsp_page_format_version_preview.asp',
  @tab_goup, 1, @page_format_history_tab_id, 1)
SET @page_format_track_changes = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, @page_format_history_tab_id, 'images/toolbar/track_disabled.gif', 'images/toolbar/track.gif',
  'Track Changes', 2, @page_format_track_changes, 0,
  'track_changes')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', @page_format_history_tab_id, @page_format_track_changes, NULL, 1)
--------------------------------------
-- Compare Page Format Backups
--------------------------------------
DECLARE @page_format_compare_backups NUMERIC
SET @tab_goup = @tab_goup + 1
INSERT INTO tabs (tab_name, tab_file, tab_group, tabs_order, parent_tab_id, hide_in_tree)
VALUES ('Compare Page Format Backups', 'pages/objects/formats/history/dsp_page_format_version_preview.asp',
  @tab_goup, 1, @page_format_history_tab_id, 1)
SET @page_format_compare_backups = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, @page_format_history_tab_id, 'images/toolbar/compare_dis.gif', 'images/toolbar/compare.gif',
  'Compare Backups', 3, @page_format_compare_backups, 0,
  'compare_backups')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', @page_format_history_tab_id, @page_format_compare_backups, NULL, 1)
end
GO

if dbo.qp_get_version_control() = 1
  INSERT INTO system_info (field_name, field_value) VALUES ('Version Control Add-on', '2.0.0.0')
GO




INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.33', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.33 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.34
-- Schedule fix
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'DELETE_JOB' and TABLE_NAME = 'CONTENT_ITEM_SCHEDULE')
ALTER TABLE dbo.CONTENT_ITEM_SCHEDULE ADD
  DELETE_JOB bit NOT NULL CONSTRAINT DF_CONTENT_ITEM_SCHEDULE_DELETE_JOB DEFAULT (1)
GO

exec qp_drop_existing 'qp_merge_article', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_merge_article
@item_id numeric
AS
BEGIN
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0, not_for_replication = 1 WHERE content_item_id = @item_id
  exec qp_replicate @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
END
GO

ALTER TRIGGER [dbo].[td_content_item_schedule_del_job] ON [dbo].[CONTENT_ITEM_SCHEDULE] FOR DELETE AS BEGIN
  DECLARE @current_db SYSNAME, @item_id NUMERIC, @delete_job bit, @qp_job_name SYSNAME
  SELECT @current_db = DB_NAME()
  DECLARE items CURSOR FOR SELECT content_item_id, delete_job FROM deleted
  OPEN items

  FETCH NEXT FROM items INTO @item_id, @delete_job
  WHILE @@FETCH_STATUS = 0 BEGIN
    IF @delete_job = 1
    BEGIN
    SET @qp_job_name = 'Q-Publishing Schedule for ' + @current_db + ' item ' + CAST(@item_id AS NVARCHAR) + ' on'
    IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = @qp_job_name) BEGIN
      EXEC msdb.dbo.sp_delete_job @job_name = @qp_job_name
    END
    SET @qp_job_name = 'Q-Publishing Schedule for ' + @current_db + ' item ' + CAST(@item_id AS NVARCHAR) + ' off'
    IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = @qp_job_name) BEGIN
      EXEC msdb.dbo.sp_delete_job @job_name = @qp_job_name
    END
    END
    FETCH NEXT FROM items INTO @item_id, @delete_job
  END
  CLOSE items
  DEALLOCATE items
END
GO

ALTER TRIGGER [dbo].[ti_content_item_schedule_add_job] ON [dbo].[CONTENT_ITEM_SCHEDULE] FOR INSERT AS BEGIN
  DECLARE @current_db SYSNAME, @item_id NUMERIC, @qp_job_name SYSNAME, @sql NVARCHAR(1024)
  DECLARE @freq_type INT, @freq_interval INT, @freq_relative_interval INT, @freq_recurrence_factor INT
  DECLARE @active_start_date INT, @active_end_date INT, @active_start_time INT, @active_end_time INT
  DECLARE @use_duration INT, @deactivate BIT
  DECLARE @pre_sql NVARCHAR(1024)
  declare @str_set_params nvarchar(255)
  SELECT @current_db = DB_NAME()
  DECLARE items CURSOR FOR
    SELECT content_item_id, freq_type, freq_interval, freq_relative_interval, freq_recurrence_factor,
      active_start_date, active_end_date, active_start_time, active_end_time, use_duration, deactivate
    FROM inserted
  OPEN items

  FETCH NEXT FROM items
  INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
    @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  WHILE @@FETCH_STATUS = 0 BEGIN

    DECLARE @delete_level INT

    IF @freq_type = 1 OR @freq_type = 2 BEGIN
      DECLARE @now_date DATETIME
      DECLARE @now_date_int BIGINT, @start_date_int BIGINT, @end_date_int BIGINT

      SET @now_date = DATEADD(mi, 1, GETDATE())
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))
      SET @start_date_int = CAST(@active_start_time AS BIGINT) + CAST(@active_start_date AS BIGINT) * 1000000
      SET @end_date_int   = CAST(@active_end_time AS BIGINT) + CAST(@active_end_date AS BIGINT) * 1000000

      IF @now_date_int > @start_date_int BEGIN
        SET @active_start_date = @now_date_int / 1000000
        SET @active_start_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_start_date = @active_start_date, active_start_time = @active_start_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @now_date = DATEADD(ss, 10, @now_date)
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))

      IF @now_date_int > @end_date_int BEGIN
        SET @active_end_date = @now_date_int / 1000000
        SET @active_end_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_end_date = @active_end_date, active_end_time = @active_end_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @delete_level  = 1

    END ELSE BEGIN
      SET @delete_level  = 0
    END

    SET @qp_job_name = 'Q-Publishing Schedule for ' + @current_db + ' item '
      + CAST(@item_id AS NVARCHAR) + ' on'
    IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = @qp_job_name) BEGIN
      EXEC msdb.dbo.sp_delete_job @job_name = @qp_job_name
    END

  IF @deactivate = 0 BEGIN  --if schedule is deactivated then don't create job
    if dbo.qp_is_sql_2000() = 1
      set @str_set_params =  '@activation_start_dt=[STRTDT], @activation_start_tm=[STRTTM]'
    else if dbo.qp_is_early_sql_2005() = 1
      set @str_set_params =  '@activation_start_dt=$(STRTDT), @activation_start_tm=$(STRTTM)'
    else
      set @str_set_params =  '@activation_start_dt=$(ESCAPE_NONE(STRTDT)), @activation_start_tm=$(ESCAPE_NONE(STRTTM))'
    if @freq_type <> 2
      SET @sql = 'UPDATE content_item with(rowlock) SET visible = 1 WHERE content_item_id = '
        + CAST(@item_id AS NVARCHAR)
        + '
        EXECUTE qp_create_deactivation_job @item_id=' + CAST(@item_id AS NVARCHAR) + ', ' + @str_set_params
    else begin  --scheduleNewVersionPublication
      set @sql  = 'exec qp_merge_article ' + CAST(@item_id AS NVARCHAR)
      set @freq_type = 1
    end

    SET @pre_sql = 'Q-Publishing Schedule for ' + @current_db + ' item ' + CAST(@item_id AS NVARCHAR) + ' off'
    SET @pre_sql = 'IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = ''' + @pre_sql + ''') EXEC msdb.dbo.sp_delete_job @job_name = ''' + @pre_sql + ''' '

    EXEC msdb.dbo.sp_add_job @job_name = @qp_job_name, @delete_level  =  @delete_level
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Remove old deactivation job',
      @command = @pre_sql, @database_name = @current_db,
      @retry_attempts = 1,
      @on_success_action  = 3, @on_fail_action = 3
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Activate article',
      @command = @sql, @database_name = @current_db,
      @retry_attempts = 1
    EXEC msdb.dbo.sp_add_jobschedule @job_name = @qp_job_name, @name = 'Activate Schedule',
      @enabled = 1, @freq_type = @freq_type, @freq_interval = @freq_interval,
      @freq_relative_interval = @freq_relative_interval,
      @freq_recurrence_factor = @freq_recurrence_factor,
      @freq_subday_type = 0x1, @freq_subday_interval = 0,
      @active_start_date = @active_start_date, @active_end_date = @active_end_date,
      @active_start_time = @active_start_time, @active_end_time = @active_end_time
    EXEC msdb.dbo.sp_add_jobserver @job_name = @qp_job_name, @server_name = '(LOCAL)'
  END

    FETCH NEXT FROM items
    INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
      @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  END
  CLOSE items
  DEALLOCATE items
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.34', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.34 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.35
-- Missed foreign key
-- **************************************

ALTER TABLE CONTENT_ITEM ADD CONSTRAINT FK_CONTENT_ITEM_LAST_MODIFIED_BY FOREIGN KEY (LAST_MODIFIED_BY) REFERENCES USERS (USER_ID)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.35', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.35 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.36
-- Default Article
-- **************************************
exec qp_drop_existing 'qp_get_default_article', 'IsProcedure'
GO
CREATE procedure [dbo].[qp_get_default_article]
@content_id numeric
as
begin

declare @sql nvarchar(max), @fields nvarchar(max), @prefixed_fields nvarchar(max)

if @content_id is not null
begin
  select @fields = dbo.qp_get_content_field_list(@content_id, '')
  select @prefixed_fields = dbo.qp_get_content_field_list(@content_id, 'pt.')

  set @sql = N'select ' + @prefixed_fields  + N' from
  (
  select ca.ATTRIBUTE_NAME, CASE WHEN ca.attribute_type_id in (9, 10) THEN convert(nvarchar(max), ca.DEFAULT_BLOB_VALUE) ELSE ca.DEFAULT_VALUE END as data from CONTENT_ATTRIBUTE ca
  where ca.CONTENT_ID = @content_id) as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt
  '
  print @sql
  exec sp_executesql @sql, N'@content_id numeric', @content_id = @content_id
end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.36', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.36 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.37
-- VE Url
-- **************************************

CREATE TABLE VE_URL
(
  sid numeric,
  url nvarchar(1024)
)

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.37', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.37 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.38
-- Article merging fix
-- **************************************

ALTER PROCEDURE [dbo].[qp_merge_article]
@item_id numeric
AS
BEGIN
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0 WHERE content_item_id = @item_id
  exec qp_replicate @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.38', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.38 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.39
-- Quick fixes
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'P_ENTER_MODE' and TABLE_NAME = 'SITE')
ALTER TABLE SITE
  ADD P_ENTER_MODE BIT NOT NULL CONSTRAINT DF_P_ENTER_MODE DEFAULT (1)
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'P_ENTER_MODE' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE
  ADD P_ENTER_MODE BIT NULL
GO

UPDATE SITE SET P_ENTER_MODE = 0
GO

ALTER  PROCEDURE [dbo].[qp_build_query_vcontent_view]
  @content_id NUMERIC,
  @uid NUMERIC
AS BEGIN
  DECLARE @view_name NVARCHAR(128), @sql NVARCHAR(max), @alt_sql NVARCHAR(MAX)
  DECLARE @fld_name NVARCHAR(255), @fld_type NVARCHAR(128)
  DECLARE @fld_size NUMERIC, @fld_scale NUMERIC
  DECLARE @tbl_name SYSNAME, @tbl_id NUMERIC

  DECLARE @attr_found NUMERIC, @do_field_creation NUMERIC

  DECLARE @attr_size NUMERIC, @attr_type NUMERIC, @attr_rel_id NUMERIC, @view_in_list BIT
  DECLARE @attr_related_image_attribute_id NUMERIC, @attr_use_site_library BIT
  DECLARE @link_id NUMERIC

  SET @view_name = 'content_' + CAST(@content_id AS NVARCHAR)

  SELECT @sql = query, @alt_sql = alt_query FROM content WHERE content_id = @content_id
  SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + ' AS ' + @sql
  EXEC(@sql)

  DELETE FROM content_attribute WHERE content_id = @content_id

  DECLARE fields CURSOR
  FOR SELECT
    column_name, data_type, character_maximum_length, numeric_scale
  FROM
    information_schema.columns
  WHERE table_name = @view_name AND column_name NOT IN (
    'content_item_id', 'created', 'modified', 'last_modified_by', 'status_type_id', 'visible', 'archive'
  )
  OPEN fields
  FETCH NEXT FROM fields INTO @fld_name, @fld_type, @fld_size, @fld_scale
  WHILE @@FETCH_STATUS = 0 BEGIN
    SET @tbl_name = NULL
    SET @attr_found = 0
    SET @do_field_creation = 1
    SET @attr_type = NULL
    SET @attr_size = NULL
    SET @attr_type = NULL
    SET @attr_rel_id = NULL
    SET @attr_related_image_attribute_id = NULL
    SET @attr_use_site_library = 0
  SET @view_in_list = 0

    SELECT @tbl_name = table_name FROM INFORMATION_SCHEMA.VIEW_COLUMN_USAGE
    WHERE view_name = @view_name AND table_name LIKE 'content_%' AND column_name = @fld_name
    IF @tbl_name IS NOT NULL BEGIN
      SET @tbl_name = RIGHT(@tbl_name, LEN(@tbl_name) - 8)
      IF ISNUMERIC(@tbl_name) = 1 BEGIN
        SET @tbl_id = CAST(@tbl_name AS NUMERIC)
        SELECT
          @attr_size = attribute_size,
          @attr_type = attribute_type_id,
          @attr_rel_id = related_attribute_id,
      @attr_related_image_attribute_id = related_image_attribute_id,
      @attr_use_site_library = use_site_library,
      @view_in_list = view_in_list,
          @link_id = link_id
        FROM content_attribute
        WHERE content_id = @tbl_id AND attribute_name = @fld_name
        IF @attr_type IS NOT NULL SET @attr_found = 1
      END
    END

    SET @do_field_creation = 1
    IF @attr_found = 0 BEGIN
      IF LOWER(@fld_type) IN (
        'char', 'nchar', 'varchar', 'nvarchar'
      ) BEGIN
        SET @attr_type = 1
        SET @attr_size = @fld_size
      END ELSE IF LOWER(@fld_type) IN (
        'uniqueidentifier'
      ) BEGIN
        SET @attr_type = 1
        SET @attr_size = 100
      END ELSE IF LOWER(@fld_type) IN (
        'numeric', 'bigint', 'bit', 'decimal', 'int', 'money', 'smallint', 'smallmoney', 'tinyint'
      ) BEGIN
        SET @attr_type = 2
        SET @attr_size = @fld_scale
      END ELSE IF LOWER(@fld_type) IN (
        'float', 'real'
      ) BEGIN
        SET @attr_type = 2
        SET @attr_size = 10
      END ELSE IF LOWER(@fld_type) IN (
        'datetime', 'smalldatetime'
      ) BEGIN
        SET @attr_type = 6
        SET @attr_size = 0
      END ELSE IF LOWER(@fld_type) IN (
        'text', 'ntext'
      ) BEGIN
        SET @attr_type = 10
        SET @attr_size = 0
      END ELSE BEGIN
        SET @do_field_creation = 0
      END
    END

    IF @do_field_creation = 1 BEGIN
      INSERT INTO content_attribute (
        content_id, attribute_name, attribute_size, attribute_type_id, last_modified_by,
        attribute_order, related_attribute_id, related_image_attribute_id, use_site_library,
    view_in_list, link_id
      ) VALUES (
        @content_id, @fld_name, @attr_size, @attr_type, @uid,
        1, @attr_rel_id , @attr_related_image_attribute_id, @attr_use_site_library,
    @view_in_list, @link_id
      )
    END

    FETCH NEXT FROM fields INTO @fld_name, @fld_type, @fld_size, @fld_scale
  END
  CLOSE fields
  DEALLOCATE fields

  IF @alt_sql IS NULL
    SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + '_united AS select * from dbo.content_' + + CAST(@content_id AS NVARCHAR)
  ELSE
    SET @sql = N'CREATE VIEW dbo.content_' + CAST(@content_id AS NVARCHAR) + '_united  AS ' + @alt_sql
  EXEC(@sql)

  exec qp_content_frontend_views_create @content_id

END
GO


ALTER  PROCEDURE [dbo].[qp_delete_unified_fields]
--Deletes attributes in union source contents, which have no virtual child contents
@virtual_attribute_id numeric

AS

CREATE TABLE #temp (
  virtual_attr_id numeric(18, 0) NOT NULL ,
  union_attr_id numeric(18, 0) NOT NULL ,
)

INSERT INTO #temp (virtual_attr_id, union_attr_id)
SELECT ua.virtual_attr_id, ua.union_attr_id
FROM union_attrs ua
join content_attribute ca on ca.attribute_id = ua.union_attr_id
left outer join user_query_attrs uq on ca.attribute_id = uq.user_query_attr_id
left outer join content c on c.virtual_join_primary_content_id = ca.content_id
left outer join union_attrs una on una.union_attr_id = ua.union_attr_id and una.virtual_attr_id <> @virtual_attribute_id
WHERE ua.virtual_attr_id = @virtual_attribute_id and uq.user_query_attr_id is null
  and c.virtual_join_primary_content_id is null and una.virtual_attr_id is null

UPDATE notifications SET email_attribute_id = NULL WHERE email_attribute_id in (select union_attr_id from #temp)

DELETE FROM union_attrs where virtual_attr_id = @virtual_attribute_id

DELETE FROM content_attribute WHERE attribute_id in (select union_attr_id from #temp)

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.39', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.39 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.40
-- Permanent Locks
-- **************************************
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'PERMANENT_LOCK' and TABLE_NAME = 'SITE')
ALTER TABLE SITE
  ADD PERMANENT_LOCK BIT NOT NULL CONSTRAINT DF_SITE_PERMANENT_LOCK DEFAULT (0)
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'PERMANENT_LOCK' and TABLE_NAME = 'CONTENT_ITEM')
ALTER TABLE CONTENT_ITEM
  ADD PERMANENT_LOCK BIT NOT NULL CONSTRAINT DF_CONTENT_ITEM_PERMANENT_LOCK DEFAULT (0)
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'LOCKED' and TABLE_NAME = 'CONTENT_ITEM')
ALTER TABLE CONTENT_ITEM
  ADD LOCKED DATETIME NULL
GO

update content_item set PERMANENT_LOCK = 1, locked = GETDATE() where locked_by is not null
GO

update site set PERMANENT_LOCK = 1 where LOCKED_BY is not null
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.40', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.40 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.7.0.41
-- Fix filter with brackets
-- **************************************

ALTER FUNCTION [dbo].[qp_filter_columns](@content_id numeric, @str nvarchar(max)) RETURNS nvarchar(max)
AS BEGIN

  SET @str = REPLACE(REPLACE(RTrim(LTrim(@str)), '[', ''), ']', '')

  DECLARE @columns TABLE
  (
  id numeric identity(1,1) primary key,
  name nvarchar(255)
  )

  DECLARE @i numeric, @count numeric
  DECLARE @result nvarchar(max), @name nvarchar(max)

  set @result = '';


  WITH fields (name) AS (SELECT LTrim(items) from split(@str, ','))
  INSERT INTO @columns(name)
  select '[' + name + ']' from fields
  where name in (SELECT attribute_name from content_attribute where content_id = @content_id) or name in ('content_item_id', 'archive', 'visible', 'created', 'modified', 'last_modified_by')


  select @count = count(id) from @columns
  set @i = 1

  while @i <= @count
  begin
  if @i > 1 set @result = @result + ', '
  select @name = name from @columns where id = @i
  set @result = @result + @name

  set @i = @i + 1
  end

  if @result = '' set @result = 'c.*'


  RETURN @result
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.41', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.41 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.42
-- Fix Version Control Logic
-- **************************************
ALTER TABLE CONTENT_ITEM_VERSION
ADD
  [CREATED] [datetime] NOT NULL CONSTRAINT [DF_CONTENT_ITEM_VERSION_CREATED] DEFAULT (getdate()),
  [CREATED_BY] [numeric](18, 0) NOT NULL CONSTRAINT [DF_CONTENT_ITEM_VERSION_CREATED_BY] DEFAULT (1)
GO

ALTER TABLE [dbo].[CONTENT_ITEM_VERSION]  WITH CHECK ADD  CONSTRAINT [FK_CONTENT_ITEM_VERSION_CREATED_BY] FOREIGN KEY([CREATED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO

ALTER TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id

    UPDATE SITE SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE SITE SET locked = NULL, locked_by = NULL FROM SITE c inner join deleted d on c.locked_by = d.user_id

    UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET created_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.created_by = d.user_id
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
    UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
    UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

    delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO

update CONTENT_ITEM_VERSION set created = ch.CREATED, created_by = ch.USER_ID
from CONTENT_ITEM_VERSION civ inner join CONTENT_ITEM_STATUS_HISTORY ch on civ.CONTENT_ITEM_VERSION_ID = ch.content_item_version_id

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.42', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.42 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.7.0.43
-- Home Update
-- **************************************

ALTER PROCEDURE [dbo].[qp_lastPages]
@user_id numeric
AS
with d as (
  SELECT page.page_id, page.page_template_id, page.modified, site.site_id, page.page_name, site.site_name, ROW_NUMBER() over (partition by sl.site_id order by page.modified DESC ) rn
  FROM qp_sites_list_ids(@user_id, 1) sl INNER merge JOIN site on sl.site_id = site.site_id
  INNER JOIN page_template AS pt ON pt.site_id = site.site_id
  INNER JOIN page ON page.page_template_id = pt.page_template_id
)
select page_id, page_template_id, modified, site_id, page_name, site_name from d where rn <= 5
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.43', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.43 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.44
-- Remove unnecessary variable
-- ***********************************************
ALTER PROCEDURE [dbo].[qp_GetContentData]
(
  @SiteName nvarchar(255),
  @ContentName nvarchar(255),
  @Fields nvarchar(max) = '',
  @WhereExpression nvarchar(max) = '',
  @OrderExpression nvarchar(max) = '',
  @StartRow int = 1,
  @PageSize int = 0,
  @TotalRecords int = 0 output,
  @UseSchedule bit = 1,
  @StatusName nvarchar(255) = '',
  @ShowSplittedArticle bit = 0,
  @IncludeArchive bit = 0,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @filter_records bit = 1
)
AS
DECLARE @siteId numeric
DECLARE @contentId numeric
DECLARE @virtualType numeric

DECLARE @maxStatusId numeric
DECLARE @currentStatusId numeric
DECLARE @statusString nvarchar(max)
DECLARE @total numeric
DECLARE @tableSuffix nvarchar(20)
DECLARE @fromExpression nvarchar(max)
DECLARE @fullWhereExpression nvarchar(max)

DECLARE @insert_key varchar(200)
DECLARE @Select varchar(max)

set @insert_key ='<$_security_insert_$>'


select @siteId = site_id from site where site_name = @SiteName
if @siteId is null return 1

select @contentId = content_id, @virtualType = virtual_type from content where site_id = @SiteId and content_name = @ContentName
if @contentId is null return 2

set @Select = dbo.qp_filter_columns(@contentId, @Fields)

select top 1 @maxStatusId = status_type_id from status_type where site_id = @SiteId order by weight desc

if @StatusName <> '' begin
  if not exists(select * from STATUS_TYPE where status_type_name = @StatusName) begin
    return 3
  end else begin
    set @statusString = 'select status_type_id from status_type where status_type_name = ''' + @StatusName + ''''
  end
end else begin
  set @statusString = cast(@maxStatusId as nvarchar)
end

if @ShowSplittedArticle = 0 begin
  set @tableSuffix = ''
end
else begin
  set @tableSuffix = '_united'
end

if @WhereExpression = '' begin
  set @fullWhereExpression = '1 = 1'
end
else begin
  set @fullWhereExpression = @WhereExpression
end

if @UseSchedule = 1 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.visible = 1'
end

if @IncludeArchive = 0 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.archive = 0'
end

set @fullWhereExpression = @fullWhereExpression + ' and c.status_type_id in (' + @statusString + ')'

set @fromExpression = 'content_' + CONVERT(NVARCHAR, @ContentId) + @tableSuffix + ' as c WITH(NOLOCK) '

if @use_security>0
begin
  if @filter_records > 0
  begin
    set @fromExpression = @fromExpression + ' INNER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
  end
  else
  begin
        set @fromExpression = @fromExpression + ' LEFT OUTER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
    set @Select = @Select + ', IsNull(pi.permission_level,0) as current_permission_level  '
  end
end

exec qp_GetContentPage  @Select = @Select,
            @From=@fromExpression,
            @Where=@fullWhereExpression,
            @OrderBy=@OrderExpression,
            @StartRow=@StartRow,
            @PageSize=@PageSize,
            @GetCount=1,
            @TotalRecords=@TotalRecords output,

              @use_security = @use_security,
              @user_id = @user_id,
              @group_id = @group_id,
              @start_level = @start_level,
              @end_level = @end_level,
              @entity_name = 'content_item',
              @parent_entity_name = 'content',
              @parent_entity_id = @ContentId,
              @insert_key = @insert_key
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.44', 'Copyright &copy; 1998-2010 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.44 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.45
-- Move Article Version to INSTEAD OF logic
-- ***********************************************


ALTER TABLE dbo.CONTENT_ITEM_VERSION
  DROP CONSTRAINT FK_CONTENT_ITEM_VERSION_CONTENT_ITEM_ID
GO

ALTER TABLE dbo.CONTENT_ITEM_VERSION ADD CONSTRAINT
  FK_CONTENT_ITEM_VERSION_CONTENT_ITEM_ID FOREIGN KEY
  (
  CONTENT_ITEM_ID
  ) REFERENCES dbo.CONTENT_ITEM
  (
  CONTENT_ITEM_ID
  ) ON UPDATE  NO ACTION
   ON DELETE  NO ACTION

GO

ALTER TRIGGER [dbo].[tbd_delete_content_item] ON [dbo].[CONTENT_ITEM] INSTEAD OF DELETE
AS
BEGIN

delete waiting_for_approval from waiting_for_approval wa inner join deleted d on wa.content_item_id = d.content_item_id

IF dbo.qp_get_version_control() IS NOT NULL BEGIN
  delete content_item_version from content_item_version civ inner join deleted d on civ.content_item_id = d.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join content_item_version civ on civ.content_item_version_id = iiv.content_item_version_id
  inner join deleted d on d.content_item_id = civ.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join deleted d on d.content_item_id = iiv.linked_item_id
END

delete item_link_united_full from item_link_united_full ii where ii.item_id in (select content_item_id from deleted)

delete content_data from content_data cd inner join deleted d on cd.content_item_id = d.content_item_id

delete content_item from content_item ci inner join deleted d on ci.content_item_id = d.content_item_id

END
GO

DROP TRIGGER [dbo].[content_item_version_delete]
GO

CREATE TRIGGER [dbo].[tbd_content_item_version] ON [dbo].[CONTENT_ITEM_VERSION] INSTEAD OF DELETE
AS
begin
  DELETE version_content_data
  FROM version_content_data as vcd
  INNER JOIN deleted d on d.content_item_version_id = vcd.content_item_version_id

    DELETE content_item_status_history
  FROM content_item_status_history as cish
  INNER JOIN deleted d on d.content_item_version_id = cish.content_item_version_id
    WHERE cish.system_status_type_id = 2

    DELETE item_to_item_version
  FROM item_to_item_version as iiv
  INNER JOIN deleted d on d.content_item_version_id = iiv.content_item_version_id

  delete content_item_version from content_item_version civ inner join deleted d on civ.content_item_version_id = d.content_item_version_id
end
GO

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.45', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.45 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.46
-- Recreating article version buttons
-- ***********************************************

DECLARE @id NUMERIC

SELECT @id = tab_id FROM tabs WHERE tab_name = 'Compare Backups'
DELETE FROM buttons WHERE location_tab_id = @id

SELECT @id = tab_id FROM tabs WHERE tab_name = 'Track Article Changes'
DELETE FROM buttons WHERE location_tab_id = @id

DELETE FROM toolbar_buttons WHERE button_name = 'Compare Backups' AND location_tab_id = 70

DELETE FROM tabs WHERE tab_name = 'Compare Backups'

DELETE FROM toolbar_buttons WHERE button_name = 'Track Changes' AND location_tab_id = 70

DELETE FROM tabs WHERE tab_name = 'Track Article Changes'
GO
DECLARE @id NUMERIC, @tab_group NUMERIC
DECLARE @tab_name nvarchar(255)
SELECT @tab_group = MAX(tab_group) + 1 FROM tabs

Set @tab_name =  'Track Article Changes'
If not exists(select * from tabs where tab_name = @tab_name)
INSERT INTO tabs
  (tab_name, tab_file, tab_group, tabs_order, parent_tab_id)
VALUES
  (@tab_name, 'version_control/dsp_record_version_preview.asp', @tab_group, 1, 70)
SET @id = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, 70, 'images/toolbar/track_disabled.gif', 'images/toolbar/track.gif',
  'Track Changes', 1, @id, 0,
  'track_changes')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', 70, @id, NULL, 1)

SET @tab_group = @tab_group + 1
INSERT INTO tabs
  (tab_name, tab_file, tab_group, tabs_order, parent_tab_id)
VALUES
  ('Compare Backups', 'version_control/dsp_record_version_preview.asp', @tab_group, 1, 70)
SET @id = @@IDENTITY

INSERT INTO toolbar_buttons
  (permission_level_id, location_tab_id, image_disabled, image_enabled,
  button_name, buttons_order, action_tab_id, always_enabled,
  action_file)
VALUES
  (3, 70, 'images/toolbar/compare_dis.gif', 'images/toolbar/compare.gif',
  'Compare Backups', 1, @id, 0,
  'compare_backups')

INSERT INTO buttons
 (permission_level_id, button_type, buttons_order, button_name, action_tab_id, location_tab_id,
 action_file, cancel_action)
VALUES
 (3, 'submit', 3, 'Cancel', 70, @id, NULL, 1)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.46', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.46 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.47
-- Small fix
-- ***********************************************

ALTER FUNCTION [dbo].[qp_get_display_field](@content_id NVARCHAR(255), @with_relation_field BIT = 0) RETURNS NVARCHAR(255)
AS BEGIN
  DECLARE @fld_name NVARCHAR(255)

  SELECT @fld_name = attribute_name FROM (
  SELECT  top 1 attribute_name,
    CASE attribute_type_id
    WHEN 10 THEN 0
    WHEN 9  THEN 0
    ELSE 1
    END AS is_blob
  FROM content_attribute
  WHERE content_id = @content_id
  AND (attribute_type_id <> 11 AND @with_relation_field = 0 OR @with_relation_field = 1)
  ORDER BY view_in_list desc, is_blob desc, attribute_order asc) AS a

  IF @fld_name is Null
    Set @fld_name = 'content_item_id'
  RETURN @fld_name
END
GO

ALTER PROCEDURE [dbo].[qp_get_article_title]
@content_item_id numeric,
@content_id numeric,
@title nvarchar(255) output
AS
BEGIN
  declare @titleName NVARCHAR(255), @sql nvarchar(2000)
  SELECT @titleName = dbo.qp_get_display_field(@content_id, default)

  SET @sql = 'SELECT @title = CAST([' + @titleName + '] AS NVARCHAR (255)) FROM content_' + cast(@content_id as varchar) + '_united' +
    ' WHERE content_item_id =' + cast(@content_item_id as varchar)

  exec sp_executesql @sql, N'@title nvarchar(255) out', @title out
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.47', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.47 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.48
-- LINK_ID to related article (for MTS)
-- ***********************************************

exec qp_drop_existing 'qp_apply_link_id_to_data', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_apply_link_id_to_data
  @item_id numeric,
  @link_id numeric
AS
BEGIN
declare @content_id numeric, @attribute_id numeric
select @content_id = CONTENT_ID from content_item where CONTENT_ITEM_ID = @item_id
if @content_id is not null
begin
  select @attribute_id = ATTRIBUTE_ID FROM CONTENT_ATTRIBUTE where CONTENT_ID = @content_id and link_id = @link_id
  if @attribute_id is not null
  begin

    if exists(select content_data_id from content_data where ATTRIBUTE_ID = @attribute_id and CONTENT_ITEM_ID = @item_id)
      update content_data set data = @link_id where ATTRIBUTE_ID = @attribute_id and CONTENT_ITEM_ID = @item_id
    else
      insert into content_data(CONTENT_ITEM_ID, ATTRIBUTE_ID, DATA)
      values(@item_id, @attribute_id, @link_id)
  end

end

END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.48', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.48 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.49
-- Fix for Site Backup/Restore
-- ***********************************************

exec qp_drop_existing 'site_content_link', 'IsView'
GO

CREATE VIEW [dbo].[site_content_link] AS
SELECT l.*, c.site_id
FROM content_to_content AS l
  LEFT OUTER JOIN content AS c ON c.content_id = l.l_content_id

GO

exec qp_drop_existing 'ti_site_content_link', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[ti_site_content_link] ON [dbo].[site_content_link] INSTEAD OF INSERT
AS BEGIN
  INSERT INTO CONTENT_TO_CONTENT(l_content_id, r_content_id, map_as_class, net_link_name, net_plural_link_name)
  select l_content_id, r_content_id, map_as_class, net_link_name, net_plural_link_name from inserted
END
GO

exec qp_drop_existing 'td_site_content_link', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[td_site_content_link] ON [dbo].[site_content_link] INSTEAD OF DELETE
AS BEGIN
  DELETE FROM CONTENT_TO_CONTENT WHERE LINK_ID IN (select link_id from deleted)
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.49', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.49 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.50
-- Translations for Custom Tabs
-- ***********************************************

exec qp_update_translations 'Custom Tabs', 'Пользовательские вкладки'
exec qp_update_translations 'Collapse all', 'Свернуть все'
exec qp_update_translations 'Expand all', 'Развернуть все'
exec qp_update_translations 'Tab Name', 'Имя вкладки'
exec qp_update_translations 'Tab Group', 'Группа вкладки'
exec qp_update_translations 'Hide in Tree', 'Скрыть в дереве'
exec qp_update_translations 'Add New Sibling', 'Добавить соседний элемент'
exec qp_update_translations 'Add New Child', 'Добавить дочерний элемент'
exec qp_update_translations 'true', 'да'
exec qp_update_translations 'false', 'нет'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.50', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.50 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.51
-- Paging New Version (Fix table functions error)
-- ***********************************************

exec qp_drop_existing 'qp_GetContentPageNew', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_GetContentPageNew]
  @Select nvarchar(max),
  @From nvarchar(max),
  @Where nvarchar(max),
  @OrderBy nvarchar(max),
  @StartRow int,
  @PageSize int,
  @TotalRecords int OUTPUT,


  @use_security bit = 0,
  @user_id numeric(18,0) = 0,
  @group_id numeric(18,0) = 0,
  @start_level int = 2,
  @end_level int = 4,
  @entity_name nvarchar(100) = 'content_item',
  @parent_entity_name nvarchar(100) = '',
  @parent_entity_id numeric(18,0) = 0,

  @insert_key varchar(200) = '<$_security_insert_$>'
AS
BEGIN
  SET NOCOUNT ON

  -- Получаем фильтр по правам
  DECLARE @security_sql AS nvarchar(max)
  SET @security_sql = ''

  IF (@use_security = 1)
    BEGIN
      EXEC dbo.qp_GetPermittedItemsAsQuery
        @user_id = @user_id,
        @group_id = @group_id,
        @start_level = @start_level,
        @end_level = @end_level,
        @entity_name = @entity_name,
        @parent_entity_name = @parent_entity_name,
        @parent_entity_id = @parent_entity_id,
        @SQLOut = @security_sql OUTPUT

      SET @From = REPLACE(@From, @insert_key, @security_sql)
    END

  -- Получаем общее количество записей
  DECLARE @sql_count AS nvarchar(max)

  SET @sql_count = ''
  SET @sql_count = @sql_count + 'SELECT ' + CHAR(13)
  SET @sql_count = @sql_count + '   @record_count = COUNT(*) ' + CHAR(13)
  SET @sql_count = @sql_count + ' FROM' + CHAR(13)
  SET @sql_count = @sql_count + @From + CHAR(13)
  IF (LEN(@Where) > 0)
    BEGIN
      SET @sql_count = @sql_count + 'WHERE ' + CHAR(13)
      SET @sql_count = @sql_count + @Where + CHAR(13)
    END
  EXEC sp_executesql
    @sql_count,
    N'@record_count int OUTPUT',
    @record_count = @TotalRecords OUTPUT

  -- Задаем количество записей на странице по умолчанию
  IF (@PageSize <= 0)
    BEGIN
      SET @PageSize = @TotalRecords
    END

  -- Задаем номер начальной записи по умолчанию
  IF (@StartRow <= 0)
    BEGIN
      SET @StartRow = 1
    END

  -- Задаем номер конечной записи
  DECLARE @end_row AS int
  SET @end_row = @StartRow + @PageSize - 1

      -- Возвращаем результат
  DECLARE @sql_result AS nvarchar(max)

  IF (@TotalRecords > @PageSize)
    BEGIN
      SET @sql_result = ''
      SET @sql_result = @sql_result + 'WITH PAGED_DATA_CTE' + CHAR(13)
      SET @sql_result = @sql_result + 'AS' + CHAR(13)
      SET @sql_result = @sql_result + '(' + CHAR(13)
      SET @sql_result = @sql_result + ' SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '   c.*, ' + CHAR(13)
      SET @sql_result = @sql_result + '   ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS QP_ROW_NUMBER ' + CHAR(13)
      SET @sql_result = @sql_result + ' FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' ( ' + CHAR(13)
      SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '   ' + @Select + CHAR(13)
      SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
      SET @sql_result = @sql_result + '   ' + @From + CHAR(13)
      IF (LEN(@Where) > 0)
        BEGIN
          SET @sql_result = @sql_result + '   WHERE' + CHAR(13)
          SET @sql_result = @sql_result + '   ' + @Where + CHAR(13)
        END
      SET @sql_result = @sql_result + ' ) AS c ' + CHAR(13)
      SET @sql_result = @sql_result + ')' + CHAR(13) + CHAR(13)

      SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + ' * ' + CHAR(13)
      SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' PAGED_DATA_CTE' + CHAR(13)
      SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
      SET @sql_result = @sql_result + ' QP_ROW_NUMBER BETWEEN ' + CAST(@StartRow AS nvarchar) + ' '
      SET @sql_result = @sql_result + 'AND ' + CAST(@end_row AS nvarchar) + CHAR(13)
      SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
      SET @sql_result = @sql_result + ' QP_ROW_NUMBER ASC ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = ''
      SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + @Select + CHAR(13)
      SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
      SET @sql_result = @sql_result + @From + CHAR(13)
      IF (LEN(@Where) > 0)
        BEGIN
          SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
          SET @sql_result = @sql_result + @Where + CHAR(13)
        END
      SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
      SET @sql_result = @sql_result + @OrderBy + CHAR(13)
    END

  EXEC(@sql_result)

  SET NOCOUNT OFF
END
GO


exec qp_drop_existing 'qp_check_null', 'IsScalarFunction'
GO

CREATE  FUNCTION [dbo].[qp_check_null] (@id numeric)
RETURNS bit
AS
BEGIN
    DECLARE @result bit
  IF @id IS NULL
    SET @result = 1
  ELSE
    SET @result = 0
  RETURN @result
END
GO

exec qp_drop_existing 'qp_check_name_equality', 'IsScalarFunction'
GO

CREATE  FUNCTION [dbo].[qp_check_name_equality] (@name1 nvarchar(255), @name2 nvarchar(255))
RETURNS bit
AS
BEGIN
    DECLARE @result bit
  IF @name1 = @name2
    SET @result = 1
  ELSE
    SET @result = 0
  RETURN @result
END
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.51', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.51 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.7.0.52
-- Some full-text optimizations
-- ***********************************************

exec qp_drop_existing 'qp_fullTextIds', 'IsTableFunction'
GO

CREATE function [dbo].[qp_fullTextIds](@text nvarchar(255), @content_id numeric, @exact bit)
returns @ids table (id numeric primary key, attribute_id numeric)
as
begin
  declare @text2 nvarchar(255)

  declare @use_fulltext bit
  select @use_fulltext = fulltextserviceproperty('IsFulltextInstalled')

  if @use_fulltext = 1 begin

    declare @ids2 table
    (
      id decimal,
      rank int
    )

    if @exact = 0
    begin
      insert into @ids2
      select * from freetexttable(content_data, *, @text)
    end
    else
    begin
      set @text2 = '"' + @text + '"'
      insert into @ids2
      select * from containstable(content_data, *, @text2)
    end

    insert into @ids
    select id, attribute_id  from (
    select cd.content_item_id as id, cd.attribute_id, row_number() over (partition by cd.content_item_id order by cd.content_data_id) as 'rownumber'
    from @ids2 ids
    inner join content_data cd with(nolock) on cd.content_data_id = ids.id
    inner join content_item ci with(nolock) on ci.content_item_id = cd.content_item_id
    where ci.CONTENT_ID = @content_id) s
    where s.rownumber = 1

  end
  else begin
    set @text2 = '%' + @text + '%'
    insert into @ids
    select id, attribute_id from (
    select cd.content_item_id as id, cd.attribute_id, row_number() over (partition by cd.content_item_id order by cd.attribute_id desc) as 'rownumber'
    from content_data cd with(nolock)
    inner join content_item ci with(nolock) on ci.content_item_id = cd.content_item_id
    where ci.content_id = @content_id and cd.data like @text2 or cd.blob_data like @text2
    ) s where s.rownumber = 1

  end
  return
end
GO

exec qp_drop_existing 'qp_GetContentPageFullText', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_GetContentPageFullText]
(
  @Select nvarchar(max),
  @From nvarchar(max),
  @Where nvarchar(max),
  @OrderBy nvarchar(max),
  @StartRow int,
  @PageSize int,
  @GetCount bit,
  @TotalRecords int output,

  @contentId int,
  @text nvarchar(255),
  @exactSearch bit,
  @linkId int = 0,
  @itemId int = 0,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @entity_name varchar(100) = 'content_item',
  @parent_entity_name varchar(100)='',
  @parent_entity_id numeric(18,0)=0,

  @insert_key varchar(200)='<$_security_insert_$>'


)
AS
  SET NOCOUNT ON


create table #temp(id decimal not null, attribute_id decimal not null, selected bit default(0) PRIMARY KEY CLUSTERED (selected, id, attribute_id))

insert into #temp(id, attribute_id) select * from [dbo].qp_FullTextIds(@text, @contentId, @exactSearch)

if @linkId <> 0
  update #temp set selected = 1 where id in (select linked_item_id from item_link_united where link_id = @linkId and item_id = @itemId)
else if @itemId <> 0
  update #temp set selected = 1 where id = @itemId


exec qp_GetContentPageNew
  @Select = @Select, @From = @From, @Where = @Where, @OrderBy = @OrderBy,
  @StartRow = @StartRow, @PageSize = @PageSize, @TotalRecords = @TotalRecords output,
  @use_security = @use_security, @user_id = @user_id, @group_id = @group_id, @start_level = @start_level,
  @end_level = @end_level, @entity_name = @entity_name, @parent_entity_name = @parent_entity_name, @parent_entity_id = @parent_entity_id,
  @insert_key = @insert_key

drop table #temp
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.52', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.52 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.7.0.53
-- Some full-text optimizations
-- ***********************************************

exec qp_drop_existing 'qp_RebuildFullText', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_RebuildFullText]
AS
BEGIN
  IF  EXISTS (SELECT * FROM sysfulltextcatalogs ftc WHERE ftc.name = N'QPublishingFullTextCatalog')
    ALTER FULLTEXT CATALOG QPublishingFullTextCatalog REORGANIZE
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.7.0.53', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.7.0.53 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.0
-- Label
-- ***********************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.0', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.0 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.1
-- Database Independent LINQ Classes
-- ***********************************************
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'PROCEED_DB_INDEPENDENT_GENERATION' and TABLE_NAME = 'SITE')
ALTER TABLE site ADD
  [PROCEED_DB_INDEPENDENT_GENERATION] bit NOT NULL CONSTRAINT DF_PROCEED_DB_INDEPENDENT_GENERATION DEFAULT 0
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'GENERATE_MAP_FILE_ONLY' and TABLE_NAME = 'SITE')
ALTER TABLE site ADD
  [GENERATE_MAP_FILE_ONLY] bit NOT NULL CONSTRAINT DF_GENERATE_MAP_FILE_ONLY DEFAULT 0
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'ADD_CONTEXT_CLASS_NAME' and TABLE_NAME = 'CONTENT')
ALTER TABLE CONTENT ADD
  [ADD_CONTEXT_CLASS_NAME] nvarchar(255) NULL
GO

exec qp_update_translations 'Proceed DB-independent generation', 'Выполнять генерацию, независимую от БД'
exec qp_update_translations 'Generate only .map file', 'Генерировать только .map-файл'
exec qp_update_translations 'Additional context class name', 'Имя дополнительного контекстного класса'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.1', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.1 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.2
-- Delayed publication and modified date
-- ***********************************************

ALTER PROCEDURE [dbo].[qp_merge_article]
@item_id numeric
AS
BEGIN
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0 WHERE content_item_id = @item_id
  exec qp_replicate @item_id
  UPDATE content_item with(rowlock) SET MODIFIED = GETDATE(), LAST_MODIFIED_BY = 1 where content_item_id = @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.2', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.2 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.3
-- Fix typo error
-- ***********************************************

exec qp_drop_existing 'qp_get_version_data', 'IsScalarFunction'
GO

CREATE function [dbo].[qp_get_version_data](@attribute_id numeric, @version_id numeric) returns nvarchar(max)
as
begin
declare @result nvarchar(max)
select @result = (case when attribute_type_id in (10, 11) THEN convert(nvarchar(max), cd.BLOB_DATA) ELSE cd.DATA end) from version_content_data cd inner join CONTENT_ATTRIBUTE ca on cd.ATTRIBUTE_ID = ca.ATTRIBUTE_ID where cd.attribute_id = @attribute_id and content_item_version_id = @version_id
return @result
end
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.3', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.3 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.4
-- Scheduling with service
-- ***********************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'USE_SERVICE' and TABLE_NAME = 'CONTENT_ITEM_SCHEDULE')
ALTER TABLE CONTENT_ITEM_SCHEDULE ADD
  [USE_SERVICE] bit NOT NULL CONSTRAINT DF_USE_SERVICE DEFAULT 0
GO

ALTER TRIGGER [dbo].[ti_content_item_schedule_add_job] ON [dbo].[CONTENT_ITEM_SCHEDULE] FOR INSERT AS BEGIN
  DECLARE @current_db SYSNAME, @item_id NUMERIC, @qp_job_name SYSNAME, @sql NVARCHAR(1024)
  DECLARE @freq_type INT, @freq_interval INT, @freq_relative_interval INT, @freq_recurrence_factor INT
  DECLARE @active_start_date INT, @active_end_date INT, @active_start_time INT, @active_end_time INT
  DECLARE @use_duration INT, @deactivate BIT
  DECLARE @pre_sql NVARCHAR(1024)
  declare @str_set_params nvarchar(255)
  SELECT @current_db = DB_NAME()
  DECLARE items CURSOR FOR
    SELECT content_item_id, freq_type, freq_interval, freq_relative_interval, freq_recurrence_factor,
      active_start_date, active_end_date, active_start_time, active_end_time, use_duration, deactivate
    FROM inserted where use_service = 0
  OPEN items

  FETCH NEXT FROM items
  INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
    @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  WHILE @@FETCH_STATUS = 0 BEGIN

    DECLARE @delete_level INT

    IF @freq_type = 1 OR @freq_type = 2 BEGIN
      DECLARE @now_date DATETIME
      DECLARE @now_date_int BIGINT, @start_date_int BIGINT, @end_date_int BIGINT

      SET @now_date = DATEADD(mi, 1, GETDATE())
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))
      SET @start_date_int = CAST(@active_start_time AS BIGINT) + CAST(@active_start_date AS BIGINT) * 1000000
      SET @end_date_int   = CAST(@active_end_time AS BIGINT) + CAST(@active_end_date AS BIGINT) * 1000000

      IF @now_date_int > @start_date_int BEGIN
        SET @active_start_date = @now_date_int / 1000000
        SET @active_start_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_start_date = @active_start_date, active_start_time = @active_start_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @now_date = DATEADD(ss, 10, @now_date)
      SET @now_date_int =  DATEPART(ss, @now_date) + (100 * DATEPART(mi, @now_date)) + (10000 * DATEPART(hh, @now_date)) + (1000000 * DAY(@now_date)) + (100000000 * MONTH(@now_date)) + (10000000000 * YEAR(@now_date))

      IF @now_date_int > @end_date_int BEGIN
        SET @active_end_date = @now_date_int / 1000000
        SET @active_end_time = @now_date_int % 1000000

        UPDATE content_item_schedule
        SET active_end_date = @active_end_date, active_end_time = @active_end_time
        WHERE CONTENT_ITEM_ID = @item_id
      END

      SET @delete_level  = 1

    END ELSE BEGIN
      SET @delete_level  = 0
    END

    SET @qp_job_name = 'Q-Publishing Schedule for ' + @current_db + ' item '
      + CAST(@item_id AS NVARCHAR) + ' on'
    IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = @qp_job_name) BEGIN
      EXEC msdb.dbo.sp_delete_job @job_name = @qp_job_name
    END

  IF @deactivate = 0 BEGIN  --if schedule is deactivated then don't create job
    if dbo.qp_is_sql_2000() = 1
      set @str_set_params =  '@activation_start_dt=[STRTDT], @activation_start_tm=[STRTTM]'
    else if dbo.qp_is_early_sql_2005() = 1
      set @str_set_params =  '@activation_start_dt=$(STRTDT), @activation_start_tm=$(STRTTM)'
    else
      set @str_set_params =  '@activation_start_dt=$(ESCAPE_NONE(STRTDT)), @activation_start_tm=$(ESCAPE_NONE(STRTTM))'
    if @freq_type <> 2
      SET @sql = 'UPDATE content_item with(rowlock) SET visible = 1 WHERE content_item_id = '
        + CAST(@item_id AS NVARCHAR)
        + '
        EXECUTE qp_create_deactivation_job @item_id=' + CAST(@item_id AS NVARCHAR) + ', ' + @str_set_params
    else begin  --scheduleNewVersionPublication
      set @sql  = 'exec qp_merge_article ' + CAST(@item_id AS NVARCHAR)
      set @freq_type = 1
    end

    SET @pre_sql = 'Q-Publishing Schedule for ' + @current_db + ' item ' + CAST(@item_id AS NVARCHAR) + ' off'
    SET @pre_sql = 'IF EXISTS(SELECT * FROM msdb.dbo.sysjobs_view WHERE name = ''' + @pre_sql + ''') EXEC msdb.dbo.sp_delete_job @job_name = ''' + @pre_sql + ''' '

    EXEC msdb.dbo.sp_add_job @job_name = @qp_job_name, @delete_level  =  @delete_level
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Remove old deactivation job',
      @command = @pre_sql, @database_name = @current_db,
      @retry_attempts = 1,
      @on_success_action  = 3, @on_fail_action = 3
    EXEC msdb.dbo.sp_add_jobstep @job_name = @qp_job_name, @step_name = 'Activate article',
      @command = @sql, @database_name = @current_db,
      @retry_attempts = 1
    EXEC msdb.dbo.sp_add_jobschedule @job_name = @qp_job_name, @name = 'Activate Schedule',
      @enabled = 1, @freq_type = @freq_type, @freq_interval = @freq_interval,
      @freq_relative_interval = @freq_relative_interval,
      @freq_recurrence_factor = @freq_recurrence_factor,
      @freq_subday_type = 0x1, @freq_subday_interval = 0,
      @active_start_date = @active_start_date, @active_end_date = @active_end_date,
      @active_start_time = @active_start_time, @active_end_time = @active_end_time
    EXEC msdb.dbo.sp_add_jobserver @job_name = @qp_job_name, @server_name = '(LOCAL)'
  END

    FETCH NEXT FROM items
    INTO @item_id, @freq_type, @freq_interval, @freq_relative_interval, @freq_recurrence_factor,
      @active_start_date, @active_end_date, @active_start_time, @active_end_time, @use_duration, @deactivate
  END
  CLOSE items
  DEALLOCATE items
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.4', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.4 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.5
-- Remove locks from article merging
-- ***********************************************
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[qp_check_article_splitted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[qp_check_article_splitted]
GO

ALTER PROCEDURE [dbo].[qp_merge_article]
@item_id numeric
AS
BEGIN
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0, not_for_replication = 1, MODIFIED = GETDATE(), LAST_MODIFIED_BY = 1 WHERE content_item_id = @item_id
  exec qp_replicate @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
END
GO

ALTER PROCEDURE [dbo].[qp_replicate]
@content_item_id numeric
AS
BEGIN
  set nocount on

  declare @sql nvarchar(max), @sql_piece nvarchar(max)
  declare @table_name nvarchar(50), @async_table_name nvarchar(50)

  declare @attribute_name nvarchar(255), @attribute_type_id numeric, @attribute_id numeric, @attribute_size numeric, @default_value nvarchar(255)

  declare @content_id numeric, @virtual_type numeric
  declare @workflow_id numeric, @is_async numeric, @is_target_table_async bit

  declare @status_type_id numeric, @visible numeric, @archive numeric
  declare @last_modified_by numeric, @created datetime, @modified datetime

  declare @item_exists bit

  declare @i numeric, @count numeric
  declare @end nvarchar(2)
  set @end = ';' + char(13)

  /* Replicate content_item */

  select
    @status_type_id = ci.status_type_id, @visible = ci.visible, @archive = ci.archive,
    @last_modified_by = ci.last_modified_by, @created = ci.created, @modified = ci.modified,
    @content_id = c.content_id, @workflow_id = ciw.workflow_id, @is_async = ciw.is_async
    from content_item ci with(nolock)
    inner join content c with(nolock) on ci.content_id = c.content_id
    left outer join content_item_workflow ciw with(nolock) on ci.content_item_id = ciw.content_item_id
    where ci.content_item_id = @content_item_id


  exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

  exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out

  if @item_exists = 0 begin
    exec qp_get_insert_item_sql @table_name, @content_item_id, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql_piece out, @created = @created, @modified = @modified
    set @sql = @sql_piece + @end
  end
  else begin
    exec qp_get_update_item_sql @table_name, @content_item_id, @modified, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql_piece out
    set @sql = @sql_piece + @end
  end

  if @is_target_table_async = 0
  begin
    set @async_table_name = 'content_' + convert(nvarchar, @content_id) + '_ASYNC'
    exec qp_get_delete_item_sql @async_table_name, @content_item_id, @sql = @sql_piece out
    set @sql = @sql + @sql_piece + @end
  end

  /* Replicate content_data */

  /* get attribute list */

  declare @ca table (
    number int identity(1,1) primary key,
    attribute_name nvarchar(255),
    attribute_id numeric,
    attribute_type_id numeric,
    attribute_size numeric,
    default_value nvarchar(255)
  )

  insert into @ca (attribute_name, attribute_id, attribute_type_id, attribute_size, default_value)
  select attribute_name, attribute_id, attribute_type_id, attribute_size, default_value
  from content_attribute with(nolock) where content_id = @content_id

  select @count = count(attribute_id) from @ca
  set @i = 1

  /* collect dynamic sql for each attribute */
  while @i < @count + 1
  begin
    select @attribute_name = attribute_name, @attribute_id = attribute_id, @attribute_type_id = attribute_type_id, @attribute_size = attribute_size, @default_value = default_value
    from @ca where number = @i

    exec qp_get_update_cell_sql @table_name, @content_item_id, @attribute_id, @attribute_type_id, @attribute_size, @default_value, @attribute_name, @sql = @sql_piece out

    set @sql = @sql + @sql_piece + @end
    set @i = @i + 1
  end

  /* execute collected sql */

  print @sql
  exec sp_executesql @sql

  update content_item with(rowlock) set not_for_replication = 0 where content_item_id = @content_item_id
END
GO

ALTER TRIGGER [dbo].[tu_update_item] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
begin
  if not update(locked_by) and not update(splitted)
  begin
    declare @content_id numeric , @content_item_id numeric, @last_modified_by numeric, @modified datetime, @created datetime, @status_type_id numeric, @visible numeric, @archive numeric
    declare @char_content_id nvarchar(10), @char_content_item_id nvarchar(10)
    declare @sql nvarchar(2000)
    declare @async_string varchar(20), @table_name varchar(25), @is_target_table_async bit
    declare @async_id numeric, @item_exists bit, @not_for_replication bit
    declare @workflow_id numeric, @is_async NUMERIC
    declare @i numeric, @count numeric

    DECLARE @ci table (
      id numeric identity(1,1) primary key,
      content_item_id numeric,
      content_id numeric,
      workflow_id numeric,
      is_async numeric,
      not_for_replication bit
    )

    insert into @ci(content_item_id, content_id, workflow_id, is_async, not_for_replication)
      select i.content_item_id, i.content_id, ciw.workflow_id, ciw.is_async, i.not_for_replication
      FROM inserted AS i
      INNER JOIN content AS c with(nolock) ON i.content_id = c.content_id
      LEFT OUTER JOIN content_item_workflow ciw with(nolock) on i.content_item_id = ciw.content_item_id
      where c.virtual_type = 0
    select @count = count(id) from @ci

    set @i = 1
    while @i < @count + 1
    begin
      select
        @content_item_id = content_item_id, @content_id = content_id,
        @workflow_id = workflow_id, @is_async = is_async, @not_for_replication = not_for_replication
        from @ci where id = @i

      exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

      update content_item set splitted = @is_target_table_async where content_item_id = @content_item_id

      if @not_for_replication = 0 and not update(not_for_replication)
      begin

        select @modified = modified, @created = created, @status_type_id = status_type_id,
        @archive = archive, @visible = visible, @last_modified_by = last_modified_by
        from content_item with(nolock) where content_item_id = @content_item_id

        set @char_content_item_id = convert(nvarchar, @content_item_id)
        set @char_content_id = convert(nvarchar, @content_id)

        exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out
        if @item_exists = 0
        begin
          exec qp_get_insert_item_sql @table_name, @content_item_id, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out, @created = @created, @modified = @modified
          print @sql
          exec sp_executesql @sql
        end
        else
        begin
          exec qp_get_update_item_sql @table_name, @content_item_id, @modified, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        if @is_target_table_async = 1 and (update(archive) or update(visible)) begin
          set @table_name = 'content_' + @char_content_id
          exec qp_get_update_flags_sql @table_name, @content_item_id, @visible, @archive, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        if @is_target_table_async = 0
        begin
          set @table_name = 'content_' + @char_content_id + '_ASYNC'
          exec qp_get_delete_item_sql @table_name, @content_item_id, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end
      end
      set @i = @i + 1
    end
  end
end
GO

ALTER PROCEDURE [dbo].[qp_merge_links]
@content_item_id numeric
AS
declare @splitted bit
BEGIN
  select @splitted = splitted from content_item with(nolock) where content_item_id = @content_item_id
  if @splitted = 1
  BEGIN
    DELETE item_to_item with(rowlock)
    WHERE link_id in (select link_id from content_attribute ca with(nolock) inner join content_item ci with(nolock) on ca.content_id = ci.content_id where ci.content_item_id = @content_item_id)
    AND (l_item_id = @content_item_id OR r_item_id = @content_item_id )

    insert into item_to_item with(rowlock) (link_id, l_item_id, r_item_id)
    select link_id, item_id, linked_item_id from item_link_async with(nolock) where item_id = @content_item_id

    delete from item_link_async with(rowlock) where item_id = @content_item_id
  END
END
GO


ALTER PROCEDURE [dbo].[qp_get_insert_item_sql]
@table_name nvarchar(25),
@content_item_id numeric,
@last_modified_by numeric,
@status_type_id numeric,
@visible numeric,
@archive numeric,
@sql nvarchar(2000) output,
@created datetime = NULL,
@modified datetime = NULL
as
begin
  declare @optional_string nvarchar(50)
  declare @optional_value_string nvarchar(100)

  if @created is not null and @modified is not null
  begin
    set @optional_string = ', created, modified'
    set @optional_value_string = ',''' + cast(@created as nvarchar) + ''',''' + cast(@modified as nvarchar) + ''''
  end
  else begin
    set @optional_string = ' '
    set @optional_value_string = ' '
  end

  set @sql = 'insert into ' + @table_name + ' with(rowlock) '
      + ' (content_item_id, last_modified_by, status_type_id,visible, archive' + @optional_string + ') values ('
      + cast(@content_item_id as nvarchar) + ',' + cast(@last_modified_by as nvarchar)
      + ',' + cast(@status_type_id as nvarchar) + ',' + cast(@visible as nvarchar) + ',' + cast(@archive as nvarchar) + @optional_value_string + ')'
END
GO

ALTER PROCEDURE [dbo].[qp_get_update_item_sql]
@table_name nvarchar(25),
@content_item_id numeric,
@modified datetime,
@last_modified_by numeric,
@status_type_id numeric,
@visible numeric,
@archive numeric,
@sql nvarchar(1024) output
as
BEGIN
  set @sql = 'update ' + @table_name + ' with(rowlock) set '
      + ' [modified] = ''' + convert(nvarchar, @modified) + ''''
      + ', [last_modified_by] = ' + convert(nvarchar, @last_modified_by)
      + ', [status_type_id] = ' + convert(nvarchar, @status_type_id)
      + ', [visible] = ' + convert(nvarchar, @visible)
      + ', [archive] = ' + convert(nvarchar, @archive)
      + ' where content_item_id = ' + convert(nvarchar, @content_item_id)
END
GO

ALTER PROCEDURE [dbo].[qp_check_target_table_async]
@content_item_id numeric,
@content_id numeric,
@workflow_id numeric,
@async_workflow numeric,
@is_target_table_async bit output
AS
BEGIN

  declare @new_status_weight numeric, @curr_status_weight numeric, @max_status_weight numeric
  declare @schedule_new_version_publication bit

  set @is_target_table_async = 0

  if @workflow_id is not null
  begin

    select @new_status_weight = st.weight, @schedule_new_version_publication = ci.schedule_new_version_publication
    from status_type st with(nolock) inner join content_item ci with(nolock)
    on st.status_type_id = ci.status_type_id
    where content_item_id = @content_item_id

    exec qp_get_workflow_max_status_weight @workflow_id, @max_status_weight = @max_status_weight out

      EXEC qp_get_frontend_status_weight @content_id, @content_item_id, @weight = @curr_status_weight out

    if (@new_status_weight < @curr_status_weight and @async_workflow = 1) or (@new_status_weight = @max_status_weight and @schedule_new_version_publication = 1)
    begin
      set @is_target_table_async = 1
    end

  end
END
GO


ALTER PROCEDURE [dbo].[qp_get_delete_item_sql]
@table_name nvarchar(25),
@content_item_id numeric(10),
@sql nvarchar(1000) output
as
BEGIN
  set @sql = 'delete from ' + @table_name + ' with(rowlock) where content_item_id = ' + convert(nvarchar, @content_item_id)
END
GO

ALTER PROCEDURE [dbo].[qp_item_exists]
  @table_name nvarchar(25),
  @content_item_id numeric,
  @item_exists bit out
AS
BEGIN
  -- Declare the return variable here
  declare @nsql nvarchar(2000), @id numeric
  set @item_exists = 1
  set @nsql = N'select @id = content_item_id from ' + @table_name + ' with(nolock) where content_item_id = ' + convert(nvarchar, @content_item_id)
  exec sp_executesql @nsql, N'@id numeric out', @id out
  if @id is null
    set @item_exists = 0
END
GO

ALTER PROCEDURE [dbo].[qp_get_frontend_status_weight] @content_id numeric, @content_item_id numeric, @weight numeric output
AS
BEGIN
  declare @sql nvarchar(3500)
  set @sql = 'select @weight = st.weight from content_' + convert(nvarchar, @content_id) + ' c with(nolock) inner join status_type st with(nolock) on c.status_type_id = st.status_type_id where content_item_id = @content_item_id'
  exec sp_executesql @sql, N'@weight numeric out, @content_item_id numeric', @content_item_id = @content_item_id , @weight = @weight out
END
GO

ALTER PROCEDURE [dbo].[qp_get_workflow_max_status_weight]
@workflow_id numeric,
@max_status_weight numeric output
AS
BEGIN
  select @max_status_weight = max(st.weight) from workflow_rules wr with(nolock)
  inner join status_type st with(nolock) on wr.successor_status_id = st.status_type_id
  where wr.workflow_id = @workflow_id
END
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.5', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.5 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.6
-- Possible errors with Quoted Identifier
-- ***********************************************

SET QUOTED_IDENTIFIER ON
GO
ALTER TRIGGER [dbo].[tbd_content_item_version] ON [dbo].[CONTENT_ITEM_VERSION] INSTEAD OF DELETE
AS
begin
  DELETE version_content_data
  FROM version_content_data as vcd
  INNER JOIN deleted d on d.content_item_version_id = vcd.content_item_version_id

    DELETE content_item_status_history
  FROM content_item_status_history as cish
  INNER JOIN deleted d on d.content_item_version_id = cish.content_item_version_id
    WHERE cish.system_status_type_id = 2

    DELETE item_to_item_version
  FROM item_to_item_version as iiv
  INNER JOIN deleted d on d.content_item_version_id = iiv.content_item_version_id

  delete content_item_version from content_item_version civ inner join deleted d on civ.content_item_version_id = d.content_item_version_id
end
GO

ALTER TRIGGER [dbo].[tbd_delete_content_item] ON [dbo].[CONTENT_ITEM] INSTEAD OF DELETE
AS
BEGIN

delete waiting_for_approval from waiting_for_approval wa inner join deleted d on wa.content_item_id = d.content_item_id

IF dbo.qp_get_version_control() IS NOT NULL BEGIN
  delete content_item_version from content_item_version civ inner join deleted d on civ.content_item_id = d.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join content_item_version civ on civ.content_item_version_id = iiv.content_item_version_id
  inner join deleted d on d.content_item_id = civ.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join deleted d on d.content_item_id = iiv.linked_item_id
END

delete item_link_united_full from item_link_united_full ii where ii.item_id in (select content_item_id from deleted)

delete content_data from content_data cd inner join deleted d on cd.content_item_id = d.content_item_id

delete content_item from content_item ci inner join deleted d on ci.content_item_id = d.content_item_id

END
GO

ALTER TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id

    UPDATE SITE SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE SITE SET locked = NULL, locked_by = NULL FROM SITE c inner join deleted d on c.locked_by = d.user_id

    UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET created_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.created_by = d.user_id
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
    UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
    UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

    delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item
  alter table content_attribute disable trigger td_content_attribute_clean_empty_links
  alter table content_attribute disable trigger td_remove_field
  alter table content_attribute disable trigger td_reorder_fields
  alter table content_constraint disable trigger td_content_indexes

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete site from site s inner join deleted d on s.site_id = d.site_id


  alter table content_item enable trigger td_delete_item
  alter table content_attribute enable trigger td_content_attribute_clean_empty_links
  alter table content_attribute enable trigger td_remove_field
  alter table content_attribute enable trigger td_reorder_fields
  alter table content_constraint enable trigger td_content_indexes
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.6', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.6 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.7
-- Using own CREATED and CREATED_BY fields
-- ***********************************************

ALTER procedure [dbo].[qp_get_versions]
@item_id numeric,
@version_id numeric = 0
as
begin

declare @sql nvarchar(max), @version_sql nvarchar(100), @fields nvarchar(max), @prefixed_fields nvarchar(max)
declare @content_id numeric
select @content_id = content_id from content_item ci where ci.CONTENT_ITEM_ID = @item_id

if @content_id is not null
begin
  select @fields = dbo.qp_get_content_field_list(@content_id, '')
  select @prefixed_fields = dbo.qp_get_content_field_list(@content_id, 'pt.')


  if @version_id = 0
    set @version_sql = ''
  else
    set @version_sql = ' and vcd.CONTENT_ITEM_VERSION_ID= @version_id'


  set @sql = N'select pt.content_item_id, pt.version_id, pt.created AS modified, pt.created_by as last_modified_by, ' + @prefixed_fields  + N' from
  (
  select civ.CONTENT_ITEM_ID, civ.CREATED, civ.CREATED_BY, vcd.CONTENT_ITEM_VERSION_ID as version_id, ca.ATTRIBUTE_NAME, dbo.qp_get_version_data(vcd.ATTRIBUTE_ID, vcd.CONTENT_ITEM_VERSION_ID) as data from CONTENT_ATTRIBUTE ca
  left outer join VERSION_CONTENT_DATA vcd on ca.ATTRIBUTE_ID = vcd.ATTRIBUTE_ID
  inner join CONTENT_ITEM_VERSION civ on vcd.CONTENT_ITEM_VERSION_ID = civ.CONTENT_ITEM_VERSION_ID
  where ca.CONTENT_ID = @content_id and civ.CONTENT_ITEM_ID = @item_id ' + @version_sql + ') as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt order by pt.version_id desc

  '

  exec sp_executesql @sql, N'@content_id numeric, @item_id numeric, @version_id numeric', @content_id = @content_id, @item_id = @item_id, @version_id = @version_id
end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.7', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.7 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.8
-- Some translations
-- ***********************************************

exec qp_update_translations 'Article is not found', 'Статья не найдена'
exec qp_update_translations 'You have no enough permissions to clone', 'У вас недостаточно прав для создания копии'
exec qp_update_translations 'You have no enough permissions to add', 'У вас недостаточно прав для добавления'
exec qp_update_translations 'You have no enough permissions to remove', 'У вас недостаточно прав для удаления'
exec qp_update_translations 'You have no enough permissions to update', 'У вас недостаточно прав для обновления'
exec qp_update_translations 'You have no enough permissions to read', 'У вас недостаточно прав для чтения'
exec qp_update_translations 'You have no enough permissions to archive', 'У вас недостаточно прав для архивирования'
exec qp_update_translations 'Cannot clone article because of constraint on the content', 'Невозможно создать копию статьи из-за ограничения уникальности на контенте'
exec qp_update_translations 'You are not authorized as QP7 user', 'Вы не авторизованы как пользователь QP7'
exec qp_update_translations 'While article updating status will be decreased. Click OK to proceed', 'При обновлении статьи статус будет понижен. Нажмите OK, чтобы продолжить'
exec qp_update_translations 'Cannot update article because it is locked by {0}', 'Невозможно обновить статью, потому что она заблокирована пользователем {0}'
exec qp_update_translations 'Field is required', 'Поле обязательно для заполнения'
exec qp_update_translations 'Value is not a date', 'Значение не является датой'
exec qp_update_translations 'Edit in Form View', 'Редактировать в форме'
exec qp_update_translations 'Align Left', 'Выровнять по левому краю'
exec qp_update_translations 'Align Right', 'Выровнять по правому краю'
exec qp_update_translations 'Align Center', 'Выровнять по центру'
exec qp_update_translations 'Align Justify', 'Выровнять по ширине'
exec qp_update_translations 'Error while cloning article', 'Ошибка при клонировании статьи'
exec qp_update_translations 'Your changes were saved, but the required workflow was not applied. To apply, click "Edit in Form View" and follow the instructions on the screen', 'Ваши изменения были сохранены, но требуемый workflow не был применен. Для применения нажмите кнопку "Редактировать в форме" и следуйте инструкциям'
exec qp_update_translations 'go back to previous page', 'назад на предыдущую страницу'
exec qp_update_translations 'No access', 'Нет доступа'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.8', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.8 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.9
-- Internal using of allow_items_permission
-- ***********************************************

ALTER Function [dbo].[qp_is_entity_accessible](
  @entity_name varchar(100)='content',
  @entity_id numeric (18,0),
  @user_id numeric (18,0)=0,
  @group_id numeric (18,0)=0,
  @start_level int=1,
  @end_level int=4,
  @return_level int=0
)
Returns int
AS

BEGIN

Declare @FullAccessLevel int
SET @FullAccessLevel = 4

if @user_id = 1 or @group_id = 1 return @FullAccessLevel

if @user_id > 0 and dbo.qp_is_user_admin(@user_id)>0 return @FullAccessLevel


/***********************************/
/**** Declare Table Variables   ****/
/***********************************/
declare @ChildGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @ParentGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @UsedGroups table
(
  group_id numeric(18,0)
)

declare @TempParentGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @Entities table
(
  entity_id numeric(18,0) NOT NULL,
    permission_level numeric(18,0) NOT NULL,
    user_id numeric(18,0) NULL,
    group_id numeric(18,0) NULL
)
/***********************************/

declare @content_id decimal

  If @entity_name='content'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select content_id, permission_level, user_id, group_id from content_access_permlevel
           where content_id = @entity_id
    End
  If @entity_name='content_item'
    Begin
     declare @use_own_security bit
     select @use_own_security = c.allow_items_permission, @content_id = ci.content_id
      from content c with(nolock) inner join content_item ci with(nolock) on c.content_id = ci.content_id where ci.content_item_id = @entity_id
     if (@use_own_security = 1)
      insert into @Entities (entity_id, permission_level, user_id, group_id)
        select content_item_id, permission_level, user_id, group_id from content_item_access_permlevel
        where content_item_id = @entity_id
    else
      insert into @Entities (entity_id, permission_level, user_id, group_id)
        select @entity_id, permission_level, user_id, group_id from content_access_permlevel
        where content_id = @content_id
    End
  If @entity_name='site'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select site_id, permission_level, user_id, group_id from site_access_permlevel
           where site_id = @entity_id
    End
  If @entity_name='folder'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select folder_id, permission_level, user_id, group_id from folder_access_permlevel
       where folder_id = @entity_id
    End
  If @entity_name='content_folder'
    Begin
    select @content_id = content_id from content_folder with(nolock) where folder_id = @entity_id

    insert into @Entities (entity_id, permission_level, user_id, group_id)
      select @entity_id, permission_level, user_id, group_id from content_access_permlevel
      where content_id = @content_id

      End
  If @entity_name='workflow'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select workflow_id, permission_level, user_id, group_id from workflow_access_permlevel
       where workflow_id = @entity_id
    End
  If @entity_name='tab'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select tab_id, permission_level, user_id, group_id from tab_access_permlevel
       where tab_id = @entity_id
      End


Declare @maxLevel int
Declare @nothing_found int
Declare @yes_access int
Declare @no_access int
Declare @current_result int

select @yes_access = 1
select @no_access = 0
select @nothing_found = -1
select @current_result = @nothing_found

if @user_id > 0
Begin
   select @maxLevel = IsNull(max(permission_level),@nothing_found) from @Entities where
       user_id = @user_id

   Select @current_result = @maxLevel

   if @maxLevel != @nothing_found
   Begin
      if @return_level>0 return @maxLevel
      if @maxLevel < @start_level or @maxLevel> @end_level return @no_access
      if @maxLevel >= @start_level And @maxLevel <= @end_level return @yes_access
   End

   insert into @ChildGroups (group_id) select distinct group_id from user_group_bind where user_id = @user_id
End

if @group_id > 0 AND @user_id <= 0
Begin
   insert into @ChildGroups(group_id) values (@group_id)
End

if (select count(*) from @ChildGroups) = 0
Begin
   return @current_result
End

select @maxLevel = IsNull(max(permission_level),@nothing_found) from @Entities where
       group_id in (select group_id from @ChildGroups)

Select @current_result = @maxLevel

if @maxLevel != @nothing_found
Begin
  if @return_level>0 return @maxLevel
  if @maxLevel < @start_level or @maxLevel> @end_level return @no_access
  if @maxLevel >= @start_level And @maxLevel <= @end_level return @yes_access
End

insert into @UsedGroups(group_id) select group_id from @ChildGroups


WHILE 1=1
BEGIN
    insert into @ParentGroups (group_id) select distinct gtg.parent_group_id from group_to_group gtg inner join @ChildGroups cg on gtg.child_group_id = cg.group_id
    if (select count(*) from @ParentGroups) = 0 BREAK

    /* need to check that parent groups are not appearing in child groups */
    insert into @TempParentGroups (group_id) select pg.group_id from @ParentGroups pg where pg.group_id not in(select cg.group_id from @ChildGroups cg) and pg.group_id not in (select group_id from @UsedGroups)

  select @maxLevel = IsNull(max(permission_level),@nothing_found) from @Entities where
       group_id in (select group_id from @TempParentGroups)

    Select @current_result = @maxLevel

  if @maxLevel != @nothing_found
  Begin
    if @return_level>0 return @maxLevel
    if @maxLevel < @start_level or @maxLevel> @end_level return @no_access
    if @maxLevel >= @start_level And @maxLevel <= @end_level return @yes_access
  End

    delete @ChildGroups
    delete @TempParentGroups
    insert into @ChildGroups (group_id) select (group_id) from @ParentGroups
    delete @ParentGroups
    CONTINUE
END

return @current_result
END
GO

update toolbar_buttons set PERMISSION_LEVEL_ID = 6 where button_name = 'Search'
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.9', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.9 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.10
-- Worfklow + Nested Groups
-- ***********************************************
exec qp_drop_existing 'qp_get_user_weight', 'IsScalarFunction'
go

CREATE FUNCTION [dbo].[qp_get_user_weight](@user_id numeric, @workflow_id numeric) returns numeric
AS
BEGIN
  declare @weight numeric

  SELECT @weight = max(st.weight) FROM workflow_rules wr WITH(NOLOCK)
    INNER JOIN status_type st WITH(NOLOCK) ON wr.successor_status_id = st.status_type_id
    WHERE wr.workflow_id = @workflow_id and wr.user_id = @user_id
  if @weight is null
  begin
    declare @groups table ( id numeric primary key );

    WITH groups(group_id) AS
    (select group_id from user_group_bind where user_id = @user_id
    UNION ALL select parent_group_id from group_to_group gg inner join groups g on g.group_id = gg.child_group_id)
    insert into @groups
    select distinct * from groups;

    SELECT @weight = max(st.weight) FROM workflow_rules wr WITH(NOLOCK)
    INNER JOIN status_type st WITH(NOLOCK) ON wr.successor_status_id = st.status_type_id
    WHERE wr.workflow_id = @workflow_id and wr.group_id in (select id from @groups)
  end

  return @weight

END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.10', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.10 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.11
-- Removing links are slow
-- ***********************************************

exec dbo.qp_drop_existing 'td_item_to_item', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[td_item_to_item] ON [dbo].[item_to_item] AFTER DELETE
AS
BEGIN

delete item_to_item from item_to_item ii inner join deleted d on ii.link_id = d.link_id and ii.l_item_id = d.r_item_id and ii.r_item_id = d.l_item_id

END
GO

ALTER TRIGGER [dbo].[td_item_link_united_full] ON [dbo].[item_link_united_full] INSTEAD OF DELETE
AS BEGIN
  delete item_link_async from item_link_async ii
  inner join deleted d on d.link_id = ii.link_id and (
  (d.item_id = ii.item_id and d.linked_item_id = ii.linked_item_id)
  or
  (d.item_id = ii.linked_item_id and d.linked_item_id = ii.item_id)
  )

  delete item_to_item from item_to_item ii
  inner join deleted d on d.link_id = ii.link_id and d.item_id = ii.l_item_id and d.linked_item_id = ii.r_item_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.11', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.11 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.12
-- Speed-up attribute filtering for FT Search
-- ***********************************************

IF NOT EXISTS (select * from sys.index_columns sic
inner join sys.indexes si on si.index_id = sic.index_id and si.object_id = sic.object_id
where si.name = 'ix_attribute_id' and si.object_id in (select object_id from sys.objects where name = 'content_data') and sic.is_included_column = 1)
DROP INDEX [ix_attribute_id] ON [dbo].[CONTENT_DATA] WITH ( ONLINE = OFF )
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CONTENT_DATA]') AND name = N'ix_attribute_id')
CREATE NONCLUSTERED INDEX [ix_attribute_id] ON [dbo].[CONTENT_DATA]
(
  [ATTRIBUTE_ID] ASC
)
INCLUDE ( [CONTENT_ITEM_ID], [CONTENT_DATA_ID])
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.12', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.12 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.13
-- Indirect changing FT language + custom tabs
-- ***********************************************

exec qp_drop_existing 'qp_RebuildFullText', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_RebuildFullText]
AS
BEGIN
  IF  EXISTS (SELECT * FROM sysfulltextcatalogs ftc WHERE ftc.name = N'QPublishingFullTextCatalog')
  BEGIN
    IF EXISTS (select * From sys.fulltext_index_columns where object_id in (select object_id From sys.objects where name = 'CONTENT_DATA' ) and language_id = 1033) AND EXISTS(select * from sys.fulltext_languages where lcid = 1049)
    BEGIN
      declare @sql nvarchar(max)
      ALTER FULLTEXT INDEX ON [dbo].[CONTENT_DATA] DROP ([BLOB_DATA])
      set @sql = 'ALTER FULLTEXT INDEX ON [dbo].[CONTENT_DATA] ADD ([BLOB_DATA] LANGUAGE 1049)'
      exec sp_executesql @sql
      ALTER FULLTEXT INDEX ON [dbo].[CONTENT_DATA] DROP ([DATA])
      set @sql = 'ALTER FULLTEXT INDEX ON [dbo].[CONTENT_DATA] ADD ([DATA] LANGUAGE 1049)'
      exec sp_executesql @sql
    END
    ALTER FULLTEXT CATALOG QPublishingFullTextCatalog REORGANIZE
  END
END

delete from tabs where tab_name = 'API Example (no inheritance)'
delete from tabs where tab_name = 'API Example (with inheritance)'
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.13', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.13 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.14
-- Disable OnScreen by Default
-- ***********************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'ENABLE_ONSCREEN' and TABLE_NAME = 'SITE')
ALTER TABLE site ADD
  [ENABLE_ONSCREEN] bit NOT NULL CONSTRAINT DF_ENABLE_ONSCREEN DEFAULT 0
GO

exec qp_update_translations 'Enable OnScreen', 'Включить OnScreen'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.14', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.14 completed'
GO

-- ***********************************************
-- Pavel Celut
-- version 7.8.0.15
-- Fixing trigger
-- ***********************************************

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item
  alter table content_attribute disable trigger td_content_attribute_clean_empty_links
  alter table content_attribute disable trigger td_remove_field
  alter table content_attribute disable trigger td_reorder_fields
  alter table content_constraint disable trigger td_content_indexes
  alter table [object] disable trigger tu_object_format_modified
  alter table [object] disable trigger tiu_bind_objects_by_name
  alter table object_format disable trigger tbd_delete_object_format
  alter table object_values disable trigger tiud_values_format_modified
  alter table container_statuses disable trigger tiud_statuses_format_modified
  alter table item_to_item disable trigger td_item_to_item


  delete from item_to_item where link_id in
  (select link_id from site_content_link scl
  inner join deleted d on d.site_id = scl.site_id)

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  update [object] set object_format_id = null from [object] obj
  inner join page_template pt on obj.page_template_id = pt.page_template_id
  inner join deleted d on d.site_id = pt.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete site from site s
  inner join deleted d on d.site_id = s.site_id


  alter table content_item enable trigger td_delete_item
  alter table content_attribute enable trigger td_content_attribute_clean_empty_links
  alter table content_attribute enable trigger td_remove_field
  alter table content_attribute enable trigger td_reorder_fields
  alter table content_constraint enable trigger td_content_indexes
  alter table [object] enable trigger tu_object_format_modified
  alter table [object] enable trigger tiu_bind_objects_by_name
  alter table object_format enable trigger tbd_delete_object_format
  alter table object_values enable trigger tiud_values_format_modified
  alter table container_statuses enable trigger tiud_statuses_format_modified
  alter table item_to_item enable trigger td_item_to_item
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.15', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.15 completed'
GO


-- ***********************************************
-- Max Tertyshnyy
-- version 7.8.0.16
-- Fixing trigger
-- ***********************************************

ALTER TRIGGER [dbo].[tu_content_attribute_clean_empty_links] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
  if update(link_id)
  begin
    declare @link_id numeric, @attribute_id numeric, @version numeric
    declare @i numeric, @count numeric
    declare @links table (
      id numeric identity(1,1) primary key,
      link_id numeric,
      attribute_id numeric
    )

    insert into @links (link_id, attribute_id)
    select d.link_id, d.attribute_id from deleted d inner join inserted i on d.attribute_id = i.attribute_id where d.link_id IS NOT NULL AND (i.link_id IS NULL OR i.link_id <> d.link_id)

    set @i = 1
    select @count = count(id) from @links
    set @version = dbo.qp_get_version_control()

    while @i < @count + 1
    begin
      select @link_id = link_id, @attribute_id = attribute_id from @links where id = @i

      exec qp_drop_link_with_check @link_id

      if @version is not null
         DELETE FROM item_to_item_version WHERE attribute_id = @attribute_id

      set @i = @i + 1
    end
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.16', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.16 completed'
GO


-- ***********************************************
-- Pavel Celut
-- version 7.8.0.17
-- New fields for managing cache headers
-- ***********************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'SEND_NOCACHE_HEADERS' and TABLE_NAME = 'PAGE_TEMPLATE')
ALTER TABLE PAGE_TEMPLATE
  ADD SEND_NOCACHE_HEADERS BIT NOT NULL CONSTRAINT DF_SEND_NOCACHE_HEADERS DEFAULT (1)
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'SEND_NOCACHE_HEADERS' and TABLE_NAME = 'PAGE')
ALTER TABLE PAGE
  ADD SEND_NOCACHE_HEADERS BIT NULL
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.17', 'Copyright &copy; 1998-2011 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.17 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.8.0.18
-- Use english quotes
-- **************************************

exec qp_update_translations 'Visual Editor Parameters', 'Параметры визуального редактора'
exec qp_update_translations 'Insert P tag while pressing Enter', 'Вставлять тег P при нажатии Enter'
exec qp_update_translations 'Use english typografic rules', 'Использовать правила английской типографики'
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'USE_ENGLISH_QUOTES' and TABLE_NAME = 'SITE')
ALTER TABLE SITE
  ADD USE_ENGLISH_QUOTES BIT NOT NULL CONSTRAINT DF_USE_ENGLISH_QUOTES DEFAULT (0)
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'USE_ENGLISH_QUOTES' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE
  ADD USE_ENGLISH_QUOTES BIT NULL
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.18', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.18 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.8.0.19
-- Fix union_attrs primary key
-- **************************************

IF NOT EXISTS (SELECT * FROM  INFORMATION_SCHEMA.TABLE_CONSTRAINTS T INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE K ON T.CONSTRAINT_NAME = K.CONSTRAINT_NAME
WHERE T.CONSTRAINT_NAME = 'PK_UNION_ATTRS' AND K.COLUMN_NAME = 'union_attr_id')
BEGIN

  ALTER TABLE dbo.union_attrs
    DROP CONSTRAINT PK_union_attrs

  ALTER TABLE dbo.union_attrs ADD CONSTRAINT
  PK_union_attrs PRIMARY KEY CLUSTERED
  (
  virtual_attr_id,
  union_attr_id
  )

END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.19', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.19 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.8.0.20
-- Hide custom tabs for selected contents
-- **************************************

if not exists(select * from information_schema.tables where table_name = 'CONTENT_TAB_BIND')
BEGIN

  CREATE TABLE [dbo].[CONTENT_TAB_BIND](
    [CONTENT_ID] [numeric](18, 0) NOT NULL,
    [TAB_ID] [numeric](18, 0) NOT NULL,
  PRIMARY KEY CLUSTERED
  (
    [CONTENT_ID] ASC,
    [TAB_ID] ASC
  )
  )

  ALTER TABLE [dbo].[CONTENT_TAB_BIND]  WITH CHECK ADD  CONSTRAINT [FK_CONTENT_TAB_BIND_CONTENT_ID] FOREIGN KEY([CONTENT_ID])
  REFERENCES [dbo].[CONTENT] ([CONTENT_ID])

  ALTER TABLE [dbo].[CONTENT_TAB_BIND]  WITH CHECK ADD  CONSTRAINT [FK_CONTENT_TAB_BIND_TAB_ID] FOREIGN KEY([TAB_ID])
  REFERENCES [dbo].[TABS] ([TAB_ID])
  ON DELETE CASCADE

END
GO

ALTER TRIGGER [dbo].[tbd_delete_content] ON [dbo].[CONTENT] INSTEAD OF DELETE
AS
BEGIN
alter table content_item disable trigger td_delete_item

UPDATE content_attribute SET related_attribute_id = NULL
where related_attribute_id in (
  select attribute_id from content_attribute ca
  inner join deleted d on ca.content_id = d.content_id
)

update content_attribute set link_id = null where link_id in (select link_id from content_link cl
inner join deleted d on cl.content_id = d.content_id)

delete content_to_content from content_to_content cc
inner join deleted d on d.content_id = cc.r_content_id or d.content_id = cc.l_content_id

delete container from container c
inner join deleted d on d.content_id = c.content_id

delete content_form from content_form cf
inner join deleted d on d.content_id = cf.content_id

delete content_item from content_item ci
inner join deleted d on d.content_id = ci.content_id

delete content_tab_bind from content_tab_bind ctb
inner join deleted d on d.content_id = ctb.content_id

delete content from content c inner join deleted d on c.content_id = d.content_id

alter table content_item enable trigger td_delete_item
END
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'EXCLUDED' and TABLE_NAME = 'TABS')
ALTER TABLE TABS
  ADD EXCLUDED BIT NOT NULL CONSTRAINT DF_TABS_EXCLUDED DEFAULT (0)
GO


exec qp_drop_existing 'qp_is_tab_visible_for_content', 'IsScalarFunction'
GO

CREATE  FUNCTION [dbo].[qp_is_tab_visible_for_content]
(@tab_id numeric, @content_id numeric, @custom_tab bit, @excluded bit)
RETURNS bit
AS
BEGIN
  declare @result bit
  if @custom_tab = 0
    set @result = 1
  ELSE
  BEGIN
    declare @not_exists bit, @exists bit
    set @not_exists = 1
    set @exists = 0
    if @excluded = 1
    begin
      set @not_exists = 0
      set @exists = 1
    end

    if exists(select * from CONTENT_TAB_BIND where content_id = @content_id and tab_id = @tab_id)
      set @result = @exists
    else
      set @result = @not_exists
  END
  return @result
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.20', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.20 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.8.0.21
-- Checking child articles
-- **************************************

exec qp_drop_existing 'qp_count_child_articles', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_count_child_articles
  @article_id int,
  @count_archived bit,
  @count int output
AS
BEGIN
  set @count = 0
  declare @baseContentId numeric
  select @baseContentId  = content_id from content_item where content_item_id = @article_id
  declare @relatedFields table (
    id numeric primary key identity(1, 1),
    content_id numeric,
    attribute_name nvarchar(255)
  )
  insert into @relatedFields(content_id, attribute_name)
  select content_id, attribute_name from content_attribute where attribute_type_id = 11 and related_attribute_id in (select attribute_id from content_attribute ca where ca.content_id = @baseContentId)

  declare @content_id numeric, @attribute_name nvarchar(255), @sql nvarchar(max)

  declare @total numeric, @i numeric
  select @total = count(id) from @relatedFields
  set @i = 1

  while @i <= @total
  begin
    declare @result numeric
    select @content_id = content_id, @attribute_name = attribute_name from @relatedFields where id = @i
    set @sql = N'select @result = count(content_item_id) from content_' + cast(@content_id as nvarchar) + '_united where [' + @attribute_name + '] = @value'
    exec sp_executesql @sql, N'@result numeric output, @value numeric', @result = @result out, @value = @article_id
    set @count = @count + @result
    set @i = @i + 1
  end
END
GO



INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.21', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.21 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.8.0.22
-- QP8 interface
-- **************************************

-- Procedures and functions deleting

exec qp_drop_existing 'dbo.qp_tab_access_level', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_entity_access_level', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_get_icon', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_pluralize', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_translate', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_language', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_action_type_id', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_tab_id', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_entity_type_id', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_entity_type_code', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_get_self_relation_field_id', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_check_entity_existence', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_is_entity_exists', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_lock', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_action_id', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_action_code', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_checked_action_id', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_context_menu_id', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_context_menu_code', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_is_action_accessible', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_is_action_accessible_by_action_code', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_is_entity_action_type_accessible', 'IsScalarFunction'
go

exec qp_drop_existing 'qp_column_exists', 'IsScalarFunction'
GO

exec qp_drop_existing 'qp_view_id', 'IsScalarFunction'
GO

exec qp_drop_existing 'qp_get_article_relation_columns', 'IsTableFunction'
GO

exec qp_drop_existing 'qp_get_display_fields', 'IsTableFunction'
GO


exec qp_drop_existing 'dbo.qp_expand', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_toolbar', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_toolbar_buttons_list_by_action_code', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_node', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_context_menu_items_list', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_context_menu_by_id', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_context_menu_by_code', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_context_menus_list', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_action_status_list', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_menu_status_list', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_action_visible', 'IsScalarFunction'
go

exec qp_drop_existing 'dbo.qp_real_content_list', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_virtual_content_list', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_entity_type_by_id', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_entity_type_by_code', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_parent_entity_type_code_by_entity_type_code', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_default_action_code_by_entity_type_code', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_action_type_by_id', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_action_type_by_code', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_action_type_code_by_action_code', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_action_by_id', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_action_by_code', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_action_by_type_code_and_entity_type_code', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_view_type_by_id', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_action_views_list_by_action_id', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_action_views_list_by_action_code', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_paged_data', 'IsProcedure'
go

exec qp_drop_existing 'qp_paged_contents_list', 'IsProcedure'
GO

exec qp_drop_existing 'qp_paged_sites_list', 'IsProcedure'
go

exec qp_drop_existing 'qp_paged_articles_list', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_related_articles_list', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_folders_tree', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_articles_tree', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_article_alias', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_self_relation_field_id', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_base_field', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_parent_entity_id', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_get_recurring_parent_entity_id', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_get_parent_entity_ids_for_tree', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_get_entity_title', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_get_breadcrumbs', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_content_group_list', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_site_folder_list', 'IsProcedure'
GO

exec qp_drop_existing 'dbo.qp_abs_time_seconds', 'IsScalarFunction'
GO

exec qp_drop_existing 'dbo.qp_all_article_search', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_get_real_base_attributes', 'IsProcedure'
go

-- Views deleting

exec qp_drop_existing 'CONTENT_ATTRIBUTE_TYPE', 'IsView'
GO
exec qp_drop_existing 'dbo.USER_GROUP_TREE', 'IsView'
GO
exec qp_drop_existing 'dbo.TEMPLATE_OBJECT', 'IsView'
GO
exec qp_drop_existing 'dbo.PAGE_OBJECT', 'IsView'
GO
exec qp_drop_existing 'dbo.VW_ACTION_TOOLBAR_BUTTON_VIRTUAL', 'IsView'
GO
exec qp_drop_existing 'dbo.VW_ACTION_STATUS_VIRTUAL', 'IsView'
GO
exec qp_drop_existing 'dbo.VW_TREE_NODE_VIRTUAL', 'IsView'
GO
exec qp_drop_existing 'dbo.VW_ENTITY_TYPE', 'IsView'
GO
exec qp_drop_existing 'dbo.CONTENT_GROUP_NAME', 'IsView'
GO
exec qp_drop_existing 'dbo.VIRTUAL_ATTR_BASE_ATTR_RELATION', 'IsView'
GO
exec qp_drop_existing 'dbo.V_USER_QUERY_ATTRS', 'IsView'
GO
exec qp_drop_existing 'dbo.VIRTUAL_CONTENT_RELATION', 'IsView'
GO



-- End of views deleting


-- Fields deleting

if exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'ICON' and TABLE_NAME = 'ATTRIBUTE_TYPE')
ALTER TABLE ATTRIBUTE_TYPE DROP COLUMN ICON
GO

if exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'ICON' and TABLE_NAME = 'OBJECT_TYPE')
ALTER TABLE OBJECT_TYPE DROP COLUMN ICON
GO

-- End of fields deleting



-- ACTION_VIEW deleting

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ACTION_VIEW_PREVENT_DEFAULT_BEHAVIOR]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ACTION_VIEW] DROP CONSTRAINT [DF_ACTION_VIEW_PREVENT_DEFAULT_BEHAVIOR]
END

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ACTION_VIEW_BACKEND_ACTION]') AND parent_object_id = OBJECT_ID(N'[dbo].[ACTION_VIEW]'))
ALTER TABLE [dbo].[ACTION_VIEW] DROP CONSTRAINT [FK_ACTION_VIEW_BACKEND_ACTION]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ACTION_VIEW_VIEW_TYPE]') AND parent_object_id = OBJECT_ID(N'[dbo].[VIEW_TYPE]'))
ALTER TABLE [dbo].[ACTION_VIEW] DROP CONSTRAINT [FK_ACTION_VIEW_VIEW_TYPE]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ACTION_VIEW]') AND type in (N'U'))
DROP TABLE [dbo].[ACTION_VIEW]
GO

-- End of ACTION_VIEW deleting


-- VIEW_TYPE deleting

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BACKEND_ACTION_VIEW_TYPE]') AND parent_object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]'))
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [FK_BACKEND_ACTION_VIEW_TYPE]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VIEW_TYPE]') AND type in (N'U'))
DROP TABLE [dbo].[VIEW_TYPE]
GO

-- End of VIEW_TYPE deleting



-- ACTION_TOOLBAR_BUTTON deleting

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION]') AND parent_object_id = OBJECT_ID(N'[dbo].[ACTION_TOOLBAR_BUTTON]'))
ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON] DROP CONSTRAINT [FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION1]') AND parent_object_id = OBJECT_ID(N'[dbo].[ACTION_TOOLBAR_BUTTON]'))
ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON] DROP CONSTRAINT [FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION1]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ACTION_TOOLBAR_BUTTON_IS_COMMAND]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON] DROP CONSTRAINT [DF_ACTION_TOOLBAR_BUTTON_IS_COMMAND]
END

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ACTION_TOOLBAR_BUTTON]') AND type in (N'U'))
DROP TABLE [dbo].[ACTION_TOOLBAR_BUTTON]
GO

-- End of ACTION_TOOLBAR_BUTTON deleting


-- CONTEXT_MENU_ITEM deleting

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CONTEXT_MENU_ITEM_BACKEND_ACTION]') AND parent_object_id = OBJECT_ID(N'[dbo].[CONTEXT_MENU_ITEM]'))
ALTER TABLE [dbo].[CONTEXT_MENU_ITEM] DROP CONSTRAINT [FK_CONTEXT_MENU_ITEM_BACKEND_ACTION]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CONTEXT_MENU_ITEM_CONTEXT_MENU_ITEM]') AND parent_object_id = OBJECT_ID(N'[dbo].[CONTEXT_MENU_ITEM]'))
ALTER TABLE [dbo].[CONTEXT_MENU_ITEM] DROP CONSTRAINT [FK_CONTEXT_MENU_ITEM_CONTEXT_MENU_ITEM]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CONTEXT_MENU_ITEM_BOTTOM_SEPARATOR]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CONTEXT_MENU_ITEM] DROP CONSTRAINT [DF_CONTEXT_MENU_ITEM_BOTTOM_SEPARATOR]
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CONTEXT_MENU_ITEM]') AND type in (N'U'))
DROP TABLE [dbo].[CONTEXT_MENU_ITEM]
GO

-- End of CONTEXT_MENU_ITEM deleting


-- CONTEXT_MENU deleting

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CONTEXT_MENU]') AND name = N'IX_CONTEXT_MENU_CODE')
DROP INDEX [IX_CONTEXT_MENU_CODE] ON [dbo].[CONTEXT_MENU] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ENTITY_TYPE_CONTEXT_MENU]') AND parent_object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]'))
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [FK_ENTITY_TYPE_CONTEXT_MENU]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ENTITY_TYPE_CONTEXT_MENU1]') AND parent_object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]'))
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [FK_ENTITY_TYPE_CONTEXT_MENU1]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CONTEXT_MENU]') AND type in (N'U'))
DROP TABLE [dbo].[CONTEXT_MENU]
GO

-- End of CONTEXT_MENU deleting


-- BACKEND_ACTION deleting

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]') AND name = N'IX_BACKEND_ACTION_CODE')
DROP INDEX [IX_BACKEND_ACTION_CODE] ON [dbo].[BACKEND_ACTION] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]') AND name = N'IX_BACKEND_ACTION_PARENT_ID')
DROP INDEX [IX_BACKEND_ACTION_PARENT_ID] ON [dbo].[BACKEND_ACTION] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ENTITY_TYPE_BACKEND_ACTION]') AND parent_object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]'))
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [FK_ENTITY_TYPE_BACKEND_ACTION]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ENTITY_TYPE_BACKEND_ACTION1]') AND parent_object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]'))
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [FK_ENTITY_TYPE_BACKEND_ACTION1]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BACKEND_ACTION_BACKEND_ACTION]') AND parent_object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]'))
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [FK_BACKEND_ACTION_BACKEND_ACTION]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BACKEND_ACTION_BACKEND_ACTION1]') AND parent_object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]'))
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [FK_BACKEND_ACTION_BACKEND_ACTION1]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BACKEND_ACTION_ENTITY_TYPE]') AND parent_object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]'))
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [FK_BACKEND_ACTION_ENTITY_TYPE]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BACKEND_ACTION_TABS]') AND parent_object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]'))
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [FK_BACKEND_ACTION_TABS]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BACKEND_ACTION_VIEW_TYPE]') AND parent_object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]'))
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [FK_BACKEND_ACTION_VIEW_TYPE]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_BACKEND_ACTION_IS_INTERFACE]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [DF_BACKEND_ACTION_IS_INTERFACE]
END

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_BACKEND_ACTION_HAS_PRE_ACTION]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [DF_BACKEND_ACTION_HAS_PRE_ACTION]
END

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_BACKEND_ACTION_ALLOW_SEARCH]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [DF_BACKEND_ACTION_ALLOW_SEARCH]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_BACKEND_ACTION_ALLOW_PREVIEW]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[BACKEND_ACTION] DROP CONSTRAINT [DF_BACKEND_ACTION_ALLOW_PREVIEW]
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BACKEND_ACTION]') AND type in (N'U'))
DROP TABLE [dbo].[BACKEND_ACTION]
GO

-- End of BACKEND_ACTION deleting


-- ENTITY_TYPE deleting

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]') AND name = N'IX_ENTITY_TYPE_CODE')
DROP INDEX [IX_ENTITY_TYPE_CODE] ON [dbo].[ENTITY_TYPE] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]') AND name = N'IX_ENTITY_TYPE_PARENT_ID')
DROP INDEX [IX_ENTITY_TYPE_PARENT_ID] ON [dbo].[ENTITY_TYPE] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]') AND name = N'IX_ENTITY_TYPE_PARENT_ID_ORDER')
DROP INDEX [IX_ENTITY_TYPE_PARENT_ID_ORDER] ON [dbo].[ENTITY_TYPE] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ENTITY_TYPE_ENTITY_TYPE]') AND parent_object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]'))
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [FK_ENTITY_TYPE_ENTITY_TYPE]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ENTITY_TYPE_TABS]') AND parent_object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]'))
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [FK_ENTITY_TYPE_TABS]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ENTITY_TYPE_ORDER]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [DF_ENTITY_TYPE_ORDER]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ENTITY_TYPE_HAS_ITEM_NODES]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [DF_ENTITY_TYPE_HAS_ITEM_NODES]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ENTITY_TYPE_DISABLED]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ENTITY_TYPE] DROP CONSTRAINT [DF_ENTITY_TYPE_DISABLED]
END

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE]') AND type in (N'U'))
DROP TABLE [dbo].[ENTITY_TYPE]
GO

-- End of ENTITY_TYPE deleting


-- ACTION_TYPE deleting

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ACTION_TYPE]') AND name = N'IX_ACTION_TYPE_CODE')
DROP INDEX [IX_ACTION_TYPE_CODE] ON [dbo].[ACTION_TYPE] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_ACTION_TYPE_PERMISSION_LEVEL]') AND parent_object_id = OBJECT_ID(N'[dbo].[ACTION_TYPE]'))
ALTER TABLE [dbo].[ACTION_TYPE] DROP CONSTRAINT [FK_ACTION_TYPE_PERMISSION_LEVEL]
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ACTION_TYPE]') AND type in (N'U'))
DROP TABLE [dbo].[ACTION_TYPE]
GO

-- End of ACTION_TYPE deleting


------------------------------------------------------------------------------------------------------------------------


-- ACTION_TYPE creating

CREATE TABLE [dbo].[ACTION_TYPE](
  [ID] [int] IDENTITY(1,1) NOT NULL,
  [NAME] [nvarchar](50) NOT NULL,
  [CODE] [nvarchar](50) NOT NULL,
  [REQUIRED_PERMISSION_LEVEL_ID] [numeric](18, 0) NOT NULL,
  [ITEMS_AFFECTED] tinyint NOT NULL CONSTRAINT DF_ACTION_TYPE_ITEMS_AFFECTED DEFAULT 1,
 CONSTRAINT [PK_ACTION_TYPE] PRIMARY KEY CLUSTERED
(
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[ACTION_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_TYPE_PERMISSION_LEVEL] FOREIGN KEY([REQUIRED_PERMISSION_LEVEL_ID])
REFERENCES [dbo].[PERMISSION_LEVEL] ([PERMISSION_LEVEL_ID])
GO

ALTER TABLE [dbo].[ACTION_TYPE] CHECK CONSTRAINT [FK_ACTION_TYPE_PERMISSION_LEVEL]
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_ACTION_TYPE_CODE] ON [dbo].[ACTION_TYPE]
(
  [CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- End of ACTION_TYPE creating


-- ENTITY_TYPE creating

CREATE TABLE [dbo].[ENTITY_TYPE](
  [ID] [int] IDENTITY(1,1) NOT NULL,
  [NAME] [nvarchar](50) NOT NULL,
  [CODE] [nvarchar](50) NOT NULL,
  [PARENT_ID] [int] NULL,
  [ORDER] [int] NOT NULL,
  [SOURCE] [nvarchar](50) NULL,
  [SOURCE_SP] [nvarchar](50) NULL,
  [ID_FIELD] [nvarchar](50) NULL,
  [TITLE_FIELD] [nvarchar](50) NULL,
  [ORDER_FIELD] [nvarchar](50) NULL,
  [PARENT_ID_FIELD] [nvarchar](50) NULL,
  [FOLDER_ICON] [nvarchar](50) NULL,
  [ICON_MODIFIER_FIELD] [nvarchar](50) NULL,
  [ICON_FIELD] [nvarchar](50) NULL,
  [HAS_ITEM_NODES] [bit] NOT NULL,
  [RECURRING_ID_FIELD] [nvarchar](50) NULL,
  [DEFAULT_ACTION_ID] [int] NULL,
  [FOLDER_DEFAULT_ACTION_ID] [int] NULL,
  [CONTEXT_MENU_ID] [int] NULL,
  [FOLDER_CONTEXT_MENU_ID] [int] NULL,
  [TAB_ID] [numeric](18, 0) NULL,
  [DISABLED] [bit] NOT NULL,
  [CANCEL_ACTION_ID] [int] NULL,
 CONSTRAINT [PK_ENTITY_TYPE] PRIMARY KEY CLUSTERED
(
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[ENTITY_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ENTITY_TYPE_ENTITY_TYPE] FOREIGN KEY([PARENT_ID])
REFERENCES [dbo].[ENTITY_TYPE] ([ID])
GO

ALTER TABLE [dbo].[ENTITY_TYPE] CHECK CONSTRAINT [FK_ENTITY_TYPE_ENTITY_TYPE]
GO

ALTER TABLE [dbo].[ENTITY_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ENTITY_TYPE_TABS] FOREIGN KEY([TAB_ID])
REFERENCES [dbo].[TABS] ([TAB_ID])
GO

ALTER TABLE [dbo].[ENTITY_TYPE] CHECK CONSTRAINT [FK_ENTITY_TYPE_TABS]
GO

ALTER TABLE [dbo].[ENTITY_TYPE] ADD  CONSTRAINT [DF_ENTITY_TYPE_ORDER]  DEFAULT ((0)) FOR [ORDER]
GO

ALTER TABLE [dbo].[ENTITY_TYPE] ADD  CONSTRAINT [DF_ENTITY_TYPE_HAS_ITEM_NODES]  DEFAULT ((1)) FOR [HAS_ITEM_NODES]
GO

ALTER TABLE [dbo].[ENTITY_TYPE] ADD  CONSTRAINT [DF_ENTITY_TYPE_DISABLED]  DEFAULT ((0)) FOR [DISABLED]
GO

CREATE NONCLUSTERED INDEX [IX_ENTITY_TYPE_PARENT_ID_ORDER] ON [dbo].[ENTITY_TYPE]
(
  [PARENT_ID] ASC,
  [ORDER] ASC

)
INCLUDE (DISABLED)
WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_ENTITY_TYPE_CODE] ON [dbo].[ENTITY_TYPE]
(
  [CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- End of ENTITY_TYPE creating


-- VIEW_TYPE creating

CREATE TABLE [dbo].[VIEW_TYPE](
  [ID] [int] IDENTITY(1,1) NOT NULL,
  [NAME] [nvarchar](50) NOT NULL,
  [CODE] [nvarchar](50) NOT NULL,
  [ICON] [nvarchar](255) NULL,
 CONSTRAINT [PK_VIEW_TYPE] PRIMARY KEY CLUSTERED
(
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_VIEW_TYPE_CODE] ON [dbo].[VIEW_TYPE]
(
  [CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- End of VIEW_TYPE creating


-- BACKEND_ACTION creating

CREATE TABLE [dbo].[BACKEND_ACTION](
  [ID] [int] IDENTITY(1,1) NOT NULL,
  [TYPE_ID] [int] NOT NULL,
  [ENTITY_TYPE_ID] [int] NOT NULL,
  [NAME] [nvarchar](255) NOT NULL,
  [SHORT_NAME] [nvarchar](50) NULL,
  [CODE] [nvarchar](50) NOT NULL,
  [USER_CONTROL_FILE] [nvarchar](255) NULL,
  [CONTROLLER_ACTION_URL] [nvarchar](255) NULL,
  [CONFIRM_PHRASE] [nvarchar](1000) NULL,
  [TAB_ID] [numeric](18, 0) NULL,
  [PARENT_ID] [int] NULL,
  [IS_INTERFACE] [bit] NOT NULL,
  [HAS_PRE_ACTION] [bit] NOT NULL,
  [IS_WINDOW] [bit] NOT NULL,
  [WINDOW_WIDTH] [int] NULL,
  [WINDOW_HEIGHT] [int] NULL,
  [DEFAULT_VIEW_TYPE_ID] [int] NULL,
  [ALLOW_SEARCH] bit NOT NULL,
  [ALLOW_PREVIEW] bit NOT NULL,
  [NEXT_SUCCESSFUL_ACTION_ID]  [int] NULL,
  [NEXT_FAILED_ACTION_ID] [int] NULL,
 CONSTRAINT [PK_BACKEND_ACTION] PRIMARY KEY CLUSTERED
(
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[BACKEND_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_BACKEND_ACTION_BACKEND_ACTION] FOREIGN KEY([TYPE_ID])
REFERENCES [dbo].[ACTION_TYPE] ([ID])
GO

ALTER TABLE [dbo].[BACKEND_ACTION] CHECK CONSTRAINT [FK_BACKEND_ACTION_BACKEND_ACTION]
GO

ALTER TABLE [dbo].[BACKEND_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_BACKEND_ACTION_BACKEND_ACTION1] FOREIGN KEY([PARENT_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO

ALTER TABLE [dbo].[BACKEND_ACTION] CHECK CONSTRAINT [FK_BACKEND_ACTION_BACKEND_ACTION1]
GO

ALTER TABLE [dbo].[BACKEND_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_BACKEND_ACTION_ENTITY_TYPE] FOREIGN KEY([ENTITY_TYPE_ID])
REFERENCES [dbo].[ENTITY_TYPE] ([ID])
GO

ALTER TABLE [dbo].[BACKEND_ACTION] CHECK CONSTRAINT [FK_BACKEND_ACTION_ENTITY_TYPE]
GO

ALTER TABLE [dbo].[BACKEND_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_BACKEND_ACTION_TABS] FOREIGN KEY([TAB_ID])
REFERENCES [dbo].[TABS] ([TAB_ID])
GO

ALTER TABLE [dbo].[BACKEND_ACTION] CHECK CONSTRAINT [FK_BACKEND_ACTION_TABS]
GO

ALTER TABLE [dbo].[BACKEND_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_BACKEND_ACTION_VIEW_TYPE] FOREIGN KEY([DEFAULT_VIEW_TYPE_ID])
REFERENCES [dbo].[VIEW_TYPE] ([ID])
GO

ALTER TABLE [dbo].[BACKEND_ACTION] ADD  CONSTRAINT [DF_BACKEND_ACTION_IS_INTERFACE]  DEFAULT ((0)) FOR [IS_INTERFACE]
GO

ALTER TABLE [dbo].[BACKEND_ACTION] ADD  CONSTRAINT [DF_BACKEND_ACTION_HAS_PRE_ACTION]  DEFAULT ((0)) FOR [HAS_PRE_ACTION]
GO

ALTER TABLE [dbo].[BACKEND_ACTION] ADD CONSTRAINT [DF_BACKEND_ACTION_IS_WINDOW] DEFAULT ((0)) FOR [IS_WINDOW]
GO

ALTER TABLE [dbo].[BACKEND_ACTION] ADD CONSTRAINT [DF_BACKEND_ACTION_ALLOW_SEARCH] DEFAULT ((0)) FOR [ALLOW_SEARCH]
GO

ALTER TABLE [dbo].[BACKEND_ACTION] ADD CONSTRAINT [DF_BACKEND_ACTION_ALLOW_PREVIEW] DEFAULT ((0)) FOR [ALLOW_PREVIEW]
GO

ALTER TABLE [dbo].[ENTITY_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ENTITY_TYPE_BACKEND_ACTION] FOREIGN KEY([DEFAULT_ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO

ALTER TABLE [dbo].[ENTITY_TYPE] CHECK CONSTRAINT [FK_ENTITY_TYPE_BACKEND_ACTION]
GO

ALTER TABLE [dbo].[ENTITY_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ENTITY_TYPE_BACKEND_ACTION1] FOREIGN KEY([FOLDER_DEFAULT_ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO

ALTER TABLE [dbo].[ENTITY_TYPE] CHECK CONSTRAINT [FK_ENTITY_TYPE_BACKEND_ACTION1]
GO

CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_PARENT_ID] ON [dbo].[BACKEND_ACTION]
(
  [PARENT_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_BACKEND_ACTION_CODE] ON [dbo].[BACKEND_ACTION]
(
  [CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- end of BACKEND_ACTION creating


-- ACTION_VIEW creating

CREATE TABLE [dbo].[ACTION_VIEW](
  [ACTION_ID] [int] NOT NULL,
  [TYPE_ID] [int] NOT NULL,
  [ORDER] [int] NOT NULL,
  [CONTROLLER_ACTION_URL] [nvarchar](255) NULL,
  [PREVENT_DEFAULT_BEHAVIOR] [bit] NOT NULL
 CONSTRAINT [PK_ACTION_VIEW] PRIMARY KEY CLUSTERED
(
  [ACTION_ID] ASC, [TYPE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[ACTION_VIEW]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_VIEW_VIEW_TYPE] FOREIGN KEY([TYPE_ID])
REFERENCES [dbo].[VIEW_TYPE] ([ID])
GO

ALTER TABLE [dbo].[ACTION_VIEW] CHECK CONSTRAINT [FK_ACTION_VIEW_VIEW_TYPE]
GO

ALTER TABLE [dbo].[ACTION_VIEW]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_VIEW_BACKEND_ACTION] FOREIGN KEY([ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO

ALTER TABLE [dbo].[ACTION_VIEW] ADD CONSTRAINT [DF_ACTION_VIEW_PREVENT_DEFAULT_BEHAVIOR] DEFAULT ((0)) FOR [PREVENT_DEFAULT_BEHAVIOR]
GO

ALTER TABLE [dbo].[ACTION_VIEW] CHECK CONSTRAINT [FK_ACTION_VIEW_BACKEND_ACTION]
GO

-- end of ACTION_VIEW creating


-- CONTEXT_MENU creating

CREATE TABLE [dbo].[CONTEXT_MENU](
  [ID] [int] IDENTITY(1,1) NOT NULL,
  [CODE] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_CONTEXT_MENU] PRIMARY KEY CLUSTERED
(
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[ENTITY_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ENTITY_TYPE_CONTEXT_MENU] FOREIGN KEY([CONTEXT_MENU_ID])
REFERENCES [dbo].[CONTEXT_MENU] ([ID])
GO

ALTER TABLE [dbo].[ENTITY_TYPE] CHECK CONSTRAINT [FK_ENTITY_TYPE_CONTEXT_MENU]
GO

ALTER TABLE [dbo].[ENTITY_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ENTITY_TYPE_CONTEXT_MENU1] FOREIGN KEY([FOLDER_CONTEXT_MENU_ID])
REFERENCES [dbo].[CONTEXT_MENU] ([ID])
GO

ALTER TABLE [dbo].[ENTITY_TYPE] CHECK CONSTRAINT [FK_ENTITY_TYPE_CONTEXT_MENU1]
GO

-- End of CONTEXT_MENU creating


-- CONTEXT_MENU_ITEM creating

CREATE TABLE [dbo].[CONTEXT_MENU_ITEM](
  [CONTEXT_MENU_ID] [int] NOT NULL,
  [ACTION_ID] [int] NOT NULL,
  [NAME] [nvarchar](50) NOT NULL,
  [ORDER] [int] NOT NULL,
  [ICON] [nvarchar](255) NULL,
  [ICON_DISABLED] [nvarchar](255) NULL,
  [BOTTOM_SEPARATOR] [bit] NOT NULL,
 CONSTRAINT [PK_CONTEXT_MENU_ITEM] PRIMARY KEY CLUSTERED
(
  [CONTEXT_MENU_ID] ASC,
  [ACTION_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[CONTEXT_MENU_ITEM]  WITH CHECK ADD  CONSTRAINT [FK_CONTEXT_MENU_ITEM_BACKEND_ACTION] FOREIGN KEY([ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO

ALTER TABLE [dbo].[CONTEXT_MENU_ITEM] CHECK CONSTRAINT [FK_CONTEXT_MENU_ITEM_BACKEND_ACTION]
GO

ALTER TABLE [dbo].[CONTEXT_MENU_ITEM]  WITH CHECK ADD  CONSTRAINT [FK_CONTEXT_MENU_ITEM_CONTEXT_MENU_ITEM] FOREIGN KEY([CONTEXT_MENU_ID])
REFERENCES [dbo].[CONTEXT_MENU] ([ID])
GO

ALTER TABLE [dbo].[CONTEXT_MENU_ITEM] CHECK CONSTRAINT [FK_CONTEXT_MENU_ITEM_CONTEXT_MENU_ITEM]
GO

ALTER TABLE [dbo].[CONTEXT_MENU_ITEM] ADD  CONSTRAINT [DF_CONTEXT_MENU_ITEM_BOTTOM_SEPARATOR]  DEFAULT ((0)) FOR [BOTTOM_SEPARATOR]
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_CONTEXT_MENU_CODE] ON [dbo].[CONTEXT_MENU]
(
  [CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- End of CONTEXT_MENU_ITEM creating


-- ACTION_TOOLBAR_BUTTON creating

CREATE TABLE [dbo].[ACTION_TOOLBAR_BUTTON](
  [PARENT_ACTION_ID] [int] NOT NULL,
  [ACTION_ID] [int] NOT NULL,
  [NAME] [nvarchar](50) NOT NULL,
  [ORDER] [int] NOT NULL,
  [ICON] [nvarchar](255) NULL,
  [ICON_DISABLED] [nvarchar](255) NULL,
  [IS_COMMAND] [bit] NOT NULL,
 CONSTRAINT [PK_ACTION_TOOLBAR_BUTTON] PRIMARY KEY CLUSTERED
(
  [PARENT_ACTION_ID] ASC,
  [ACTION_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION] FOREIGN KEY([ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO

ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON] CHECK CONSTRAINT [FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION]
GO

ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION1] FOREIGN KEY([PARENT_ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO

ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON] CHECK CONSTRAINT [FK_ACTION_TOOLBAR_BUTTON_BACKEND_ACTION1]
GO

ALTER TABLE [dbo].[ACTION_TOOLBAR_BUTTON] ADD  CONSTRAINT [DF_ACTION_TOOLBAR_BUTTON_IS_COMMAND]  DEFAULT ((1)) FOR [IS_COMMAND]
GO

-- End of ACTION_TOOLBAR_BUTTON creating


-- Fields creating

ALTER TABLE ATTRIBUTE_TYPE
ADD ICON nvarchar(255) NULL
GO

ALTER TABLE OBJECT_TYPE
ADD ICON nvarchar(255) NULL
GO

update ATTRIBUTE_TYPE set ICON = REPLACE(type_image, 'images/types/', '')
GO

update OBJECT_TYPE set ICON = REPLACE(image_name, 'objects/', '')
GO

update ATTRIBUTE_TYPE set ICON = 'date.gif' where TYPE_NAME = 'Date'
update ATTRIBUTE_TYPE set ICON = 'time.gif' where TYPE_NAME = 'Time'
GO

-- End of fields creating


-- Views creating

CREATE VIEW dbo.CONTENT_ATTRIBUTE_TYPE AS
select at.DATABASE_TYPE, at.INPUT_TYPE, at.ICON, at.TYPE_NAME, ca.* from CONTENT_ATTRIBUTE ca inner join ATTRIBUTE_TYPE at on ca.ATTRIBUTE_TYPE_ID = at.ATTRIBUTE_TYPE_ID
GO


CREATE VIEW dbo.USER_GROUP_TREE AS
select ug.*, gtg.Parent_Group_Id AS PARENT_GROUP_ID from USER_GROUP ug left join Group_To_Group gtg on ug.GROUP_ID = gtg.Child_Group_Id
GO


CREATE VIEW dbo.TEMPLATE_OBJECT AS
select o.*, ot.ICON from OBJECT o
INNER JOIN OBJECT_TYPE ot on o.object_type_id = ot.object_type_id
WHERE o.PAGE_ID IS NULL
GO

CREATE VIEW dbo.PAGE_OBJECT AS
select o.*, ot.ICON from OBJECT o
INNER JOIN OBJECT_TYPE ot on o.object_type_id = ot.object_type_id
WHERE o.PAGE_ID IS NOT NULL
GO

CREATE VIEW [dbo].[VW_ENTITY_TYPE]
AS
  SELECT
    ID,
    NAME,
    CODE,
    PARENT_ID,
    NULL AS PARENT_CODE,
    [ORDER],
    HAS_ITEM_NODES,
    [DISABLED],
    CANCEL_ACTION_ID,
    NULL AS CANCEL_ACTION_CODE
  FROM
    ENTITY_TYPE
GO

CREATE VIEW [dbo].[VW_TREE_NODE_VIRTUAL]
AS
  SELECT
    et.ID,
    et.CODE,
    et.PARENT_ID,
    pet.code AS PARENT_CODE,
    CAST(0 AS bit) AS IS_FOLDER,
    CAST('' AS nvarchar(255)) AS ICON,
    CAST('' AS nvarchar(255)) AS TITLE,
    CAST('' AS nvarchar(50)) AS DEFAULT_ACTION_CODE,
    CAST('' AS nvarchar(50)) AS DEFAULT_ACTION_TYPE_CODE,
    CAST('' AS  nvarchar(50)) AS CONTEXT_MENU_CODE,
    CAST(0 AS bit) AS HAS_CHILDREN
  FROM
    ENTITY_TYPE AS et
  LEFT OUTER JOIN
    ENTITY_TYPE AS pet
  ON
    pet.ID = et.PARENT_ID
  WHERE
    (1 = 0)
GO

CREATE VIEW [dbo].[VW_ACTION_STATUS_VIRTUAL]
AS
  SELECT
    ba.CODE,
    CAST(0 AS bit) AS visible
  FROM
    BACKEND_ACTION AS ba
  WHERE
    (1 = 0)
GO

CREATE VIEW [dbo].[VW_ACTION_TOOLBAR_BUTTON_VIRTUAL]
AS
  SELECT
    ba.ID AS ACTION_ID,
    ba.CODE AS ACTION_CODE,
    bat.CODE AS ACTION_TYPE_CODE,
    ba2.ID AS PARENT_ACTION_ID,
    ba2.CODE AS PARENT_ACTION_CODE,
    atb.NAME AS NAME,
    bat.ITEMS_AFFECTED,
    atb.[ORDER],
    atb.ICON,
    atb.ICON_DISABLED,
    atb.IS_COMMAND
  FROM
    ACTION_TOOLBAR_BUTTON AS atb
  INNER JOIN
    BACKEND_ACTION AS ba
  ON
    ba.ID = atb.ACTION_ID
  INNER JOIN
    ACTION_TYPE AS bat
  ON
    bat.ID = ba.TYPE_ID
  INNER JOIN
    BACKEND_ACTION AS ba2
  ON
    ba2.ID = atb.PARENT_ACTION_ID
  WHERE
    (1 = 0)
GO

CREATE VIEW dbo.CONTENT_GROUP_NAME AS
  select content_group_id as id, name from content_group
GO

CREATE VIEW dbo.V_USER_QUERY_ATTRS AS
  select vca.ATTRIBUTE_ID as USER_QUERY_ATTR_ID, ca.ATTRIBUTE_ID BASE_ATTR_ID
  from user_query_attrs uqa
  join CONTENT_ATTRIBUTE vca on uqa.virtual_content_id = vca.CONTENT_ID
  join CONTENT_ATTRIBUTE ca on uqa.user_query_attr_id = ca.ATTRIBUTE_ID
  where vca.ATTRIBUTE_NAME = ca.ATTRIBUTE_NAME
GO

CREATE VIEW dbo.VIRTUAL_ATTR_BASE_ATTR_RELATION AS
  WITH V2BREL AS
    (SELECT [USER_QUERY_ATTR_ID] as VIRTUAL_ATTR_ID
        ,[BASE_ATTR_ID] as BASE_ATTR_ID
    FROM V_USER_QUERY_ATTRS
    UNION ALL
    SELECT [virtual_attr_id] as VIRTUAL_ATTR_ID
        ,[union_attr_id] as BASE_ATTR_ID
    FROM union_attrs
    UNION ALL
    select ATTRIBUTE_ID as VIRTUAL_ATTR_ID,
    persistent_attr_id as BASE_ATTR_ID
    from CONTENT_ATTRIBUTE
    where persistent_attr_id is not null)
  select AR.BASE_ATTR_ID, BC.CONTENT_ID BASE_CNT_ID, BC.VIRTUAL_TYPE BASE_CNT_VTYPE,
  AR.VIRTUAL_ATTR_ID, VC.CONTENT_ID VIRTUAL_CNT_ID, VC.VIRTUAL_TYPE VIRTUAL_CNT_VTYPE
  from V2BREL AR
  JOIN CONTENT_ATTRIBUTE BA ON BA.ATTRIBUTE_ID = AR.BASE_ATTR_ID
  JOIN CONTENT_ATTRIBUTE VA ON VA.ATTRIBUTE_ID = AR.VIRTUAL_ATTR_ID
  JOIN CONTENT BC ON BA.CONTENT_ID = BC.CONTENT_ID
  JOIN CONTENT VC ON VA.CONTENT_ID = VC.CONTENT_ID
GO

CREATE VIEW [dbo].[VIRTUAL_CONTENT_RELATION] AS
  select  DISTINCT
      PA.CONTENT_ID AS BASE_CONTENT_ID,
      A.CONTENT_ID AS VIRTUAL_CONTENT_ID
      from CONTENT_ATTRIBUTE A
      JOIN CONTENT_ATTRIBUTE PA ON A.persistent_attr_id = PA.ATTRIBUTE_ID
  UNION
  SELECT [union_content_id] AS BASE_CONTENT_ID,
       [virtual_content_id] AS VIRTUAL_CONTENT_ID
  FROM [union_contents]
  UNION
  SELECT [real_content_id] AS BASE_CONTENT_ID,
       [virtual_content_id] AS VIRTUAL_CONTENT_ID
  FROM [user_query_contents]
GO
-- End of views creating


-- Procedures and functions creating

create function dbo.qp_column_exists(@table_name nvarchar(255), @column_name nvarchar(255)) returns bit
as
begin
  declare @result bit
  if exists(select * from information_schema.columns where column_name = @column_name and table_name = @table_name)
    set @result = 1
  else
    set @result = 0
  return @result
end
go

create function [dbo].[qp_tab_access_level](@user_id numeric, @tab_id numeric) returns int
as
begin
  declare @result int, @parent_tab_id decimal
  if @tab_id is null
    set @result = - 1
  else
  begin
    select @result = dbo.qp_is_entity_accessible('tab', @tab_id, @user_id, 0, 0, 0, 1)
    if @result = -1
    begin
      select @result = dbo.qp_tab_access_level(@user_id, (select parent_tab_id from tabs where tab_id = @tab_id))
    end
  end
  return @result
end
go

create function dbo.qp_entity_access_level(@user_id numeric, @entity_code nvarchar(255), @entity_id numeric) returns int
as
begin
  declare @old_code nvarchar(255)
  set @old_code = null
  if @entity_code = 'article'
    set @old_code = 'content_item'
  else if @entity_code = 'virtual_content'
    set @old_code = 'content'
  else if @entity_code = 'site_folder'
    set @old_code = 'folder'
  else if @entity_code in ('content', 'site', 'content_folder')
    set @old_code = @entity_code

  declare @result int
  if @old_code is null
    select @result = permission_level from PERMISSION_LEVEL where PERMISSION_LEVEL_NAME = 'Full Access'
  else
    select @result = dbo.qp_is_entity_accessible(@old_code, @entity_id, @user_id, 0, 0, 0, 1)
  return @result
end
GO

-- TODO : visible, enable matrix



create function dbo.qp_get_icon(@icon nvarchar(255), @code nvarchar(50), @modifier nvarchar(50)) returns nvarchar(255)
AS
begin
  declare @result nvarchar(255)
  if @icon is not null
    set @result = @icon
  else if @modifier is not null
    set @result = @code + @modifier + '.gif'
  else
    set @result = @code + '.gif'
  return @result
end
GO



create function dbo.qp_pluralize(@title nvarchar(255)) returns nvarchar(255)
AS
begin
  declare @result nvarchar(255)
  if right(@title, 1) in ('s', 'x')
    set @result = @title + 'es'
  else
    set @result = @title + 's'
  RETURN @result
end
GO

create function dbo.qp_language(@user_id numeric) returns numeric
AS
begin
  declare @result numeric
  select @result = language_id from USERS where USER_ID = @user_id
  return @result
end
GO

create function dbo.qp_translate(@text nvarchar(max), @lang_id numeric) returns nvarchar(max)
AS
begin
  declare @result nvarchar(max), @translation nvarchar(max)
  set @result = @text
  if @lang_id <> 1
  begin
    select @translation = t.PHRASE_TRANSLATION from translations t inner join phrases p on t.phrase_id = p.phrase_id where p.phrase_text = @text and t.LANGUAGE_ID = @lang_id
    if @translation is not null
      set @result = @translation
  end
  RETURN @result
end
GO


create function dbo.qp_action_type_id(@code nvarchar(50)) returns bigint
AS
begin
  return (select id from action_type where code = @code)
end
GO


create function dbo.qp_entity_type_id(@code nvarchar(50)) returns bigint
AS
begin
  return (select id from entity_type where code = @code)
end
GO

create function dbo.qp_entity_type_code(@id bigint) returns nvarchar(50)
AS
begin
  return (select code from entity_type where id = @id)
end
GO

create function dbo.qp_tab_id(@name nvarchar(255)) returns bigint
AS
begin
  return (select tab_id from tabs where tab_name = @name)
end
GO

create function dbo.qp_action_code(@id bigint) returns nvarchar(50)
AS
begin
  return (select code from backend_action where id = @id)
end
GO


create function dbo.qp_action_id(@code nvarchar(50)) returns bigint
AS
begin
  return (select id from backend_action where code = @code)
end
GO

create function dbo.qp_checked_action_id(@user_id int, @action_id int) returns bigint
AS
begin
  declare @result bigint
  if dbo.qp_is_action_accessible(@user_id, @action_id) = 1
    set @result = @action_id
  else
    set @result = null
  return @result
end
GO

create function dbo.qp_context_menu_id(@code nvarchar(50)) returns bigint
AS
begin
  return (select id from context_menu where code = @code)
end
GO

create function dbo.qp_context_menu_code(@id bigint) returns nvarchar(50)
AS
begin
  return (select code from context_menu where id = @id)
end
GO

create function dbo.qp_is_action_accessible(@user_id int, @action_id int) returns bit
AS
begin
  declare @tab_id numeric, @entity_type_id int, @level int, @req_level int, @result int

  select @tab_id = tab_id, @entity_type_id = [TYPE_ID], @req_level = pl.permission_level
  from BACKEND_ACTION ba
  INNER JOIN ACTION_TYPE at on ba.type_id = at.id
  INNER JOIN PERMISSION_LEVEL pl on at.required_permission_level_id = pl.permission_level_id
  where ba.ID = @action_id

  if @tab_id is null
    select @tab_id = tab_id from ENTITY_TYPE where ID = @entity_type_id

  set @result = 0

  if @tab_id is not null
  begin
    set @level = dbo.qp_tab_access_level(@user_id, @tab_id)
    if @level >= @req_level
      set @result = 1
  end
  return @result
end
GO

CREATE FUNCTION [dbo].[qp_is_action_accessible_by_action_code]
(
  @user_id int,
  @action_code nvarchar(50)
)
RETURNS BIT
AS
BEGIN
  declare @tab_id numeric, @entity_type_id int, @level int, @req_level int, @result int

  select @tab_id = tab_id, @entity_type_id = [TYPE_ID], @req_level = pl.permission_level
  from BACKEND_ACTION ba
  INNER JOIN ACTION_TYPE at on ba.type_id = at.id
  INNER JOIN PERMISSION_LEVEL pl on at.required_permission_level_id = pl.permission_level_id
  where ba.CODE = @action_code

  if @tab_id is null
    select @tab_id = tab_id from ENTITY_TYPE where ID = @entity_type_id

  set @result = 0

  if @tab_id is not null
  begin
    set @level = dbo.qp_tab_access_level(@user_id, @tab_id)
    if @level >= @req_level
      set @result = 1
  end
  RETURN @result
END
GO

CREATE FUNCTION [dbo].[qp_is_entity_action_type_accessible]
(
  @user_id int,
  @entity_type_code nvarchar(50),
  @entity_id numeric,
  @action_type_code nvarchar(50)
)
RETURNS BIT
AS
BEGIN
  declare @level int
  select @level = pl.PERMISSION_LEVEL from ACTION_TYPE at
  INNER JOIN PERMISSION_LEVEL pl on at.REQUIRED_PERMISSION_LEVEL_ID = pl.PERMISSION_LEVEL_ID
  where at.CODE = @action_type_code

  declare @result bit

  if dbo.qp_entity_access_level(@user_id, @entity_type_code, @entity_id) >= @level
    set @result = 1
  else
    set @result = 0
  RETURN @result
END
GO

CREATE function [dbo].[qp_view_id](@code nvarchar(50)) returns int
AS
begin
  return (select id from view_type where code = @code)
end
GO

CREATE FUNCTION [dbo].[qp_get_article_relation_columns]
(
  @content_id numeric(18,0)
)
RETURNS
  @articleRelationColumns table
  (
    ATTRIBUTE_ID numeric(18,0),
    ATTRIBUTE_NAME nvarchar(255),
    REL_ATTRIBUTE_ID numeric(18,0),
    REL_ATTRIBUTE_NAME nvarchar(255)
  )
AS
BEGIN
  INSERT INTO @articleRelationColumns (ATTRIBUTE_ID, ATTRIBUTE_NAME, REL_ATTRIBUTE_ID, REL_ATTRIBUTE_NAME)
  SELECT TOP 1
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS REL_ATTRIBUTE_ID,
    rca.ATTRIBUTE_NAME AS REL_ATTRIBUTE_NAME
  FROM
    CONTENT_ATTRIBUTE AS ca
  INNER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.ATTRIBUTE_TYPE_ID =
    (
      SELECT
        ATTRIBUTE_TYPE_ID
      FROM
        ATTRIBUTE_TYPE
      WHERE
        INPUT_TYPE = 'relation'
    )
    AND ca.RELATED_ATTRIBUTE_ID IN
    (
      SELECT
        ATTRIBUTE_ID
      FROM
        CONTENT_ATTRIBUTE
      WHERE
        CONTENT_ID = @content_id
    )
  ORDER BY
    ca.ATTRIBUTE_ID ASC

  RETURN
END
GO

CREATE procedure [dbo].[qp_get_toolbar](@user_id int, @action_id int)
AS
begin
  declare @language_id numeric(18, 0)

  set @language_id = dbo.qp_language(@user_id)

  select
    ba.CODE,
    ba2.CODE AS PARENT_CODE,
    dbo.qp_translate(atb.NAME, @language_id) as NAME,
    atb.[ORDER],
    atb.ICON,
    atb.ICON_DISABLED,
    atb.IS_COMMAND
  from ACTION_TOOLBAR_BUTTON atb
  inner join BACKEND_ACTION ba on atb.ACTION_ID = ba.ID
  inner join BACKEND_ACTION ba2 on atb.PARENT_ACTION_ID = ba2.ID
  WHERE atb.PARENT_ACTION_ID = @action_id and dbo.qp_is_action_accessible(@user_id, atb.ACTION_ID) = 1
  order by [ORDER]
end
GO

CREATE PROCEDURE [dbo].[qp_get_toolbar_buttons_list_by_action_code](@user_id int, @action_code nvarchar(50), @entity_id int)
AS
BEGIN
  DECLARE @action_id int
  SET @action_id = dbo.qp_action_id(@action_code)

  DECLARE @language_id numeric(18, 0)
  SET @language_id = dbo.qp_language(@user_id)

  DECLARE @entity_code nvarchar(50)
  select @entity_code = dbo.qp_entity_type_code(entity_type_id) from backend_action where code = @action_code

  SELECT
    ba.ID AS ACTION_ID,
    ba.CODE AS ACTION_CODE,
    bat.CODE AS ACTION_TYPE_CODE,
    ba2.ID AS PARENT_ACTION_ID,
    ba2.CODE AS PARENT_ACTION_CODE,
    dbo.qp_translate(atb.NAME, @language_id) AS NAME,
    bat.ITEMS_AFFECTED,
    atb.[ORDER],
    atb.ICON,
    atb.ICON_DISABLED,
    atb.IS_COMMAND
  FROM
    ACTION_TOOLBAR_BUTTON AS atb
  INNER JOIN
    BACKEND_ACTION AS ba
  ON
    atb.ACTION_ID = ba.ID
  INNER JOIN
    ACTION_TYPE AS bat
  ON
    bat.ID = ba.TYPE_ID
  INNER JOIN
    BACKEND_ACTION AS ba2
  ON
    atb.PARENT_ACTION_ID = ba2.ID
  WHERE
    atb.PARENT_ACTION_ID = @action_id
    AND dbo.qp_is_action_accessible(@user_id, atb.ACTION_ID) = 1
    AND dbo.qp_action_visible(@user_id, @entity_code, @entity_id, ba.CODE) = 1
  ORDER BY
    [ORDER]
END
GO

CREATE PROCEDURE [dbo].[qp_lock](@code nvarchar(50), @id numeric, @user_id numeric = null)
AS
BEGIN
  declare @source nvarchar(50), @id_field nvarchar(50)
  declare @sql nvarchar(max), @date_sql nvarchar(max), @locked datetime
  set @locked = getdate()
  if @user_id is null
    set @locked = null

  select
    @source = source,
    @id_field = ID_FIELD
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @sql = 'update ' + @source + ' set locked_by = @locked_by, locked = @locked, permanent_lock = 0 where ' + @id_field + ' = @id'

  exec sp_executesql @sql, N'@id numeric, @locked_by numeric, @locked datetime', @locked = @locked, @id = @id, @locked_by = @user_id
  select @locked as locked
END
GO

CREATE PROCEDURE [dbo].[qp_check_entity_existence]
  @entity_type_code AS nvarchar(50),
  @entity_id AS numeric(18, 0)
AS
BEGIN
  DECLARE @result AS bit
  DECLARE @sql nvarchar(800)
  DECLARE @entity_count AS int

  SET @result = 0

  IF (@entity_type_code = 'db')
    BEGIN
      SET @result = 1
    END
  ELSE IF (@entity_type_code = 'article' OR @entity_type_code = 'archive_article')
    BEGIN
      DECLARE @is_archive AS bit

      SET @is_archive = 0
      IF (@entity_type_code = 'archive_article')
        BEGIN
          SET @is_archive = 1
        END

      SET @sql = ''
      SET @sql = @sql + 'SELECT ' + CHAR(13)
      SET @sql = @sql + ' @entity_count = COUNT(CONTENT_ITEM_ID) ' + CHAR(13)
      SET @sql = @sql + 'FROM ' + CHAR(13)
      SET @sql = @sql + ' CONTENT_ITEM ' + CHAR(13)
      SET @sql = @sql + 'WHERE ' + CHAR(13)
      SET @sql = @sql + ' CONTENT_ITEM_ID = ' + CAST(@entity_id AS varchar) + ' ' + CHAR(13)
      SET @sql = @sql + ' AND ARCHIVE = ' + CAST(@is_archive AS varchar) + ' ' + CHAR(13)

      EXEC sp_executesql
        @sql,
        N'@entity_count int OUTPUT',
        @entity_count = @entity_count OUTPUT

      IF (@entity_count > 0)
        BEGIN
          SET @result = 1
        END
    END
  ELSE
    BEGIN
      SET NOCOUNT ON

      DECLARE @source AS nvarchar(50)
      DECLARE @id_field AS nvarchar(50)

      SELECT
        @source = [SOURCE],
        @id_field = ID_FIELD
      FROM
        ENTITY_TYPE
      WHERE
        CODE = @entity_type_code

      IF (@source IS NOT NULL AND @id_field IS NOT NULL)
        BEGIN
          SET @sql = ''
          SET @sql = @sql + 'SELECT ' + CHAR(13)
          SET @sql = @sql + ' @entity_count = COUNT(' + @id_field + ') ' + CHAR(13)
          SET @sql = @sql + 'FROM ' + CHAR(13)
          SET @sql = @sql + ' ' + @source + ' ' + CHAR(13)
          SET @sql = @sql + 'WHERE ' + CHAR(13)
          SET @sql = @sql + ' ' + @id_field + ' = ' + CAST(@entity_id AS varchar) + ' '

          EXEC sp_executesql
            @sql,
            N'@entity_count int OUTPUT',
            @entity_count = @entity_count OUTPUT

          IF (@entity_count > 0)
            BEGIN
              SET @result = 1
            END
        END

      SET NOCOUNT OFF
    END

  SELECT @result AS result
END
GO

CREATE PROCEDURE [dbo].qp_is_entity_exists(@code nvarchar(50), @name nvarchar(255), @id numeric, @parent_id numeric, @recurring_id numeric)
AS
BEGIN

  declare @source nvarchar(50), @title_field nvarchar(50), @parent_id_field nvarchar(50), @id_field nvarchaR(50), @recurring_id_field nvarchar(50)
  declare @sql nvarchar(max), @condition nvarchar(max), @count int, @result bit

  if @parent_id = 0 set @parent_id = null
  if @recurring_id = 0 set @recurring_id = null
  set @result = 0

  select
    @source = source,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @id_field = ID_FIELD,
    @recurring_id_field = RECURRING_ID_FIELD
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @condition = ''
  if @parent_id is not null and @parent_id_field is not null
    set @condition = @condition + ' and ' + @parent_id_field + ' = @parent_id '
  if @recurring_id is not null and @recurring_id_field is not null
    set @condition = ' and ' + @recurring_id_field + ' = @recurring_id '

  set @sql = 'select @count = count(' + @id_field + ') from ' + @source + ' where ' + @title_field + ' = @name and ' + @id_field + ' <> @id ' + @condition
  exec sp_executesql @sql, N'@name nvarchar(255), @id numeric, @parent_id numeric, @recurring_id numeric, @count int output', @name = @name, @id = @id, @parent_id = @parent_id, @recurring_id = @recurring_id, @count = @count output

  if @count > 0
    set @result = 1

  select @result

END
GO


CREATE procedure [dbo].[qp_expand](@user_id numeric = 0, @code nvarchar(50) = null, @id bigint = 0, @is_folder bit = 0, @count_only bit=0, @count int = 0 output )
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint
  declare @default_action_id int, @context_menu_id int

  set @language_id = dbo.qp_language(@user_id)

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = dbo.qp_checked_action_id(@user_id, default_action_id),
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @id_str = CAST(@id as nvarchar(10))

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'


      -- process recurring --
      if @recurring_id_field is not null
      begin
        if @is_folder = 1
          set @where = @parent_id_field + ' = ' + @id_str + ' and ' + @recurring_id_field + ' is null '
        else
          set @where = @recurring_id_field + ' = ' + @id_str
      end
      else if @parent_id_field is not null
      begin
        set @where = @parent_id_field + ' = ' + @id_str
      end
      else
        set @where = '1 = 1'

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end

    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @id,
        CODE = @code,
        IS_FOLDER = 0,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id
    end
    else
      select @count = COUNT(ID) from @result
  end
  else
  begin
    if @count_only = 0
      if @code is not null
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, dbo.qp_translate(dbo.qp_pluralize(NAME), @language_id), CODE, 1, dbo.qp_get_icon(NULL, dbo.qp_pluralize(CODE), NULL), dbo.qp_checked_action_id(@user_id, FOLDER_DEFAULT_ACTION_ID), FOLDER_CONTEXT_MENU_ID From ENTITY_TYPE where PARENT_ID = dbo.qp_entity_type_id(@code) and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0 order by [Order]
      else
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, NAME, CODE, 0, dbo.qp_get_icon(NULL, CODE, NULL), dbo.qp_checked_action_id(@user_id, DEFAULT_ACTION_ID), CONTEXT_MENU_ID From ENTITY_TYPE where PARENT_ID is null and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0 order by [Order]
    else
      if @code is not null
        select @count = COUNT(ID) From ENTITY_TYPE where PARENT_ID = dbo.qp_entity_type_id(@code) and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0
      else
        select @count = COUNT(ID) From ENTITY_TYPE where PARENT_ID is null and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0

  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit
    declare @children_count int
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = Is_folder from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, 1, @count = @children_count output
      else
        exec dbo.qp_expand @user_id, @local_code, @local_id, 0, 1, @count = @children_count output

      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      CASE WHEN (TREE_NODE.CODE != 'site') THEN
        TREE_NODE.PARENT_ID
      ELSE
        NULL
      END AS PARENT_ID,
      dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO

CREATE procedure [dbo].[qp_get_node]
  @user_id numeric = 0,
  @code nvarchar(50) = null,
  @id bigint = 0,
  @parent_id bigint = null,
  @is_folder bit = 0
as
begin
  declare @result table
  (
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @local_id bigint, @local_name nvarchar(50)
  declare @local_code nvarchar(50), @local_parent_id bigint
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50), @icon_modifier_field nvarchar(50)
  declare @order_field nvarchar(50), @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10)
  declare @default_action_id int, @folder_default_action_id int
  declare @context_menu_id int, @folder_context_menu_id int

  set @language_id = dbo.qp_language(@user_id)

  select
    @local_id = ID,
    @local_name = NAME,
    @local_code = CODE,
    @local_parent_id = PARENT_ID,
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = dbo.qp_checked_action_id(@user_id, default_action_id),
    @folder_default_action_id = dbo.qp_checked_action_id(@user_id, FOLDER_DEFAULT_ACTION_ID),
    @context_menu_id = CONTEXT_MENU_ID,
    @folder_context_menu_id = FOLDER_CONTEXT_MENU_ID
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)
    and dbo.qp_tab_access_level(@user_id, tab_id) >= 1
    and disabled = 0

  if (@@ROWCOUNT > 0)
  begin
    set @id_str = CAST(@id as nvarchar(10))

    if (@icon_field is null)
    begin
      set @icon_field = 'NULL'
    end
    if (@icon_modifier_field is null)
    begin
      set @icon_modifier_field = 'NULL'
    end

    if (@is_folder = 1 OR @local_parent_id IS NULL)
    begin
      if (@local_parent_id IS NOT NULL)
      begin
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select
          @local_id,
          @parent_id,
          dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
          @local_code,
          @is_folder,
          dbo.qp_get_icon(NULL, dbo.qp_pluralize(@local_code), NULL),
          @folder_default_action_id,
          @folder_context_menu_id
      end
      else
      begin
      insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
      select
        @local_id,
        @parent_id,
        dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
        @local_code,
        @is_folder,
        dbo.qp_get_icon(NULL, @local_code, NULL),
        @default_action_id,
        @context_menu_id
      end
    end
    else
    begin
      if (@source IS NOT NULL)
      begin
        declare @sql nvarchar(800), @select nvarchar(800), @where nvarchar(800)

        set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'
        set @where = @id_field + ' = ' + @id_str

        set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where

        insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
        exec sp_executesql @sql

        --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
        update
          @result
        set
          PARENT_ID = @parent_id,
          CODE = @local_code,
          IS_FOLDER = @is_folder,
          ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
          DEFAULT_ACTION_ID = @default_action_id,
          CONTEXT_MENU_ID = @context_menu_id
      end
    end

    declare @children_count int

    exec dbo.qp_expand
      @user_id,
      @local_code,
      @local_id,
      0,
      1,
      @count = @children_count output

    if @children_count = 0
      update
        @result
      set
        has_children = 0
    else
      update
        @result
      set
        has_children = 1
  end

  SELECT
    TREE_NODE.ID,
    TREE_NODE.CODE,
    CASE WHEN (TREE_NODE.CODE != 'site') THEN
      TREE_NODE.PARENT_ID
    ELSE
      NULL
    END AS PARENT_ID,
    dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
    TREE_NODE.IS_FOLDER,
    TREE_NODE.ICON,
    TREE_NODE.TITLE,
    dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
    ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
    dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
    TREE_NODE.HAS_CHILDREN
  FROM
    @result AS TREE_NODE
  LEFT OUTER JOIN
    BACKEND_ACTION
  ON
    TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
  LEFT OUTER JOIN
    ACTION_TYPE
  ON
    BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
end
GO

CREATE PROCEDURE [dbo].[qp_get_context_menu_items_list](@user_id int, @menu_id int)
AS
BEGIN
  DECLARE @language_id AS numeric(18, 0)

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    cmi.CONTEXT_MENU_ID,
    cmi.ACTION_ID,
    dbo.qp_context_menu_code(cmi.CONTEXT_MENU_ID) as CONTEXT_MENU_CODE,
    ba.CODE as ACTION_CODE,
    at.CODE AS ACTION_TYPE_CODE,
    dbo.qp_translate(cmi.NAME, @language_id) as NAME,
    cmi.[ORDER],
    cmi.ICON,
    cmi.ICON_DISABLED,
    cmi.BOTTOM_SEPARATOR
  FROM
    CONTEXT_MENU_ITEM cmi
  INNER JOIN
    backend_action AS ba
  ON
    cmi.ACTION_ID = ba.ID
  INNER JOIN
    ACTION_TYPE AS at
  ON
    ba.TYPE_ID = at.ID
  WHERE
    CONTEXT_MENU_ID = @menu_id
    and dbo.qp_is_action_accessible(@user_id, cmi.ACTION_ID) = 1
  ORDER BY
    [ORDER] asc
END
GO

CREATE PROCEDURE [dbo].[qp_get_context_menu_by_id]
  @user_id int,
  @menu_id int,
  @load_related_data bit = 0
AS
BEGIN
  DECLARE @context_menu_id AS int
  DECLARE @context_menu_code AS nvarchar(50)

  SELECT DISTINCT
    @context_menu_id = cm.ID,
    @context_menu_code = cm.CODE
  FROM
    CONTEXT_MENU AS cm
  INNER JOIN
    CONTEXT_MENU_ITEM AS cmi
  ON
    cm.ID = cmi.CONTEXT_MENU_ID
  WHERE
    cm.ID = @menu_id
    AND dbo.qp_is_action_accessible(@user_id, cmi.ACTION_ID) = 1

  IF (@context_menu_id IS NOT NULL)
    BEGIN
      SELECT
        @context_menu_id AS ID,
        @context_menu_code AS CODE

      IF (@load_related_data = 1)
        BEGIN
          EXEC qp_get_context_menu_items_list
            @user_id = @user_id,
            @menu_id = @context_menu_id
        END
    END
END
GO

CREATE PROCEDURE [dbo].[qp_get_context_menu_by_code]
  @user_id int,
  @menu_code nvarchar(50),
  @load_related_data bit = 0
AS
BEGIN
  DECLARE @menu_id AS int

  SET @menu_id = dbo.qp_context_menu_id(@menu_code)

  EXEC qp_get_context_menu_by_id
    @user_id = @user_id,
    @menu_id = @menu_id,
    @load_related_data = @load_related_data
END
GO

CREATE PROCEDURE [dbo].[qp_get_context_menus_list](@user_id int)
AS
BEGIN
  SELECT DISTINCT
    cm.ID,
    cm.CODE
  FROM
    CONTEXT_MENU AS cm
  INNER JOIN
    CONTEXT_MENU_ITEM AS cmi
  ON
    cm.ID = cmi.CONTEXT_MENU_ID
  WHERE
    dbo.qp_is_action_accessible(@user_id, cmi.ACTION_ID) = 1
  ORDER BY
    CODE ASC
END
GO

CREATE FUNCTION [dbo].[qp_action_visible](@user_id int, @entity_code nvarchar(50), @entity_id numeric, @action_code nvarchar(50)) returns bit
AS
BEGIN
  declare @result bit

  if @entity_id = 0
  begin
    set @result = 1
  end
  else
  begin
    declare @action_level int, @permitted_level int
    select @permitted_level = dbo.qp_entity_access_level(@user_id, @entity_code, @entity_id)

    select @action_level = pl.PERMISSION_LEVEL from BACKEND_ACTION ba
    INNER JOIN ACTION_TYPE at on ba.TYPE_ID = at.ID
    INNER JOIN PERMISSION_LEVEL pl on at.REQUIRED_PERMISSION_LEVEL_ID = pl.PERMISSION_LEVEL_ID
    where ba.CODE = @action_code

    if @permitted_level >= @action_level
      set @result = 1
    else
      set @result = 0
  end
  RETURN @result
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_status_list](@user_id int, @action_code nvarchar(50), @entity_id numeric)
AS
BEGIN
  DECLARE @entity_code nvarchar(50)
  select @entity_code = dbo.qp_entity_type_code(entity_type_id) from backend_action where code = @action_code

  SELECT
    ba.CODE,
    dbo.qp_action_visible(@user_id, @entity_code, @entity_id, ba.CODE) as visible
  FROM
    ACTION_TOOLBAR_BUTTON atb
    INNER JOIN BACKEND_ACTION ba on ba.ID = atb.ACTION_ID
    INNER JOIN ACTION_TYPE at on ba.TYPE_ID = at.ID
  WHERE
    atb.PARENT_ACTION_ID = dbo.qp_action_id(@action_code)
    AND at.items_affected = 1
END
GO

CREATE PROCEDURE [dbo].[qp_get_menu_status_list](@user_id int, @menu_code nvarchar(50), @entity_id numeric)
AS
BEGIN
  SELECT
    ba.CODE,
    dbo.qp_action_visible(@user_id, @menu_code, @entity_id, ba.CODE) as visible
  FROM
    CONTEXT_MENU_ITEM cmi
    INNER JOIN BACKEND_ACTION ba on ba.ID = cmi.ACTION_ID
  WHERE
    cmi.context_menu_id = dbo.qp_context_menu_id(@menu_code)
END
GO


CREATE PROCEDURE [dbo].[qp_real_content_list]
  @site_id numeric,
  @user_id  numeric,
  @permission_level numeric,
  @order_by varchar(256),
  @filter varchar(max),
  @select varchar(max)
AS
BEGIN
  declare @new_filter nvarchar(max)
  set @new_filter = @filter + ' and virtual_type = 0'
  exec qp_content_list @site_id, @user_id, @permission_level, @order_by, @new_filter, @select
END
GO

CREATE PROCEDURE [dbo].[qp_virtual_content_list]
  @site_id numeric,
  @user_id  numeric,
  @permission_level numeric,
  @order_by varchar(256),
  @filter varchar(max),
  @select varchar(max)
AS
BEGIN
  declare @new_filter nvarchar(max)
  set @new_filter = @filter + ' and virtual_type <> 0'
  exec qp_content_list @site_id, @user_id, @permission_level, @order_by, @new_filter, @select
END
GO

CREATE PROCEDURE [dbo].[qp_get_entity_type_by_id]
  @user_id numeric(18, 0),
  @entity_type_id int
AS
BEGIN
  DECLARE @language_id AS numeric(18, 0)

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    e.ID,
    dbo.qp_translate(e.NAME, @language_id) AS NAME,
    e.CODE,
    pe.ID AS PARENT_ID,
    pe.CODE AS PARENT_CODE,
    e.[ORDER],
    e.HAS_ITEM_NODES,
    e.[DISABLED],
    e.CANCEL_ACTION_ID,
    CASE WHEN (e.CANCEL_ACTION_ID IS NOT NULL) THEN
      [dbo].[qp_action_code](e.CANCEL_ACTION_ID)
    ELSE
      NULL
    END AS CANCEL_ACTION_CODE
  FROM
    ENTITY_TYPE AS e
  LEFT OUTER JOIN
    ENTITY_TYPE AS pe
  ON
    pe.ID = e.PARENT_ID
  WHERE
    e.ID = @entity_type_id
END
GO

CREATE PROCEDURE [dbo].[qp_get_entity_type_by_code]
  @user_id numeric(18, 0),
  @entity_type_code nvarchar(50)
AS
BEGIN
  DECLARE @entity_type_id AS int

  SET @entity_type_id = dbo.qp_entity_type_id(@entity_type_code)

  EXEC dbo.qp_get_entity_type_by_id
    @user_id = @user_id,
    @entity_type_id = @entity_type_id
END
GO

CREATE PROCEDURE [dbo].[qp_get_parent_entity_type_code_by_entity_type_code]
  @entity_type_code AS nvarchar(50),
  @parent_entity_type_code AS nvarchar(50) output
AS
BEGIN
  SELECT
    @parent_entity_type_code = pet.CODE
  FROM
    ENTITY_TYPE AS et
  INNER JOIN
    ENTITY_TYPE AS pet
  ON
    pet.ID = et.PARENT_ID
  WHERE
    et.CODE = @entity_type_code
END
GO

CREATE PROCEDURE [dbo].[qp_get_default_action_code_by_entity_type_code]
  @entity_type_code nvarchar(50),
  @default_action_code nvarchar(50) OUTPUT
AS
BEGIN
  SET @default_action_code = ''

  SELECT
    @default_action_code = ba.CODE
  FROM
    ENTITY_TYPE AS et
  INNER JOIN
    BACKEND_ACTION AS ba
  ON
    ba.ID = et.DEFAULT_ACTION_ID
  WHERE
    et.CODE = @entity_type_code
END
GO

CREATE PROCEDURE [dbo].[qp_get_view_type_by_id]
  @user_id numeric(18, 0),
  @view_type_id int
AS
BEGIN
  DECLARE @language_id AS numeric(18, 0)

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    ID,
    dbo.qp_translate(NAME, @language_id) AS NAME,
    CODE,
    ICON
  FROM
    VIEW_TYPE
  WHERE
    ID = @view_type_id
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_views_list_by_action_id]
  @user_id int,
  @action_id int
AS
BEGIN
  DECLARE @language_id numeric(18, 0)

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    av.ACTION_ID,
    vt.ID,
    vt.CODE,
    dbo.qp_translate(vt.NAME, @language_id) AS NAME,
    vt.ICON,
    av.CONTROLLER_ACTION_URL,
    av.PREVENT_DEFAULT_BEHAVIOR,
    av.[ORDER]
  FROM
    VIEW_TYPE AS vt
  INNER JOIN
    ACTION_VIEW AS av
  ON
    av.[TYPE_ID] = vt.ID
  WHERE
    av.ACTION_ID = @action_id
  ORDER BY
    [ORDER] ASC
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_views_list_by_action_code]
  @user_id int,
  @action_code nvarchar(50)
AS
BEGIN
  DECLARE @action_id AS int

  SET @action_id = dbo.qp_action_id(@action_code)

  EXEC qp_get_action_views_list_by_action_id
    @user_id = @user_id,
    @action_id = @action_id
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_type_by_id]
  @user_id numeric(18, 0),
  @action_type_id int
AS
BEGIN
  DECLARE @language_id AS numeric(18, 0)

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    ID,
    dbo.qp_translate(NAME, @language_id) AS NAME,
    CODE,
    REQUIRED_PERMISSION_LEVEL_ID,
    ITEMS_AFFECTED
  FROM
    ACTION_TYPE
  WHERE
    ID = @action_type_id
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_type_by_code]
  @user_id numeric(18, 0),
  @action_type_code nvarchar(50)
AS
BEGIN
  DECLARE @action_type_id AS int

  SET @action_type_id = dbo.qp_action_type_id(@action_type_code)

  EXEC dbo.qp_get_action_type_by_id
    @user_id = @user_id,
    @action_type_id = @action_type_id
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_type_code_by_action_code]
  @action_code nvarchar(50)
AS
BEGIN
  SELECT
    bat.CODE
  FROM
    BACKEND_ACTION AS ba
  INNER JOIN
    ACTION_TYPE AS bat
  ON
    bat.ID = ba.[TYPE_ID]
  WHERE
    ba.CODE = @action_code
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_by_id]
  @user_id numeric(18, 0),
  @action_id int,
  @load_related_data bit = 0
AS
BEGIN
  DECLARE @language_id AS numeric(18, 0)
  DECLARE @action_type_id AS int
  DECLARE @entity_type_id AS int
  DECLARE @default_view_type_id AS int

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    @action_type_id = [TYPE_ID],
    @entity_type_id = ENTITY_TYPE_ID,
    @default_view_type_id = DEFAULT_VIEW_TYPE_ID
  FROM
    BACKEND_ACTION
  WHERE
    ID = @action_id

  SELECT
    ID,
    [TYPE_ID],
    ENTITY_TYPE_ID,
    dbo.qp_translate(NAME, @language_id) AS NAME,
    dbo.qp_translate(SHORT_NAME, @language_id) AS SHORT_NAME,
    CODE,
    USER_CONTROL_FILE,
    CONTROLLER_ACTION_URL,
    dbo.qp_translate(CONFIRM_PHRASE, @language_id) AS CONFIRM_PHRASE,
    PARENT_ID,
    IS_INTERFACE,
    HAS_PRE_ACTION,
    IS_WINDOW,
    DEFAULT_VIEW_TYPE_ID,
    ALLOW_SEARCH,
    ALLOW_PREVIEW,
    WINDOW_HEIGHT,
    WINDOW_WIDTH,
    NEXT_SUCCESSFUL_ACTION_ID,
    CASE WHEN (NEXT_SUCCESSFUL_ACTION_ID IS NOT NULL) THEN
      [dbo].[qp_action_code](NEXT_SUCCESSFUL_ACTION_ID)
    ELSE
      NULL
    END AS NEXT_SUCCESSFUL_ACTION_CODE,
    NEXT_FAILED_ACTION_ID,
    CASE WHEN (NEXT_FAILED_ACTION_ID IS NOT NULL) THEN
      [dbo].[qp_action_code](NEXT_FAILED_ACTION_ID)
    ELSE
      NULL
    END AS NEXT_FAILED_ACTION_CODE
  FROM
    BACKEND_ACTION
  WHERE
    ID = @action_id

  IF (@load_related_data = 1 AND @action_type_id IS NOT NULL AND @entity_type_id IS NOT NULL)
    BEGIN
      EXEC qp_get_action_type_by_id
        @user_id = @user_id,
        @action_type_id = @action_type_id

      EXEC qp_get_entity_type_by_id
        @user_id = @user_id,
        @entity_type_id = @entity_type_id

      EXEC qp_get_view_type_by_id
        @user_id = @user_id,
        @view_type_id = @default_view_type_id

      EXEC qp_get_action_views_list_by_action_id
        @user_id = @user_id,
        @action_id = @action_id
    END
END
GO

CREATE PROCEDURE [dbo].[qp_get_action_by_code]
  @user_id numeric(18, 0),
  @action_code nvarchar(50),
  @load_related_data bit = 0
AS
BEGIN
  DECLARE @action_id AS int

  SET @action_id = dbo.qp_action_id(@action_code)

  EXEC dbo.qp_get_action_by_id
    @user_id = @user_id,
    @action_id = @action_id,
    @load_related_data = @load_related_data
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[qp_get_action_by_type_code_and_entity_type_code]
  @user_id numeric(18, 0),
  @action_type_code varchar(50),
  @entity_type_code varchar(50),
  @load_related_data bit = 0
AS
BEGIN
  DECLARE @action_id AS int

  SET NOCOUNT ON

  SELECT
    @action_id = ba.ID
  FROM
    BACKEND_ACTION AS ba
  INNER JOIN
    ACTION_TYPE AS bat
  ON
    bat.ID = ba.TYPE_ID
  INNER JOIN
    ENTITY_TYPE AS et
  ON
    et.ID = ba.ENTITY_TYPE_ID
  WHERE
    bat.CODE = @action_type_code
    AND et.CODE = @entity_type_code

  SET NOCOUNT OFF

  EXEC [dbo].[qp_get_action_by_id]
    @user_id = @user_id,
    @action_id = @action_id,
    @load_related_data = @load_related_data
END
GO

CREATE PROCEDURE [dbo].[qp_get_paged_data]
  @select_block nvarchar(max),
  @from_block nvarchar(max),
  @where_block nvarchar(max) = '',
  @order_by_block nvarchar(max),
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int = 0,
  @page_size int = 0,

  @use_security bit = 0,
  @user_id numeric(18,0) = 0,
  @group_id numeric(18,0) = 0,
  @start_level int = 2,
  @end_level int = 4,
  @entity_name nvarchar(100),
  @parent_entity_name nvarchar(100) = '',
  @parent_entity_id numeric(18,0) = 0,

  @insert_key varchar(200) = '<$_security_insert_$>'
AS
BEGIN
  SET NOCOUNT ON

  -- Получаем фильтр по правам
  DECLARE @security_sql AS nvarchar(max)
  SET @security_sql = ''

  IF (@use_security = 1)
    BEGIN
      EXEC dbo.qp_GetPermittedItemsAsQuery
        @user_id = @user_id,
        @group_id = @group_id,
        @start_level = @start_level,
        @end_level = @end_level,
        @entity_name = @entity_name,
        @parent_entity_name = @parent_entity_name,
        @parent_entity_id = @parent_entity_id,
        @SQLOut = @security_sql OUTPUT

      SET @from_block = REPLACE(@from_block, @insert_key, @security_sql)
    END

  -- Получаем общее количество записей
  DECLARE @sql_count AS nvarchar(max)

  if (@count_only = 1)
  BEGIN
    SET @sql_count = ''
    SET @sql_count = @sql_count + 'SELECT ' + CHAR(13)
    SET @sql_count = @sql_count + '   @record_count = COUNT(*) ' + CHAR(13)
    SET @sql_count = @sql_count + ' FROM' + CHAR(13)
    SET @sql_count = @sql_count + @from_block + CHAR(13)
    IF (LEN(@where_block) > 0)
      BEGIN
        SET @sql_count = @sql_count + 'WHERE ' + CHAR(13)
        SET @sql_count = @sql_count + @where_block + CHAR(13)
      END


    EXEC sp_executesql
      @sql_count,
      N'@record_count int OUTPUT',
      @record_count = @total_records OUTPUT
  END

  -- Задаем номер начальной записи по умолчанию
  IF (@start_row <= 0)
    BEGIN
      SET @start_row = 1
    END

  -- Задаем номер конечной записи
  DECLARE @end_row AS int
  if (@page_size = 0)
    SET @end_row = 0
  else
    SET @end_row = @start_row + @page_size - 1

  IF (@count_only = 0)
    BEGIN
      -- Возвращаем результат
      DECLARE @sql_result AS nvarchar(max)

      SET @sql_result = ''
      SET @sql_result = @sql_result + 'WITH PAGED_DATA_CTE' + CHAR(13)
      SET @sql_result = @sql_result + 'AS' + CHAR(13)
      SET @sql_result = @sql_result + '(' + CHAR(13)
      SET @sql_result = @sql_result + ' SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '   c.*, ' + CHAR(13)
      SET @sql_result = @sql_result + '   ROW_NUMBER() OVER (ORDER BY ' + @order_by_block + ') AS ROW_NUMBER, COUNT(*) OVER() AS ROWS_COUNT ' + CHAR(13)
      SET @sql_result = @sql_result + ' FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' ( ' + CHAR(13)
      SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '   ' + @select_block + CHAR(13)
      SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
      SET @sql_result = @sql_result + '   ' + @from_block + CHAR(13)
      IF (LEN(@where_block) > 0)
        BEGIN
          SET @sql_result = @sql_result + '   WHERE' + CHAR(13)
          SET @sql_result = @sql_result + '   ' + @where_block + CHAR(13)
        END
      SET @sql_result = @sql_result + ' ) AS c ' + CHAR(13)
      SET @sql_result = @sql_result + ')' + CHAR(13) + CHAR(13)

      SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + ' * ' + CHAR(13)
      SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' PAGED_DATA_CTE' + CHAR(13)
      IF (@end_row > 0 or @start_row > 1)
      BEGIN
        SET @sql_result = @sql_result + 'WHERE 1 = 1' + CHAR(13)
        IF @start_row > 1
          SET @sql_result = @sql_result + ' AND ROW_NUMBER >= ' + CAST(@start_row AS nvarchar) + ' '
        IF @end_row > 0
          SET @sql_result = @sql_result + ' AND ROW_NUMBER <= ' + CAST(@end_row AS nvarchar) + ' ' + CHAR(13)
      END
      SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
      SET @sql_result = @sql_result + ' ROW_NUMBER ASC ' + CHAR(13)

      print(@sql_result)
      EXEC(@sql_result)
    END

  SET NOCOUNT OFF
END
GO

CREATE PROCEDURE [dbo].[qp_paged_contents_list]
  @user_id numeric(18,0),
  @permission_level numeric(18,0),
  @order_by varchar(256) = 'content_id',
  @filter varchar(256) = '',
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int,
  @selected_content_ids AS nvarchar(max) = NULL
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @use_security AS bit
  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @processed_order_by_block AS nvarchar(max)
  DECLARE @default_sort_column_name AS nvarchar(255)

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    set @use_security = 1

  SET @default_sort_column_name = 'CONTENT_ID'

  SET @use_custom_selection = 0
  IF (@selected_content_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  SET NOCOUNT ON
  SET @select_block = 'c.*,
    cg.NAME AS CONTENT_GROUP_NAME,
    mu.[USER_ID] AS MODIFIER_USER_ID,
    mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
    mu.LAST_NAME AS MODIFIER_LAST_NAME,
    mu.EMAIL AS MODIFIER_EMAIL,
    mu.[LOGIN] AS MODIFIER_LOGIN,';

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.CONTENT_ID IS NOT NULL) THEN 1 ELSE 0 END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)


  SET @from_block = '   CONTENT AS c
  '
  if @use_security = 1
    SET @from_block = @from_block +
    'INNER JOIN
      (
        SELECT
          sec.content_id AS ALLOWED_CONTENT_ID,
          sec.permission_level AS PERMISSION_LEVEL
        FROM
          (<$_security_insert_$>) AS sec
      ) AS pl
    ON
      c.CONTENT_ID = pl.ALLOWED_CONTENT_ID
    '

  SET @from_block = @from_block +
  'LEFT OUTER JOIN USERS AS mu ON mu.USER_ID = c.LAST_MODIFIED_BY
  LEFT OUTER JOIN CONTENT_GROUP_NAME AS cg ON cg.id = c.CONTENT_GROUP_ID'

  IF (@use_custom_selection = 1)
  BEGIN
    SET @from_block = @from_block + ' LEFT OUTER JOIN (SELECT CONTENT_ID from CONTENT where CONTENT_ID in (' + @selected_content_ids + ')) AS cis ON c.CONTENT_ID = cis.CONTENT_ID ' + CHAR(13)
  END

  SET @where_block = @filter
  IF (LEN(@order_by) > 0)
    BEGIN
      SET @processed_order_by_block = UPPER(@order_by)
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '  ', ' ')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '[', '')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, ']', '')

      IF (@processed_order_by_block = (@default_sort_column_name + ' ASC'))
        BEGIN
          SET @order_by_block = 'is_selected DESC, ' + @order_by
        END
      ELSE IF (@processed_order_by_block = (@default_sort_column_name + ' DESC'))
        BEGIN
          SET @order_by_block = 'is_selected ASC, ' + @order_by
        END
      ELSE
        BEGIN
          SET @order_by_block = @order_by
        END
    END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content',
    @parent_entity_name = '',
    @parent_entity_id = 0

  SET NOCOUNT OFF
END
GO

CREATE PROCEDURE [dbo].[qp_paged_sites_list]
  @user_id numeric(18,0),
  @permission_level numeric(18,0),
  @order_by varchar(256) = 'site_id',
  @filter varchar(256) = '',
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @use_security AS bit
  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    set @use_security = 1

  SET @select_block = '   s.SITE_ID,
    s.SITE_NAME,
    s.[DESCRIPTION],
    s.script_language,
    s.ALLOW_USER_SESSIONS,
    s.ASSEMBLE_FORMATS_IN_LIVE,
    s.IS_LIVE,
    s.DNS,
    s.STAGE_DNS,
    s.UPLOAD_URL,
    s.use_absolute_upload_url,
    s.upload_url_prefix,
    s.UPLOAD_DIR,
    s.LIVE_VIRTUAL_ROOT,
    s.LIVE_DIRECTORY,
    s.FORCE_TEST_DIRECTORY,
    s.TEST_DIRECTORY,
    s.STAGE_VIRTUAL_ROOT,
    s.STAGE_DIRECTORY,
    s.ASSEMBLY_PATH,
    s.STAGE_ASSEMBLY_PATH,
    s.FORCE_ASSEMBLE,
    s.stage_edit_object_border,
    s.stage_edit_field_border,
    s.stage_edit_object_type_mask,
    s.IMPORT_MAPPING_TO_DB,
    s.PROCEED_MAPPING_WITH_DB,
    s.CONNECTION_STRING_NAME,
    s.REPLACE_URLS,
    s.USE_LONG_URLS,
    s.NAMESPACE,
    s.CONTEXT_CLASS_NAME,
    s.CREATED,
    s.MODIFIED,
    s.LAST_MODIFIED_BY,
    s.LOCKED,
    s.LOCKED_BY,
    lu.[USER_ID] AS LOCKER_USER_ID,
    lu.FIRST_NAME AS LOCKER_FIRST_NAME,
    lu.LAST_NAME AS LOCKER_LAST_NAME,
    lu.EMAIL AS LOCKER_EMAIL,
    lu.[LOGIN] AS LOCKER_LOGIN,
    mu.[USER_ID] AS MODIFIER_USER_ID,
    mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
    mu.LAST_NAME AS MODIFIER_LAST_NAME,
    mu.EMAIL AS MODIFIER_EMAIL,
    mu.[LOGIN] AS MODIFIER_LOGIN';

  SET @from_block = '   SITE AS s
  '
  if @use_security = 1
    SET @from_block = @from_block +
    'INNER JOIN
      (
        SELECT
          sec.site_id AS ALLOWED_SITE_ID,
          sec.permission_level AS PERMISSION_LEVEL
        FROM
          (<$_security_insert_$>) AS sec
      ) AS pl
    ON
      s.SITE_ID = pl.ALLOWED_SITE_ID'

  SET @from_block = @from_block +
  'LEFT OUTER JOIN
    USERS AS lu
  ON
    lu.USER_ID = s.LOCKED_BY
  LEFT OUTER JOIN
    USERS AS mu
  ON
    mu.USER_ID = s.LAST_MODIFIED_BY'

  SET @where_block = @filter
  SET @order_by_block = @order_by

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'site',
    @parent_entity_name = '',
    @parent_entity_id = 0

  SET NOCOUNT OFF
END
GO

CREATE PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'STATUS_TYPE_NAME ASC, content_item_id ASC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @m2m_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @default_sort_column_name AS nvarchar(255)
  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @default_sort_column_name = 'CONTENT_ITEM_ID'
  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  -- Создаем курсор, содержащий список связей
  DECLARE rel_cursor CURSOR
    LOCAL
    FORWARD_ONLY
    STATIC
    READ_ONLY
  FOR
    SELECT
      ca.ATTRIBUTE_ID,
      ca.ATTRIBUTE_NAME,
      rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
      rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
      rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
      rca.CONTENT_ID AS RELATED_CONTENT_ID,
      ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ID ASC) AS 'RELATED_COUNT'
    FROM
      CONTENT_ATTRIBUTE AS ca
    LEFT OUTER JOIN
      CONTENT_ATTRIBUTE AS rca
    ON
      rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
    WHERE
      ca.CONTENT_ID = @content_id
      AND ca.view_in_list = 1
    ORDER BY
      ca.permanent_flag DESC,
      ca.attribute_order ASC

  -- Открываем курсор
  OPEN rel_cursor

  -- Считываем курсор
  FETCH NEXT FROM rel_cursor
  INTO
    @attribute_id,
    @attribute_name,
    @rel_attribute_id,
    @rel_attribute_type_id,
    @rel_attribute_name,
    @rel_content_id,
    @rel_count

  WHILE (@@FETCH_STATUS = 0)
    BEGIN
      SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

      IF (@rel_attribute_id IS NOT NULL)
        BEGIN
          declare @current_block nvarchar(512)
          set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
          set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
          if (@rel_count > 1)
          begin
            set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
            set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
          end

          SET @related_select_block = @related_select_block + ' '
          SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
          if @rel_attribute_type_id in (9, 10)
            SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
          SET @related_select_block = @related_select_block + @current_block
          SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
          SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
      content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
      @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
        END

      FETCH NEXT FROM rel_cursor
      INTO
        @attribute_id,
        @attribute_name,
        @rel_attribute_id,
        @rel_attribute_type_id,
        @rel_attribute_name,
        @rel_content_id,
        @rel_count
    END

  -- Закрываем и уничтожаем курсор
  CLOSE rel_cursor
  DEALLOCATE rel_cursor

  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  COALESCE(ci.status_type_id, c.status_type_id) AS workflow_status_type_id,
  COALESCE(c2.status_type_id, c.status_type_id) AS current_status_type_id,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END
  SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + ' AS c2 ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' c2.content_item_id = c.content_item_id ' + CHAR(13)

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many --
  IF(@m2m_params IS NOT NULL)
    BEGIN
      declare @m2m_select as varchar(max)
      set @m2m_select = 'select distinct item_id from dbo.item_link_united where '
      declare @m2m_condition as varchar(max)
      declare @m2m_i int
      set @m2m_i = 0

      DECLARE m2m_param_cursor CURSOR
          LOCAL
          FORWARD_ONLY
          STATIC
          READ_ONLY
        FOR
          select
            '(link_id = ' + T.f.value('./@lid', 'varchar(10)') +
            ' AND linked_item_id in (' + T.f.value('./@iids', 'varchar(max)') + '))' from
          @m2m_params.nodes('/m2m/f') as T(f)

      OPEN m2m_param_cursor

      FETCH NEXT FROM m2m_param_cursor
        INTO @m2m_condition

      WHILE (@@FETCH_STATUS = 0)
        BEGIN
          if(@m2m_i > 0)
            SET @m2m_select = @m2m_select + ' OR '
          SET @m2m_select = @m2m_select + @m2m_condition
          SET @m2m_i = @m2m_i + 1

          FETCH NEXT FROM m2m_param_cursor
            INTO @m2m_condition
        END

      -- Закрываем и уничтожаем курсор
      CLOSE m2m_param_cursor
      DEALLOCATE m2m_param_cursor

      SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
      SET @from_block = @from_block + '(' + @m2m_select + ') as qp_m2miids'  + CHAR(13)
      SET @from_block = @from_block + 'ON c.content_item_id = qp_m2miids.item_id '  + CHAR(13)
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  IF(@fts_is_incorrect_query = 1)
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND 1 = 0'
    ELSE
      SET @where_block = '1 = 0'
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @processed_order_by_block = UPPER(@order_by)
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '  ', ' ')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '[', '')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, ']', '')

      IF (@processed_order_by_block = (@default_sort_column_name + ' ASC'))
        BEGIN
          SET @order_by_block = 'is_selected DESC, ' + @order_by
        END
      ELSE IF (@processed_order_by_block = (@default_sort_column_name + ' DESC'))
        BEGIN
          SET @order_by_block = 'is_selected ASC, ' + @order_by
        END
      ELSE
        BEGIN
          SET @order_by_block = @order_by
        END
    END
  ELSE
    BEGIN
      SET @order_by_block = 'STATUS_TYPE_NAME ASC, content_item_id ASC '
    END


  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)
  if @parent_level = 0
  BEGIN
    SET @where_block = @where_block + ' AND 1 = 0'
  END


  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = '',
    @parent_entity_id = 0

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END
GO

CREATE PROCEDURE [dbo].[qp_get_folders_tree]
  @user_id numeric(18,0),
  @parent_entity_id numeric(18,0),
  @is_site bit = 1,
  @parent_folder_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN

  DECLARE @security_sql AS nvarchar(max), @sql_result AS nvarchar(max)
  DECLARE @entity_name AS nvarchar(50), @parent_entity_name AS nvarchar(50)
  DECLARE @use_security bit, @parent_level numeric, @block_filter nvarchar(10)

  SET @entity_name = case @is_site when 1 then 'folder' else 'content_folder' end
  print @entity_name
  SET @parent_entity_name = case @is_site when 1 then 'site' else 'content' end
  print @parent_entity_name

  set @use_security = 1
  set @block_filter = ''
  if @entity_name = 'content_folder'
  begin
    set @use_security = 0
    select @parent_level = dbo.qp_entity_access_level(@user_id, @parent_entity_name, @parent_entity_id)
    if @parent_level = 0
      set @block_filter = ' AND 1 = 0 '
  end

  if @use_security = 1
    EXEC dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
      @start_level = @permission_level,
      @end_level = 4,
      @entity_name = @entity_name,
      @parent_entity_name = @parent_entity_name,
      @parent_entity_id = @parent_entity_id,
      @SQLOut = @security_sql OUTPUT

  SET @sql_result = ''
  SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + ' c.FOLDER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
      SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
      SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '     COUNT(FOLDER_ID) ' + CHAR(13)
      SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
      SET @sql_result = @sql_result + '     ' + @entity_name + CHAR(13)
      SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
      SET @sql_result = @sql_result + '     PARENT_FOLDER_ID = c.FOLDER_ID ' + CHAR(13)
      SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
      SET @sql_result = @sql_result + '   1 ' + CHAR(13)
      SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
      SET @sql_result = @sql_result + '   0 ' + CHAR(13)
      SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' @record_count = COUNT(c.FOLDER_ID) ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
  SET @sql_result = @sql_result + ' ' + @entity_name + ' AS c '+ CHAR(13)
  if @use_security = 1
  BEGIN
    SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
    SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
    SET @sql_result = @sql_result + 'ON ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.folder_id = pi.' + @entity_name + '_id ' + CHAR(13)
  END
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
  IF (@parent_folder_id IS NOT NULL)
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID = ' + CAST(@parent_folder_id AS varchar) + ' ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID IS NULL ' + CHAR(13)
      SET @sql_result = @sql_result + '   AND c.' + @parent_entity_name + '_ID = ' + CAST(@parent_entity_id AS varchar) + ' '  + CHAR(13)
    END
  SET @sql_result = @sql_result + @block_filter
  IF (@count_only = 0)
    BEGIN
    SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.NAME ASC '
  END

  IF (@count_only = 0)
    BEGIN
      print @sql_result
      EXEC(@sql_result)

      SET @total_records = @@ROWCOUNT
    END
  ELSE
    BEGIN
      print @sql_result
      EXEC sp_executesql
        @sql_result,
        N'@record_count int OUTPUT',
        @record_count = @total_records OUTPUT
    END
END
GO

CREATE PROCEDURE [dbo].[qp_get_articles_tree]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @article_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @filter varchar(max) = '',
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN
  DECLARE @attribute_name AS nvarchar(255)
  DECLARE @rel_attribute_name AS nvarchar(255)

  DECLARE @security_sql AS nvarchar(max)
  DECLARE @sql_result AS nvarchar(max)
  DECLARE @use_security bit, @parent_level numeric


  SELECT TOP 1
    @attribute_name = ATTRIBUTE_NAME,
    @rel_attribute_name = REL_ATTRIBUTE_NAME
  FROM
    dbo.qp_get_article_relation_columns(@content_id)

  IF (@@ROWCOUNT = 1)
    BEGIN
      DECLARE @title_field_name AS nvarchar(255)

      SELECT TOP 1
        @title_field_name = ATTRIBUTE_NAME
      FROM
        CONTENT_ATTRIBUTE
      WHERE
        CONTENT_ID = @content_id AND view_in_list = 1
      ORDER BY
        ATTRIBUTE_ORDER ASC

      select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id
      select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)
      if @parent_level = 0
        SET @filter = '1 = 0'

      if @use_security = 1
        EXEC dbo.qp_GetPermittedItemsAsQuery
          @user_id = @user_id,
          @group_id = 0,
          @start_level = @permission_level,
          @end_level = 4,
          @entity_name = 'content_item',
          @parent_entity_name = 'content',
          @parent_entity_id = @content_id,
          @SQLOut = @security_sql OUTPUT

      SET @sql_result = ''
      SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.[' + @title_field_name + '] AS CONTENT_ITEM_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.[' + @rel_attribute_name + '] AS CONTENT_ITEM_ALIAS, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.VISIBLE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.STATUS_TYPE_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.CONTENT_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.locked_by, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.ARCHIVE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.not_for_replication, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.SCHEDULE_NEW_VERSION_PUBLICATION, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.splitted, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.PERMANENT_LOCK, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.LOCKED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] AS PARENT_CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
          SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
          SET @sql_result = @sql_result + '     COUNT(CONTENT_ITEM_ID) ' + CHAR(13)
          SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
          SET @sql_result = @sql_result + '     content_' + CAST(@content_id AS varchar)  + '_united ' + CHAR(13)
          SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
          SET @sql_result = @sql_result + '     [' + @attribute_name + '] = c.CONTENT_ITEM_ID ' + CHAR(13)
          IF @filter <> ''
            SET @sql_result = @sql_result + '     AND ' + @filter + CHAR(13)
          SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
          SET @sql_result = @sql_result + '   1 ' + CHAR(13)
          SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
          SET @sql_result = @sql_result + '   0 ' + CHAR(13)
          SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[USER_ID] AS LOCKER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.FIRST_NAME AS LOCKER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.LAST_NAME AS LOCKER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.EMAIL AS LOCKER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[LOGIN] AS LOCKER_LOGIN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' @record_count = COUNT(c.CONTENT_ITEM_ID) ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)

      if @use_security = 1
      BEGIN
        SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
        SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
        SET @sql_result = @sql_result + 'ON ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
      END

      SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' CONTENT_ITEM AS ci ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS lu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
      IF (@article_id IS NOT NULL)
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] = ' + CAST(@article_id AS varchar) + ' ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] IS NULL ' + CHAR(13)
        END
      IF @filter <> ''
        SET @sql_result = @sql_result + ' AND ' + @filter + CHAR(13)

      IF (@count_only = 0)
        BEGIN
        SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID ASC '
      END

      IF (@count_only = 0)
        BEGIN
          EXEC(@sql_result)

          SET @total_records = @@ROWCOUNT
        END
      ELSE
        BEGIN
          EXEC sp_executesql
            @sql_result,
            N'@record_count int OUTPUT',
            @record_count = @total_records OUTPUT
        END
    END
  ELSE
    BEGIN
      SET @total_records = 0
    END
END
GO

CREATE PROCEDURE [dbo].[qp_get_related_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @article_id numeric(18,0) = 0,
  @field_id  numeric(18,0) = 0,
  @selection_mode AS tinyint = 0,
  @selected_article_ids AS nvarchar(max) = '0',
  @permission_level numeric(18,0),
  @filter varchar(max) = ''
AS
BEGIN
  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @link_id AS numeric(18,0) -- идентификатор связи для полей со связью многие-ко-многим
  DECLARE @is_many_to_many AS bit -- признак наличия связи многие-ко-многим
  DECLARE @title_field_name AS nvarchar(255) -- название поля, в котором хранится заголовок статьи
  DECLARE @alias_field_name AS nvarchar(255) -- название поля, в котором хранится заголовок статьи
  DECLARE @use_security bit, @parent_level numeric

  DECLARE @security_sql AS nvarchar(max)
  DECLARE @sql_result AS nvarchar(max)

  DECLARE @SELECTION_MODE_ALL AS tinyint
  DECLARE @SELECTION_MODE_ONLY_SELECTED AS tinyint

  SET @SELECTION_MODE_ALL = 0
  SET @SELECTION_MODE_ONLY_SELECTED = 1

  if @selected_article_ids is null or @selected_article_ids = ''
    set @selected_article_ids = '0'


  -- Получаем свойства связи
  SELECT
    @link_id = ca.link_id,
    @alias_field_name = rca.ATTRIBUTE_NAME
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.ATTRIBUTE_ID = @field_id

  SET @is_many_to_many = 0
  IF (@link_id IS NOT NULL)
    BEGIN
      SET @is_many_to_many = 1
    END

  -- Получаем название поля, в котором хранится заголовок статьи
  SET @title_field_name = ''
  IF (@is_many_to_many = 1  OR @field_id = 0)
    BEGIN
      SET @title_field_name = dbo.qp_get_display_field(@content_id, 0)
    END
  ELSE
    BEGIN
      SET @title_field_name = @alias_field_name
    END

  select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id
  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)
  if @parent_level = 0
    SET @filter = '1 = 0'

  -- Возвращаем простой список статей
  if @use_security = 1
    EXEC dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
      @start_level = @permission_level,
      @end_level = 4,
      @entity_name = 'content_item',
      @parent_entity_name = 'content',
      @parent_entity_id = @content_id,
      @SQLOut = @security_sql OUTPUT

  SET @sql_result = ''
  SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
  SET @sql_result = @sql_result + ' c.content_item_id AS id, ' + CHAR(13)
  IF (LEN(@title_field_name) > 0)
    BEGIN
      SET @sql_result = @sql_result + ' c.[' + @title_field_name + '] AS title, ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' '''' AS title, ' + CHAR(13)
    END
  SET @sql_result = @sql_result + ' CAST(( ' + CHAR(13)

  SET @sql_result = @sql_result + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
  SET @sql_result = @sql_result + '     1 ' + CHAR(13)
  SET @sql_result = @sql_result + '   ELSE ' + CHAR(13)
  SET @sql_result = @sql_result + '     0 ' + CHAR(13)
  SET @sql_result = @sql_result + '   END ' + CHAR(13)

  SET @sql_result = @sql_result + ' ) AS bit) AS is_selected ' + CHAR(13)
  SET @sql_result = @sql_result + 'FROM  ' + CHAR(13)
  SET @sql_result = @sql_result + ' content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)

  if @use_security = 1
  BEGIN
    SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
    SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
    SET @sql_result = @sql_result + 'ON ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END

  IF (@selection_mode = @SELECTION_MODE_ONLY_SELECTED)
    BEGIN
      SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
    END
  SET @sql_result = @sql_result + ' ( ' + CHAR(13)
  SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
  SET @sql_result = @sql_result + '     content_item_id ' + CHAR(13)
  SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
  SET @sql_result = @sql_result + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
  SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
  SET @sql_result = @sql_result + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
  SET @sql_result = @sql_result + ' ) AS cis ' + CHAR(13)
  SET @sql_result = @sql_result + 'ON ' + CHAR(13)
  SET @sql_result = @sql_result + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
  If @filter <> ''
    SET @sql_result = @sql_result + 'WHERE ' +  @filter + CHAR(13)
  SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
  SET @sql_result = @sql_result + ' c.content_item_id ASC ' + CHAR(13)
  print(@sql_result)
  EXEC(@sql_result)
END
GO

CREATE PROCEDURE [dbo].[qp_get_article_alias]
  @content_id numeric(18,0),
  @article_id numeric(18,0),
  @alias nvarchar(255) output
AS
  DECLARE @aliasColumnName nvarchar(255)
  DECLARE @sql_result AS nvarchar(max)

  SET @aliasColumnName = NULL

  SELECT TOP 1
    @aliasColumnName = REL_ATTRIBUTE_NAME
  FROM
    dbo.qp_get_article_relation_columns(@content_id)

  SET @sql_result = '
  SELECT
    @alias = CAST([' + @aliasColumnName + '] AS nvarchar(255))
  FROM
    content_' + CAST(@content_id AS varchar) + '
  WHERE
    content_item_id = ' + CAST(@article_id as varchar) + ' '

  EXEC sp_executesql
    @sql_result, N'@alias nvarchar(255) out', @alias out
GO

CREATE  PROCEDURE [dbo].[qp_get_base_field]
  @field_id numeric(18,0),
  @article_id numeric(18,0)
AS
BEGIN

  declare @content_id numeric
  declare @field_name nvarchar(255)
  declare @virtual_type int
  select @field_name = attribute_name, @content_id = content_id from content_attribute where attribute_id = @field_id
  select @virtual_type = virtual_type from content where content_id = @content_id

  if @virtual_type = 1
    select persistent_attr_id as id from content_attribute where attribute_id = @field_id
  else if @virtual_type = 2
    select union_attr_id as id from union_attrs ua inner join content_attribute ca on ua.union_attr_id = ca.attribute_id where virtual_attr_id = @field_id and ca.content_id in (select content_id from content_item where content_item_id = @article_id)
  else if @virtual_type = 3
    select attribute_id as id from content_attribute where attribute_name = @field_name and content_id in (select real_content_id from user_query_contents where virtual_content_id = @content_id)
  else
    select @field_id as id
END
GO

CREATE procedure [dbo].[qp_get_parent_entity_id]
  @entity_id numeric(18,0),
  @entity_type_code nvarchar(50),
  @parent_entity_id numeric(18,0) OUTPUT
AS
BEGIN
  SET @parent_entity_id = NULL

  DECLARE @source AS nvarchar(50)
  DECLARE @id_field AS nvarchar(50)
  DECLARE @parent_id_field AS nvarchar(50)

  SELECT
    @source = [SOURCE],
    @id_field = ID_FIELD,
    @parent_id_field = PARENT_ID_FIELD
  FROM
    ENTITY_TYPE
  WHERE
    CODE = @entity_type_code

  IF (@source IS NOT NULL AND @id_field IS NOT NULL)
    BEGIN
      DECLARE @sql AS nvarchar(800)

      SET @sql = ''
      SET @sql = @sql + 'SELECT ' + CHAR(13)
      SET @sql = @sql + ' @parent_id = ' + @parent_id_field + ' ' + CHAR(13)
      SET @sql = @sql + 'FROM ' + CHAR(13)
      SET @sql = @sql + ' ' + @source + ' ' + CHAR(13)
      SET @sql = @sql + 'WHERE ' + CHAR(13)
      SET @sql = @sql + ' ' + @id_field + ' = ' + CAST(@entity_id AS varchar) + ' '

      EXEC sp_executesql @sql,
        N'@parent_id numeric(18,0) OUTPUT',
        @parent_id = @parent_entity_id OUTPUT
    END
END
GO

CREATE procedure [dbo].[qp_get_recurring_parent_entity_id]
  @entity_id numeric,
  @entity_type_code nvarchar(255),
  @parent_entity_id numeric output
AS
BEGIN
  set @parent_entity_id = null
  DECLARE @source nvarchar(50), @id_field nvarchar(50), @recurring_id_field nvarchar(50)

  SELECT @source = [SOURCE], @id_field = ID_FIELD, @recurring_id_field = RECURRING_ID_FIELD FROM ENTITY_TYPE WHERE CODE = @entity_type_code

  IF (@source IS NOT NULL AND @id_field IS NOT NULL AND @recurring_id_field IS NOT NULL)
  BEGIN
    DECLARE @sql nvarchar(800)
    SET @sql = 'SELECT @parent_id = ' + @recurring_id_field + ' FROM ' + @source + ' WHERE ' + @id_field + ' = ' + CAST(@entity_id AS varchar)
    EXEC sp_executesql @sql, N'@parent_id decimal OUTPUT', @parent_id = @parent_entity_id OUTPUT
  END
END
GO

CREATE FUNCTION [dbo].[qp_get_self_relation_field_id] (@contentId numeric)
RETURNS numeric
AS
BEGIN
  declare @result numeric
  SELECT @result = ATTRIBUTE_ID FROM dbo.qp_get_article_relation_columns(@contentId)
  RETURN @result
END
GO

CREATE procedure [dbo].[qp_get_parent_entity_ids_for_tree]
  @entityIds nvarchar(1024),
  @entityTypeCode nvarchar(255)
AS
BEGIN
  DECLARE @sql nvarchar(max)
  set @sql = ''

  if @entityIds = ''
    set @entityIds = '0'

  IF @entityTypeCode = 'article'
  BEGIN
    declare @contentId numeric, @title nvarchar(255)
    DECLARE @contentSql nvarchar(max)
    SET @contentSql = 'select @contentId = content_id from content_item where content_item_id in (' + @entityIds + ')'
    EXEC sp_executesql @contentSql, N'@contentId decimal OUTPUT', @contentId = @contentId OUTPUT
    select @title = attribute_name from content_attribute where attribute_id = dbo.qp_get_self_relation_field_id(@contentId)
    set @sql = 'select distinct [' + @title + '] from content_' + cast(@contentId as nvarchar) + '_united where [' + @title + '] is not null and content_item_id in (' + @entityIds + ')'
  END
  ELSE
  BEGIN

    DECLARE @source nvarchar(50), @id_field nvarchar(50), @recurring_id_field nvarchar(50)

    SELECT @source = [SOURCE], @id_field = ID_FIELD, @recurring_id_field = RECURRING_ID_FIELD FROM ENTITY_TYPE WHERE CODE = @entityTypeCode

    IF (@source IS NOT NULL AND @id_field IS NOT NULL AND @recurring_id_field IS NOT NULL)
    BEGIN
      SET @sql = 'SELECT distinct ' + @recurring_id_field + ' FROM ' + @source + ' WHERE ' + @id_field + ' in (' + @entityIds + ') and ' + @recurring_id_field + ' is not null'
    END
  END

  IF @sql <> ''
    EXEC sp_executesql @sql
END
GO

CREATE PROCEDURE [dbo].[qp_get_entity_title]
  @entity_id numeric(18,0),
  @entity_type_code nvarchar(50),
  @parent_entity_id numeric(18,0),
  @title nvarchar(255) output
AS
BEGIN
  IF (@entity_type_code = 'virtual_article')
    BEGIN
      EXEC qp_get_article_title @entity_id, @parent_entity_id, @title OUT
    END
  ELSE IF (@entity_type_code = 'article' OR @entity_type_code = 'archive_article')
    BEGIN
      DECLARE @content_id AS numeric(18,0)

      SELECT
        @content_id = content_id
      FROM
        content_item
      WHERE
        CONTENT_ITEM_ID = @entity_id

      EXEC qp_get_article_title @entity_id, @content_id, @title OUT
    END
  ELSE
    BEGIN
      DECLARE @source AS nvarchar(50)
      DECLARE @id_field AS nvarchar(50)
      DECLARE @title_field AS nvarchar(50)

      SELECT
        @source = [SOURCE],
        @id_field = ID_FIELD,
        @title_field = TITLE_FIELD
      FROM
        ENTITY_TYPE
      WHERE
        CODE = @entity_type_code

      IF (@source IS NOT NULL AND @id_field IS NOT NULL)
      BEGIN
        DECLARE @sql nvarchar(800)
        SET @sql = 'SELECT @title = ' + @title_field + ' FROM ' + @source + ' WHERE ' + @id_field + ' = ' + CAST(@entity_id AS varchar)

        EXEC sp_executesql @sql, N'@title nvarchar(255) OUTPUT', @title = @title OUTPUT
      END
    END
END
GO

CREATE PROCEDURE [dbo].[qp_get_breadcrumbs]
  @user_id numeric(18,0),
  @entity_type_code nvarchar(50),
  @entity_id numeric(18,0) = 0,
  @parent_entity_id numeric(18,0) = NULL,
  @one_level bit = 0
AS
BEGIN
  DECLARE @result table
  (
    ID numeric(18,0),
    PARENT_ID numeric(18,0),
    CODE nvarchar(50),
    NAME nvarchar(50),
    TITLE nvarchar(255),
    IS_FOLDER bit,
    ACTION_CODE nvarchar(50),
    FOLDER_ACTION_CODE nvarchar(50)
  )

  DECLARE @language_id AS numeric(18,0)
  DECLARE @id AS numeric(18,0)
  DECLARE @parent_id AS numeric(18,0)
  DECLARE @code AS nvarchar(50)
  DECLARE @title AS nvarchar(255)
  DECLARE @name AS nvarchar(50)
  DECLARE @recurring_id_field AS nvarchar(50)
  DECLARE @recurring_id AS numeric(18,0)
  DECLARE @default_action_code AS nvarchar(50)
  DECLARE @folder_default_action_code AS nvarchar(50)
  DECLARE @entity_exist AS bit
  DECLARE @level as int

  SET @language_id = dbo.qp_language(@user_id)

  IF (@entity_id != 0)
    BEGIN
      SET @level = 0
      SET @id = @entity_id
      SET @code = @entity_type_code
      SET @parent_id = @parent_entity_id
    END
  ELSE
    BEGIN
      SET @level = 1
      SET @id = @parent_entity_id

      EXEC qp_get_parent_entity_type_code_by_entity_type_code
        @entity_type_code = @entity_type_code,
        @parent_entity_type_code = @code out

      SET @parent_id = NULL
    END

  WHILE (@code IS NOT NULL)
    BEGIN
      SET @title = ''

      SELECT
        @name = NAME,
        @recurring_id_field = RECURRING_ID_FIELD,
        @default_action_code = dbo.qp_action_code(DEFAULT_ACTION_ID),
        @folder_default_action_code = dbo.qp_action_code(FOLDER_DEFAULT_ACTION_ID)
      FROM
        ENTITY_TYPE
      WHERE
        CODE = @code

      EXEC qp_get_entity_title
        @id,
        @code,
        @parent_entity_id,
        @title OUT

      IF ((@code = 'site_folder' OR @code = 'content_folder') AND @title = '')
        BEGIN
          SET @title = dbo.qp_translate('Root Folder', @language_id)
        END

      EXEC qp_get_recurring_parent_entity_id
        @id,
        @code,
        @recurring_id OUT

      IF (@recurring_id IS NOT NULL)
        BEGIN
          SET @parent_id = @recurring_id
          SET @folder_default_action_code = null
        END
      ELSE
        BEGIN
          IF (@code = 'virtual_article')
            BEGIN
              SET @parent_id = @parent_entity_id
            END
          ELSE
            BEGIN
              EXEC qp_get_parent_entity_id @id, @code, @parent_id OUT
            END
        END

      if @parent_id is null
        set @parent_id = 0

      INSERT INTO @result(ID, PARENT_ID, CODE, NAME, TITLE, IS_FOLDER, ACTION_CODE, FOLDER_ACTION_CODE)
      SELECT
        @id,
        @parent_id,
        @code,
        dbo.qp_translate(@name, @language_id),
        @title,
        0,
        @default_action_code,
        @folder_default_action_code

      SET @id = @parent_id

      IF (@recurring_id IS NULL)
        select @code = et2.code from entity_type et1 left join entity_type et2 on et1.parent_id = et2.id where et1.code = @code

      IF @level = 1 and @one_level = 1
        BREAK

      SET @level = @level + 1

    END

  UPDATE r1 SET ACTION_CODE = r2.FOLDER_ACTION_CODE from @result AS r1 inner join @result AS r2 on r1.ID = r2.PARENT_ID AND r2.FOLDER_ACTION_CODE is not null

  SELECT
    ID,
    PARENT_ID,
    CODE,
    NAME,
    TITLE,
    IS_FOLDER,
    ACTION_CODE
  FROM
    @result
END
GO

CREATE PROCEDURE [dbo].[qp_content_group_list]
  @site_id numeric,
  @user_id  numeric,
  @permission_level numeric = 1,
  @order_by varchar(256) = '',
  @filter varchar(max) = '',
  @select varchar(max) = ''
AS
BEGIN
  declare @language_id numeric
  set @language_id = dbo.qp_language(@user_id)

  select content_group_id as id, name as title, NULL AS ICON, NULL AS ICON_MODIFIER from content_group where site_id = @site_id
  union all
  select 0, dbo.qp_translate('Default Group', @language_id), NULL, NULL

END
GO

CREATE PROCEDURE [dbo].[qp_site_folder_list]
  @site_id numeric,
  @parent_folder_id numeric,
  @user_id numeric,
  @permission_level numeric,
  @order_by varchar(256) = 'folder_id',
  @filter varchar(max) = '',
  @select varchar(max) = 'folder.*, u.login'
AS

SET NOCOUNT ON

declare @strsql varchar(8000)
declare @SecuritySQL varchar(8000)
declare @parent_entity_id decimal, @parent_entity_name nvarchar(30)
declare @use_security bit

IF (dbo.qp_is_user_admin(@user_id) = 1)
  set @use_security = 0
ELSE
  set @use_security = 1

if @parent_folder_id <> 0 begin
  set @parent_entity_id = @parent_folder_id
  set @parent_entity_name = 'parent_folder'
end
else begin
  set @parent_entity_id = @site_id
  set @parent_entity_name = 'site'
end

if @use_security = 1
Begin
  EXEC  dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
            @start_level = @permission_level,
      @end_level = 4,
            @entity_name = 'folder',
      @parent_entity_name = @parent_entity_name,
      @parent_entity_id = @parent_entity_id,

      @SQLOut = @SecuritySQL OUTPUT
End

SET NOCOUNT OFF

set @strsql = ' select ' + @select + ' from folder
               inner join users as u on folder.last_modified_by = u.user_id
         '
if @use_security = 1
  set @strsql = @strsql +
               'inner join (' + @SecuritySQL + ') as pi on folder.folder_id = pi.folder_id
               '

if @filter <> ''
  begin
    set @strsql = @strsql + ' and ' + @filter
  end
if @order_by <> ''
  begin
    set @strsql = @strsql + ' order by ' + @order_by
  end

exec( @strsql )
GO

CREATE  FUNCTION [dbo].[qp_abs_time_seconds] (@time datetime)
RETURNS numeric
AS
BEGIN
    DECLARE @result numeric
  IF @time IS NULL
    SET @result = 0
  ELSE
    SET @result = datepart(hour, @time) * 3600 + datepart(minute, @time) * 60 + datepart(SECOND, @time)
  RETURN @result
END
GO

CREATE PROCEDURE [dbo].[qp_all_article_search]
  @p_site_id int,
  @p_user_id int,
  @p_searchparam nvarchar(4000),
  @p_order_by nvarchar(max) = N'Rank DESC',
  @p_start_row int = 0,
  @p_page_size int = 0,

  @total_records int OUTPUT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

    -- Задаем номер начальной записи по умолчанию
  IF (@p_start_row <= 0)
    BEGIN
      SET @p_start_row = 1
    END

  -- Задаем номер конечной записи
  DECLARE @p_end_row AS int
  SET @p_end_row = @p_start_row + @p_page_size - 1

  -- свормировать запрос для подмножества контентов к которым есть доступ
  DECLARE @security_sql AS nvarchar(max)
  SET @security_sql = ''
  EXEC dbo.qp_GetPermittedItemsAsQuery
        @user_id = @p_user_id,
        @group_id = 0,
        @start_level = 1,
        @end_level = 4,
        @entity_name = 'content',
        @parent_entity_name = 'site',
        @parent_entity_id = @p_site_id,
        @SQLOut = @security_sql OUTPUT

  -- посчитать общее кол-во записей
  declare @paramdef nvarchar(4000);
  declare @query nvarchar(4000);

  create table #temp
  ([rank] int, content_item_id numeric, attribute_id numeric)

  create table #temp2
  ([rank] int, content_item_id numeric, attribute_id numeric)

  set @query = 'insert into #temp ' + CHAR(13)
    + ' select ft.[rank], cd.content_item_id, cd.attribute_id ' + CHAR(13)
    + ' from CONTAINSTABLE(content_data, *,  @searchparam) ft ' + CHAR(13)
    + ' inner join content_data cd on ft.[key] = cd.content_data_id ' + CHAR(13)
  exec sp_executesql @query, N'@searchparam nvarchar(4000)', @searchparam = @p_searchparam

  set @query = 'insert into #temp2 ' + CHAR(13)
    + ' select cd.* from #temp cd ' + CHAR(13)
    + ' inner join content_item ci on cd.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID ' + CHAR(13)
    + ' inner join (' + @security_sql + ') c on c.CONTENT_ID = ci.CONTENT_ID ' + CHAR(13)
  exec sp_executesql @query

  select @total_records = count(distinct content_item_id) from #temp2

  -- главный запрос
  declare @query_template nvarchar(4000);
  set @query_template = N'WITH PAGED_DATA_CTE AS ' + CHAR(13)
    + ' (select wrapper.*, ' + CHAR(13)
    + '     ROW_NUMBER() OVER (ORDER BY <$_order_by_$>) AS ROW ' + CHAR(13)
    + '  from ' + CHAR(13)
    + '  (select ' + CHAR(13)
    + '   ci.CONTENT_ID as ParentId, ' + CHAR(13)
    + '   data.CONTENT_ITEM_ID as Id, ' + CHAR(13)
    + '   data.ATTRIBUTE_ID as FieldId, ' + CHAR(13)
    + '   attr.ATTRIBUTE_TYPE_ID as FieldTypeId, ' + CHAR(13)
    + '   c.CONTENT_NAME as ParentName, ' + CHAR(13)
    + '   st.STATUS_TYPE_NAME as StatusName, ' + CHAR(13)
    + '   ci.CREATED as Created, ' + CHAR(13)
    + '   ci.MODIFIED as Modified, ' + CHAR(13)
    + '   usr.[LOGIN] as LastModifiedByUser, ' + CHAR(13)
    + '   data.[rank] as Rank, ' + CHAR(13)
    + '   ROW_NUMBER() OVER (PARTITION BY data.CONTENT_ITEM_ID ORDER BY data.[rank] DESC) AS SIMILAR_ITEM_ROW ' + CHAR(13)
    + '   from #temp2 data ' + CHAR(13)
    + '   inner join dbo.CONTENT_ATTRIBUTE attr on data.ATTRIBUTE_ID = attr.ATTRIBUTE_ID ' + CHAR(13)
    + '   inner join dbo.CONTENT_ITEM ci on data.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID ' + CHAR(13)
    + '   inner join dbo.CONTENT c on c.CONTENT_ID = ci.CONTENT_ID ' + CHAR(13)
    + '   inner join dbo.STATUS_TYPE st on st.STATUS_TYPE_ID = ci.STATUS_TYPE_ID ' + CHAR(13)
    + '   inner join dbo.USERS usr on usr.[USER_ID] = ci.LAST_MODIFIED_BY ' + CHAR(13)
    + '   ) as wrapper ' + CHAR(13)
    + '   where wrapper.SIMILAR_ITEM_ROW = 1 ' + CHAR(13)
    + ' ) ' + CHAR(13)
    + ' select ' + CHAR(13)
    + '   ParentId, ' + CHAR(13)
    + '   ParentName, ' + CHAR(13)
    + '   Id, ' + CHAR(13)
    + '   FieldId, ' + CHAR(13)
    + '   (case when FieldTypeId in (9, 10) THEN cd.BLOB_DATA ELSE cd.DATA END) as Text, ' + CHAR(13)
    + '   dbo.qp_get_article_title_func(Id, ParentId) as Name, ' + CHAR(13)
    + '   StatusName, ' + CHAR(13)
    + '   pdc.Created, ' + CHAR(13)
    + '   pdc.Modified, ' + CHAR(13)
    + '   LastModifiedByUser, ' + CHAR(13)
    + '   Rank ' + CHAR(13)
    + ' from PAGED_DATA_CTE pdc ' + CHAR(13)
    + ' inner join content_data cd on pdc.Id = cd.content_item_id and pdc.FieldId = cd.attribute_id ' + CHAR(13)
    + ' where ROW between @start_row and @end_row';


  declare @sortExp nvarchar(4000);
  set @sortExp = case when @p_order_by is null or @p_order_by = '' then N'Rank DESC' else @p_order_by end;
  set @query = REPLACE(@query_template, '<$_order_by_$>', @sortExp);
  set @paramdef = '@searchparam nvarchar(4000), @site_id int, @start_row int, @end_row int';
  EXECUTE sp_executesql @query, @paramdef, @searchparam = @p_searchparam, @site_id = @p_site_id, @start_row = @p_start_row, @end_row = @p_end_row;

  drop table #temp
  drop table #temp2
END
GO

CREATE FUNCTION [dbo].[qp_get_display_fields]
(
  @content_id numeric(18,0),
  @with_relation_field BIT = 0
)
RETURNS TABLE
AS
RETURN
(
  SELECT  ATTRIBUTE_ID, attribute_name,
    CASE attribute_type_id
    WHEN 10 THEN 0
    WHEN 9  THEN 0
    ELSE 1
    END AS is_blob,
    view_in_list,
    attribute_order
  FROM content_attribute
  WHERE content_id = @content_id
  AND (attribute_type_id <> 11 AND @with_relation_field = 0 OR @with_relation_field = 1)
)
GO

-- Для виртуального поля, возвращает ID всех реальных базовых полей
-- (для UNION-контента полей может быть несколько)
CREATE PROCEDURE [dbo].qp_get_real_base_attributes
  @v_attr_id numeric(18,0)
AS
BEGIN
  SET NOCOUNT ON;

    with TREE(BASE_ATTR_ID, BASE_CNT_VTYPE) AS
  (
    select BASE_ATTR_ID, BASE_CNT_VTYPE FROM VIRTUAL_ATTR_BASE_ATTR_RELATION
    where VIRTUAL_ATTR_ID = @v_attr_id

    union all

    select R.BASE_ATTR_ID, R.BASE_CNT_VTYPE FROM VIRTUAL_ATTR_BASE_ATTR_RELATION R
    join TREE T ON T.BASE_ATTR_ID = R.VIRTUAL_ATTR_ID
  )
  select BASE_ATTR_ID from TREE where BASE_CNT_VTYPE = 0
END
GO

-- End of procedures and functions creating

-- Altering procedures

ALTER  PROCEDURE [dbo].[qp_sites_list]
  @user_id  numeric,
  @permission_level numeric,
  @order_by varchar(256) = 'site_id',
  @filter varchar(256) = '',
  @select varchar(max) = 'site.*, u.login',
  @site_id_only bit  = 0
AS
  SET NOCOUNT ON

declare @strsql varchar(8000)
declare @SecuritySQL varchar(8000)
declare @use_security bit

IF (dbo.qp_is_user_admin(@user_id) = 1)
  set @use_security = 0
ELSE
  set @use_security = 1

if @use_security = 1
Begin
  EXEC  dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
            @start_level = @permission_level,
      @end_level = 4,
            @entity_name = 'site',
      @parent_entity_name = '',
      @parent_entity_id = 0,

      @SQLOut = @SecuritySQL OUTPUT
End

SET NOCOUNT OFF

if @site_id_only = 1
    set @strsql = 'select site.site_id '
  else
    set @strsql = 'select ' + @select

set @strsql = @strsql +
              '  from site
               inner join users as u on site.last_modified_by = u.user_id
         '
if @use_security = 1
  set @strsql = @strsql +
              'inner join (' + @SecuritySQL + ') as pi on site.site_id = pi.site_id
              '


if @filter <> ''
  begin
    set @strsql = @strsql + ' and ' + @filter
  end
if @order_by <> ''
  begin
    set @strsql = @strsql + ' order by ' + @order_by
  end

exec( @strsql )
GO

ALTER PROCEDURE [dbo].[qp_content_list]
  @site_id numeric,
  @user_id  numeric,
  @permission_level numeric,
  @order_by varchar(256) = 'content_id',
  @filter varchar(max) = '',
  @select varchar(max) = 'content.*, u.login'
AS

SET NOCOUNT ON

declare @strsql varchar(8000)
declare @SecuritySQL varchar(8000)
declare @use_security bit

IF (dbo.qp_is_user_admin(@user_id) = 1)
  set @use_security = 0
ELSE
  set @use_security = 1

if @use_security = 1
Begin
  EXEC  dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
            @start_level = @permission_level,
      @end_level = 4,
            @entity_name = 'content',
      @parent_entity_name = 'site',
      @parent_entity_id = @site_id,

      @SQLOut = @SecuritySQL OUTPUT
End

SET NOCOUNT OFF

set @strsql = ' select ' + @select + ' from content inner join users as u on content.last_modified_by = u.user_id '

if @use_security = 1
begin
  set @strsql = @strsql + ' inner join (' + @SecuritySQL + ') as pi on content.content_id = pi.content_id '
end

set @strsql = @strsql + ' where content.site_id = ' + cast(@site_id as nvarchar) + ' '

if @filter <> ''
  begin
    set @strsql = @strsql + ' and ' + @filter
  end
if @order_by <> ''
  begin
    set @strsql = @strsql + ' order by ' + @order_by
  end

exec( @strsql )
GO

-- ***********************************************
-- Max Tertyshnyy
-- Fix code repeate. Use [dbo].[qp_get_display_fields] but select
-- ***********************************************
ALTER FUNCTION [dbo].[qp_get_display_field](@content_id NVARCHAR(255), @with_relation_field BIT = 0) RETURNS NVARCHAR(255)
AS BEGIN
  DECLARE @fld_name NVARCHAR(255)

  SELECT @fld_name = attribute_name FROM (
  SELECT  top 1 attribute_name from [dbo].[qp_get_display_fields](@content_id,  @with_relation_field)
  ORDER BY view_in_list desc, is_blob desc, attribute_order asc) AS a

  IF @fld_name is Null
    Set @fld_name = 'content_item_id'
  RETURN @fld_name
END
GO

-- End of Altering procedures

-- Applying defaults

EXECUTE sp_bindefault N'dbo.DF_CREATED', N'dbo.CONTENT_ITEM_SCHEDULE.CREATED'
GO

EXECUTE sp_bindefault N'dbo.DF_CREATED', N'dbo.CONTENT_ITEM_SCHEDULE.MODIFIED'
GO

-- End of Applying defaults


delete from ACTION_TOOLBAR_BUTTON
go

update ENTITY_TYPE set DEFAULT_ACTION_ID = NULL, FOLDER_DEFAULT_ACTION_ID = NULL, FOLDER_CONTEXT_MENU_ID = NULL, CONTEXT_MENU_ID = NULL
GO

delete from ACTION_VIEW
GO

delete from context_menu_item
GO

delete from BACKEND_ACTION
go

delete from ENTITY_TYPE
GO

delete from VIEW_TYPE
GO


insert into ENTITY_TYPE (NAME, CODE, [ORDER], HAS_ITEM_NODES, TAB_ID)
values ('Customer Code', 'db', 1 ,0 , dbo.qp_tab_id('Home'))

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, SOURCE, SOURCE_SP, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_MODIFIER_FIELD, TAB_ID)
values ('Site', 'site', 1, dbo.qp_entity_type_id('db'), 'SITE', 'qp_sites_list', 'SITE_ID', 'SITE_NAME', NULL, 'IS_LIVE', dbo.qp_tab_id('Sites'))

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, SOURCE_SP, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID, DISABLED)
values ('Content Group', 'content_group', 1, dbo.qp_entity_type_id('site'), 'content_group', 'qp_content_group_list', 'content_group_id', 'name', 'site_id', dbo.qp_tab_id('Contents'), 1)

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, SOURCE, SOURCE_SP, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID)
values ('Content', 'content', 2, dbo.qp_entity_type_id('site'), 'CONTENT', 'qp_real_content_list' , 'CONTENT_ID', 'CONTENT_NAME', 'SITE_ID', dbo.qp_tab_id('Contents'))

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, SOURCE, SOURCE_SP, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_MODIFIER_FIELD, TAB_ID)
values ('Virtual Content', 'virtual_content', 3, dbo.qp_entity_type_id('site'), 'CONTENT', 'qp_virtual_content_list' , 'CONTENT_ID', 'CONTENT_NAME', 'SITE_ID', 'VIRTUAL_TYPE', dbo.qp_tab_id('Contents'))

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, PARENT_ID_FIELD, HAS_ITEM_NODES, TAB_ID)
values ('Article', 'article', 2, dbo.qp_entity_type_id('content'), 'CONTENT_ITEM', 'CONTENT_ITEM_ID', 'CONTENT_ID', 0, dbo.qp_tab_id('Articles'))

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, PARENT_ID_FIELD, HAS_ITEM_NODES, TAB_ID)
values ('Archive Article', 'archive_article', 3, dbo.qp_entity_type_id('content'), 'CONTENT_ITEM', 'CONTENT_ITEM_ID', 'CONTENT_ID', 0, dbo.qp_tab_id('Articles'))

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_FIELD, ORDER_FIELD, TAB_ID)
values ('Field', 'field', 1, dbo.qp_entity_type_id('content'), 'CONTENT_ATTRIBUTE_TYPE', 'ATTRIBUTE_ID', 'ATTRIBUTE_NAME', 'CONTENT_ID', 'ICON', 'ATTRIBUTE_ORDER', dbo.qp_tab_id('Fields'))

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_FIELD, ORDER_FIELD, TAB_ID)
values ('Virtual Field', 'virtual_field', 1, dbo.qp_entity_type_id('virtual_content'), 'CONTENT_ATTRIBUTE_TYPE', 'ATTRIBUTE_ID', 'ATTRIBUTE_NAME', 'CONTENT_ID', 'ICON', 'ATTRIBUTE_ORDER', dbo.qp_tab_id('Fields'))

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, HAS_ITEM_NODES, TAB_ID)
values ('Virtual Article', 'virtual_article', 2, dbo.qp_entity_type_id('virtual_content'), 0, dbo.qp_tab_id('Articles'))

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID)
values ('Notification', 'notification', 4, dbo.qp_entity_type_id('content'), 'NOTIFICATIONS', 'NOTIFICATION_ID', 'NOTIFICATION_NAME', 'CONTENT_ID', dbo.qp_tab_id('Notifications'))

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, RECURRING_ID_FIELD, TAB_ID, DISABLED)
values ('Content Folder', 'content_folder', 3, dbo.qp_entity_type_id('content'), 'CONTENT_FOLDER', 'FOLDER_ID', 'NAME', 'CONTENT_ID', 'PARENT_FOLDER_ID', dbo.qp_tab_id('Content Library'), 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, SOURCE_SP, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, RECURRING_ID_FIELD, TAB_ID, DISABLED)
values ('Site Folder', 'site_folder', 4, dbo.qp_entity_type_id('site'), 'FOLDER', 'qp_site_folder_list', 'FOLDER_ID', 'NAME', 'SITE_ID', 'PARENT_FOLDER_ID', dbo.qp_tab_id('Site Library'), 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID, DISABLED)
values ('Workflow', 'workflow', 5, dbo.qp_entity_type_id('site'), 'WORKFLOW', 'WORKFLOW_ID', 'WORKFLOW_NAME', 'SITE_ID', dbo.qp_tab_id('Workflow'), 1 )

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID, DISABLED)
values ('Status', 'status', 6, dbo.qp_entity_type_id('site'), 'STATUS_TYPE', 'STATUS_TYPE_ID', 'STATUS_TYPE_NAME', 'SITE_ID', dbo.qp_tab_id('Statuses'), 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID, DISABLED)
values ('Style', 'style', 7, dbo.qp_entity_type_id('site'), 'STYLE', 'STYLE_ID', 'STYLE_NAME', 'SITE_ID', dbo.qp_tab_id('Styles'), 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID, DISABLED)
values ('Snippet', 'snippet', 8, dbo.qp_entity_type_id('site'), 'CODE_SNIPPET', 'SNIPPET_ID', 'SNIPPET_NAME', 'SITE_ID', dbo.qp_tab_id('Styles'), 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_MODIFIER_FIELD, TAB_ID, DISABLED)
values ('User', 'user', 2, dbo.qp_entity_type_id('db'), 'USERS', 'USER_ID', 'LOGIN', NULL, 'DISABLED', dbo.qp_tab_id('Users'), 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, RECURRING_ID_FIELD, TAB_ID, DISABLED)
values ('User Group', 'user_group', 3, dbo.qp_entity_type_id('db'), 'USER_GROUP_TREE', 'GROUP_ID', 'GROUP_NAME', NULL, 'PARENT_GROUP_ID', dbo.qp_tab_id('User Groups'), 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_MODIFIER_FIELD, TAB_ID, DISABLED)
values ('Template', 'template', 4, dbo.qp_entity_type_id('site'), 'PAGE_TEMPLATE', 'PAGE_TEMPLATE_ID', 'TEMPLATE_NAME', 'SITE_ID', 'IS_SYSTEM', dbo.qp_tab_id('Templates'), 0)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_MODIFIER_FIELD, DISABLED)
values ('Page', 'page', 2, dbo.qp_entity_type_id('template'), 'PAGE', 'PAGE_ID', 'PAGE_NAME', 'PAGE_TEMPLATE_ID', 'GENERATE_TRACE', 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_FIELD, DISABLED)
values ('Template Object', 'template_object', 1, dbo.qp_entity_type_id('template'), 'TEMPLATE_OBJECT', 'OBJECT_ID', 'OBJECT_NAME', 'PAGE_TEMPLATE_ID', 'ICON', 0)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, ICON_FIELD, DISABLED)
values ('Page Object', 'page_object', 1, dbo.qp_entity_type_id('page'), 'PAGE_OBJECT', 'OBJECT_ID', 'OBJECT_NAME', 'PAGE_ID', 'ICON', 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, DISABLED)
values ('Format', 'template_object_format', 1, dbo.qp_entity_type_id('template_object'), 'OBJECT_FORMAT', 'OBJECT_FORMAT_ID', 'FORMAT_NAME', 'OBJECT_ID', 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, DISABLED)
values ('Format', 'page_object_format', 1, dbo.qp_entity_type_id('page_object'), 'OBJECT_FORMAT', 'OBJECT_FORMAT_ID', 'FORMAT_NAME', 'OBJECT_ID', 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, DISABLED)
values ('Format Version', 'template_object_format_version', 1, dbo.qp_entity_type_id('template_object_format'), 'OBJECT_FORMAT_VERSION', 'OBJECT_FORMAT_VERSION_ID', 'OBJECT_FORMAT_VERSION_ID', 'OBJECT_FORMAT_ID', 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, DISABLED)
values ('Format Version', 'page_object_format_version', 1, dbo.qp_entity_type_id('page_object_format'), 'OBJECT_FORMAT_VERSION', 'OBJECT_FORMAT_VERSION_ID', 'OBJECT_FORMAT_VERSION_ID', 'OBJECT_FORMAT_ID', 1)

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD, PARENT_ID_FIELD, TAB_ID)
values ('Article Version', 'article_version', 1, dbo.qp_entity_type_id('article'), 'CONTENT_ITEM_VERSION', 'CONTENT_ITEM_VERSION_ID', 'CONTENT_ITEM_VERSION_ID', 'CONTENT_ITEM_ID', dbo.qp_tab_id('Audit Trail'))

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, TAB_ID, DISABLED)
values ('Site Library File', 'site_file', 1, dbo.qp_entity_type_id('site_folder'), dbo.qp_tab_id('Site Library'), 1)

insert into ENTITY_TYPE (NAME, CODE, [ORDER], PARENT_ID, TAB_ID, DISABLED)
values ('Content Library File', 'content_file', 1, dbo.qp_entity_type_id('content_folder'), dbo.qp_tab_id('Content Library'), 1)

GO


delete from ACTION_TYPE

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Remove', 'remove', 1)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('MultipleRemove', 'multiple_remove', 1, 255)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Assemble', 'assemble', 1)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Import', 'import', 1)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Add New', 'new', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Save', 'save', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Update', 'update', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Update & Assemble', 'update_and_assemble', 1)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Create Like', 'copy', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Move', 'move', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Archive', 'archive', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('MultipleArchive', 'multiple_archive', 2, 255)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Restore', 'restore', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('MultipleRestore', 'multiple_restore', 2, 255)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Export', 'export', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Change Lock', 'change_lock', 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Read', 'read', 3)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Library', 'library', 3)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Preview', 'preview', 3)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Download', 'download', 3)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('Compare', 'compare', 3, 2)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Cancel', 'cancel', 6)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('List', 'list', 6)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Select', 'select', 6)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('Multiple Select', 'multiple_select', 6, 255)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Search', 'search', 6)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Refresh', 'refresh', 6)

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Fake', 'fake', 6)

GO



INSERT INTO VIEW_TYPE (NAME, CODE, ICON)
VALUES ('List', 'list', 'list_view.gif')

INSERT INTO VIEW_TYPE(NAME, CODE, ICON)
VALUES ('Tree', 'tree', 'tree_view.gif')

INSERT INTO VIEW_TYPE(NAME, CODE, ICON)
VALUES ('Details', 'details', 'details_view.gif')

INSERT INTO VIEW_TYPE(NAME, CODE, ICON)
VALUES ('Thumbnails', 'thumbnails', 'tiles_view.gif')

INSERT INTO VIEW_TYPE(NAME, CODE, ICON)
VALUES ('Search Results', 'search_results', NULL)

GO


-- db

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Cancel', 'cancel', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('db'), dbo.qp_tab_id('Home'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Home', 'home', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('db'), dbo.qp_tab_id('Home'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('About System', 'about', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('db'), dbo.qp_tab_id('Home'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Customer Code', 'refresh_db', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('db'), dbo.qp_tab_id('Home'))


-- user

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Edit Profile', 'edit_profile', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('user'), '~/User/Profile/', dbo.qp_tab_id('Home'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Profile', 'update_profile', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('user'), dbo.qp_tab_id('Home'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Profile', 'refresh_profile', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('user'), dbo.qp_tab_id('Home'), 1)


-- site

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, USER_CONTROL_FILE, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Sites', 'list_site', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('site'), '~/UserControls/Sites/SiteList.ascx', '~/Site/Index/', dbo.qp_tab_id('Sites'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, USER_CONTROL_FILE, CONTROLLER_ACTION_URL,  TAB_ID, IS_INTERFACE)
values('New Site', 'new_site', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('site'), '~/UserControls/Sites/SiteEditor.ascx', '~/Site/New/', dbo.qp_tab_id('New Site'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Sites', 'refresh_sites', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Sites'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_site', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Site Properties'), '~/Site/Cancel/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save & Edit Site', 'save_edit_site', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Site Properties'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, USER_CONTROL_FILE, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Site Properties', 'Properties', 'edit_site', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('site'), '~/UserControls/Sites/SiteEditor.ascx', '~/Site/Properties/', dbo.qp_tab_id('Site Properties'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Site', 'save_site', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Site Properties'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Site', 'update_site', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Site Properties'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Site', 'remove_site', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('site'), 'Do you really want to remove this site?', dbo.qp_tab_id('Site Properties'), '~/Site/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Site', 'multiple_remove_site', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('site'), 'Do you really want to remove the following sites: {0}?', dbo.qp_tab_id('Sites'), '~/Site/MultipleRemove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Create Like Site', 'copy_site', dbo.qp_action_type_id('copy'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Sites'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, HAS_PRE_ACTION)
values('Assemble Site', 'assemble_site', dbo.qp_action_type_id('assemble'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Sites'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Assemble Contents', 'assemble_contents', dbo.qp_action_type_id('assemble'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Contents'), '~/Site/AssembleContents/', 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Site', 'refresh_site', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Site Properties'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Capture Lock Site', 'capture_lock_site', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Site Properties'), '~/Site/CaptureLock/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Search in Articles', 'search_in_articles', dbo.qp_action_type_id('search'), dbo.qp_entity_type_id('site'), '~/Site/SearchInArticles/', dbo.qp_tab_id('Contents'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Search in Articles', 'refresh_search_in_articles', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Contents'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Site Library', 'Library', 'site_library', dbo.qp_action_type_id('library'), dbo.qp_entity_type_id('site'), '~/Site/Library/', dbo.qp_tab_id('Site Library'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Popup Site Library', 'Library', 'popup_site_library', dbo.qp_action_type_id('library'), dbo.qp_entity_type_id('site'), '~/Site/Library/', dbo.qp_tab_id('Article Info'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Site Library', 'refresh_site_library', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site'), dbo.qp_tab_id('Site Library'))


-- site folder
insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, IS_WINDOW, WINDOW_WIDTH, WINDOW_HEIGHT)
values('New Subfolder', 'New Subfolder', 'new_site_folder', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('site_folder'), dbo.qp_tab_id('Site Library'), 1, '~/SiteFolder/New/', 1, 600, 275)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Site Folder', 'save_site_folder', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('site_folder'), dbo.qp_tab_id('Site Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Site Folder', 'update_site_folder', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('site_folder'), dbo.qp_tab_id('Site Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Site Folder', 'refresh_site_folder', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site_folder'), dbo.qp_tab_id('Site Library'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, IS_WINDOW, WINDOW_WIDTH, WINDOW_HEIGHT)
values('Site Folder Properties', 'Properties', 'edit_site_folder', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('site_folder'), dbo.qp_tab_id('Site Library'), 1, '~/SiteFolder/Properties/', 1, 600, 275)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Site Folder', 'remove_site_folder', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('site_folder'), 'Do you really want to remove this folder?', dbo.qp_tab_id('Site Library'), '~/SiteFolder/Remove/')

-- content folder
insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, IS_WINDOW, WINDOW_WIDTH, WINDOW_HEIGHT)
values('New Subfolder', 'New Subfolder', 'new_content_folder', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('content_folder'), dbo.qp_tab_id('Content Library'), 1, '~/ContentFolder/New/', 1, 600, 275)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Content Folder', 'save_content_folder', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('content_folder'), dbo.qp_tab_id('Content Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Content Folder', 'update_content_folder', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('content_folder'), dbo.qp_tab_id('Content Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Content Folder', 'refresh_content_folder', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content_folder'), dbo.qp_tab_id('Content Library'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, IS_WINDOW, WINDOW_WIDTH, WINDOW_HEIGHT)
values('Content Folder Properties', 'Properties', 'edit_content_folder', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('content_folder'), dbo.qp_tab_id('Content Library'), 1, '~/ContentFolder/Properties/', 1, 600, 275)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Content Folder', 'remove_content_folder', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('content_folder'), 'Do you really want to remove this folder?', dbo.qp_tab_id('Content Library'), '~/ContentFolder/Remove/')

-- site file

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Site File', 'multiple_remove_site_file', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('site_file'), 'Do you really want to remove the following files: {0}?', dbo.qp_tab_id('Site Library'), '~/SiteFolder/MultipleRemoveFiles/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Site File', 'remove_site_file', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('site_file'), 'Do you really want to remove this file?', dbo.qp_tab_id('Site Library'), '~/SiteFolder/RemoveFile/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Preview Site File', 'preview_site_file', dbo.qp_action_type_id('preview'), dbo.qp_entity_type_id('site_file'), dbo.qp_tab_id('Site Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Download Site File', 'download_site_file', dbo.qp_action_type_id('download'), dbo.qp_entity_type_id('site_file'), dbo.qp_tab_id('Site Library'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, IS_WINDOW, CONTROLLER_ACTION_URL, WINDOW_WIDTH, WINDOW_HEIGHT)
values('Site File Properties', 'File Properties', 'edit_site_file', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('site_file'), dbo.qp_tab_id('Site Library'), 1, 1, '~/SiteFolder/FileProperties/',  600, 245)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Site File', 'update_site_file', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('site_file'), dbo.qp_tab_id('Site Library'))



-- content file


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Content File', 'multiple_remove_content_file', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('content_file'), 'Do you really want to remove the following files: {0}?', dbo.qp_tab_id('Content Library'), '~/ContentFolder/MultipleRemoveFiles/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Content File', 'remove_content_file', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('content_file'), 'Do you really want to remove this file?', dbo.qp_tab_id('Content Library'), '~/ContentFolder/RemoveFile/')


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Preview Content File', 'preview_content_file', dbo.qp_action_type_id('preview'), dbo.qp_entity_type_id('content_file'), dbo.qp_tab_id('Content Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Download Content File', 'download_content_file', dbo.qp_action_type_id('download'), dbo.qp_entity_type_id('content_file'), dbo.qp_tab_id('Content Library'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, IS_WINDOW, CONTROLLER_ACTION_URL, WINDOW_WIDTH, WINDOW_HEIGHT)
values('Content File Properties', 'File Properties', 'edit_content_file', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('content_file'), dbo.qp_tab_id('Content Library'), 1, 1, '~/ContentFolder/FileProperties/',  600, 245)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Content File', 'update_content_file', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('content_file'), dbo.qp_tab_id('Content Library'))


-- content_group

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, IS_WINDOW, WINDOW_WIDTH, WINDOW_HEIGHT)
values('New Content Group', 'new_content_group', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('content_group'), dbo.qp_tab_id('Content Info'), 1, '~/Content/NewGroup/', 1, 600, 175)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, IS_WINDOW, WINDOW_WIDTH, WINDOW_HEIGHT)
values('Edit Content Group', 'Properties', 'edit_content_group', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('content_group'), dbo.qp_tab_id('Contents'), 1, '~/Content/GroupProperties/', 1, 600, 175)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Content Group', 'save_content_group', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('content_group'), dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Content Group', 'update_content_group', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('content_group'), dbo.qp_tab_id('Contents'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Remove Content Group', 'remove_content_group', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('content_group'), dbo.qp_tab_id('Contents'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Content Group', 'refresh_content_group', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content_group'), dbo.qp_tab_id('Contents'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Content Groups', 'refresh_content_groups', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content_group'), dbo.qp_tab_id('Contents'))


-- content

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Contents', 'list_content', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('content'), '~/Content/Index/', dbo.qp_tab_id('Contents'), 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New Content', 'new_content', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('content'), '~/Content/New/', dbo.qp_tab_id('Content Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Contents', 'refresh_contents', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Contents'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Content', 'save_content', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Edit Content', 'Properties', 'edit_content', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('content'), '~/Content/Properties/', dbo.qp_tab_id('Content Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Content', 'update_content', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, CONFIRM_PHRASE, TAB_ID)
values('Remove Content', 'remove_content', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('content'), '~/Content/Remove/', 'Do you really want to remove this content?', dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, CONFIRM_PHRASE, TAB_ID)
values('Multiple Remove Content', 'multiple_remove_content', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('content'), '~/Content/MultipleRemove/', 'Do you really want to remove the following contents: {0}?', dbo.qp_tab_id('Contents'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Create Like Content', 'copy_content', dbo.qp_action_type_id('copy'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Contents'), '~/Content/Copy/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Export Articles', 'export_content', dbo.qp_action_type_id('export'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Export Articles'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Import Articles', 'import_content', dbo.qp_action_type_id('import'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Import Articles'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Content', 'refresh_content', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Content Library', 'Library', 'content_library', dbo.qp_action_type_id('library'), dbo.qp_entity_type_id('content'), '~/Content/Library/', dbo.qp_tab_id('Content Library'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Popup Content Library', 'Library', 'popup_content_library', dbo.qp_action_type_id('library'), dbo.qp_entity_type_id('content'), '~/Content/Library/', dbo.qp_tab_id('Article Info'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Content Library', 'refresh_content_library', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content'), dbo.qp_tab_id('Content Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Multiple Select Contents For Union', 'multiple_select_contents_for_union', dbo.qp_action_type_id('multiple_select'), dbo.qp_entity_type_id('content'), '~/VirtualContent/MultipleSelectForUnion/', dbo.qp_tab_id('Contents'), 1, dbo.qp_view_id('list'), 1)


-- field

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Fields', 'list_field', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('field'), '~/Field/Index/', dbo.qp_tab_id('Fields'),  1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New Field', 'new_field', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('field'), '~/Field/New/', dbo.qp_tab_id('Field Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Fields', 'refresh_fields', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('field'), dbo.qp_tab_id('Fields'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Field', 'save_field', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('field'), dbo.qp_tab_id('Field Info'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Edit Field', 'Properties', 'edit_field', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('field'), '~/Field/Properties/', dbo.qp_tab_id('Field Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Field', 'update_field', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('field'), dbo.qp_tab_id('Field Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, CONFIRM_PHRASE, TAB_ID)
values('Remove Field', 'remove_field', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('field'), '~/Field/Remove/', 'Do you really want to remove this field?', dbo.qp_tab_id('Field Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, CONFIRM_PHRASE, TAB_ID)
values('Multiple Remove Field', 'multiple_remove_field', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('field'), '~/Field/MultipleRemove/', 'Do you really want to remove the following fields: {0}?', dbo.qp_tab_id('Fields'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Up Field', 'up_field', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('field'), dbo.qp_tab_id('Field Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Down Field', 'down_field', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('field'), dbo.qp_tab_id('Field Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Field', 'refresh_field', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('field'), dbo.qp_tab_id('Field Info'))
GO


-- article

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Articles', 'list_article', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('article'), '~/Article/Index/', dbo.qp_tab_id('Articles'), 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Articles', 'refresh_articles', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article'), dbo.qp_tab_id('Articles'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Select Article', 'select_article', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('article'), '~/Article/Select/', dbo.qp_tab_id('Articles'), 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Multiple Select Article', 'multiple_select_article', dbo.qp_action_type_id('multiple_select'), dbo.qp_entity_type_id('article'), '~/Article/MultipleSelect/', dbo.qp_tab_id('Articles'), 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_article', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('article'), dbo.qp_tab_id('Article Info'), '~/Article/Cancel/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New Article', 'new_article', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('article'), '~/Article/New/', dbo.qp_tab_id('Article Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Article', 'save_article', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('article'), dbo.qp_tab_id('Article Info'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, USER_CONTROL_FILE, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Edit Article', 'Properties', 'edit_article', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('article'), '~/UserControls/Articles/ArticleEditor.ascx', '~/Article/Properties/', dbo.qp_tab_id('Article Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Article', 'update_article', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('article'), dbo.qp_tab_id('Article Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Article', 'remove_article', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('article'), 'Do you really want to remove this article?', dbo.qp_tab_id('Article Info'), '~/Article/Remove/', 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Multiple Remove Article', 'multiple_remove_article', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('article'), 'Do you really want to remove the following articles: {0}?', dbo.qp_tab_id('Articles'), '~/Article/MultipleRemove/', 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Create Like Article', 'copy_article', dbo.qp_action_type_id('copy'), dbo.qp_entity_type_id('article'), dbo.qp_tab_id('Articles'), '~/Article/Copy/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Article', 'refresh_article', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article'), dbo.qp_tab_id('Article Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, HAS_PRE_ACTION)
values('Move Article To Archive', 'move_to_archive_article', dbo.qp_action_type_id('archive'), dbo.qp_entity_type_id('article'), '~/Article/MoveToArchive/', dbo.qp_tab_id('Article Info'), 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Capture Lock Article', 'capture_lock_article', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('article'), '~/Article/CaptureLock/', dbo.qp_tab_id('Article Info'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, HAS_PRE_ACTION)
values('Multiple Move Article To Archive', 'multiple_move_to_archive_article', dbo.qp_action_type_id('multiple_archive'), dbo.qp_entity_type_id('article'), '~/Article/MultipleMoveToArchive/', dbo.qp_tab_id('Articles'), 0, 1)


-- article version

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Preview Article Version', 'Preview', 'preview_article_version', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('article_version'), '~/ArticleVersion/Properties/', dbo.qp_tab_id('Article Restore Preview'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Compare With Current', 'compare_article_version_with_current', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('article_version'), '~/ArticleVersion/CompareWithCurrent/', dbo.qp_tab_id('Article Restore Preview'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Compare Article Versions', 'compare_article_versions', dbo.qp_action_type_id('compare'), dbo.qp_entity_type_id('article_version'), '~/ArticleVersion/Compare/', dbo.qp_tab_id('Article Restore Preview'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Article Versions', 'refresh_article_versions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article_version'), dbo.qp_tab_id('Article Restore Preview'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Fake Article Versions', 'fake_article_versions', dbo.qp_action_type_id('fake'), dbo.qp_entity_type_id('article_version'), dbo.qp_tab_id('Article Restore Preview'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_article_version', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('article_version'), dbo.qp_tab_id('Article Restore Preview'), '~/ArticleVersion/Cancel/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Restore Article Version', 'restore_article_version', dbo.qp_action_type_id('restore'), dbo.qp_entity_type_id('article_version'), dbo.qp_tab_id('Article Restore Preview'), '~/ArticleVersion/Restore/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Article Version', 'remove_article_version', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('article_version'), 'Do you really want to remove this article version?', dbo.qp_tab_id('Article Restore Preview'), '~/ArticleVersion/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Article Version', 'refresh_article_version', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article_version'), dbo.qp_tab_id('Article Restore Preview'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Article Version', 'multiple_remove_article_version', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('article_version'), 'Do you really want to remove the following article versions: {0}?', dbo.qp_tab_id('Audit Trail'), '~/ArticleVersion/MultipleRemove/')

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL)
values('Article Versions', 'Versions', 'list_article_version', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('article_version'), dbo.qp_tab_id('Audit Trail'), 1, '~/ArticleVersion/Index/')


-- virtual_content

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, DEFAULT_VIEW_TYPE_ID)
values('Virtual Contents', 'list_virtual_content', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Contents'), 1, '~/Content/VirtualIndex/', dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New Virtual Content', 'new_virtual_content', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('virtual_content'), '~/VirtualContent/New/', dbo.qp_tab_id('Content Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Virtual Contents', 'refresh_virtual_contents', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Contents'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Virtual Content', 'save_virtual_content', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Edit Virtual Content', 'Properties', 'edit_virtual_content', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('virtual_content'), '~/VirtualContent/Properties/', dbo.qp_tab_id('Content Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Virtual Content', 'update_virtual_content', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL)
values('Remove Virtual Content', 'remove_virtual_content', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Content Info'), 'Do you really want to remove this virtual content?', '~/VirtualContent/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONFIRM_PHRASE)
values('Multiple Remove Virtual Content', 'multiple_remove_virtual_content', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Content Info'), 'Do you really want to remove the following virtual contents: {0}?')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Virtual Content', 'refresh_virtual_content', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Content Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Export Articles', 'export_virtual_content', dbo.qp_action_type_id('export'), dbo.qp_entity_type_id('virtual_content'), dbo.qp_tab_id('Export Articles'), 1)


-- virtual_field

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Fields', 'list_virtual_field', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('virtual_field'), dbo.qp_tab_id('Fields'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Fields', 'refresh_virtual_fields', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('virtual_field'), dbo.qp_tab_id('Fields'), 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Edit Field', 'Properties', 'edit_virtual_field', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('virtual_field'), '~/Field/VirtualProperties/', dbo.qp_tab_id('Field Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Update Field', 'update_virtual_field', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('virtual_field'), dbo.qp_tab_id('Field Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Field', 'refresh_virtual_field', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('virtual_field'), dbo.qp_tab_id('Field Info'), 1)


-- virtual article

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, CONTROLLER_ACTION_URL)
values('Articles', 'list_virtual_article', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('virtual_article'), dbo.qp_tab_id('Articles'), 1, dbo.qp_view_id('list'), '~/Article/Index/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Virtual Article', 'refresh_virtual_article', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('virtual_article'), dbo.qp_tab_id('Article Info'), 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('View Virtual Article', 'Properties', 'view_virtual_article', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('virtual_article'), '~/Article/VirtualProperties/', dbo.qp_tab_id('Article Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Virtual Articles', 'refresh_virtual_articles', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('virtual_article'), dbo.qp_tab_id('Articles'), 1)


-- archive article

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('View Archive Article', 'Properties', 'view_archive_article', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('archive_article'), '~/Article/ArchiveProperties/', dbo.qp_tab_id('Archived Article Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID)
values('Form Restore Article From Archive', 'form_restore_from_archive_article', dbo.qp_action_type_id('restore'), dbo.qp_entity_type_id('archive_article'), '~/Article/RestoreFromArchive/', dbo.qp_tab_id('Archived Article Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID)
values('Restore Article From Archive', 'restore_from_archive_article', dbo.qp_action_type_id('restore'), dbo.qp_entity_type_id('archive_article'), '~/Article/RestoreFromArchive/', dbo.qp_tab_id('Archived Article Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID)
values('Multiple Restore Article From Archive', 'multiple_restore_from_archive_article', dbo.qp_action_type_id('multiple_restore'), dbo.qp_entity_type_id('archive_article'), '~/Article/MultipleRestoreFromArchive/', dbo.qp_tab_id('Archives'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Archive Articles', 'list_archive_article', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('archive_article'), '~/Article/ArchiveIndex/', dbo.qp_tab_id('Archives'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Archive Article', 'multiple_remove_archive_article', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('archive_article'), 'Do you really want to remove the following archive articles: {0}?', dbo.qp_tab_id('Articles'), '~/Article/MultipleRemoveFromArchive/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Archive Article', 'remove_archive_article', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('archive_article'), 'Do you really want to remove this archive article?', dbo.qp_tab_id('Articles'), '~/Article/RemoveFromArchive/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Archive Article', 'refresh_archive_article', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('archive_article'), dbo.qp_tab_id('Archived Article Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Archive Articles', 'refresh_archive_articles', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('archive_article'), dbo.qp_tab_id('Archives'), 1)





insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('site_library'), dbo.qp_view_id('list'), NULL, 1, 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('site_library'), dbo.qp_view_id('details'), NULL, 1, 2)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('site_library'), dbo.qp_view_id('thumbnails'), NULL, 1, 3)


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('content_library'), dbo.qp_view_id('list'), NULL, 1, 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('content_library'), dbo.qp_view_id('details'), NULL, 1,  2)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('content_library'), dbo.qp_view_id('thumbnails'), NULL, 1, 3)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('popup_site_library'), dbo.qp_view_id('list'), NULL, 1, 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('popup_site_library'), dbo.qp_view_id('details'), NULL, 1, 2)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('popup_site_library'), dbo.qp_view_id('thumbnails'), NULL, 1, 3)


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('popup_content_library'), dbo.qp_view_id('list'), NULL, 1, 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('popup_content_library'), dbo.qp_view_id('details'), NULL, 1,  2)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, PREVENT_DEFAULT_BEHAVIOR, [ORDER])
values(dbo.qp_action_id('popup_content_library'), dbo.qp_view_id('thumbnails'), NULL, 1, 3)


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_article'), dbo.qp_view_id('list'), '~/Article/Index/', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_article'), dbo.qp_view_id('tree'), '~/Article/Tree/', 2)


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('select_article'), dbo.qp_view_id('list'), '~/Article/Select/', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('select_article'), dbo.qp_view_id('tree'), '~/Article/SelectTree/', 2)


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('multiple_select_article'), dbo.qp_view_id('list'), '~/Article/MultipleSelect/', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('multiple_select_article'), dbo.qp_view_id('tree'), '~/Article/MultipleSelectTree/', 2)


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_virtual_article'), dbo.qp_view_id('list'), '', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_virtual_article'), dbo.qp_view_id('tree'), '', 2)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('multiple_select_contents_for_union'), dbo.qp_view_id('list'), '~/VirtualContent/MultipleSelectForUnion/', 1)

GO

delete from context_menu

INSERT INTO context_menu (CODE) VALUES ('db')
INSERT INTO context_menu (CODE) VALUES ('sites')
INSERT INTO context_menu (CODE) VALUES ('site')
INSERT INTO context_menu (CODE) VALUES ('contents')
INSERT INTO context_menu (CODE) VALUES ('content')
INSERT INTO context_menu (CODE) VALUES ('virtual_contents')
INSERT INTO context_menu (CODE) VALUES ('virtual_content')
INSERT INTO context_menu (CODE) VALUES ('virtual_field')
INSERT INTO context_menu (CODE) VALUES ('content_groups')
INSERT INTO context_menu (CODE) VALUES ('content_group')
INSERT INTO context_menu (CODE) VALUES ('fields')
INSERT INTO context_menu (CODE) VALUES ('field')
INSERT INTO context_menu (CODE) VALUES ('articles')
INSERT INTO context_menu (CODE) VALUES ('article')
INSERT INTO context_menu (CODE) VALUES ('archive_article')
INSERT INTO context_menu (CODE) VALUES ('virtual_article')
INSERT INTO context_menu (CODE) VALUES ('article_version')
INSERT INTO context_menu (CODE) VALUES ('site_folder')
INSERT INTO context_menu (CODE) VALUES ('content_folder')
INSERT INTO context_menu (CODE) VALUES ('site_file')
INSERT INTO context_menu (CODE) VALUES ('content_file')

GO


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('db'), dbo.qp_action_id('refresh_db'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('db'), dbo.qp_action_id('home'), 'Home', 'home.gif', 2)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('db'), dbo.qp_action_id('edit_profile'), 'Change Profile', 'properties.gif', 3)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER])
values(dbo.qp_context_menu_id('db'), dbo.qp_action_id('about'), 'About System', 4)


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('sites'), dbo.qp_action_id('refresh_sites'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('sites'), dbo.qp_action_id('new_site'), 'New Site', 2, 'add.gif')


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('refresh_site'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('search_in_articles'), 'Search in Articles', 2, 'search.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('assemble_site'), 'Assemble', 'total_assemble.gif', 3)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('assemble_contents'), 'Assemble Contents', 4, 'assemble.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('remove_site'), 'Remove', 5, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('edit_site'), 'Properties', 'properties.gif', 6)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('site_library'), 'Library', 7, 'site_folder.gif')


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('contents'), dbo.qp_action_id('refresh_contents'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('contents'), dbo.qp_action_id('new_content'), 'New Content', 2, 'add.gif')


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('refresh_content'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], BOTTOM_SEPARATOR, ICON)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('new_field'), 'New Field', 2, 0, 'add.gif')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], BOTTOM_SEPARATOR, ICON)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('new_article'), 'New Article', 3, 1, 'add.gif')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('copy_content'), 'Create Like', 4, 'create_like.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('remove_content'), 'Remove', 5, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER], BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('edit_content'), 'Properties', 'properties.gif', 6, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('list_article'), 'Articles', 7, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('list_archive_article'), 'Archive Articles', 8, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('content_library'), 'Library', 9, 'content_folder.gif')


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('virtual_contents'), dbo.qp_action_id('refresh_virtual_contents'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('virtual_contents'), dbo.qp_action_id('new_virtual_content'), 'New Virtual Content', 'add.gif', 2)


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('virtual_content'), dbo.qp_action_id('refresh_virtual_content'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('virtual_content'), dbo.qp_action_id('remove_virtual_content'), 'Remove', 2, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('virtual_content'), dbo.qp_action_id('edit_virtual_content'), 'Properties', 'properties.gif', 3)


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('virtual_field'), dbo.qp_action_id('edit_virtual_field'), 'Properties', 'properties.gif', 1)


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_groups'), dbo.qp_action_id('refresh_content_groups'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('content_groups'), dbo.qp_action_id('new_content_group'), 'New Content Group', 2, 'add.gif')


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_group'), dbo.qp_action_id('refresh_content_group'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_group'), dbo.qp_action_id('remove_content_group'), 'Remove', 2, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('content_group'), dbo.qp_action_id('edit_content_group'), 'Properties', 'properties.gif', 3)



insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('fields'), dbo.qp_action_id('refresh_fields'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], BOTTOM_SEPARATOR, ICON)
values(dbo.qp_context_menu_id('fields'), dbo.qp_action_id('new_field'), 'New Field', 2, 0, 'add.gif')


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('field'), dbo.qp_action_id('refresh_field'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('field'), dbo.qp_action_id('remove_field'), 'Remove Field', 2, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('field'), dbo.qp_action_id('edit_field'), 'Properties', 'properties.gif', 3)


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('articles'), dbo.qp_action_id('refresh_articles'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], BOTTOM_SEPARATOR, ICON)
values(dbo.qp_context_menu_id('articles'), dbo.qp_action_id('new_article'), 'New Article', 2, 0, 'add.gif')


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('article'), dbo.qp_action_id('refresh_article'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('article'), dbo.qp_action_id('copy_article'), 'Create Like', 2, 'create_like.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('article'), dbo.qp_action_id('move_to_archive_article'), 'Move to Archive', 3, 'archive.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('article'), dbo.qp_action_id('remove_article'), 'Remove', 4, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('article'), dbo.qp_action_id('edit_article'), 'Properties', 'properties.gif', 5)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('article'), dbo.qp_action_id('list_article_version'), 'Versions', 'version.gif', 6)


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('virtual_article'), dbo.qp_action_id('view_virtual_article'), 'Properties', 'properties.gif', 1)



insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('archive_article'), dbo.qp_action_id('restore_from_archive_article'), 'Restore from Archive', 1, 'unarchive.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('archive_article'), dbo.qp_action_id('remove_archive_article'), 'Remove', 2, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('archive_article'), dbo.qp_action_id('view_archive_article'), 'Properties', 'properties.gif', 3)


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('article_version'), dbo.qp_action_id('remove_article_version'), 'Remove', 1, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('article_version'), dbo.qp_action_id('preview_article_version'), 'Preview', 'properties.gif', 2)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('article_version'), dbo.qp_action_id('compare_article_version_with_current'), 'Compare With Current', 3, 'compare.gif', 1)

-- site folder
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site_folder'), dbo.qp_action_id('refresh_site_folder'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site_folder'), dbo.qp_action_id('new_site_folder'), 'New Site Folder', 2, 'add.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site_folder'), dbo.qp_action_id('remove_site_folder'), 'Remove', 3, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('site_folder'), dbo.qp_action_id('edit_site_folder'), 'Properties', 'properties.gif', 4)



insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site_file'), dbo.qp_action_id('remove_site_file'), 'Remove', 1, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('site_file'), dbo.qp_action_id('edit_site_file'), 'Properties', 'properties.gif', 2)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('site_file'), dbo.qp_action_id('preview_site_file'), 'Preview', 'preview.gif', 3)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('site_file'), dbo.qp_action_id('download_site_file'), 'Download', 'download.gif', 4)

-- content folder
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_folder'), dbo.qp_action_id('refresh_content_folder'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_folder'), dbo.qp_action_id('new_content_folder'), 'New Content Folder', 2, 'add.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_folder'), dbo.qp_action_id('remove_content_folder'), 'Remove', 3, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('content_folder'), dbo.qp_action_id('edit_content_folder'), 'Properties', 'properties.gif', 4)



insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_file'), dbo.qp_action_id('remove_content_file'), 'Remove', 1, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('content_file'), dbo.qp_action_id('edit_content_file'), 'Properties', 'properties.gif', 2)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('content_file'), dbo.qp_action_id('preview_content_file'), 'Preview', 'preview.gif', 3)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('content_file'), dbo.qp_action_id('download_content_file'), 'Download', 'download.gif', 4)

GO

update ENTITY_TYPE set DEFAULT_ACTION_ID = dbo.qp_action_id('home') where CODE = 'db'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('db') where CODE = 'db'
update ENTITY_TYPE set CANCEL_ACTION_ID = dbo.qp_action_id('cancel') where CODE = 'db'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_site'), DEFAULT_ACTION_ID = dbo.qp_action_id('list_content') where CODE = 'site'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('site'), FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('sites') where CODE = 'site'
update ENTITY_TYPE set CANCEL_ACTION_ID = dbo.qp_action_id('cancel_site') where CODE = 'site'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = NULL, DEFAULT_ACTION_ID = dbo.qp_action_id('edit_content_group') where CODE = 'content_group'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('content_group'), FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('content_groups') where CODE = 'content_group'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_content'), DEFAULT_ACTION_ID = dbo.qp_action_id('list_article') where CODE = 'content'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('content'), FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('contents') where CODE = 'content'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_virtual_content'), DEFAULT_ACTION_ID = dbo.qp_action_id('list_virtual_article') where CODE = 'virtual_content'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('virtual_content'), FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('virtual_contents') where CODE = 'virtual_content'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = NULL, DEFAULT_ACTION_ID = dbo.qp_action_id('edit_virtual_field') where CODE = 'virtual_field'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('virtual_field'), FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('virtual_fields') where CODE = 'virtual_field'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_field'), DEFAULT_ACTION_ID = dbo.qp_action_id('edit_field') where CODE = 'field'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('field'), FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('fields') where CODE = 'field'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_article'), DEFAULT_ACTION_ID = dbo.qp_action_id('edit_article') where CODE = 'article'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('article'), FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('articles') where CODE = 'article'
update ENTITY_TYPE set CANCEL_ACTION_ID = dbo.qp_action_id('cancel_article') where CODE = 'article'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_article_version'), DEFAULT_ACTION_ID = dbo.qp_action_id('preview_article_version') where CODE = 'article_version'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('article_version') where CODE = 'article_version'
update ENTITY_TYPE set CANCEL_ACTION_ID = dbo.qp_action_id('cancel_article_version') where CODE = 'article_version'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_virtual_article'), DEFAULT_ACTION_ID = dbo.qp_action_id('view_virtual_article') where CODE = 'virtual_article'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('virtual_article') where CODE = 'virtual_article'

update ENTITY_TYPE set FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_archive_article'), DEFAULT_ACTION_ID = dbo.qp_action_id('view_archive_article') where CODE = 'archive_article'
update ENTITY_TYPE set CONTEXT_MENU_ID = dbo.qp_context_menu_id('archive_article') where CODE = 'archive_article'

GO

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_profile') WHERE CODE = 'update_profile'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_site') WHERE CODE = 'save_site'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_site') WHERE CODE = 'update_site'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_content_group') WHERE CODE = 'save_content_group'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_content_group') WHERE CODE = 'update_content_group'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_content') WHERE CODE = 'save_content'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_content') WHERE CODE = 'update_content'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_virtual_content') WHERE CODE = 'save_virtual_content'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_virtual_content') WHERE CODE = 'update_virtual_content'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_article') WHERE CODE = 'save_article'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_article') WHERE CODE = 'update_article'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_field') WHERE CODE = 'save_field'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_field') WHERE CODE = 'update_field'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_virtual_field') WHERE CODE = 'save_virtual_field'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_virtual_field') WHERE CODE = 'update_virtual_field'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_article') WHERE CODE = 'form_restore_from_archive_article'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_virtual_field') WHERE CODE = 'update_virtual_field'

update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_site_file') WHERE CODE = 'update_site_file'
update BACKEND_ACTION set NEXT_SUCCESSFUL_ACTION_ID = dbo.qp_action_id('edit_content_file') WHERE CODE = 'update_content_file'
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site'), dbo.qp_action_id('edit_site'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site'), dbo.qp_action_id('assemble_site'), 'Assemble', 'assemble.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site'), dbo.qp_action_id('assemble_contents'), 'Assemble Contents', 'assemble.gif', NULL, 3, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site'), dbo.qp_action_id('copy_site'), 'Create Like', 'create_like.gif', NULL, 4, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site'), dbo.qp_action_id('multiple_remove_site'), 'Remove', 'delete.gif', NULL, 5, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site'), dbo.qp_action_id('refresh_sites'), 'Refresh', 'refresh.gif', NULL, 6, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_site'), dbo.qp_action_id('save_site'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_site'), dbo.qp_action_id('refresh_site'), 'Refresh', 'refresh.gif', NULL, 2, 1)



insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site'), dbo.qp_action_id('update_site'), 'Save', 'save.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site'), dbo.qp_action_id('remove_site'), 'Remove', 'delete.gif', NULL, 4, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site'), dbo.qp_action_id('refresh_site'), 'Refresh', 'refresh.gif', NULL, 5, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_content'), dbo.qp_action_id('edit_content'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_content'), dbo.qp_action_id('copy_content'), 'Create Like', 'create_like.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_content'), dbo.qp_action_id('multiple_remove_content'), 'Remove', 'delete.gif', NULL, 4, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_content'), dbo.qp_action_id('refresh_contents'), 'Refresh', 'refresh.gif', NULL, 5, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_virtual_content'), dbo.qp_action_id('edit_virtual_content'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_virtual_content'), dbo.qp_action_id('multiple_remove_virtual_content'), 'Remove', 'delete.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_virtual_content'), dbo.qp_action_id('refresh_virtual_contents'), 'Refresh', 'refresh.gif', NULL, 3, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_content'), dbo.qp_action_id('save_content'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_content'), dbo.qp_action_id('refresh_content'), 'Refresh', 'refresh.gif', NULL, 2, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content'), dbo.qp_action_id('update_content'), 'Save', 'save.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content'), dbo.qp_action_id('remove_content'), 'Remove', 'delete.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content'), dbo.qp_action_id('refresh_content'), 'Refresh', 'refresh.gif', NULL, 4, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_virtual_content'), dbo.qp_action_id('save_virtual_content'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_virtual_content'), dbo.qp_action_id('refresh_virtual_content'), 'Refresh', 'refresh.gif', NULL, 2, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_virtual_content'), dbo.qp_action_id('update_virtual_content'), 'Save', 'save.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_virtual_content'), dbo.qp_action_id('remove_virtual_content'), 'Remove', 'delete.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_virtual_content'), dbo.qp_action_id('refresh_virtual_content'), 'Refresh', 'refresh.gif', NULL, 4, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_content_group'), dbo.qp_action_id('save_content_group'), 'Save', 'save.gif', NULL, 1, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_group'), dbo.qp_action_id('update_content_group'), 'Save', 'save.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_group'), dbo.qp_action_id('refresh_content_group'), 'Refresh', 'refresh.gif', NULL, 3, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_field'), dbo.qp_action_id('edit_field'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_field'), dbo.qp_action_id('multiple_remove_field'), 'Remove', 'delete.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_field'), dbo.qp_action_id('refresh_fields'), 'Refresh', 'refresh.gif', NULL, 3, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_field'), dbo.qp_action_id('save_field'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_field'), dbo.qp_action_id('refresh_field'), 'Refresh', 'refresh.gif', NULL, 2, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_field'), dbo.qp_action_id('update_field'), 'Save', 'save.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_field'), dbo.qp_action_id('remove_field'), 'Remove', 'delete.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_field'), dbo.qp_action_id('refresh_field'), 'Refresh', 'refresh.gif', NULL, 4, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_virtual_field'), dbo.qp_action_id('update_virtual_field'), 'Save', 'save.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_virtual_field'), dbo.qp_action_id('refresh_virtual_field'), 'Refresh', 'refresh.gif', NULL, 4, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article'), dbo.qp_action_id('edit_article'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article'), dbo.qp_action_id('list_article_version'), 'Versions', 'version.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article'), dbo.qp_action_id('copy_article'), 'Create Like', 'create_like.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article'), dbo.qp_action_id('multiple_move_to_archive_article'), 'Move to Archive', 'archive.gif', NULL, 4, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article'), dbo.qp_action_id('multiple_remove_article'), 'Remove', 'delete.gif', NULL, 5, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article'), dbo.qp_action_id('refresh_articles'), 'Refresh', 'refresh.gif', NULL, 6, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_virtual_article'), dbo.qp_action_id('view_virtual_article'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_virtual_article'), dbo.qp_action_id('refresh_virtual_articles'), 'Refresh', 'refresh.gif', NULL, 2, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('view_virtual_article'), dbo.qp_action_id('refresh_virtual_article'), 'Refresh', 'refresh.gif', NULL, 1, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_archive_article'), dbo.qp_action_id('view_archive_article'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_archive_article'), dbo.qp_action_id('multiple_restore_from_archive_article'), 'Restore from Archive', 'unarchive.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_archive_article'), dbo.qp_action_id('multiple_remove_archive_article'), 'Remove', 'delete.gif', NULL, 3, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_archive_article'), dbo.qp_action_id('refresh_archive_articles'), 'Refresh', 'refresh.gif', NULL, 4, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('view_archive_article'), dbo.qp_action_id('form_restore_from_archive_article'), 'Restore from Archive', 'unarchive.gif', NULL, 1, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('view_archive_article'), dbo.qp_action_id('remove_archive_article'), 'Remove', 'delete.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('view_archive_article'), dbo.qp_action_id('refresh_archive_article'), 'Refresh', 'refresh.gif', NULL, 3, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_version'), dbo.qp_action_id('preview_article_version'), 'Preview', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_version'), dbo.qp_action_id('compare_article_versions'), 'Compare Versions', 'compare.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_version'), dbo.qp_action_id('compare_article_version_with_current'), 'Compare with Current', 'compare.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_version'), dbo.qp_action_id('multiple_remove_article_version'), 'Remove', 'delete.gif', NULL, 4, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_version'), dbo.qp_action_id('refresh_article_versions'), 'Refresh', 'refresh.gif', NULL, 5, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('compare_article_versions'), dbo.qp_action_id('refresh_article_versions'), 'Refresh', 'refresh.gif', NULL, 1, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('compare_article_version_with_current'), dbo.qp_action_id('refresh_article_versions'), 'Refresh', 'refresh.gif', NULL, 1, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_article'), dbo.qp_action_id('save_article'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_article'), dbo.qp_action_id('refresh_article'), 'Refresh', 'refresh.gif', NULL, 2, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article'), dbo.qp_action_id('update_article'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article'), dbo.qp_action_id('list_article_version'), 'Versions', 'version.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article'), dbo.qp_action_id('move_to_archive_article'), 'Archive', 'archive.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article'), dbo.qp_action_id('remove_article'), 'Remove', 'delete.gif', NULL, 4, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article'), dbo.qp_action_id('refresh_article'), 'Refresh', 'refresh.gif', NULL, 5, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_profile'), dbo.qp_action_id('update_profile'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_profile'), dbo.qp_action_id('refresh_profile'), 'Refresh', 'refresh.gif', NULL, 2, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('preview_article_version'), dbo.qp_action_id('restore_article_version'), 'Restore', 'restore.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('preview_article_version'), dbo.qp_action_id('remove_article_version'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('preview_article_version'), dbo.qp_action_id('refresh_article_version'), 'Refresh', 'refresh.gif', NULL, 3, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('search_in_articles'), dbo.qp_action_id('refresh_search_in_articles'), 'Refresh', 'refresh.gif', NULL, 1, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('site_library'), dbo.qp_action_id('edit_site_file'), 'Properties', 'properties.gif', NULL, 1, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('site_library'), dbo.qp_action_id('multiple_remove_site_file'), 'Remove', 'delete.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('site_library'), dbo.qp_action_id('preview_site_file'), 'Preview', 'preview.gif', NULL, 3, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('site_library'), dbo.qp_action_id('download_site_file'), 'Download', 'download.gif', NULL, 4, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('site_library'), dbo.qp_action_id('refresh_site_library'), 'Refresh', 'refresh.gif', NULL, 5, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_file'), dbo.qp_action_id('update_site_file'), 'Save', 'save.gif', NULL, 1, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('content_library'), dbo.qp_action_id('edit_content_file'), 'Properties', 'properties.gif', NULL, 1, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('content_library'), dbo.qp_action_id('multiple_remove_content_file'), 'Remove', 'delete.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('content_library'), dbo.qp_action_id('preview_content_file'), 'Preview', 'preview.gif', NULL, 3, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('content_library'), dbo.qp_action_id('download_content_file'), 'Download', 'download.gif', NULL, 4, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('content_library'), dbo.qp_action_id('refresh_content_library'), 'Refresh', 'refresh.gif', NULL, 5, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_file'), dbo.qp_action_id('update_content_file'), 'Save', 'save.gif', NULL, 1, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_site_folder'), dbo.qp_action_id('save_site_folder'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_folder'), dbo.qp_action_id('update_site_folder'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_folder'), dbo.qp_action_id('refresh_site_folder'), 'Refresh', 'refresh.gif', NULL, 2, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_content_folder'), dbo.qp_action_id('save_content_folder'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_folder'), dbo.qp_action_id('update_content_folder'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_folder'), dbo.qp_action_id('refresh_content_folder'), 'Refresh', 'refresh.gif', NULL, 2, 0)
GO

exec qp_update_translations 'About System', 'О системе'
exec qp_update_translations 'Refresh', 'Обновить';
exec qp_update_translations 'Select', 'Выбор';
exec qp_update_translations 'Multiple Select', 'Множественный выбор';
exec qp_update_translations 'Edit Profile', 'Свойства профиля';
exec qp_update_translations 'Remove Site', 'Удалить сайт';
exec qp_update_translations 'Assemble Contents', 'Собрать контенты';
exec qp_update_translations 'Site Folders', 'Папки сайта';
exec qp_update_translations 'Site Folder', 'Папка сайта';
exec qp_update_translations 'Content Groups', 'Группы контентов';
exec qp_update_translations 'Content Group', 'Группа контентов';
exec qp_update_translations 'New Content Group', 'Новая группа контентов';
exec qp_update_translations 'Edit Content Group', 'Свойства группы контентов';
exec qp_update_translations 'Remove Content Group', 'Удалить группу контентов';
exec qp_update_translations 'Edit Content', 'Свойства контента';
exec qp_update_translations 'Remove Content', 'Удалить контент';
exec qp_update_translations 'Create Like Content', 'Создать контент по образцу';
exec qp_update_translations 'Content Folders', 'Папки контента';
exec qp_update_translations 'Content Folder', 'Папка контента';
exec qp_update_translations 'Virtual Contents', 'Виртуальные контенты';
exec qp_update_translations 'New Virtual Content', 'Новый виртуальный контент';
exec qp_update_translations 'Remove Virtual Content', 'Удалить виртуальный контент';
exec qp_update_translations 'Edit Field', 'Свойства поля';
exec qp_update_translations 'Remove Field', 'Удалить поле';
exec qp_update_translations 'Article', 'Статья';
exec qp_update_translations 'Edit Article', 'Свойства статьи';
exec qp_update_translations 'Create Like Article', 'Создать статью по образцу';
exec qp_update_translations 'Remove Article', 'Удалить статью';
exec qp_update_translations 'Select Article', 'Выбор статьи';
exec qp_update_translations 'Multiple Select Article', 'Выбор статей';
exec qp_update_translations 'Do you really want to remove this site?', 'Вы действительно хотите удалить данный сайт?';
exec qp_update_translations 'Do you really want to remove the following sites: {0}?', 'Вы действительно хотите удалить следующие сайты: {0}?';
exec qp_update_translations 'Do you really want to remove this content?', 'Вы действительно хотите удалить данный контент?';
exec qp_update_translations 'Do you really want to remove the following contents: {0}?', 'Вы действительно хотите удалить следующие контенты: {0}?';
exec qp_update_translations 'Do you really want to remove this virtual content?', 'Вы действительно хотите удалить данный виртуальный контент?';
exec qp_update_translations 'Do you really want to remove the following virtual contents: {0}?', 'Вы действительно хотите удалить следующие виртуальные контенты: {0}?';
exec qp_update_translations 'Do you really want to remove this field?', 'Вы действительно хотите удалить данное поле?';
exec qp_update_translations 'Do you really want to remove the following fields: {0}?', 'Вы действительно хотите удалить следующие поля: {0}?';
exec qp_update_translations 'Do you really want to remove this article?', 'Вы действительно хотите удалить данную статью?';
exec qp_update_translations 'Do you really want to remove the following articles: {0}?', 'Вы действительно хотите удалить следующие статьи: {0}?';
exec qp_update_translations 'Do you really want to remove this archive article?', 'Вы действительно хотите удалить данную архивную статью?';
exec qp_update_translations 'Do you really want to remove the following archive articles: {0}?', 'Вы действительно хотите удалить следующие архивные статьи: {0}?';
exec qp_update_translations 'Do you really want to remove this article version?', 'Вы действительно хотите удалить данную версию статьи?';
exec qp_update_translations 'Do you really want to remove the following article backups: {0}?', 'Вы действительно хотите удалить следующие версии статьи: {0}?';
exec qp_update_translations 'Do you really want to remove this file?', 'Вы действительно хотите удалить этот файл?';
exec qp_update_translations 'Do you really want to remove the following files: {0}?', 'Вы действительно хотите удалить следующие файлы: {0}?';

exec qp_update_translations 'Article Version', 'Версия статьи'
exec qp_update_translations 'Article Versions', 'Версии статьи'
exec qp_update_translations 'Versions', 'Версии'
exec qp_update_translations 'Compare Versions', 'Сравнить версии'
exec qp_update_translations 'Compare Article Versions', 'Сравнить версии статьи'
exec qp_update_translations 'Preview Article Version', 'Просмотр версии статьи'
exec qp_update_translations 'Compare with Current', 'Сравнить c текущей'
exec qp_update_translations 'Compare with Current', 'Сравнить c текущей'
exec qp_update_translations 'Contents in Group', 'Контенты в группе'
exec qp_update_translations 'Virtual Contents in Group', 'Виртуальные контенты в группе'
exec qp_update_translations 'Root Folder', 'Корневая папка'
exec qp_update_translations 'Archive Article', 'Архивная статья'
exec qp_update_translations 'Virtual Article', 'Виртуальная статья'
exec qp_update_translations 'Archive Articles', 'Архивные статьи'
exec qp_update_translations 'Move to Archive', 'Архивировать'
exec qp_update_translations 'Restore from Archive', 'Восстановить'
exec qp_update_translations 'View Archive Article', 'Просмотр архивной статьи'
exec qp_update_translations 'View Virtual Article', 'Просмотр виртуальной статьи'
exec qp_update_translations 'View', 'Просмотр'
exec qp_update_translations 'Properties', 'Свойства'
exec qp_update_translations 'Search in Articles', 'Поиск по статьям'
exec qp_update_translations 'Rename', 'Переименовать'
exec qp_update_translations 'Preview', 'Просмотр'
exec qp_update_translations 'Download', 'Скачать'
exec qp_update_translations 'File Properties', 'Свойства файла'
exec qp_update_translations 'Site Library File', 'Файл библиотеки сайта'
exec qp_update_translations 'Content Library File', 'Файл библиотеки контента'
exec qp_update_translations 'Customer Code', 'Код клиента'
exec qp_update_translations 'New Subfolder', 'Новая подпапка'
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.8.0.22', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.8.0.22 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.0.0
-- Release
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.0', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.0 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.0.1
-- Fix path computing
-- **************************************

ALTER TRIGGER [dbo].[tiu_content_folder_path] ON [dbo].[content_FOLDER]
FOR INSERT, UPDATE
AS
  DECLARE @folder_id NUMERIC
  DECLARE @path NVARCHAR(3000), @name NVARCHAR(100), @parent_id NUMERIC, @id NUMERIC, @db_path NVARCHAR(3000)
  DECLARE i CURSOR FOR SELECT folder_id, parent_folder_id, name, [path] FROM inserted
  OPEN i
  FETCH NEXT FROM i INTO @folder_id, @parent_id, @name, @db_path
  WHILE @@fetch_status = 0 BEGIN
  IF @db_path IS NULL BEGIN
    SET @path = '\'
    WHILE @parent_id IS NOT NULL BEGIN
      IF @path IS NULL SET @path = ''
      SET @path = '\' + @name + @path
      SET @id = @parent_id
      SELECT @name = name, @parent_id = parent_folder_id FROM content_folder WHERE folder_id = @id
    END
    UPDATE content_folder SET path = @path WHERE folder_id = @folder_id
  END
    FETCH NEXT FROM i INTO @folder_id, @parent_id, @name, @db_path
  END
  CLOSE i
  DEALLOCATE i
GO

ALTER TRIGGER [dbo].[tiu_folder_path] ON [dbo].[FOLDER]
FOR INSERT, UPDATE
AS
  DECLARE @folder_id NUMERIC
  DECLARE @path NVARCHAR(3000), @name NVARCHAR(100), @parent_id NUMERIC, @id NUMERIC, @db_path NVARCHAR(3000)
  DECLARE i CURSOR FOR SELECT folder_id, parent_folder_id, name, [path] FROM inserted
  OPEN i
  FETCH NEXT FROM i INTO @folder_id, @parent_id, @name, @db_path
  WHILE @@fetch_status = 0 BEGIN
  IF @db_path IS NULL BEGIN
    SET @path = '\'
    WHILE @parent_id IS NOT NULL BEGIN
      IF @path IS NULL SET @path = ''
      SET @path = '\' + @name + @path
      SET @id = @parent_id
      SELECT @name = name, @parent_id = parent_folder_id FROM folder WHERE folder_id = @id
    END
    UPDATE folder SET path = @path WHERE folder_id = @folder_id
    END
    FETCH NEXT FROM i INTO @folder_id, @parent_id, @name, @db_path
  END
  CLOSE i
  DEALLOCATE i
GO

update backend_action set has_pre_action = 1 where code in ('remove_content_folder', 'remove_site_folder')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.1', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.1 completed'
GO

-- **************************************
-- Maxim Tertyshnyy
-- version 7.9.0.2
-- Add Action Log
-- **************************************
CREATE TABLE [dbo].[BACKEND_ACTION_LOG](
  [ID] [int] IDENTITY(1,1) NOT NULL,
  [USER_ID] [numeric](18, 0) NOT NULL,
  [EXEC_TIME] [datetime] NOT NULL,
  [ACTION_CODE] [nvarchar](50) NOT NULL,
  [ACTION_TYPE_CODE] [nvarchar](50) NOT NULL,
  [ENTITY_TYPE_CODE] [nvarchar](50) NOT NULL,
  [ENTITY_ID] [numeric](18, 0) NULL,
  [ENTITY_STRING_ID] [nvarchar](255) NULL,
  [PARENT_ENTITY_ID] [numeric](18, 0) NULL,
  [ENTITY_TITLE] [nvarchar](255) NULL,
 CONSTRAINT [PK_ACTION_EXEC_LOG] PRIMARY KEY CLUSTERED
(
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_LOG_ACTION_CODE] ON [dbo].[BACKEND_ACTION_LOG]
(
  [ACTION_CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_LOG_ACTION_TYPE_CODE] ON [dbo].[BACKEND_ACTION_LOG]
(
  [ACTION_TYPE_CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_LOG_ENTITY_STRING_ID] ON [dbo].[BACKEND_ACTION_LOG]
(
  [ENTITY_STRING_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_LOG_ENTITY_TYPE_CODE] ON [dbo].[BACKEND_ACTION_LOG]
(
  [ENTITY_TYPE_CODE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_LOG_EXEC_TIME] ON [dbo].[BACKEND_ACTION_LOG]
(
  [EXEC_TIME] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_LOG_PARENT_ENTITY_ID] ON [dbo].[BACKEND_ACTION_LOG]
(
  [PARENT_ENTITY_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BACKEND_ACTION_LOG_USER_ID] ON [dbo].[BACKEND_ACTION_LOG]
(
  [USER_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

ALTER PROCEDURE [dbo].[qp_get_articles_tree]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @article_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @filter varchar(max) = '',
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN
  DECLARE @attribute_name AS nvarchar(255)
  DECLARE @rel_attribute_name AS nvarchar(255)

  DECLARE @security_sql AS nvarchar(max)
  DECLARE @sql_result AS nvarchar(max)
  DECLARE @use_security bit, @parent_level numeric


  SELECT TOP 1
    @attribute_name = ATTRIBUTE_NAME,
    @rel_attribute_name = REL_ATTRIBUTE_NAME
  FROM
    dbo.qp_get_article_relation_columns(@content_id)

  IF (@@ROWCOUNT = 1)
    BEGIN
      DECLARE @title_field_name AS nvarchar(255)

      SELECT TOP 1
        @title_field_name = ATTRIBUTE_NAME
      FROM
        CONTENT_ATTRIBUTE
      WHERE
        CONTENT_ID = @content_id AND view_in_list = 1
      ORDER BY
        ATTRIBUTE_ORDER ASC

      select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id
      select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)
      if @parent_level = 0
        SET @filter = '1 = 0'

      if @use_security = 1
        EXEC dbo.qp_GetPermittedItemsAsQuery
          @user_id = @user_id,
          @group_id = 0,
          @start_level = @permission_level,
          @end_level = 4,
          @entity_name = 'content_item',
          @parent_entity_name = 'content',
          @parent_entity_id = @content_id,
          @SQLOut = @security_sql OUTPUT

      SET @sql_result = ''
      SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST (c.[' + @title_field_name + '] as nvarchar(max)) AS CONTENT_ITEM_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST (c.[' + @rel_attribute_name + ']  as nvarchar(max)) AS CONTENT_ITEM_ALIAS, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.VISIBLE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.STATUS_TYPE_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.CONTENT_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.locked_by, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.ARCHIVE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.not_for_replication, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.SCHEDULE_NEW_VERSION_PUBLICATION, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.splitted, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.PERMANENT_LOCK, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.LOCKED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] AS PARENT_CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
          SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
          SET @sql_result = @sql_result + '     COUNT(CONTENT_ITEM_ID) ' + CHAR(13)
          SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
          SET @sql_result = @sql_result + '     content_' + CAST(@content_id AS varchar)  + '_united ' + CHAR(13)
          SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
          SET @sql_result = @sql_result + '     [' + @attribute_name + '] = c.CONTENT_ITEM_ID ' + CHAR(13)
          IF @filter <> ''
            SET @sql_result = @sql_result + '     AND ' + @filter + CHAR(13)
          SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
          SET @sql_result = @sql_result + '   1 ' + CHAR(13)
          SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
          SET @sql_result = @sql_result + '   0 ' + CHAR(13)
          SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[USER_ID] AS LOCKER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.FIRST_NAME AS LOCKER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.LAST_NAME AS LOCKER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.EMAIL AS LOCKER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[LOGIN] AS LOCKER_LOGIN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' @record_count = COUNT(c.CONTENT_ITEM_ID) ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)

      if @use_security = 1
      BEGIN
        SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
        SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
        SET @sql_result = @sql_result + 'ON ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
      END

      SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' CONTENT_ITEM AS ci ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS lu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
      IF (@article_id IS NOT NULL)
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] = ' + CAST(@article_id AS varchar) + ' ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] IS NULL ' + CHAR(13)
        END
      IF @filter <> ''
        SET @sql_result = @sql_result + ' AND ' + @filter + CHAR(13)

      IF (@count_only = 0)
        BEGIN
        SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID ASC '
      END

      IF (@count_only = 0)
        BEGIN
          EXEC(@sql_result)

          SET @total_records = @@ROWCOUNT
        END
      ELSE
        BEGIN
          EXEC sp_executesql
            @sql_result,
            N'@record_count int OUTPUT',
            @record_count = @total_records OUTPUT
        END
    END
  ELSE
    BEGIN
      SET @total_records = 0
    END
END
GO

CREATE PROCEDURE [dbo].[qp_get_entity_titles_for_log]
  @entity_type_code nvarchar(50),
  @entity_item_ids nvarchar(max)
AS
BEGIN
  SET NOCOUNT ON;

  DECLARE @sql nvarchar(max);
  DECLARE @title_field AS nvarchar(max)

  IF (@entity_type_code = 'article' OR @entity_type_code = 'archive_article')
    BEGIN
      --EXEC qp_get_article_titles_for_log @entity_item_ids
      declare @content_id AS numeric(18,0)

      set @sql = 'select @content_id = content_id FROM content_item WHERE CONTENT_ITEM_ID IN(' +  @entity_item_ids + ')';
      EXEC sp_executesql @sql, N'@content_id numeric(18,0) OUTPUT', @content_id = @content_id OUTPUT
      SELECT @title_field = dbo.qp_get_display_field(@content_id, default)

      SET @sql = 'SELECT content_item_id as ID, CAST([' + @title_field + '] AS NVARCHAR (255)) as TITLE FROM content_' + cast(@content_id as varchar) + '_united' +
        ' WHERE content_item_id IN (' + @entity_item_ids + ')'

      PRINT @sql
      EXEC sp_executesql @sql
    END
  ELSE
    BEGIN
      DECLARE @source AS nvarchar(50)
      DECLARE @id_field AS nvarchar(50)

      SELECT
        @source = [SOURCE],
        @id_field = ID_FIELD,
        @title_field = TITLE_FIELD
      FROM
        ENTITY_TYPE
      WHERE
        CODE = @entity_type_code

      IF (@source IS NOT NULL AND @id_field IS NOT NULL AND @title_field IS NOT NULL)
      BEGIN
        SET @sql = 'SELECT ' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE FROM ' + @source + ' WHERE ' + @id_field + ' IN( ' + @entity_item_ids + ')'
        EXEC sp_executesql @sql
      END
    END
END
GO

INSERT INTO VIEW_TYPE (NAME, CODE, ICON)
VALUES ('Actions Log', 'action_log_list', 'actions_log.gif')

INSERT INTO VIEW_TYPE (NAME, CODE, ICON)
VALUES ('QP7 Button Trace', 'button_trace_list', 'actions_log.gif')

INSERT INTO VIEW_TYPE (NAME, CODE, ICON)
VALUES ('QP7 Removed Entities', 'removed_entities_list', 'actions_log.gif')
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Audit', 'list_action_log', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('db'), '~/ActionLog/Actions/', dbo.qp_tab_id('Home'), 1, dbo.qp_view_id('action_log_list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('QP7 Button Trace', 'list_button_trace', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('db'), '~/ActionLog/ButtonTrace/', dbo.qp_tab_id('Home'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('QP7 Removed Entities', 'list_removed_entities', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('db'), '~/ActionLog/RemovedEntities/', dbo.qp_tab_id('Home'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh', 'refresh_action_log', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('db'), dbo.qp_tab_id('Home'))


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_action_log'), dbo.qp_view_id('action_log_list'), '~/ActionLog/Actions/', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_action_log'), dbo.qp_view_id('button_trace_list'), '~/ActionLog/ButtonTrace/', 2)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_action_log'), dbo.qp_view_id('removed_entities_list'), '~/ActionLog/RemovedEntities/', 3)
GO


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('db'), dbo.qp_action_id('list_action_log'), 'Audit', 'actions_log.gif', 5)
GO


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_action_log'), dbo.qp_action_id('refresh_action_log'), 'Refresh', 'refresh.gif', 1, 0)
GO


exec qp_update_translations 'Audit', 'Аудит'
exec qp_update_translations 'Actions Log', 'Журнал действий'
exec qp_update_translations 'QP7 Button Trace', 'Журнал нажатия кнопок'
exec qp_update_translations 'QP7 Removed Entities', 'Удаленные сущности'
GO


CREATE VIEW [dbo].[V_BACKEND_ACTION_LOG] AS
select L.ID as Id,
L.EXEC_TIME AS ExecutionTime,
AT.CODE AS ActionTypeCode,
AT.NAME AS ActionTypeName,
ET.CODE AS EntityTypeCode,
ET.NAME AS EntityTypeName,
L.ENTITY_STRING_ID AS EntityStringId,
L.PARENT_ENTITY_ID AS ParentEntityId,
L.ENTITY_TITLE AS EntityTitle,
U.[USER_ID] as UserId,
U.[LOGIN] as UserLogin
from dbo.[BACKEND_ACTION_LOG] L
RIGHT JOIN dbo.[USERS] U ON U.[USER_ID] = L.[USER_ID]
JOIN dbo.[ACTION_TYPE] AT ON AT.CODE = L.ACTION_TYPE_CODE
JOIN dbo.[ENTITY_TYPE] ET ON ET.CODE = L.ENTITY_TYPE_CODE
GO

CREATE PROCEDURE [dbo].[qp_paged_action_log]
    @where_block nvarchar(max) = '',
    @order_by_block nvarchar(max) = 'ExecutionTime DESC',
    @count_only bit = 0,
    @start_row int = 0,
    @page_size int = 0,
    @total_records int OUTPUT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

    EXEC qp_get_paged_data
    @select_block = '*',
    @from_block = 'dbo.[V_BACKEND_ACTION_LOG]',
    @entity_name = 'db',

    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size
END
GO

ALTER VIEW [dbo].[VW_ENTITY_TYPE]
AS
  SELECT
    ID,
    NAME,
    CODE,
    PARENT_ID,
    CAST(NULL as nvarchar(50)) AS PARENT_CODE,
    [ORDER],
    HAS_ITEM_NODES,
    [DISABLED],
    CANCEL_ACTION_ID,
    CAST(NULL as nvarchar(50)) AS CANCEL_ACTION_CODE
  FROM
    ENTITY_TYPE
GO

ALTER TABLE [dbo].[ENTITY_TYPE]  WITH CHECK ADD  CONSTRAINT [FK_ENTITY_TYPE_CANCEL_ACTION_ID] FOREIGN KEY([CANCEL_ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO
ALTER TABLE [dbo].[ENTITY_TYPE] CHECK CONSTRAINT [FK_ENTITY_TYPE_CANCEL_ACTION_ID]
GO

ALTER TABLE [dbo].[BACKEND_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_BACKEND_ACTION_NEXT_SUCCESSFUL_ACTION] FOREIGN KEY([NEXT_SUCCESSFUL_ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO
ALTER TABLE [dbo].[BACKEND_ACTION] CHECK CONSTRAINT [FK_BACKEND_ACTION_NEXT_SUCCESSFUL_ACTION]
GO

ALTER TABLE [dbo].[BACKEND_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_BACKEND_ACTION_NEXT_FAILED_ACTION] FOREIGN KEY([NEXT_FAILED_ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO
ALTER TABLE [dbo].[BACKEND_ACTION] CHECK CONSTRAINT [FK_BACKEND_ACTION_NEXT_FAILED_ACTION]
GO

ALTER TABLE [dbo].[UNION_ATTRS]
ADD [EF_FIX] [BIT] NULL
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.2', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.2 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.0.3
-- New Attribute Type
-- **************************************

if not exists (select * from attribute_type where attribute_type_id = 13)
insert into attribute_type
values(13, 'Relation Many-to-One', 'Relation Many-to-One', 'images/types/relation.gif', 'NUMERIC', 'relation_m2o', null, 'relation.gif')
GO

exec qp_update_translations 'Relation Many-to-One', 'Связь Многие-к-одному'
GO

if not exists (select * From information_schema.columns where table_name = 'content_attribute' and column_name = 'back_related_attribute_id')
begin
  ALTER TABLE dbo.CONTENT_ATTRIBUTE
  ADD BACK_RELATED_ATTRIBUTE_ID numeric(18, 0) NULL
  ALTER TABLE dbo.CONTENT_ATTRIBUTE
  ADD CONSTRAINT FK_CONTENT_ATTRIBUTE_BACK_RELATED_ATTRIBUTE_ID FOREIGN KEY (BACK_RELATED_ATTRIBUTE_ID) REFERENCES CONTENT_ATTRIBUTE (ATTRIBUTE_ID)
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.3', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.3 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.4
-- QP8 Audit
-- **************************************

UPDATE ACTION_TYPE SET NAME = 'Multiple Archive' WHERE CODE = 'multiple_archive'
UPDATE ACTION_TYPE SET NAME = 'Multiple Remove' WHERE CODE = 'multiple_remove'
UPDATE ACTION_TYPE SET NAME = 'Multiple Restore' WHERE CODE = 'multiple_restore'
GO

UPDATE ENTITY_TYPE set NAME = 'Template Format Version' WHERE CODE = 'template_object_format_version'
UPDATE ENTITY_TYPE set NAME = 'Page Format Version' WHERE CODE = 'page_object_format_version'
GO

exec qp_update_translations 'Change Lock', 'Изменить блокировку'
exec qp_update_translations 'Export', 'Экспорт'
exec qp_update_translations 'Multiple Archive', 'Множественная архивация'
exec qp_update_translations 'Multiple Remove', 'Множественное удаление'
exec qp_update_translations 'Multiple Restore', 'Множественное восстановление'
exec qp_update_translations 'Update & Assemble', 'Обновить и собрать'

exec qp_update_translations 'Field', 'Поле'
exec qp_update_translations 'Virtual Field', 'Виртуальное поле'
exec qp_update_translations 'Template Format Version', 'Версия формата шаблона'
exec qp_update_translations 'Page Format Version', 'Версия формата страницы'
exec qp_update_translations 'Page Object', 'Объект страницы'
exec qp_update_translations 'Template Object', 'Объект шаблона'
exec qp_update_translations 'Snippet', 'Шаблоны кода'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.4', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.4 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.5
-- QP8 Audit
-- **************************************

CREATE VIEW dbo.[V_BUTTON_TRACE] WITH SCHEMABINDING
AS
  select B.BUTTON_NAME as ButtonName,
    T.activated as ActivatedTime,
    U.[USER_ID] as UserId,
    U.[LOGIN] as UserLogin
  from dbo.[BUTTON_TRACE] T
  JOIN dbo.[USERS] U ON U.[USER_ID] = T.[USER_ID]
  JOIN dbo.[BUTTONS] B ON B.BUTTON_ID = ISNULL(T.button_id, T.tbutton_id)
GO

CREATE VIEW dbo.[V_REMOVED_ENTITIES] WITH SCHEMABINDING
AS
  select RE.ID as EntityId,
    RE.PARENT_ID as ParentEntityId,
    RE.ENTITY_NAME as EntityTypeCode,
    RE.TITLE as EntityTitle,
    U.[USER_ID] as UserId,
    U.[LOGIN] as UserLogin,
    RE.[DELETED] as DeletedTime
  from dbo.[REMOVED_ENTITIES] RE
  JOIN dbo.[USERS] U ON RE.[USER_ID] = U.[USER_ID]
GO

CREATE PROCEDURE [dbo].[qp_paged_button_trace]
    @where_block nvarchar(max) = '',
    @order_by_block nvarchar(max) = 'ActivatedTime DESC',
    @count_only bit = 0,
    @start_row int = 0,
    @page_size int = 0,
    @total_records int OUTPUT
AS
BEGIN
  SET NOCOUNT ON;

    EXEC qp_get_paged_data
    @select_block = '*',
    @from_block = 'dbo.[V_BUTTON_TRACE]',
    @entity_name = 'db',

    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size
END
GO

CREATE PROCEDURE [dbo].[qp_paged_removed_entities]
    @where_block nvarchar(max) = '',
    @order_by_block nvarchar(max) = 'DeletedTime DESC',
    @count_only bit = 0,
    @start_row int = 0,
    @page_size int = 0,
    @total_records int OUTPUT
AS
BEGIN
  SET NOCOUNT ON;

    EXEC qp_get_paged_data
    @select_block = '*',
    @from_block = 'dbo.[V_REMOVED_ENTITIES]',
    @entity_name = 'db',

    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size
END
GO

ALTER PROCEDURE [dbo].[qp_drop_link_with_check]
@link_id numeric
AS
IF @link_id is not null
BEGIN
      IF NOT EXISTS (SELECT link_id from content_attribute ca join content c on c.content_id = ca.content_id where link_id = @link_id)
      BEGIN
            DELETE FROM content_to_content WHERE link_id = @link_id
      END
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.5', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.5 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.6
-- QP8 Audit + fix empty password bug
-- **************************************

ALTER TABLE dbo.SESSIONS_LOG ADD
  IS_QP7 bit NOT NULL CONSTRAINT DF_SESSIONS_LOG_IS_QP7 DEFAULT 1
GO
ALTER TABLE dbo.SESSIONS_LOG SET (LOCK_ESCALATION = TABLE)
GO

ALTER trigger [dbo].[tiu_update_hash] on [dbo].[USERS] after insert, update
as
begin
  if update(password)
  begin
    declare @salt bigint, @hash binary(20), @old_hash binary(20)
    declare @id numeric, @user_id numeric, @password nvarchar(255)
    declare @is_insert bit, @update_modified bit, @i numeric, @count numeric
    declare @users table
    (
      id numeric primary key identity(1,1),
      user_id numeric,
      salt bigint,
      password nvarchar(255)
    )

    if not exists (select user_id from deleted)
      set @is_insert = 1
    else
      set @is_insert = 0

    insert into @users(user_id, password, salt)
    select user_id, password, salt from inserted

    set @i = 1
    select @count = count(user_id) from @users

    while @i < @count + 1
    begin
      select @user_id = user_id, @password = password, @salt = salt from @users where id = @i
      if @is_insert = 1
        set @salt = cast(substring(cast(NEWID() as binary(16)), 1, 8) as bigint)
      if @password <> ''
      begin
        set @hash = dbo.qp_get_hash(@password, @salt)
        set @update_modified = 1
        if @is_insert = 0
        begin
          select @old_hash = hash from deleted where user_id = @user_id
          if @hash = @old_hash
            set @update_modified = 0
        end
        if @update_modified = 1
          update users set password = '', salt = @salt, hash = @hash, password_modified = getdate() where user_id = @user_id
        else
          update users set password = '', salt = @salt, hash = @hash where user_id = @user_id
        --update users set salt = @salt, hash = dbo.qp_get_hash(@password, @salt) where user_id = @user_id
      end
      set @i = @i + 1
    end
  end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.6', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.6 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.0.7
-- M2O Field and removing base content
-- **************************************
ALTER TRIGGER [dbo].[tbd_delete_content] ON [dbo].[CONTENT] INSTEAD OF DELETE
AS
BEGIN
alter table content_item disable trigger td_delete_item

UPDATE content_attribute SET related_attribute_id = NULL
where related_attribute_id in (
  select attribute_id from content_attribute ca
  inner join deleted d on ca.content_id = d.content_id
)

delete from content_attribute where back_related_attribute_id in
(
  select attribute_id from content_attribute ca
  inner join deleted d on ca.content_id = d.content_id
)

update content_attribute set link_id = null where link_id in (select link_id from content_link cl
inner join deleted d on cl.content_id = d.content_id)

delete content_to_content from content_to_content cc
inner join deleted d on d.content_id = cc.r_content_id or d.content_id = cc.l_content_id

delete container from container c
inner join deleted d on d.content_id = c.content_id

delete content_form from content_form cf
inner join deleted d on d.content_id = cf.content_id

delete content_item from content_item ci
inner join deleted d on d.content_id = ci.content_id

delete content_tab_bind from content_tab_bind ctb
inner join deleted d on d.content_id = ctb.content_id

delete content from content c inner join deleted d on c.content_id = d.content_id

alter table content_item enable trigger td_delete_item
END

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.7', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.7 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.8
-- Audit:
--    Add Sessions Log
--    Fix audit views names
-- **************************************

CREATE PROCEDURE [dbo].[qp_paged_session_log]
    @is_failed bit,
    @where_block nvarchar(max) = '',
    @order_by_block nvarchar(max) = '[SessionId] DESC',
    @count_only bit = 0,
    @start_row int = 0,
    @page_size int = 0,
    @total_records int OUTPUT
AS
BEGIN
  SET NOCOUNT ON;

  DECLARE @exact_where_block nvarchar(max);
  IF @is_failed <> 1
    BEGIN
      SET @exact_where_block = N'[USER_ID] IS NOT NULL';
    END
  ELSE
    BEGIN
      SET @exact_where_block = N'[USER_ID] IS NULL';
    END
  IF LEN(@where_block) > 0
    BEGIN
      SET @exact_where_block = @exact_where_block + ' AND ' + @where_block;
    END

    EXEC qp_get_paged_data
    @select_block = '[SESSION_ID] AS SessionId, [LOGIN] as [Login], [USER_ID] as [UserId], [START_TIME] as [StartTime], [END_TIME] as [EndTime], [IP], [BROWSER] as Browser, [SERVER_NAME] as ServerName, [AUTO_LOGGED] as AutoLogged, [SID] as [Sid], [IS_QP7] as IsQP7',
    @from_block = 'dbo.[SESSIONS_LOG]',
    @entity_name = 'db',

    @where_block = @exact_where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size
END
GO

INSERT INTO VIEW_TYPE (NAME, CODE, ICON)
VALUES ('QP7: User sessions', 'successful_sessions_list', 'actions_log.gif')
INSERT INTO VIEW_TYPE (NAME, CODE, ICON)
VALUES ('QP7: Failed logins', 'failed_sessions_list', 'actions_log.gif')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('QP7: User sessions', 'list_successful_sessions', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('db'), '~/ActionLog/SucessfullSessions/', dbo.qp_tab_id('Home'), 1)
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('QP7: Failed logins', 'list_failed_sessions', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('db'), '~/ActionLog/FailedSessions/', dbo.qp_tab_id('Home'), 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_action_log'), dbo.qp_view_id('successful_sessions_list'), '~/ActionLog/SucessfullSessions/', 4)
insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_action_log'), dbo.qp_view_id('failed_sessions_list'), '~/ActionLog/FailedSessions/', 5)

exec qp_update_translations 'QP7: User sessions', 'Пользовательские сессии'
exec qp_update_translations 'QP7: Failed logins', 'Неудачные попытки входа'
GO

UPDATE VIEW_TYPE SET NAME = N'QP7: Button Trace' WHERE CODE = 'button_trace_list'
UPDATE VIEW_TYPE SET NAME = N'QP7: Removed Entities' WHERE CODE = 'removed_entities_list'

UPDATE BACKEND_ACTION SET NAME = N'QP7: Button Trace' WHERE CODE = 'list_button_trace'
UPDATE BACKEND_ACTION SET NAME = N'QP7: Removed Entities' WHERE CODE = 'list_removed_entities'
GO

UPDATE CONTEXT_MENU_ITEM
SET BOTTOM_SEPARATOR = 1
WHERE CONTEXT_MENU_ID = dbo.qp_context_menu_id('db') AND ACTION_ID = dbo.qp_action_id('about')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.8', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.8 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.0.9
-- M2O Field
-- **************************************

ALTER PROCEDURE [dbo].[qp_get_related_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @article_id numeric(18,0) = 0,
  @field_id  numeric(18,0) = 0,
  @selection_mode AS tinyint = 0,
  @selected_article_ids AS nvarchar(max) = '0',
  @permission_level numeric(18,0),
  @filter varchar(max) = ''
AS
BEGIN
  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @link_id AS numeric(18,0) -- идентификатор связи для полей со связью многие-ко-многим
  DECLARE @back_relation_id  AS numeric(18,0)
  DECLARE @is_many_to_many AS bit -- признак наличия связи многие-ко-многим
  DECLARE @is_many_to_one AS bit
  DECLARE @title_field_name AS nvarchar(255) -- название поля, в котором хранится заголовок статьи
  DECLARE @alias_field_name AS nvarchar(255) -- название поля, в котором хранится заголовок статьи
  DECLARE @use_security bit, @parent_level numeric

  DECLARE @security_sql AS nvarchar(max)
  DECLARE @sql_result AS nvarchar(max)

  DECLARE @SELECTION_MODE_ALL AS tinyint
  DECLARE @SELECTION_MODE_ONLY_SELECTED AS tinyint

  SET @SELECTION_MODE_ALL = 0
  SET @SELECTION_MODE_ONLY_SELECTED = 1

  if @selected_article_ids is null or @selected_article_ids = ''
    set @selected_article_ids = '0'


  -- Получаем свойства связи
  SELECT
    @link_id = ca.link_id,
    @alias_field_name = rca.ATTRIBUTE_NAME,
    @back_relation_id = ca.back_related_attribute_id
  FROM CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN CONTENT_ATTRIBUTE AS rca ON rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE ca.ATTRIBUTE_ID = @field_id

  SET @is_many_to_many = 0
  SET @is_many_to_one = 0
  IF @link_id IS NOT NULL
    SET @is_many_to_many = 1
  ELSE IF @back_relation_id IS NOT NULL
    SET @is_many_to_one = 1

  -- Получаем название поля, в котором хранится заголовок статьи
  SET @title_field_name = ''
  IF (@is_many_to_many = 1 OR @is_many_to_one = 1 OR @field_id = 0 )
    BEGIN
      SET @title_field_name = dbo.qp_get_display_field(@content_id, 0)
    END
  ELSE
    BEGIN
      SET @title_field_name = @alias_field_name
    END

  select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id
  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)
  if @parent_level = 0
    SET @filter = '1 = 0'

  -- Возвращаем простой список статей
  if @use_security = 1
    EXEC dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
      @start_level = @permission_level,
      @end_level = 4,
      @entity_name = 'content_item',
      @parent_entity_name = 'content',
      @parent_entity_id = @content_id,
      @SQLOut = @security_sql OUTPUT

  SET @sql_result = ''
  SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
  SET @sql_result = @sql_result + ' c.content_item_id AS id, ' + CHAR(13)
  IF (LEN(@title_field_name) > 0)
    BEGIN
      SET @sql_result = @sql_result + ' c.[' + @title_field_name + '] AS title, ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' '''' AS title, ' + CHAR(13)
    END
  SET @sql_result = @sql_result + ' CAST(( ' + CHAR(13)

  SET @sql_result = @sql_result + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
  SET @sql_result = @sql_result + '     1 ' + CHAR(13)
  SET @sql_result = @sql_result + '   ELSE ' + CHAR(13)
  SET @sql_result = @sql_result + '     0 ' + CHAR(13)
  SET @sql_result = @sql_result + '   END ' + CHAR(13)

  SET @sql_result = @sql_result + ' ) AS bit) AS is_selected ' + CHAR(13)
  SET @sql_result = @sql_result + 'FROM  ' + CHAR(13)
  SET @sql_result = @sql_result + ' content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)

  if @use_security = 1
  BEGIN
    SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
    SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
    SET @sql_result = @sql_result + 'ON ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END

  IF (@selection_mode = @SELECTION_MODE_ONLY_SELECTED)
    BEGIN
      SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
    END
  SET @sql_result = @sql_result + ' ( ' + CHAR(13)
  SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
  SET @sql_result = @sql_result + '     content_item_id ' + CHAR(13)
  SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
  SET @sql_result = @sql_result + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
  SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
  SET @sql_result = @sql_result + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
  SET @sql_result = @sql_result + ' ) AS cis ' + CHAR(13)
  SET @sql_result = @sql_result + 'ON ' + CHAR(13)
  SET @sql_result = @sql_result + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
  If @filter <> ''
    SET @sql_result = @sql_result + 'WHERE ' +  @filter + CHAR(13)
  SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
  SET @sql_result = @sql_result + ' c.content_item_id ASC ' + CHAR(13)
  print(@sql_result)
  EXEC(@sql_result)
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.9', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.9 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.10
-- Custom Action: creating and modification
-- **************************************

ALTER TABLE [dbo].[BACKEND_ACTION] ADD [IS_CUSTOM] [bit] DEFAULT (0) NOT NULL
GO

insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TITLE_FIELD, ORDER_FIELD, ICON_FIELD, TAB_ID, [DISABLED])
values ('Custom Action', 'custom_action', dbo.qp_entity_type_id('db'), 4, 'CUSTOM_ACTION', 'ID', 'NAME', '[ORDER]', 'ICON_URL', dbo.qp_tab_id('Custom Tabs'), 1)
GO

CREATE TABLE [dbo].[CUSTOM_ACTION](
  [ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
  [ACTION_ID] [int] NOT NULL,
  [NAME] [nvarchar](255) NOT NULL,
  [URL] [nvarchar](1024) NOT NULL,
  [ICON_URL] [nvarchar](255) NULL,
  [ORDER] [int] NOT NULL,
  [SITE_EXCLUDED] [bit] NOT NULL CONSTRAINT [DF_CUSTOM_ACTION_SITE_EXCLUDED] DEFAULT (1),
  [CONTENT_EXCLUDED] [bit] NOT NULL CONSTRAINT [DF_CUSTOM_ACTION_CONTENT_EXCLUDED] DEFAULT (1),
  [SHOW_IN_MENU] [bit] NOT NULL,
  [SHOW_IN_TOOLBAR] [bit] NOT NULL,
  [CREATED] [datetime] NOT NULL,
  [MODIFIED] [datetime] NOT NULL,
  [LAST_MODIFIED_BY] [numeric](18, 0) NOT NULL,
 CONSTRAINT [PK_CUSTOM_ACTION] PRIMARY KEY CLUSTERED
(
  [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
 CONSTRAINT [UNQ_CUSTOM_ACTION_ACTION_ID] UNIQUE NONCLUSTERED
(
  [ACTION_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[CUSTOM_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_CUSTOM_ACTION_BACKEND_ACTION] FOREIGN KEY([ACTION_ID])
REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO
ALTER TABLE [dbo].[CUSTOM_ACTION] CHECK CONSTRAINT [FK_CUSTOM_ACTION_BACKEND_ACTION]
GO

ALTER TABLE [dbo].[CUSTOM_ACTION]  WITH CHECK ADD  CONSTRAINT [FK_CUSTOM_ACTION_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[CUSTOM_ACTION] CHECK CONSTRAINT [FK_CUSTOM_ACTION_LAST_MODIFIED_BY]
GO

ALTER TABLE [dbo].[CUSTOM_ACTION] ADD CONSTRAINT [CUSTOM_ACTION_ORDER_MORE_ZERO] CHECK ([ORDER] > 0)
GO
ALTER TABLE [dbo].[CUSTOM_ACTION] CHECK CONSTRAINT [CUSTOM_ACTION_ORDER_MORE_ZERO]
GO



CREATE TABLE [dbo].[ACTION_CONTENT_BIND](
  [CUSTOM_ACTION_ID] [numeric](18,0) NOT NULL,
  [CONTENT_ID] [numeric](18, 0) NOT NULL,
 CONSTRAINT [PK_ACTION_CONTENT_BIND] PRIMARY KEY CLUSTERED
(
  [CUSTOM_ACTION_ID] ASC,
  [CONTENT_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[ACTION_CONTENT_BIND]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_CONTENT_BIND_CUSTOM_ACTION] FOREIGN KEY([CUSTOM_ACTION_ID])
REFERENCES [dbo].[CUSTOM_ACTION] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ACTION_CONTENT_BIND] CHECK CONSTRAINT [FK_ACTION_CONTENT_BIND_CUSTOM_ACTION]
GO

ALTER TABLE [dbo].[ACTION_CONTENT_BIND]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_CONTENT_BIND_CONTENT] FOREIGN KEY([CONTENT_ID])
REFERENCES [dbo].[CONTENT] ([CONTENT_ID])
GO
ALTER TABLE [dbo].[ACTION_CONTENT_BIND] CHECK CONSTRAINT [FK_ACTION_CONTENT_BIND_CONTENT]
GO


CREATE TABLE [dbo].[ACTION_SITE_BIND](
  [CUSTOM_ACTION_ID] [numeric](18, 0) NOT NULL,
  [SITE_ID] [numeric](18, 0) NOT NULL,
 CONSTRAINT [PK_ACTION_SITE_BIND] PRIMARY KEY CLUSTERED
(
  [CUSTOM_ACTION_ID] ASC,
  [SITE_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ACTION_SITE_BIND]  WITH CHECK ADD CONSTRAINT [FK_ACTION_SITE_BIND_CUSTOM_ACTION] FOREIGN KEY([CUSTOM_ACTION_ID])
REFERENCES [dbo].[CUSTOM_ACTION] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ACTION_SITE_BIND] CHECK CONSTRAINT [FK_ACTION_SITE_BIND_CUSTOM_ACTION]
GO

ALTER TABLE [dbo].[ACTION_SITE_BIND]  WITH CHECK ADD  CONSTRAINT [FK_ACTION_SITE_BIND_SITE] FOREIGN KEY([SITE_ID])
REFERENCES [dbo].[SITE] ([SITE_ID])
GO
ALTER TABLE [dbo].[ACTION_SITE_BIND] CHECK CONSTRAINT [FK_ACTION_SITE_BIND_SITE]
GO

ALTER TABLE dbo.ENTITY_TYPE
ADD CONTEXT_NAME nvarchar(256) NULL
GO

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'content_item_id'
where CODE = 'article'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'content_id'
where CODE = 'content'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'site_id'
where CODE = 'site'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'page_template_id'
where CODE = 'template'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'user_id'
where CODE = 'user'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'usergroup_id'
where CODE = 'user_group'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'attribute_id'
where CODE = 'field'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'object_id'
where CODE = 'template_object'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'page_id'
where CODE = 'page'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'object_id'
where CODE = 'page_object'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'notification_id'
where CODE = 'notification'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'workflow_id'
where CODE = 'workflow'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'style_id'
where CODE = 'style'

update dbo.ENTITY_TYPE set CONTEXT_NAME = 'status_type_id'
where CODE = 'status'
GO

ALTER TRIGGER [dbo].[tbd_delete_content] ON [dbo].[CONTENT] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item

  UPDATE content_attribute SET related_attribute_id = NULL
  where related_attribute_id in (
    select attribute_id from content_attribute ca
    inner join deleted d on ca.content_id = d.content_id
  )

  update content_attribute set link_id = null where link_id in (select link_id from content_link cl
  inner join deleted d on cl.content_id = d.content_id)

  delete content_to_content from content_to_content cc
  inner join deleted d on d.content_id = cc.r_content_id or d.content_id = cc.l_content_id

  delete container from container c
  inner join deleted d on d.content_id = c.content_id

  delete content_form from content_form cf
  inner join deleted d on d.content_id = cf.content_id

  delete content_item from content_item ci
  inner join deleted d on d.content_id = ci.content_id

  delete content_tab_bind from content_tab_bind ctb
  inner join deleted d on d.content_id = ctb.content_id

  delete [ACTION_CONTENT_BIND] from [ACTION_CONTENT_BIND] acb
  inner join deleted d on d.content_id = acb.content_id

  delete content from content c inner join deleted d on c.content_id = d.content_id

  alter table content_item enable trigger td_delete_item
END
GO


ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item
  alter table content_attribute disable trigger td_content_attribute_clean_empty_links
  alter table content_attribute disable trigger td_remove_field
  alter table content_attribute disable trigger td_reorder_fields
  alter table content_constraint disable trigger td_content_indexes
  alter table [object] disable trigger tu_object_format_modified
  alter table [object] disable trigger tiu_bind_objects_by_name
  alter table object_format disable trigger tbd_delete_object_format
  alter table object_values disable trigger tiud_values_format_modified
  alter table container_statuses disable trigger tiud_statuses_format_modified
  alter table item_to_item disable trigger td_item_to_item


  delete from item_to_item where link_id in
  (select link_id from site_content_link scl
  inner join deleted d on d.site_id = scl.site_id)

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  update [object] set object_format_id = null from [object] obj
  inner join page_template pt on obj.page_template_id = pt.page_template_id
  inner join deleted d on d.site_id = pt.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete [ACTION_SITE_BIND] from [ACTION_SITE_BIND] asb
  inner join deleted d on d.site_id = asb.site_id

  delete site from site s
  inner join deleted d on d.site_id = s.site_id


  alter table content_item enable trigger td_delete_item
  alter table content_attribute enable trigger td_content_attribute_clean_empty_links
  alter table content_attribute enable trigger td_remove_field
  alter table content_attribute enable trigger td_reorder_fields
  alter table content_constraint enable trigger td_content_indexes
  alter table [object] enable trigger tu_object_format_modified
  alter table [object] enable trigger tiu_bind_objects_by_name
  alter table object_format enable trigger tbd_delete_object_format
  alter table object_values enable trigger tiud_values_format_modified
  alter table container_statuses enable trigger tiud_statuses_format_modified
  alter table item_to_item enable trigger td_item_to_item
END
GO

ALTER TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id

    UPDATE SITE SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE SITE SET locked = NULL, locked_by = NULL FROM SITE c inner join deleted d on c.locked_by = d.user_id

    UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET created_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.created_by = d.user_id
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
    UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
    UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CUSTOM_ACTION SET LAST_MODIFIED_BY = 1 FROM CUSTOM_ACTION c INNER JOIN deleted d on c.LAST_MODIFIED_BY = d.[USER_ID]

    delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO


ALTER procedure [dbo].[qp_expand](@user_id numeric = 0, @code nvarchar(50) = null, @id bigint = 0, @is_folder bit = 0, @count_only bit=0, @count int = 0 output )
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint
  declare @default_action_id int, @context_menu_id int

  set @language_id = dbo.qp_language(@user_id)

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = dbo.qp_checked_action_id(@user_id, default_action_id),
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @id_str = CAST(@id as nvarchar(10))

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'


      -- process recurring --
      if @recurring_id_field is not null
      begin
        if @is_folder = 1
          set @where = @parent_id_field + ' = ' + @id_str + ' and ' + @recurring_id_field + ' is null '
        else
          set @where = @recurring_id_field + ' = ' + @id_str
      end
      else if @parent_id_field is not null
      begin
        set @where = @parent_id_field + ' = ' + @id_str
      end
      else
        set @where = '1 = 1'

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end

    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql

    --PRINT @sql;


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @id,
        CODE = @code,
        IS_FOLDER = 0,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id
    end
    else
      select @count = COUNT(ID) from @result
  end
  else
  begin
    if @count_only = 0
      if @code is not null
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, dbo.qp_translate(dbo.qp_pluralize(NAME), @language_id), CODE, 1, dbo.qp_get_icon(NULL, dbo.qp_pluralize(CODE), NULL), dbo.qp_checked_action_id(@user_id, FOLDER_DEFAULT_ACTION_ID), FOLDER_CONTEXT_MENU_ID From ENTITY_TYPE where PARENT_ID = dbo.qp_entity_type_id(@code) and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0 order by [Order]
      else
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, NAME, CODE, 0, dbo.qp_get_icon(NULL, CODE, NULL), dbo.qp_checked_action_id(@user_id, DEFAULT_ACTION_ID), CONTEXT_MENU_ID From ENTITY_TYPE where PARENT_ID is null and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0 order by [Order]
    else
      if @code is not null
        select @count = COUNT(ID) From ENTITY_TYPE where PARENT_ID = dbo.qp_entity_type_id(@code) and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0
      else
        select @count = COUNT(ID) From ENTITY_TYPE where PARENT_ID is null and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0

  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit
    declare @children_count int
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = Is_folder from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, 1, @count = @children_count output
      else
        exec dbo.qp_expand @user_id, @local_code, @local_id, 0, 1, @count = @children_count output

      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      TREE_NODE.PARENT_ID as PARENT_ID,
      dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.10', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.10 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.0.11
-- M2O Field
-- **************************************


exec qp_drop_existing 'workflow_max_statuses', 'IsView'
GO

CREATE VIEW dbo.workflow_max_statuses
WITH SCHEMABINDING
AS
select workflow_id, STATUS_TYPE_ID as max_status_type_id from
(
  select wr.workflow_id, st.status_type_id, ROW_NUMBER() OVER (PARTITION BY wr.WORKFLOW_ID ORDER BY wr.RULE_ORDER DESC ) AS 'Order'
  from dbo.workflow_rules wr
  inner join dbo.status_type st on wr.successor_status_id = st.status_type_id
) as v
where v.[Order] = 1
GO

exec qp_drop_existing 'CHILD_DELAYS', 'IsUserTable'
GO

CREATE TABLE [dbo].[CHILD_DELAYS](
  [id] [numeric](18, 0) NOT NULL,
  [child_id] [numeric](18, 0) NOT NULL,
PRIMARY KEY CLUSTERED
(
  [id] ASC,
  [child_id] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[CHILD_DELAYS] ADD CONSTRAINT FK_CHILD_DELAYS_ID FOREIGN KEY([id])
REFERENCES [dbo].[CONTENT_ITEM] ([CONTENT_ITEM_ID])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[CHILD_DELAYS] ADD CONSTRAINT FK_CHILD_DELAYS_CHILD_ID FOREIGN KEY([child_id])
REFERENCES [dbo].[CONTENT_ITEM] ([CONTENT_ITEM_ID])
GO

ALTER TRIGGER [dbo].[tbd_delete_content_item] ON [dbo].[CONTENT_ITEM] INSTEAD OF DELETE
AS
BEGIN

delete waiting_for_approval from waiting_for_approval wa inner join deleted d on wa.content_item_id = d.content_item_id

delete child_delays from child_delays cd inner join deleted d on cd.child_id = d.content_item_id

IF dbo.qp_get_version_control() IS NOT NULL BEGIN
  delete content_item_version from content_item_version civ inner join deleted d on civ.content_item_id = d.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join content_item_version civ on civ.content_item_version_id = iiv.content_item_version_id
  inner join deleted d on d.content_item_id = civ.content_item_id

  delete item_to_item_version from item_to_item_version iiv
  inner join deleted d on d.content_item_id = iiv.linked_item_id
END

delete item_link_united_full from item_link_united_full ii where ii.item_id in (select content_item_id from deleted)

delete content_data from content_data cd inner join deleted d on cd.content_item_id = d.content_item_id

delete content_item from content_item ci inner join deleted d on ci.content_item_id = d.content_item_id

END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.11', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.11 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.0.12
-- M2O Field
-- **************************************

exec qp_drop_existing 'qp_copy_schedule_to_child_delays', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].qp_copy_schedule_to_child_delays
@id numeric
AS
BEGIN
  if exists(select * from content_item_schedule where content_item_id = @id and freq_type = 2)
  begin
    update content_item_schedule set delete_job = 1 where content_item_id in (select child_id from child_delays where id = @id);
    delete from content_item_schedule where content_item_id in (select child_id from child_delays where id = @id);
    insert into content_item_schedule (CONTENT_ITEM_ID, MAXIMUM_OCCURENCES, CREATED, MODIFIED, LAST_MODIFIED_BY, freq_type, freq_interval, freq_subday_type, freq_subday_interval, freq_relative_interval, freq_recurrence_factor, active_start_date, active_end_date, active_start_time, active_end_time, occurences, use_duration, duration, duration_units, DEACTIVATE, DELETE_JOB, USE_SERVICE)
    select child_id, MAXIMUM_OCCURENCES, GETDATE(), GETDATE(), LAST_MODIFIED_BY, freq_type, freq_interval, freq_subday_type, freq_subday_interval, freq_relative_interval, freq_recurrence_factor, active_start_date, active_end_date, active_start_time, active_end_time, occurences, use_duration, duration, duration_units, DEACTIVATE, DELETE_JOB, USE_SERVICE
    from content_item_schedule cis inner join child_delays cd on cis.content_item_id = cd.id where content_item_id = @id
    end
END
GO

ALTER PROCEDURE [dbo].[qp_merge_article]
@item_id numeric
AS
BEGIN
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0, not_for_replication = 1, MODIFIED = GETDATE(), LAST_MODIFIED_BY = 1 WHERE content_item_id = @item_id
  exec qp_replicate @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE child_id = @item_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.12', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.12 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.0.13
-- Split nvarchar(max) support
-- **************************************
exec qp_drop_existing 'Split', 'IsTableFunction'
GO

CREATE FUNCTION dbo.Split(@Str nvarchar(max), @Delimiter char(1)) RETURNS @Results TABLE (Items nvarchar(max))
AS BEGIN
  DECLARE @Counter int
  DECLARE @Slice nvarchar(max)
  SELECT @Counter = 1
  IF @Str IS NULL RETURN

  WHILE @Counter !=0
  BEGIN
    SELECT @Counter = CHARINDEX(@Delimiter,@Str)
    IF @Counter !=0
      SELECT @Slice = LEFT(@Str,@Counter - 1)
    ELSE
      SELECT @Slice = @Str

    INSERT INTO @Results(Items) VALUES(@Slice)
    SELECT @Str = RIGHT(@Str,LEN(@Str) - @Counter)

    IF LEN(@Str) = 0 BREAK
  END
  RETURN
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.13', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.13 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.0.14
-- Update Article SPs
-- **************************************

exec qp_drop_existing 'qp_update_data', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_update_data
@id numeric,
@fieldId numeric,
@value nvarchar(max),
@not_for_replication bit
AS
BEGIN
  update content_data set modified = getdate(), data = @value, blob_data = null, not_for_replication = @not_for_replication where content_item_id = @id and attribute_id = @fieldId;
END
GO

exec qp_drop_existing 'qp_update_blob_data', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_update_blob_data
@id numeric,
@fieldId numeric,
@value nvarchar(max),
@not_for_replication bit
AS
BEGIN
  update content_data set modified = getdate(), data = null, blob_data = @value, not_for_replication = @not_for_replication where content_item_id = @id and attribute_id = @fieldId;
END
GO

exec qp_drop_existing 'qp_update_m2m', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_update_m2m
@id numeric,
@linkId numeric,
@value nvarchar(max),
@splitted bit = 0
AS
BEGIN
  declare @newIds table (id numeric primary key)
  declare @ids table (id numeric primary key)
  declare @crossIds table (id numeric primary key)

  insert into @newIds select * from dbo.split(@value, ',')

  IF @splitted = 1
    insert into @ids select linked_item_id from item_link_async where link_id = @linkId and item_id = @id
  ELSE
    insert into @ids select linked_item_id from item_link where link_id = @linkId and item_id = @id

  insert into @crossIds select t1.id from @ids t1 inner join @newIds t2 on t1.id = t2.id
  delete from @ids where id in (select id from @crossIds)
  delete from @newIds where id in (select id from @crossIds)

  IF @splitted = 0
    DELETE FROM item_link_async WHERE link_id = @linkId AND item_id = @id

  IF @splitted = 1
    DELETE FROM item_link_async WHERE link_id = @linkId AND item_id = @id and linked_item_id in (select id from @ids)
  ELSE
    DELETE FROM item_link_united_full WHERE link_id = @linkId AND item_id = @id and linked_item_id in (select id from @ids)

  IF @splitted = 1
    INSERT INTO item_link_async SELECT @linkId, @id, id from @newIds
  ELSE
    INSERT INTO item_to_item SELECT @linkId, @id, id from @newIds

  declare @currentId numeric
  while exists (select * from @newIds)
  begin
    select @currentId = id from @newIds

    exec qp_apply_link_id_to_data @linkId, @currentId

    IF @splitted = 0
      and exists (select * from content_item where content_item_id = @currentId and splitted = 1)
      and not exists (select * from item_link_async where link_id = @linkId and item_id = @currentId and linked_item_id = @id)
      begin
        insert into item_link_async with(rowlock) values(@linkId, @currentId, @id)
      end

    delete from @newIds where id = @currentId
  end
END
GO


exec qp_drop_existing 'qp_get_m2o_ids', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_get_m2o_ids]
@contentId numeric,
@fieldName nvarchar(255),
@id numeric
AS BEGIN
  declare @sql nvarchar(1024)
  set @sql = 'select content_item_id from content_' + CAST(@contentId as nvarchar(255)) + '_united where [' + @fieldName + '] = @id'
  exec sp_executesql @sql, N'@id numeric', @id = @id
END
GO

exec qp_drop_existing 'qp_update_m2o', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_update_m2o
@id numeric,
@fieldId numeric,
@value nvarchar(max)
AS
BEGIN
  declare @ids table (id numeric primary key)
  declare @new_ids table (id numeric primary key);
  declare @cross_ids table (id numeric primary key);

  declare @contentId numeric, @fieldName nvarchar(255)
  select @contentId = content_id, @fieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @fieldId

  insert into @ids
  exec qp_get_m2o_ids @contentId, @fieldName, @id

  select content_item_id
  from content_data where ATTRIBUTE_ID = @fieldId and DATA = @id

  insert into @new_ids select * from dbo.split(@value, ',');

  insert into @cross_ids select t1.id from @ids t1 inner join @new_ids t2 on t1.id = t2.id
  delete from @ids where id in (select id from @cross_ids);
  delete from @new_ids where id in (select id from @cross_ids);

  insert into #resultIds(id, attribute_id, to_remove)
  select id, @fieldId as attribute_id, 1 as to_remove from @ids
  union all
  select id, @fieldId as attribute_id, 0 as to_remove from @new_ids
END
GO

exec qp_drop_existing 'qp_update_m2o_final', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_update_m2o_final
@id numeric
AS
BEGIN

  if exists(select * from #resultIds)
  begin
    declare @statusId numeric
    declare @splitted bit
    declare @lastModifiedBy numeric
    declare @ids table (id numeric, attribute_id numeric not null, to_remove bit not null default 0, processed bit not null default 0, primary key(id, attribute_id))

    insert into @ids(id, attribute_id, to_remove)
    select * from #resultIds

    select @statusId = STATUS_TYPE_ID, @splitted = SPLITTED, @lastModifiedBy = LAST_MODIFIED_BY from content_item where CONTENT_ITEM_ID = @id

    update content_item set modified = getdate(), last_modified_by = @lastModifiedBy, not_for_replication = 1
    where content_item_id in (select id from @ids)

    update content_data set content_data.data = @id, content_data.blob_data = null, content_data.modified = getdate()
    from content_data cd inner join @ids r on cd.attribute_id = r.attribute_id and cd.content_item_id = r.id
    where r.to_remove = 0

    update content_data set content_data.data = null, content_data.blob_data = null, content_data.modified = getdate()
    from content_data cd inner join @ids r on cd.attribute_id = r.attribute_id and cd.content_item_id = r.id
    where r.to_remove = 1

    declare @maxStatus numeric
    declare @resultId numeric

    select @maxStatus = max_status_type_id from content_item_workflow ciw left join workflow_max_statuses wms on ciw.workflow_id = wms.workflow_id where ciw.content_item_id = @id

    if @statusId = @maxStatus and @splitted = 0 begin
    while exists (select * from child_delays where id = @id)
    begin
      select @resultId = child_id from child_delays where id = @id
      exec qp_merge_article @resultId
      delete from child_delays where id = @id and child_id = @resultId
    end
    end else if @maxStatus is not null begin
      insert into child_delays (id, child_id) select @id, r.id from @ids r
      inner join content_item ci on r.id = ci.content_item_id
      left join child_delays ex on ex.child_id = ci.content_item_id and ex.id = @id
      left join content_item_workflow ciw on ci.content_item_id = ciw.content_item_id
      left join workflow_max_statuses wms on ciw.workflow_id = wms.workflow_id
      where ex.child_id is null and ci.status_type_id = wms.max_status_type_id and ci.splitted = 0

      update content_item set schedule_new_version_publication = 1 where content_item_id in (select child_id from child_delays where id = @id)
    end

    while exists (select id from @ids where processed = 0)
    begin
      select @resultId = id from @ids where processed = 0
      exec qp_replicate @resultId
      update @ids set processed = 1 where id = @resultId
    end
  end
END

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.14', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.14 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.0.15
-- Child delays fix
-- **************************************

exec qp_drop_existing 'qp_update_m2o_final', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_update_m2o_final]
@id numeric
AS
BEGIN
  declare @statusId numeric
  declare @splitted bit
  declare @lastModifiedBy numeric
  declare @ids table (id numeric, attribute_id numeric not null, to_remove bit not null default 0, processed bit not null default 0, primary key(id, attribute_id))

  insert into @ids(id, attribute_id, to_remove)
  select * from #resultIds

  select @statusId = STATUS_TYPE_ID, @splitted = SPLITTED, @lastModifiedBy = LAST_MODIFIED_BY from content_item where CONTENT_ITEM_ID = @id

  update content_item set modified = getdate(), last_modified_by = @lastModifiedBy, not_for_replication = 1
  where content_item_id in (select id from @ids)

  update content_data set content_data.data = @id, content_data.blob_data = null, content_data.modified = getdate()
  from content_data cd inner join @ids r on cd.attribute_id = r.attribute_id and cd.content_item_id = r.id
  where r.to_remove = 0

  update content_data set content_data.data = null, content_data.blob_data = null, content_data.modified = getdate()
  from content_data cd inner join @ids r on cd.attribute_id = r.attribute_id and cd.content_item_id = r.id
  where r.to_remove = 1

  declare @maxStatus numeric
  declare @resultId numeric

  select @maxStatus = max_status_type_id from content_item_workflow ciw left join workflow_max_statuses wms on ciw.workflow_id = wms.workflow_id where ciw.content_item_id = @id

  if @statusId = @maxStatus and @splitted = 0 begin
  while exists (select * from child_delays where id = @id)
  begin
    select @resultId = child_id from child_delays where id = @id
    print @resultId
    delete from child_delays where id = @id and child_id = @resultId
    if not exists(select * from child_delays where child_id = @resultId)
    begin
      exec qp_merge_article @resultId
    end
  end
  end else if @maxStatus is not null begin
    insert into child_delays (id, child_id) select @id, r.id from @ids r
    inner join content_item ci on r.id = ci.content_item_id
    left join child_delays ex on ex.child_id = ci.content_item_id and ex.id = @id
    left join content_item_workflow ciw on ci.content_item_id = ciw.content_item_id
    left join workflow_max_statuses wms on ciw.workflow_id = wms.workflow_id
    where ex.child_id is null and ci.status_type_id = wms.max_status_type_id
      and (ci.splitted = 0 or ci.splitted = 1 and exists(select * from CHILD_DELAYS where child_id = ci.CONTENT_ITEM_ID and id <> @id))

    update content_item set schedule_new_version_publication = 1 where content_item_id in (select child_id from child_delays where id = @id)
  end

  while exists (select id from @ids where processed = 0)
  begin
    select @resultId = id from @ids where processed = 0
    exec qp_replicate @resultId
    update @ids set processed = 1 where id = @resultId
  end
END

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.15', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.15 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.0.16
-- Create/Restore Versions for M2O
-- **************************************

ALTER PROCEDURE [dbo].[create_content_item_version]
  @uid NUMERIC,
  @content_item_id NUMERIC,
  @content_version_id NUMERIC = NULL
AS
  DECLARE @content_item_version_id NUMERIC, @tm DATETIME
  SET @tm = GETDATE()
  -- delete > max_num_of_stored_versions
  DECLARE @max_num_of_stored_versions NUMERIC
  DECLARE @content_id NUMERIC
  SELECT @max_num_of_stored_versions = c.max_num_of_stored_versions,
  @content_id = c.content_id
  FROM content AS c
  INNER JOIN content_item AS ci ON c.content_id = ci.content_id
  WHERE ci.content_item_id = @content_item_id
IF @max_num_of_stored_versions <> 0
BEGIN
  DECLARE @item_version_count INT
  SELECT @item_version_count = COUNT(content_item_version_id) FROM content_item_version
  WHERE content_item_id = @content_item_id
  IF @item_version_count >= @max_num_of_stored_versions
  BEGIN
  DECLARE @item_version_id NUMERIC
  SELECT TOP 1 @item_version_id = content_item_version_id FROM content_item_version
  WHERE content_item_id = @content_item_id ORDER BY content_item_version_id
  DELETE item_to_item_version WHERE content_item_version_id = @item_version_id
  DELETE content_item_version WHERE content_item_version_id = @item_version_id
  END

  -- Create content item version
  IF @content_version_id IS NOT NULL
    DELETE FROM content_item_version
    WHERE content_version_id = @content_version_id AND content_item_id = @content_item_id
  INSERT INTO content_item_version (version, version_label, content_version_id, content_item_id)
  VALUES (@tm, 'backup', @content_version_id, @content_item_id)
  SET @content_item_version_id = @@IDENTITY

  -- Store content item data
  INSERT INTO version_content_data (attribute_id, content_item_version_id, data, blob_data, created)
  SELECT attribute_id, @content_item_version_id, data, blob_data, @tm
  FROM content_data
  WHERE content_item_id = @content_item_id

  -- Store Many-to-Many slice
  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, ca.attribute_id, linked_item_id
  FROM item_link_united AS il
  INNER JOIN content_attribute AS ca ON ca.link_id = il.link_id
  INNER JOIN content_item AS ci ON ci.content_id =  ca.content_id AND ci.content_item_id = il.item_id
  WHERE il.item_id = @content_item_id

  -- Store Many-to-One data
  declare @many_to_ones table (id numeric, content_id numeric, name nvarchar(255))
  insert into @many_to_ones (id, content_id, name)
  select ca.attribute_id, rca.CONTENT_ID, rca.ATTRIBUTE_NAME from CONTENT_ATTRIBUTE ca
  inner join CONTENT_ATTRIBUTE rca on ca.BACK_RELATED_ATTRIBUTE_ID = rca.ATTRIBUTE_ID
  where ca.CONTENT_ID = @content_id

  while exists(select * from @many_to_ones)
  begin
  declare @currentFieldId numeric, @currentContentId numeric, @currentFieldName nvarchar(255)
  select @currentFieldId = id, @currentContentId = content_id, @currentFieldName = name from @many_to_ones

  declare @ids table (id numeric)
  insert into @ids
  exec qp_get_m2o_ids @currentContentId, @currentFieldName, @content_item_id

  SELECT @content_item_version_id, @currentFieldId, id from @ids

  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, @currentFieldId, id from @ids

  delete from @ids

  delete from @many_to_ones where id = @currentFieldId
  end

  -- Write status history log
  INSERT INTO content_item_status_history
    (content_item_id, user_id, description, created, content_item_version_id,
    system_status_type_id)
  VALUES
    (@content_item_id, @uid, 'Record version backup has been created', @tm, @content_item_version_id,
    2)
END
GO


ALTER  PROCEDURE [dbo].[restore_content_item_version]
  @uid NUMERIC,
  @version_id NUMERIC
AS
  DECLARE @id NUMERIC, @tm DATETIME
  DECLARE @content_id numeric, @splitted bit
  SET @tm = GETDATE()
  SELECT @id = content_item_id FROM content_item_version WHERE content_item_version_id = @version_id
  IF @id IS NOT NULL BEGIN
    select @content_id = content_id, @splitted = splitted from content_item where content_item_id = @id

    -- Restore common data
    DELETE FROM content_data WHERE content_item_id = @id
    INSERT INTO content_data (attribute_id, content_item_id, data, blob_data)
    SELECT attribute_id, @id, data, blob_data
    FROM version_content_data
    WHERE content_item_version_id = @version_id

    -- Restore many-to-many data
    IF @splitted = 1
    begin
    DELETE FROM item_link_async where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    INSERT INTO item_link_async
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id and link_id is not null
    end else
    begin
    DELETE FROM item_link_united_full where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    INSERT INTO item_to_item
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id and link_id is not null
    end

    -- Restore many-to-one data
    create table #resultIds (id numeric, attribute_id numeric not null, to_remove bit not null default 0)

    declare @fieldIds table (id numeric, back_id numeric)

    insert into @fieldIds
    select ATTRIBUTE_ID, BACK_RELATED_ATTRIBUTE_ID From CONTENT_ATTRIBUTE where BACK_RELATED_ATTRIBUTE_ID is not null and CONTENT_ID = @content_id

    while exists(select * from @fieldIds)
    begin
      declare @currentFieldId numeric, @currentBackFieldId numeric
      select @currentFieldId = id, @currentBackFieldId = back_id from @fieldIds

      declare @ids table (id numeric)
      insert into @ids
      select linked_item_id from item_to_item_version where attribute_id = @currentFieldId and content_item_version_id = @version_id

      declare @value nvarchar(max)
      set @value = ''
      while exists(select * from @ids)
      begin
        declare @currentId numeric
        select @currentId = id from @ids
        if @value <> ''
          set @value = @value + ','
        set @value = @value + CAST(@currentId as nvarchar)

        delete from @ids where id = @currentId

      end

      exec qp_update_m2o @id, @currentBackFieldId, @value


    delete from @fieldIds where id = @currentFieldId
    end

    exec qp_update_m2o_final @id

    drop table #resultIds

    -- Write status history log
    INSERT INTO content_item_status_history
      (content_item_id, user_id, description, created,
      system_status_type_id, content_item_version_id)
    VALUES
      (@id, @uid, 'Record has been restored from version backup', @tm,
      4, @version_id)
  END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.16', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.16 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.0.17
-- Search for M2O Field
-- **************************************

ALTER PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'STATUS_TYPE_NAME ASC, content_item_id ASC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @link_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @default_sort_column_name AS nvarchar(255)
  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @default_sort_column_name = 'CONTENT_ITEM_ID'
  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  DECLARE @relations TABLE (
    attribute_id numeric,
    attribute_name nvarchar(255),
    rel_attribute_id numeric,
    rel_attribute_type_id numeric,
    rel_attribute_name nvarchar(255),
    rel_content_id  numeric,
    rel_count numeric
  )

  INSERT INTO @relations
  SELECT
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
    rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
    rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
    rca.CONTENT_ID AS RELATED_CONTENT_ID,
    ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ID ASC) AS 'RELATED_COUNT'
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.view_in_list = 1
  ORDER BY
    ca.permanent_flag DESC,
    ca.attribute_order ASC

  -- Открываем курсор
  WHILE EXISTS(select * from @relations)
  BEGIN
    select
      @attribute_id = attribute_id,
      @attribute_name = attribute_name,
      @rel_attribute_id = rel_attribute_id,
      @rel_attribute_type_id = rel_attribute_type_id,
      @rel_attribute_name = rel_attribute_name,
      @rel_content_id = rel_content_id,
      @rel_count = rel_count
    from @relations

    SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

    IF (@rel_attribute_id IS NOT NULL)
    BEGIN
      declare @current_block nvarchar(512)
      set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
      set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
      if (@rel_count > 1)
      begin
        set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
        set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
      end

      SET @related_select_block = @related_select_block + ' '
      SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
      if @rel_attribute_type_id in (9, 10)
        SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
      SET @related_select_block = @related_select_block + @current_block
      SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
      SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
        content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
        @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
    END

    delete from @relations where attribute_id = @attribute_id

  END


  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  COALESCE(ci.status_type_id, c.status_type_id) AS workflow_status_type_id,
  COALESCE(c2.status_type_id, c.status_type_id) AS current_status_type_id,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END
  SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + ' AS c2 ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' c2.content_item_id = c.content_item_id ' + CHAR(13)

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many и Many To One --
  declare @m2o_filter nvarchar(max)
  set @m2o_filter = ''
  IF(@link_params IS NOT NULL)
    BEGIN
      declare @m2m_condition as varchar(max)
      set @m2m_condition = ''

      declare @link_params_table table (id numeric, ids varchar(max), m2m bit)

      insert into @link_params_table
      select T.f.value('./@lid', 'numeric'), T.f.value('./@iids', 'varchar(max)'), T.f.value('./@m2m', 'bit')
      from @link_params.nodes('/link/f') as T(f)

      while exists (select * from @link_params_table)
      begin
        declare @currentLinkId numeric, @currentIds varchar(max), @isCurrentM2M bit, @currentLinkText nvarchar(20)
        select @currentLinkId = id, @currentIds = ids, @isCurrentM2M = m2m from @link_params_table
        set @currentLinkText = cast(@currentLinkId as nvarchar(20))
        if @isCurrentM2M = 1
        begin
          SET @from_block = @from_block + ' INNER JOIN ( ' +
            ' select distinct item_id from dbo.item_link_united where link_id = ' + @currentLinkText + ' AND linked_item_id in (' + @currentIds + ') ' +
            ') as link_' + @currentLinkText + '  ON c.content_item_id = link_' + @currentLinkText + '.item_id ' + CHAR(13)
        end
        else begin
          declare @currentFieldName nvarchar(255), @currentContentId numeric
          select @currentContentId = content_id, @currentFieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @currentLinkId

          SET @from_block = @from_block + ' INNER JOIN ( ' +
            ' select distinct [' + @currentFieldName + '] as item_id from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
            ' where CONTENT_ITEM_ID in (' + @currentIds + ') ' +
            ' ) as back_' + @currentLinkText + '  ON c.content_item_id = back_' + @currentLinkText + '.item_id ' + CHAR(13)
        end
        delete from @link_params_table where id = @currentLinkId and m2m = @isCurrentM2M
      end
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  if LEN(@m2o_filter) > 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + @m2o_filter
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @processed_order_by_block = UPPER(@order_by)
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '  ', ' ')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '[', '')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, ']', '')

      IF (@processed_order_by_block = (@default_sort_column_name + ' ASC'))
        BEGIN
          SET @order_by_block = 'is_selected DESC, ' + @order_by
        END
      ELSE IF (@processed_order_by_block = (@default_sort_column_name + ' DESC'))
        BEGIN
          SET @order_by_block = 'is_selected ASC, ' + @order_by
        END
      ELSE
        BEGIN
          SET @order_by_block = @order_by
        END
    END
  ELSE
    BEGIN
      SET @order_by_block = 'STATUS_TYPE_NAME ASC, content_item_id ASC '
    END

  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)

  if @fts_is_incorrect_query = 1 OR @parent_level = 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + '1 = 0'
  END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = '',
    @parent_entity_id = 0

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.17', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.17 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.18
-- Getting Context Menu and Toolbar icon url was changed
-- **************************************

ALTER PROCEDURE [dbo].[qp_get_toolbar_buttons_list_by_action_code](@user_id int, @action_code nvarchar(50), @entity_id int)
AS
BEGIN
  DECLARE @action_id int
  SET @action_id = dbo.qp_action_id(@action_code)

  DECLARE @language_id numeric(18, 0)
  SET @language_id = dbo.qp_language(@user_id)

  DECLARE @entity_code nvarchar(50)
  select @entity_code = dbo.qp_entity_type_code(entity_type_id) from backend_action where code = @action_code

  SELECT
    ba.ID AS ACTION_ID,
    ba.CODE AS ACTION_CODE,
    bat.CODE AS ACTION_TYPE_CODE,
    ba2.ID AS PARENT_ACTION_ID,
    ba2.CODE AS PARENT_ACTION_CODE,
    dbo.qp_translate(atb.NAME, @language_id) AS NAME,
    bat.ITEMS_AFFECTED,
    atb.[ORDER],
    ISNULL(ca.ICON_URL, atb.ICON) AS ICON,
    atb.ICON_DISABLED,
    atb.IS_COMMAND
  FROM
    ACTION_TOOLBAR_BUTTON AS atb
    INNER JOIN BACKEND_ACTION AS ba ON atb.ACTION_ID = ba.ID
    LEFT OUTER JOIN CUSTOM_ACTION AS ca ON ca.ACTION_ID = ba.ID
    INNER JOIN ACTION_TYPE AS bat ON bat.ID = ba.TYPE_ID
    INNER JOIN BACKEND_ACTION AS ba2 ON atb.PARENT_ACTION_ID = ba2.ID
  WHERE
    atb.PARENT_ACTION_ID = @action_id
    AND dbo.qp_is_action_accessible(@user_id, atb.ACTION_ID) = 1
    AND dbo.qp_action_visible(@user_id, @entity_code, @entity_id, ba.CODE) = 1
  ORDER BY
    [ORDER]
END
GO

ALTER PROCEDURE [dbo].[qp_get_context_menu_items_list](@user_id int, @menu_id int)
AS
BEGIN
  DECLARE @language_id AS numeric(18, 0)

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    cmi.CONTEXT_MENU_ID,
    cmi.ACTION_ID,
    dbo.qp_context_menu_code(cmi.CONTEXT_MENU_ID) as CONTEXT_MENU_CODE,
    ba.CODE as ACTION_CODE,
    at.CODE AS ACTION_TYPE_CODE,
    dbo.qp_translate(cmi.NAME, @language_id) as NAME,
    cmi.[ORDER],
    ISNULL(ca.ICON_URL, cmi.ICON) AS ICON,
    cmi.ICON_DISABLED,
    cmi.BOTTOM_SEPARATOR
  FROM
    CONTEXT_MENU_ITEM cmi
    INNER JOIN backend_action AS ba ON cmi.ACTION_ID = ba.ID
    LEFT OUTER JOIN CUSTOM_ACTION AS ca ON ca.ACTION_ID = ba.ID
    INNER JOIN ACTION_TYPE AS at ON ba.TYPE_ID = at.ID
  WHERE
    CONTEXT_MENU_ID = @menu_id
    and dbo.qp_is_action_accessible(@user_id, cmi.ACTION_ID) = 1
  ORDER BY
    [ORDER] asc
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.18', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.18 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.19
-- Add Multiselect Sites and Context
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Multiple Select Sites', 'multiple_select_site', dbo.qp_action_type_id('multiple_select'), dbo.qp_entity_type_id('site'), '~/Site/MultipleSelect/', dbo.qp_tab_id('Sites'), 1, dbo.qp_view_id('list'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Multiple Select Contents', 'multiple_select_content', dbo.qp_action_type_id('multiple_select'), dbo.qp_entity_type_id('content'), '~/Content/MultipleSelect/', dbo.qp_tab_id('Contents'), 1, dbo.qp_view_id('list'), 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('multiple_select_site'), dbo.qp_view_id('list'), '~/Site/MultipleSelect/', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('multiple_select_content'), dbo.qp_view_id('list'), '~/Content/MultipleSelect/', 1)
GO

ALTER PROCEDURE [dbo].[qp_paged_sites_list]
  @user_id numeric(18,0),
  @permission_level numeric(18,0),
  @order_by varchar(256) = 'site_id',
  @filter varchar(256) = '',
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int,
  @selected_site_ids AS nvarchar(max) = NULL
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @use_security AS bit
  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @processed_order_by_block AS nvarchar(max)
  DECLARE @default_sort_column_name AS nvarchar(255)

  SET @default_sort_column_name = 'SITE_ID'

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    set @use_security = 1

  SET @use_custom_selection = 0
  IF (@selected_site_ids IS NOT NULL)
  BEGIN
    SET @use_custom_selection = 1
  END

  SET @select_block = '   s.SITE_ID,
    s.SITE_NAME,
    s.[DESCRIPTION],
    s.script_language,
    s.ALLOW_USER_SESSIONS,
    s.ASSEMBLE_FORMATS_IN_LIVE,
    s.IS_LIVE,
    s.DNS,
    s.STAGE_DNS,
    s.UPLOAD_URL,
    s.use_absolute_upload_url,
    s.upload_url_prefix,
    s.UPLOAD_DIR,
    s.LIVE_VIRTUAL_ROOT,
    s.LIVE_DIRECTORY,
    s.FORCE_TEST_DIRECTORY,
    s.TEST_DIRECTORY,
    s.STAGE_VIRTUAL_ROOT,
    s.STAGE_DIRECTORY,
    s.ASSEMBLY_PATH,
    s.STAGE_ASSEMBLY_PATH,
    s.FORCE_ASSEMBLE,
    s.stage_edit_object_border,
    s.stage_edit_field_border,
    s.stage_edit_object_type_mask,
    s.IMPORT_MAPPING_TO_DB,
    s.PROCEED_MAPPING_WITH_DB,
    s.CONNECTION_STRING_NAME,
    s.REPLACE_URLS,
    s.USE_LONG_URLS,
    s.NAMESPACE,
    s.CONTEXT_CLASS_NAME,
    s.CREATED,
    s.MODIFIED,
    s.LAST_MODIFIED_BY,
    s.LOCKED,
    s.LOCKED_BY,
    lu.[USER_ID] AS LOCKER_USER_ID,
    lu.FIRST_NAME AS LOCKER_FIRST_NAME,
    lu.LAST_NAME AS LOCKER_LAST_NAME,
    lu.EMAIL AS LOCKER_EMAIL,
    lu.[LOGIN] AS LOCKER_LOGIN,
    mu.[USER_ID] AS MODIFIER_USER_ID,
    mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
    mu.LAST_NAME AS MODIFIER_LAST_NAME,
    mu.EMAIL AS MODIFIER_EMAIL,
    mu.[LOGIN] AS MODIFIER_LOGIN, ' + CHAR(13);

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.SITE_ID IS NOT NULL) THEN 1 ELSE 0 END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)


  SET @from_block = '   SITE AS s ' + CHAR(13)

  if @use_security = 1
    SET @from_block = @from_block +
    'INNER JOIN
      (
        SELECT
          sec.site_id AS ALLOWED_SITE_ID,
          sec.permission_level AS PERMISSION_LEVEL
        FROM
          (<$_security_insert_$>) AS sec
      ) AS pl
    ON
      s.SITE_ID = pl.ALLOWED_SITE_ID'

  SET @from_block = @from_block +
  'LEFT OUTER JOIN
    USERS AS lu
  ON
    lu.USER_ID = s.LOCKED_BY
  LEFT OUTER JOIN
    USERS AS mu
  ON
    mu.USER_ID = s.LAST_MODIFIED_BY'

  IF (@use_custom_selection = 1)
  BEGIN
    SET @from_block = @from_block + ' LEFT OUTER JOIN (SELECT SITE_ID from SITE where SITE_ID in (' + @selected_site_ids + ')) AS cis ON s.SITE_ID = cis.SITE_ID ' + CHAR(13)
  END

  SET @where_block = @filter

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @processed_order_by_block = UPPER(@order_by)
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '  ', ' ')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '[', '')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, ']', '')

      IF (@processed_order_by_block = (@default_sort_column_name + ' ASC'))
        BEGIN
          SET @order_by_block = 'is_selected DESC, ' + @order_by
        END
      ELSE IF (@processed_order_by_block = (@default_sort_column_name + ' DESC'))
        BEGIN
          SET @order_by_block = 'is_selected ASC, ' + @order_by
        END
      ELSE
        BEGIN
          SET @order_by_block = @order_by
        END
    END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'site',
    @parent_entity_name = '',
    @parent_entity_id = 0

  SET NOCOUNT OFF
END
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.19', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.19 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.20
-- Manage Custom Actions actions
-- **************************************
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Custom Actions', 'list_custom_action', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('custom_action'), '~/CustomAction/Index/', dbo.qp_tab_id('Custom Tabs'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New Custom Action', 'new_custom_action', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('custom_action'), '~/CustomAction/New/', dbo.qp_tab_id('Custom Tabs'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Custom Actions', 'refresh_custom_actions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('custom_action'), dbo.qp_tab_id('Custom Tabs'), 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Custom Actions Properties', 'Properties', 'edit_custom_action', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('custom_action'), '~/CustomAction/Properties/', dbo.qp_tab_id('Custom Tabs'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Custom Action', 'save_custom_action', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('custom_action'), dbo.qp_tab_id('Custom Tabs'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Custom Action', 'update_custom_action', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('custom_action'), dbo.qp_tab_id('Custom Tabs'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Custom Action', 'remove_custom_action', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('custom_action'), 'Do you really want to remove this action?', dbo.qp_tab_id('Custom Tabs'), '~/CustomAction/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Custom Action', 'multiple_remove_custom_action', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('custom_action'), 'Do you really want to remove the following actions: {0}?', dbo.qp_tab_id('Custom Tabs'), '~/CustomAction/MultipleRemove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Create Like Custom Action', 'copy_custom_action', dbo.qp_action_type_id('copy'), dbo.qp_entity_type_id('custom_action'), dbo.qp_tab_id('Custom Tabs'), '~/CustomAction/Copy/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Custom Action', 'refresh_custom_action', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('custom_action'), dbo.qp_tab_id('Custom Tabs'))
GO


INSERT INTO context_menu (CODE) VALUES ('custom_actions')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('custom_actions'), dbo.qp_action_id('refresh_custom_actions'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('custom_actions'), dbo.qp_action_id('new_custom_action'), 'New Custom Action', 2, 'add.gif')
GO


INSERT INTO context_menu (CODE) VALUES ('custom_action')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('custom_action'), dbo.qp_action_id('remove_custom_action'), 'Remove', 1, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('custom_action'), dbo.qp_action_id('edit_custom_action'), 'Properties', 2, 'properties.gif')
GO



insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_custom_action'), dbo.qp_action_id('edit_custom_action'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_custom_action'), dbo.qp_action_id('copy_custom_action'), 'Create Like', 'create_like.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_custom_action'), dbo.qp_action_id('multiple_remove_custom_action'), 'Remove', 'delete.gif', NULL, 3, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_custom_action'), dbo.qp_action_id('refresh_custom_actions'), 'Refresh', 'refresh.gif', NULL, 4, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_custom_action'), dbo.qp_action_id('save_custom_action'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_custom_action'), dbo.qp_action_id('refresh_custom_action'), 'Refresh', 'refresh.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_custom_action'), dbo.qp_action_id('update_custom_action'), 'Save', 'save.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_custom_action'), dbo.qp_action_id('remove_custom_action'), 'Remove', 'delete.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_custom_action'), dbo.qp_action_id('refresh_custom_action'), 'Refresh', 'refresh.gif', NULL, 4, 1)
GO

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_custom_action'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_custom_action'),

  CONTEXT_MENU_ID = dbo.qp_context_menu_id('custom_action'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('custom_actions'),

  [DISABLED] = 0
where CODE = 'custom_action'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.20', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.20 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.0.21
-- Count duplicates
-- **************************************

exec qp_drop_existing 'qp_count_duplicates', 'IsProcedure'
GO

CREATE PROCEDURE dbo.qp_count_duplicates
@content_id numeric,
@field_ids nvarchar(max),
@ids nvarchar(max) = null
AS
BEGIN
  declare @field_names_table table (name nvarchar(255))
  insert @field_names_table select ca.ATTRIBUTE_NAME as name from dbo.Split(@field_ids, ',') f inner join CONTENT_ATTRIBUTE ca on f.Items = ca.ATTRIBUTE_ID

  declare @currentName nvarchar(255)
  declare @fieldList nvarchar(max)
  set @fieldList = ''

  while exists(select * from @field_names_table)
  begin
    select @currentName = name from @field_names_table
    if @fieldList <> ''
      set @fieldList = @fieldList + ', '
    set @fieldList = @fieldList + '[' + @currentName + ']'
    delete from @field_names_table where name = @currentName
  end

  declare @where nvarchar(max)
  if @ids is null or @ids = ''
    set @where = ''
  else
    set @where = ' where content_item_id in (' + @ids + ')'

  declare @sql nvarchar(max)
  if @fieldList = ''
    set @sql = 'select 0 as cnt'
  else
    set @sql = 'select coalesce(sum(c.cnt), 0) from (select COUNT(*) as cnt from content_' + CAST(@content_id as nvarchar(20)) + '_united ' + @where + ' group by ' + @fieldList + ' having COUNT(*) > 1) as c'

  exec sp_executesql @sql

END
GO

ALTER PROCEDURE [dbo].[qp_get_m2o_ids]
@contentId numeric,
@fieldName nvarchar(255),
@id numeric
AS BEGIN
  declare @sql nvarchar(1024)
  declare @final_sql nvarchar(30)
  if @id is null
    set @final_sql = ' is null '
  else
    set @final_sql = ' = @id'

  set @sql = 'select content_item_id from content_' + CAST(@contentId as nvarchar(255)) + '_united where [' + @fieldName + '] ' + @final_sql
  exec sp_executesql @sql, N'@id numeric', @id = @id
END
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.21', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.21 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.22
-- Manage Custom Actions actions
-- **************************************

exec qp_drop_existing 'V_CUSTOM_ACTION', 'IsView'
GO

CREATE VIEW [dbo].[V_CUSTOM_ACTION]
  WITH SCHEMABINDING
AS
  SELECT
    CA.[ID]
    ,CA.[NAME]
    ,CA.[ACTION_ID]
    ,AT.CODE AS ACTION_TYPE_CODE
    ,AT.NAME AS ACTION_TYPE_NAME
    ,ET.CODE AS ENTITY_TYPE_CODE
    ,ET.NAME AS ENTITY_TYPE_NAME
    ,CA.[URL]
    ,CA.[ICON_URL]
    ,CA.[ORDER]
    ,CA.[SITE_EXCLUDED]
    ,CA.[CONTENT_EXCLUDED]
    ,CA.[SHOW_IN_MENU]
    ,CA.[SHOW_IN_TOOLBAR]
    ,CA.[CREATED]
    ,CA.[MODIFIED]
    ,CA.[LAST_MODIFIED_BY]
    ,U.[USER_ID]
    ,U.[LOGIN]
  FROM [dbo].CUSTOM_ACTION CA
  JOIN [dbo].BACKEND_ACTION A ON CA.ACTION_ID = A.ID
  JOIN [dbo].ACTION_TYPE AT ON AT.ID = A.[TYPE_ID]
  JOIN [dbo].ENTITY_TYPE ET ON ET.ID = A.ENTITY_TYPE_ID
  JOIN [dbo].USERS U ON U.[USER_ID] = CA.LAST_MODIFIED_BY
GO


exec qp_drop_existing 'qp_paged_custom_actions', 'IsStoredProcedure'
GO

CREATE PROCEDURE [dbo].[qp_paged_custom_actions]
    @where_block nvarchar(max) = '',
    @order_by_block nvarchar(max) = 'ID ASC',
    @count_only bit = 0,
    @start_row int = 0,
    @page_size int = 0,
    @total_records int OUTPUT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  EXEC qp_get_paged_data
    @select_block = '*',
    @from_block = 'V_CUSTOM_ACTION',
    @entity_name = 'custom_action',

    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size
END
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.22', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.22 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.23
-- Replace oldschool defaults
-- **************************************

exec qp_drop_existing 'recreate_defaults', 'IsProcedure'
GO

CREATE PROCEDURE dbo.recreate_defaults
  @table_name nvarchar(256),
  @column_name nvarchar(256),
  @default nvarchar(256)
AS BEGIN
  DECLARE @constraint_name nvarchar(256);
  SET @constraint_name = 'DF_' + @table_name + '_' + @column_name;
  DECLARE @sql nvarchar(1024);

  IF EXISTS (select * from
  (select b.default_object_id, a.name default_object_name,
  b.object_id table_id, object_schema_name(b.object_id) table_schema,
  object_name(b.object_id) table_name, b.name column_name, b.column_id
  from sys.objects a inner join sys.all_columns b
  on a.object_id = b.default_object_id
  where 1=1
  and a.object_id not in (select object_id from sys.default_constraints)) T
  WHERE T.table_name = @table_name
  and T.column_name = @column_name)
  BEGIN
    SET @sql = '[dbo].[' + @table_name + '].[' + @column_name + ']';
    execute sp_unbindefault @sql
  END

  IF EXISTS(SELECT  *
  FROM
    sysconstraints cn
  INNER JOIN sysobjects c on cn.constid = c.id
  INNER JOIN sysobjects t on cn.id = t.id
  INNER JOIN syscolumns cl on t.id = cl.id and cn.colid = cl.colid
  WHERE c.xtype = 'D'
  and c.name = @constraint_name)
  BEGIN
    SET @sql = 'ALTER TABLE [dbo].[' + @table_name + '] DROP CONSTRAINT [' + @constraint_name + ']'
    EXEC sp_executesql @sql
  END
  SET @sql = 'ALTER TABLE [dbo].[' + @table_name + '] ADD CONSTRAINT [' + @constraint_name + '] DEFAULT (' + @default + ') FOR [' + @column_name + ']'
  EXEC sp_executesql @sql
END
GO

execute dbo.recreate_defaults @table_name = 'CONTENT_ITEM_SCHEDULE', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ITEM_SCHEDULE', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'STATUS_TYPE', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'STATUS_TYPE', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ACCESS', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ACCESS', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'SITE', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'SITE', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ITEM_STATUS_HISTORY', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'OBJECT_FORMAT', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'OBJECT_FORMAT', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ITEM_ACCESS', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ITEM_ACCESS', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ITEM', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ITEM', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_DATA', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_DATA', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'SITE_ACCESS', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'SITE_ACCESS', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'USER_GROUP', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'USER_GROUP', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ATTRIBUTE', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'CONTENT_ATTRIBUTE', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'PAGE', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'PAGE', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'PAGE_TEMPLATE', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'PAGE_TEMPLATE', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'USERS', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'USERS', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'OBJECT', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'OBJECT', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'NOTIFICATIONS', @column_name = 'CREATED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'NOTIFICATIONS', @column_name = 'MODIFIED', @default = 'getdate()'
execute dbo.recreate_defaults @table_name = 'SESSIONS_LOG', @column_name = 'START_TIME', @default = 'getdate()'

execute dbo.recreate_defaults @table_name = 'BUTTONS', @column_name = 'CANCEL_ACTION', @default = '0'
execute dbo.recreate_defaults @table_name = 'CONTAINER', @column_name = 'SCHEDULE_DEPENDENCE', @default = '0'
execute dbo.recreate_defaults @table_name = 'CONTAINER', @column_name = 'ROTATE_CONTENT', @default = '0'
execute dbo.recreate_defaults @table_name = 'CONTAINER', @column_name = 'APPLY_SECURITY', @default = '0'
execute dbo.recreate_defaults @table_name = 'TABS', @column_name = 'show_in_tree_list', @default = '0'
execute dbo.recreate_defaults @table_name = 'TABS', @column_name = 'hide_in_tree', @default = '0'
execute dbo.recreate_defaults @table_name = 'TABS', @column_name = 'custom_tab', @default = '0'
execute dbo.recreate_defaults @table_name = 'CONTENT_ATTRIBUTE', @column_name = 'INDEX_FLAG', @default = '0'
execute dbo.recreate_defaults @table_name = 'CONTENT_ATTRIBUTE', @column_name = 'ATTRIBUTE_ORDER', @default = '0'
execute dbo.recreate_defaults @table_name = 'CONTENT_ATTRIBUTE', @column_name = 'REQUIRED', @default = '0'
execute dbo.recreate_defaults @table_name = 'PAGE', @column_name = 'CACHE_HOURS', @default = '0'
execute dbo.recreate_defaults @table_name = 'USERS', @column_name = 'DISABLED', @default = '0'
execute dbo.recreate_defaults @table_name = 'USERS', @column_name = 'AUTO_LOGIN', @default = '0'
execute dbo.recreate_defaults @table_name = 'OBJECT', @column_name = 'USE_DEFAULT_VALUES', @default = '0'
execute dbo.recreate_defaults @table_name = 'SESSIONS_LOG', @column_name = 'AUTO_LOGGED', @default = '0'

execute dbo.recreate_defaults @table_name = 'BUTTONS', @column_name = 'BUTTONS_ORDER', @default = '1'
execute dbo.recreate_defaults @table_name = 'TABS', @column_name = 'TAB_GROUP', @default = '1'
execute dbo.recreate_defaults @table_name = 'TABS', @column_name = 'TABS_ORDER', @default = '1'
execute dbo.recreate_defaults @table_name = 'TOOLBAR_BUTTONS', @column_name = 'ALWAYS_ENABLED', @default = '1'

execute dbo.recreate_defaults @table_name = 'SITE', @column_name = 'script_language', @default = '''vbscript'''

execute dbo.recreate_defaults @table_name = 'CONTENT_ACCESS', @column_name = 'propagate_to_items', @default = '1'

execute dbo.recreate_defaults @table_name = 'SITE_ACCESS', @column_name = 'propagate_to_contents', @default = '1'
GO

exec qp_drop_existing 'recreate_defaults', 'IsProcedure'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.23', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.23 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.24
-- Custom Action CRUID and some fixes
-- **************************************

ALTER TABLE CUSTOM_ACTION ADD [DESCRIPTION] NVARCHAR(512) NULL
GO

delete from ACTION_TOOLBAR_BUTTON where ACTION_ID = dbo.qp_action_id('copy_custom_action')
delete from ACTION_TOOLBAR_BUTTON where ACTION_ID = dbo.qp_action_id('multiple_remove_custom_action')
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_custom_action'), dbo.qp_action_id('remove_custom_action'), 'Remove', 'delete.gif', NULL, 3, 0)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.24', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.24 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.25
-- Add and Fix Context Menu for Entity Type
-- **************************************

insert into CONTEXT_MENU(CODE)
select T.CODE from ENTITY_TYPE T
left join CONTEXT_MENU M ON T.CODE = M.CODE
where M.CODE is null

update ENTITY_TYPE
SET CONTEXT_MENU_ID = M.ID
FROM ENTITY_TYPE T
JOIN CONTEXT_MENU M ON T.CODE = M.CODE
where T.CONTEXT_MENU_ID is null

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.25', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.25 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.26
-- Adding new columns to articles grid
-- **************************************

exec qp_drop_existing 'qp_paged_articles_list', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'STATUS_TYPE_NAME ASC, content_item_id ASC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @link_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @default_sort_column_name AS nvarchar(255)
  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @default_sort_column_name = 'CONTENT_ITEM_ID'
  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  DECLARE @relations TABLE (
    attribute_id numeric,
    attribute_name nvarchar(255),
    rel_attribute_id numeric,
    rel_attribute_type_id numeric,
    rel_attribute_name nvarchar(255),
    rel_content_id  numeric,
    rel_count numeric
  )

  INSERT INTO @relations
  SELECT
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
    rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
    rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
    rca.CONTENT_ID AS RELATED_CONTENT_ID,
    ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ID ASC) AS 'RELATED_COUNT'
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.view_in_list = 1
  ORDER BY
    ca.permanent_flag DESC,
    ca.attribute_order ASC

  -- Открываем курсор
  WHILE EXISTS(select * from @relations)
  BEGIN
    select
      @attribute_id = attribute_id,
      @attribute_name = attribute_name,
      @rel_attribute_id = rel_attribute_id,
      @rel_attribute_type_id = rel_attribute_type_id,
      @rel_attribute_name = rel_attribute_name,
      @rel_content_id = rel_content_id,
      @rel_count = rel_count
    from @relations

    SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

    IF (@rel_attribute_id IS NOT NULL)
    BEGIN
      declare @current_block nvarchar(512)
      set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
      set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
      if (@rel_count > 1)
      begin
        set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
        set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
      end

      SET @related_select_block = @related_select_block + ' '
      SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
      if @rel_attribute_type_id in (9, 10)
        SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
      SET @related_select_block = @related_select_block + @current_block
      SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
      SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
        content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
        @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
    END

    delete from @relations where attribute_id = @attribute_id

  END


  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  COALESCE(ci.status_type_id, c.status_type_id) AS workflow_status_type_id,
  COALESCE(c2.status_type_id, c.status_type_id) AS current_status_type_id,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  CAST(c.visible as bit) as visible,
  CAST((CASE WHEN (sch.content_item_id  IS NOT NULL) THEN 1 ELSE 0 END) AS bit) AS scheduled,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END
  SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + ' AS c2 ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' c2.content_item_id = c.content_item_id ' + CHAR(13)

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many и Many To One --
  declare @m2o_filter nvarchar(max)
  set @m2o_filter = ''
  IF(@link_params IS NOT NULL)
    BEGIN
      declare @m2m_condition as varchar(max)
      set @m2m_condition = ''

      declare @link_params_table table (id numeric, ids varchar(max), m2m bit)

      insert into @link_params_table
      select T.f.value('./@lid', 'numeric'), T.f.value('./@iids', 'varchar(max)'), T.f.value('./@m2m', 'bit')
      from @link_params.nodes('/link/f') as T(f)

      while exists (select * from @link_params_table)
      begin
        declare @currentLinkId numeric, @currentIds varchar(max), @isCurrentM2M bit, @currentLinkText nvarchar(20)
        select @currentLinkId = id, @currentIds = ids, @isCurrentM2M = m2m from @link_params_table
        set @currentLinkText = cast(@currentLinkId as nvarchar(20))
        if @isCurrentM2M = 1
        begin
          SET @from_block = @from_block + ' INNER JOIN ( ' +
            ' select distinct item_id from dbo.item_link_united where link_id = ' + @currentLinkText + ' AND linked_item_id in (' + @currentIds + ') ' +
            ') as link_' + @currentLinkText + '  ON c.content_item_id = link_' + @currentLinkText + '.item_id ' + CHAR(13)
        end
        else begin
          declare @currentFieldName nvarchar(255), @currentContentId numeric
          select @currentContentId = content_id, @currentFieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @currentLinkId

          SET @from_block = @from_block + ' INNER JOIN ( ' +
            ' select distinct [' + @currentFieldName + '] as item_id from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
            ' where CONTENT_ITEM_ID in (' + @currentIds + ') ' +
            ' ) as back_' + @currentLinkText + '  ON c.content_item_id = back_' + @currentLinkText + '.item_id ' + CHAR(13)
        end
        delete from @link_params_table where id = @currentLinkId and m2m = @isCurrentM2M
      end
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  if LEN(@m2o_filter) > 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + @m2o_filter
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @processed_order_by_block = UPPER(@order_by)
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '  ', ' ')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '[', '')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, ']', '')

      IF (@processed_order_by_block = (@default_sort_column_name + ' ASC'))
        BEGIN
          SET @order_by_block = 'is_selected DESC, ' + @order_by
        END
      ELSE IF (@processed_order_by_block = (@default_sort_column_name + ' DESC'))
        BEGIN
          SET @order_by_block = 'is_selected ASC, ' + @order_by
        END
      ELSE
        BEGIN
          SET @order_by_block = @order_by
        END
    END
  ELSE
    BEGIN
      SET @order_by_block = 'STATUS_TYPE_NAME ASC, content_item_id ASC '
    END

  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)

  if @fts_is_incorrect_query = 1 OR @parent_level = 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + '1 = 0'
  END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = '',
    @parent_entity_id = 0

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.26', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.26 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.27
-- Search articles: Missing Value relation filter has added
-- Other fixes
-- **************************************

exec qp_drop_existing 'qp_paged_articles_list', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'STATUS_TYPE_NAME ASC, content_item_id ASC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @link_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @default_sort_column_name AS nvarchar(255)
  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @default_sort_column_name = 'CONTENT_ITEM_ID'
  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  DECLARE @relations TABLE (
    attribute_id numeric,
    attribute_name nvarchar(255),
    rel_attribute_id numeric,
    rel_attribute_type_id numeric,
    rel_attribute_name nvarchar(255),
    rel_content_id  numeric,
    rel_count numeric
  )

  INSERT INTO @relations
  SELECT
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
    rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
    rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
    rca.CONTENT_ID AS RELATED_CONTENT_ID,
    ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ID ASC) AS 'RELATED_COUNT'
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.view_in_list = 1
  ORDER BY
    ca.permanent_flag DESC,
    ca.attribute_order ASC

  -- Открываем курсор
  WHILE EXISTS(select * from @relations)
  BEGIN
    select
      @attribute_id = attribute_id,
      @attribute_name = attribute_name,
      @rel_attribute_id = rel_attribute_id,
      @rel_attribute_type_id = rel_attribute_type_id,
      @rel_attribute_name = rel_attribute_name,
      @rel_content_id = rel_content_id,
      @rel_count = rel_count
    from @relations

    SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

    IF (@rel_attribute_id IS NOT NULL)
    BEGIN
      declare @current_block nvarchar(512)
      set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
      set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
      if (@rel_count > 1)
      begin
        set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
        set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
      end

      SET @related_select_block = @related_select_block + ' '
      SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
      if @rel_attribute_type_id in (9, 10)
        SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
      SET @related_select_block = @related_select_block + @current_block
      SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
      SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
        content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
        @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
    END

    delete from @relations where attribute_id = @attribute_id

  END


  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  COALESCE(ci.status_type_id, c.status_type_id) AS workflow_status_type_id,
  COALESCE(c2.status_type_id, c.status_type_id) AS current_status_type_id,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  CAST(c.visible as bit) as visible,
  CAST((CASE WHEN (sch.content_item_id  IS NOT NULL) THEN 1 ELSE 0 END) AS bit) AS scheduled,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END
  SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + ' AS c2 ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' c2.content_item_id = c.content_item_id ' + CHAR(13)

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many и Many To One --
  declare @link_filter nvarchar(max)
  set @link_filter = ''
  IF(@link_params IS NOT NULL)
    BEGIN
      declare @m2m_condition as varchar(max)
      set @m2m_condition = ''

      declare @link_params_table table (id numeric, ids varchar(max), m2m bit, [isnull] bit)

      insert into @link_params_table
      select T.f.value('./@lid', 'numeric'), T.f.value('./@iids', 'varchar(max)'), T.f.value('./@m2m', 'bit'), T.f.value('./@isnull', 'bit')
      from @link_params.nodes('/link/f') as T(f)

      while exists (select * from @link_params_table)
      begin
        declare @currentLinkId numeric,
            @currentIds varchar(max),
            @isCurrentM2M bit,
            @isNull bit,
            @currentLinkText nvarchar(20)

        select @currentLinkId = id, @currentIds = ids, @isCurrentM2M = m2m, @isNull = [isnull] from @link_params_table
        set @currentLinkText = cast(@currentLinkId as nvarchar(20))

        declare @currentFieldName nvarchar(255),
            @currentContentId numeric
        select @currentContentId = content_id, @currentFieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @currentLinkId

        if @isNull = 0 begin
          if @isCurrentM2M = 1 begin
            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct item_id from dbo.item_link_united where link_id = ' + @currentLinkText + ' AND linked_item_id in (' + @currentIds + ') ' +
              ') as link_' + @currentLinkText + '  ON c.content_item_id = link_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
          else begin

            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct [' + @currentFieldName + '] as item_id from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where CONTENT_ITEM_ID in (' + @currentIds + ') ' +
              ' ) as back_' + @currentLinkText + '  ON c.content_item_id = back_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
        end
        else begin
          if @isCurrentM2M = 1 begin
            set @link_filter = ' NOT EXISTS (select item_id from dbo.item_link_united where c.content_item_id = item_id and link_id = '  + @currentLinkText + ') '
          end
          else begin
            set @link_filter = 'NOT EXISTS (select * from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where c.content_item_id = [' + @currentFieldName + ']) '
          end
        end

        delete from @link_params_table where id = @currentLinkId and m2m = @isCurrentM2M
      end
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  if LEN(@link_filter) > 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + @link_filter
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @processed_order_by_block = UPPER(@order_by)
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '  ', ' ')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, '[', '')
      SET @processed_order_by_block = REPLACE(@processed_order_by_block, ']', '')

      IF (@processed_order_by_block = (@default_sort_column_name + ' ASC'))
        BEGIN
          SET @order_by_block = 'is_selected DESC, ' + @order_by
        END
      ELSE IF (@processed_order_by_block = (@default_sort_column_name + ' DESC'))
        BEGIN
          SET @order_by_block = 'is_selected ASC, ' + @order_by
        END
      ELSE
        BEGIN
          SET @order_by_block = @order_by
        END
    END
  ELSE
    BEGIN
      SET @order_by_block = 'STATUS_TYPE_NAME ASC, content_item_id ASC '
    END

  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)

  if @fts_is_incorrect_query = 1 OR @parent_level = 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + '1 = 0'
  END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = '',
    @parent_entity_id = 0

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END
GO

-- Content Folder To User Foreign Key
ALTER TABLE [dbo].[content_FOLDER]  WITH CHECK ADD  CONSTRAINT [FK_content_FOLDER_USERS] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[content_FOLDER] CHECK CONSTRAINT [FK_content_FOLDER_USERS]
GO

-- Site Folder To User Foreign Key
ALTER TABLE [dbo].[FOLDER]  WITH CHECK ADD  CONSTRAINT [FK_FOLDER_USERS] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[FOLDER] CHECK CONSTRAINT [FK_FOLDER_USERS]
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.27', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.27 completed'
GO



-- **************************************
-- Max Tertyshnyy
-- version 7.9.0.28
-- qp_get_version_data fix
-- translation
-- **************************************

exec qp_drop_existing 'qp_get_version_data', 'IsScalarFunction'
GO

CREATE function [dbo].[qp_get_version_data](@attribute_id numeric, @version_id numeric) returns nvarchar(max)
as
  begin
  declare @result nvarchar(max)
  select @result = (case when attribute_type_id in (9, 10) THEN convert(nvarchar(max), cd.BLOB_DATA) ELSE cd.DATA end) from version_content_data cd inner join CONTENT_ATTRIBUTE ca on cd.ATTRIBUTE_ID = ca.ATTRIBUTE_ID where cd.attribute_id = @attribute_id and content_item_version_id = @version_id

  return @result
end
GO


exec qp_update_translations 'Custom Actions', 'Действия'
exec qp_update_translations 'New Custom Action', 'Новое действие'
go

exec qp_update_translations 'Relation Many-to-One', 'Связь "многие-к-одному"'
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.0.28', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.0.28 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.0
-- Release
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.0', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.0 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.1
-- Virtual COntents Translation Fix
-- **************************************

exec qp_update_translations 'Virtual Fields', 'Виртуальные поля'
exec qp_update_translations 'Virtual Articles', 'Виртуальные статьи'
GO

ALTER PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'CONTENT_ITEM_ID DESC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @link_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  DECLARE @relations TABLE (
    attribute_id numeric,
    attribute_name nvarchar(255),
    rel_attribute_id numeric,
    rel_attribute_type_id numeric,
    rel_attribute_name nvarchar(255),
    rel_content_id  numeric,
    rel_count numeric
  )

  INSERT INTO @relations
  SELECT
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
    rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
    rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
    rca.CONTENT_ID AS RELATED_CONTENT_ID,
    ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ID ASC) AS 'RELATED_COUNT'
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.view_in_list = 1
  ORDER BY
    ca.permanent_flag DESC,
    ca.attribute_order ASC

  -- Открываем курсор
  WHILE EXISTS(select * from @relations)
  BEGIN
    select
      @attribute_id = attribute_id,
      @attribute_name = attribute_name,
      @rel_attribute_id = rel_attribute_id,
      @rel_attribute_type_id = rel_attribute_type_id,
      @rel_attribute_name = rel_attribute_name,
      @rel_content_id = rel_content_id,
      @rel_count = rel_count
    from @relations

    SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

    IF (@rel_attribute_id IS NOT NULL)
    BEGIN
      declare @current_block nvarchar(512)
      set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
      set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
      if (@rel_count > 1)
      begin
        set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
        set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
      end

      SET @related_select_block = @related_select_block + ' '
      SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
      if @rel_attribute_type_id in (9, 10)
        SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
      SET @related_select_block = @related_select_block + @current_block
      SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
      SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
        content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
        @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
    END

    delete from @relations where attribute_id = @attribute_id

  END


  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  COALESCE(ci.status_type_id, c.status_type_id) AS workflow_status_type_id,
  COALESCE(c2.status_type_id, c.status_type_id) AS current_status_type_id,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  CAST(c.visible as bit) as visible,
  CAST((CASE WHEN (sch.content_item_id  IS NOT NULL) THEN 1 ELSE 0 END) AS bit) AS scheduled,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END
  SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + ' AS c2 ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' c2.content_item_id = c.content_item_id ' + CHAR(13)

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many и Many To One --
  declare @link_filter nvarchar(max)
  set @link_filter = ''
  IF(@link_params IS NOT NULL)
    BEGIN
      declare @m2m_condition as varchar(max)
      set @m2m_condition = ''

      declare @link_params_table table (id numeric, ids varchar(max), m2m bit, [isnull] bit)

      insert into @link_params_table
      select T.f.value('./@lid', 'numeric'), T.f.value('./@iids', 'varchar(max)'), T.f.value('./@m2m', 'bit'), T.f.value('./@isnull', 'bit')
      from @link_params.nodes('/link/f') as T(f)

      while exists (select * from @link_params_table)
      begin
        declare @currentLinkId numeric,
            @currentIds varchar(max),
            @isCurrentM2M bit,
            @isNull bit,
            @currentLinkText nvarchar(20)

        select @currentLinkId = id, @currentIds = ids, @isCurrentM2M = m2m, @isNull = [isnull] from @link_params_table
        set @currentLinkText = cast(@currentLinkId as nvarchar(20))

        declare @currentFieldName nvarchar(255),
            @currentContentId numeric
        select @currentContentId = content_id, @currentFieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @currentLinkId

        if @isNull = 0 begin
          if @isCurrentM2M = 1 begin
            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct item_id from dbo.item_link_united where link_id = ' + @currentLinkText + ' AND linked_item_id in (' + @currentIds + ') ' +
              ') as link_' + @currentLinkText + '  ON c.content_item_id = link_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
          else begin

            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct [' + @currentFieldName + '] as item_id from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where CONTENT_ITEM_ID in (' + @currentIds + ') ' +
              ' ) as back_' + @currentLinkText + '  ON c.content_item_id = back_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
        end
        else begin
          if @isCurrentM2M = 1 begin
            set @link_filter = ' NOT EXISTS (select item_id from dbo.item_link_united where c.content_item_id = item_id and link_id = '  + @currentLinkText + ') '
          end
          else begin
            set @link_filter = 'NOT EXISTS (select * from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where c.content_item_id = [' + @currentFieldName + ']) '
          end
        end

        delete from @link_params_table where id = @currentLinkId and m2m = @isCurrentM2M
      end
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  if LEN(@link_filter) > 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + @link_filter
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @order_by_block = @order_by
    END
  ELSE
    BEGIN
      SET @order_by_block = 'CONTENT_ITEM_ID DESC'
    END

  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)

  if @fts_is_incorrect_query = 1 OR @parent_level = 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + '1 = 0'
  END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = '',
    @parent_entity_id = 0

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.1', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.1 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.2
-- Multistep Actions
-- **************************************
if not exists (select * From information_schema.columns where table_name = 'BACKEND_ACTION' and column_name = 'IS_MULTISTEP')
begin
  ALTER TABLE [dbo].[BACKEND_ACTION] ADD [IS_MULTISTEP] BIT NOT NULL DEFAULT (0);
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.2', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.2 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.3
-- Apply Default Value Action
-- **************************************
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, CONFIRM_PHRASE, HAS_PRE_ACTION, IS_MULTISTEP)
values(
  'Apply Default Value',
  'apply_field_default_value',
  dbo.qp_action_type_id('update'),
  dbo.qp_entity_type_id('field'),
  '~/FieldDefaultValue/',
  'Do you really want to apply default value?',
  1,
  1)
GO
exec qp_update_translations 'Apply Default Value', 'Применить значение по умолчанию';
exec qp_update_translations 'Do you really want to apply default value?', 'Вы действительно хотите применить значение по умолчанию?';
GO
update CONTEXT_MENU_ITEM
set [ORDER] = 4
where CONTEXT_MENU_ID = dbo.qp_context_menu_id('field')
AND ACTION_ID = dbo.qp_action_id('edit_field')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(
  dbo.qp_context_menu_id('field'),
  dbo.qp_action_id('apply_field_default_value'),
  'Apply Default Value',
  'app_def_val.gif', 3)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.3', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.3 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.4
-- Recreate Dynamic Images Action
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, CONFIRM_PHRASE, IS_MULTISTEP)
values(
  'Recreate Dynamic Images',
  'recreate_dynamic_images',
  dbo.qp_action_type_id('update'),
  dbo.qp_entity_type_id('field'),
  '~/RecreateDynamicImages/',
  'Do you really want to recreate dynamic images?',
  1)
GO
exec qp_update_translations 'Recreate Dynamic Images', 'Пересоздать изображения';
exec qp_update_translations 'Do you really want to recreate dynamic images?', 'Вы действительно хотите пересоздать динамические изображения?';
GO
update CONTEXT_MENU_ITEM
set [ORDER] = 5
where CONTEXT_MENU_ID = dbo.qp_context_menu_id('field')
AND ACTION_ID = dbo.qp_action_id('edit_field')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(
  dbo.qp_context_menu_id('field'),
  dbo.qp_action_id('recreate_dynamic_images'),
  'Recreate Dynamic Images',
  'recreate_dynamic_img.gif', 4)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.4', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.4 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.5
-- Clear Content Action
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, CONFIRM_PHRASE, IS_MULTISTEP)
values(
  'Clear',
  'clear_content',
  dbo.qp_action_type_id('update'),
  dbo.qp_entity_type_id('content'),
  '~/ClearContent/',
  'Do you really want to clear content?',
  1)
GO
exec qp_update_translations 'Clear', 'Очистить';
exec qp_update_translations 'Do you really want to clear content?', 'Вы действительно хотите очистить контент?';
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('clear_content'), 'Clear', 10, 'clear.gif')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.5', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.5 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.6
-- Remove Content Action
-- **************************************

update [BACKEND_ACTION]
set [IS_MULTISTEP] = 1, CONTROLLER_ACTION_URL  = '~/RemoveContent/'
where code = 'remove_content'
GO

update ACTION_TOOLBAR_BUTTON
set ACTION_ID = dbo.qp_action_id('remove_content')
where ACTION_ID = dbo.qp_action_id('multiple_remove_content')
and PARENT_ACTION_ID = dbo.qp_action_id('list_content')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.6', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.6 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.7
-- Remove Site Action
-- **************************************

update [BACKEND_ACTION]
set [IS_MULTISTEP] = 1, CONTROLLER_ACTION_URL  = '~/RemoveSite/'
where code = 'remove_site'
GO

update ACTION_TOOLBAR_BUTTON
set ACTION_ID = dbo.qp_action_id('remove_site')
where ACTION_ID = dbo.qp_action_id('multiple_remove_site')
and PARENT_ACTION_ID = dbo.qp_action_id('list_site')
GO

exec qp_drop_existing 'qp_batch_delete_contents', 'IsStoredProcedure'
GO

-- =============================================
-- Author:    Tertyshnyy
-- Description: Пакетное удаление контентов сайта
-- =============================================
CREATE PROCEDURE dbo.qp_batch_delete_contents
  @site_id int,
  @count_to_del int = 20
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @deleted_contents table (ID numeric(18, 0));

  insert into @deleted_contents
  select TOP(@count_to_del) CONTENT_ID from CONTENT
  where SITE_ID = @site_id

  delete UNION_CONTENTS from UNION_CONTENTS UC
  JOIN @deleted_contents DI
    ON DI.ID = UC.virtual_content_id OR
       DI.ID = UC.union_content_id OR
       DI.ID = UC.master_content_id
  delete UNION_ATTRS from UNION_ATTRS A
  JOIN CONTENT_ATTRIBUTE VCA ON A.VIRTUAL_ATTR_ID = VCA.ATTRIBUTE_ID
  JOIN @deleted_contents DI ON DI.ID = VCA.CONTENT_ID
  delete UNION_ATTRS from UNION_ATTRS A
  JOIN CONTENT_ATTRIBUTE VCA ON A.union_attr_id = VCA.ATTRIBUTE_ID
  JOIN @deleted_contents DI ON DI.ID = VCA.CONTENT_ID

  delete USER_QUERY_CONTENTS from USER_QUERY_CONTENTS UC
  JOIN @deleted_contents DI
    ON DI.ID = UC.virtual_content_id OR
       DI.ID = UC.real_content_id
  delete USER_QUERY_ATTRS from USER_QUERY_ATTRS A
  JOIN CONTENT_ATTRIBUTE VCA ON A.virtual_content_id = VCA.ATTRIBUTE_ID
  JOIN @deleted_contents DI ON DI.ID = VCA.CONTENT_ID
  delete USER_QUERY_ATTRS from USER_QUERY_ATTRS A
  JOIN CONTENT_ATTRIBUTE VCA ON A.user_query_attr_id = VCA.ATTRIBUTE_ID
  JOIN @deleted_contents DI ON DI.ID = VCA.CONTENT_ID


  delete CONTENT FROM CONTENT C
  JOIN @deleted_contents DI ON DI.ID = C.CONTENT_ID

  select ID from @deleted_contents;
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.7', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.7 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.8
-- Assemble Site Action
-- **************************************

update [BACKEND_ACTION]
set [IS_MULTISTEP] = 1, CONTROLLER_ACTION_URL  = '~/AssembleSite/'
where code = 'assemble_site'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.8', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.8 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.9
-- User Actions
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Users', 'list_user', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('user'), '~/User/Index/', dbo.qp_tab_id('Users'), 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Multiple Select Users', 'multiple_select_user', dbo.qp_action_type_id('multiple_select'), dbo.qp_entity_type_id('user'), '~/User/MultipleSelect/', dbo.qp_tab_id('Users'), 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Users', 'refresh_users', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('user'), dbo.qp_tab_id('Users'), 1)


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New User', 'new_user', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('user'), '~/User/New/', dbo.qp_tab_id('New User'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save User', 'save_user', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('user'), dbo.qp_tab_id('New User'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Create Like User', 'copy_user', dbo.qp_action_type_id('copy'), dbo.qp_entity_type_id('user'), dbo.qp_tab_id('New User'), '~/User/Copy/')


insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('User Properties', 'Properties', 'edit_user', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('user'), '~/User/Properties/', dbo.qp_tab_id('User Profile'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update User', 'update_user', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('user'), dbo.qp_tab_id('User Profile'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh User', 'refresh_user', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('user'), dbo.qp_tab_id('User Profile'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove User', 'remove_user', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('user'), 'Do you really want to remove this user?', dbo.qp_tab_id('User Profile'), '~/User/Remove/')
GO

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('multiple_select_user'), dbo.qp_view_id('list'), '~/User/MultipleSelect/', 1)
GO

exec qp_update_translations 'Users', 'Пользователи'
exec qp_update_translations 'New User', 'Новый пользователь'
exec qp_update_translations 'Do you really want to remove this user?', 'Вы действительно хотите удалить данного пользователя?'
GO


if not exists (select * from context_menu where code = 'users')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('users')
END
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('users'), dbo.qp_action_id('refresh_users'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('users'), dbo.qp_action_id('new_user'), 'New User', 2, 'add.gif')
GO


if not exists (select * from context_menu where code = 'user')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('user')
END
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('user'), dbo.qp_action_id('copy_user'), 'Create Like', 1, 'create_like.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('user'), dbo.qp_action_id('remove_user'), 'Remove', 2, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('user'), dbo.qp_action_id('edit_user'), 'Properties', 3, 'properties.gif')
GO


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_user'), dbo.qp_action_id('edit_user'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_user'), dbo.qp_action_id('copy_user'), 'Create Like', 'create_like.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_user'), dbo.qp_action_id('refresh_users'), 'Refresh', 'refresh.gif', NULL, 3, 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_user'), dbo.qp_action_id('save_user'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_user'), dbo.qp_action_id('refresh_user'), 'Refresh', 'refresh.gif', NULL, 2, 1)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_user'), dbo.qp_action_id('update_user'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_user'), dbo.qp_action_id('refresh_user'), 'Refresh', 'refresh.gif', NULL, 2, 1)
GO


update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_user'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_user'),

  CONTEXT_MENU_ID = dbo.qp_context_menu_id('user'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('users'),

  [DISABLED] = 0
where CODE = 'user'
GO


exec qp_drop_existing 'tbd_user', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id

    UPDATE CONTAINER SET locked = NULL, locked_by = NULL FROM CONTAINER c inner join deleted d on c.locked_by = d.user_id
    UPDATE CONTENT_FORM SET locked = NULL, locked_by = NULL FROM CONTENT_FORM c inner join deleted d on c.locked_by = d.user_id
    UPDATE CONTENT_ITEM SET locked = NULL, locked_by = NULL FROM CONTENT_ITEM c inner join deleted d on c.locked_by = d.user_id
    UPDATE [OBJECT] SET locked = NULL, locked_by = NULL FROM [OBJECT] c inner join deleted d on c.locked_by = d.user_id
    UPDATE OBJECT_FORMAT SET locked = NULL, locked_by = NULL FROM OBJECT_FORMAT c inner join deleted d on c.locked_by = d.user_id
    UPDATE PAGE SET locked = NULL, locked_by = NULL FROM PAGE c inner join deleted d on c.locked_by = d.user_id
    UPDATE PAGE_TEMPLATE SET locked = NULL, locked_by = NULL FROM PAGE_TEMPLATE c inner join deleted d on c.locked_by = d.user_id
    UPDATE [SITE] SET locked = NULL, locked_by = NULL FROM [SITE] c inner join deleted d on c.locked_by = d.user_id

    UPDATE [SITE] SET last_modified_by = 1 FROM [SITE] c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET created_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.created_by = d.user_id
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
    UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
    UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CUSTOM_ACTION SET LAST_MODIFIED_BY = 1 FROM CUSTOM_ACTION c INNER JOIN deleted d on c.LAST_MODIFIED_BY = d.[USER_ID]

  UPDATE NOTIFICATIONS SET FROM_BACKENDUSER_ID = 1 FROM NOTIFICATIONS c inner join deleted d on c.FROM_BACKENDUSER_ID = d.user_id

    delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO

exec qp_drop_existing 'qp_copy_user', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_copy_user]
  @user_id numeric(18,0),
  @new_login nvarchar(30),
  @create_by_id numeric(18,0),
  @new_user_id numeric(18,0) output
AS
BEGIN
  declare @now datetime;
  set @now = getdate();

  INSERT INTO [USERS]
    ([PASSWORD]
    ,[DISABLED]
    ,[FIRST_NAME]
    ,[LAST_NAME]
    ,[EMAIL]
    ,[AUTO_LOGIN]
    ,[NT_LOGIN]
    ,[LAST_LOGIN]
    ,[SUBSCRIBED]
    ,[CREATED]
    ,[MODIFIED]
    ,[LAST_MODIFIED_BY]
    ,[LANGUAGE_ID]
    ,[VMODE]
    ,[ad_sid]
    ,[allow_stage_edit_field]
    ,[allow_stage_edit_object]
    ,[BUILT_IN]
    ,[LOGIN]
    ,[hash]
    ,[salt]
    ,[PASSWORD_MODIFIED])
  SELECT ''
      ,[DISABLED]
      ,[FIRST_NAME]
      ,[LAST_NAME]
      ,[EMAIL]
      ,[AUTO_LOGIN]
      ,[NT_LOGIN]
      ,[LAST_LOGIN]
      ,[SUBSCRIBED]
      ,@now
      ,@now
      ,@create_by_id
      ,[LANGUAGE_ID]
      ,[VMODE]
      ,[ad_sid]
      ,[allow_stage_edit_field]
      ,[allow_stage_edit_object]
      ,0
      ,@new_login
      ,[hash]
      ,[salt]
      ,[PASSWORD_MODIFIED]
  FROM [USERS]
  WHERE [USER_ID] = @user_id

  set @new_user_id = scope_identity();

  delete from [USER_GROUP_BIND] where [USER_ID] = @new_user_id
  INSERT INTO [USER_GROUP_BIND] ([GROUP_ID],[USER_ID])
  select [GROUP_ID], @new_user_id from [USER_GROUP_BIND] where [USER_ID] = @user_id

  INSERT INTO [TAB_ACCESS]([TAB_ID],[USER_ID],[GROUP_ID],[PERMISSION_LEVEL_ID])
  select [TAB_ID],@new_user_id,[GROUP_ID],[PERMISSION_LEVEL_ID] from [TAB_ACCESS] where [USER_ID] = @user_id

  INSERT INTO [SITE_ACCESS]
       ([SITE_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_contents])
  SELECT [SITE_ID]
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_contents]
  FROM [SITE_ACCESS]
  where [USER_ID] = @user_id

  INSERT INTO CONTENT_ACCESS
       ([CONTENT_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_items])
  SELECT [CONTENT_ID]
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_items]
  FROM [CONTENT_ACCESS]
  where [USER_ID] = @user_id

  INSERT INTO CONTENT_ITEM_ACCESS
       (CONTENT_ITEM_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT CONTENT_ITEM_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM CONTENT_ITEM_ACCESS
  where [USER_ID] = @user_id

  INSERT INTO FOLDER_ACCESS
       (FOLDER_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT FOLDER_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM FOLDER_ACCESS
  where [USER_ID] = @user_id

END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.9', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.9 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.10
-- User Group Actions
-- **************************************

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_GROUP_CHILD_GROUP]') AND parent_object_id = OBJECT_ID(N'[dbo].[GROUP_TO_GROUP]'))
ALTER TABLE [dbo].[GROUP_TO_GROUP] DROP CONSTRAINT [FK_GROUP_CHILD_GROUP]
GO
ALTER TABLE [dbo].[GROUP_TO_GROUP]  WITH CHECK ADD CONSTRAINT [FK_GROUP_CHILD_GROUP] FOREIGN KEY([CHILD_GROUP_ID])
REFERENCES [dbo].[USER_GROUP] ([GROUP_ID])
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_GROUP_PARENT_GROUP]') AND parent_object_id = OBJECT_ID(N'[dbo].[GROUP_TO_GROUP]'))
ALTER TABLE [dbo].[GROUP_TO_GROUP] DROP CONSTRAINT [FK_GROUP_PARENT_GROUP]
GO
ALTER TABLE [dbo].[GROUP_TO_GROUP]  WITH CHECK ADD CONSTRAINT [FK_GROUP_PARENT_GROUP] FOREIGN KEY([PARENT_GROUP_ID])
REFERENCES [dbo].[USER_GROUP] ([GROUP_ID])
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Group_To_Group]') AND name = N'PK_GROUP_TO_GROUP')
ALTER TABLE [dbo].[Group_To_Group] DROP CONSTRAINT [PK_GROUP_TO_GROUP]
GO
ALTER TABLE [dbo].[Group_To_Group] ADD  CONSTRAINT [PK_GROUP_TO_GROUP] PRIMARY KEY CLUSTERED ([CHILD_GROUP_ID], [PARENT_GROUP_ID])
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Group_To_Group]') AND name = N'IX_Group_Parent_Child')
ALTER TABLE [dbo].[Group_To_Group] DROP CONSTRAINT [IX_Group_Parent_Child]
GO


exec qp_drop_existing 'td_user_group_delete_group_to_group', 'IsTrigger'
GO
CREATE TRIGGER [dbo].[td_user_group_delete_group_to_group] ON [dbo].[USER_GROUP]
INSTEAD OF DELETE
AS
BEGIN
  delete GROUP_TO_GROUP from GROUP_TO_GROUP g
  INNER JOIN deleted d ON g.CHILD_GROUP_ID = d.GROUP_ID OR g.PARENT_GROUP_ID = d.GROUP_ID

  delete USER_GROUP from USER_GROUP g inner join deleted d on g.GROUP_ID = d.GROUP_ID
END
GO

exec qp_drop_existing 'qp_expand', 'IsProcedure'
GO
CREATE procedure [dbo].[qp_expand](@user_id numeric = 0, @code nvarchar(50) = null, @id bigint = 0, @is_folder bit = 0, @count_only bit=0, @count int = 0 output )
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint
  declare @default_action_id int, @context_menu_id int

  set @language_id = dbo.qp_language(@user_id)

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = dbo.qp_checked_action_id(@user_id, default_action_id),
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @id_str = CAST(@id as nvarchar(10))

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'


      -- process recurring --
      if @recurring_id_field is not null
      begin
        if @is_folder = 1
        begin
          if @parent_id_field is null
            set @where = @recurring_id_field + ' is null '
          else
            set @where = @parent_id_field + ' = ' + @id_str + ' and ' + @recurring_id_field + ' is null '
        end
        else
          set @where = @recurring_id_field + ' = ' + @id_str
      end
      else if @parent_id_field is not null
      begin
        set @where = @parent_id_field + ' = ' + @id_str
      end
      else
        set @where = '1 = 1'

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end

    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql

    --PRINT @sql;


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @id,
        CODE = @code,
        IS_FOLDER = 0,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id
    end
    else
      select @count = COUNT(ID) from @result
  end
  else
  begin
    if @count_only = 0
      if @code is not null
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, dbo.qp_translate(dbo.qp_pluralize(NAME), @language_id), CODE, 1, dbo.qp_get_icon(NULL, dbo.qp_pluralize(CODE), NULL), dbo.qp_checked_action_id(@user_id, FOLDER_DEFAULT_ACTION_ID), FOLDER_CONTEXT_MENU_ID From ENTITY_TYPE where PARENT_ID = dbo.qp_entity_type_id(@code) and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0 order by [Order]
      else
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, NAME, CODE, 0, dbo.qp_get_icon(NULL, CODE, NULL), dbo.qp_checked_action_id(@user_id, DEFAULT_ACTION_ID), CONTEXT_MENU_ID From ENTITY_TYPE where PARENT_ID is null and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0 order by [Order]
    else
      if @code is not null
        select @count = COUNT(ID) From ENTITY_TYPE where PARENT_ID = dbo.qp_entity_type_id(@code) and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0
      else
        select @count = COUNT(ID) From ENTITY_TYPE where PARENT_ID is null and dbo.qp_tab_access_level(@user_id, tab_id) >= 1 and disabled = 0

  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit
    declare @children_count int
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = Is_folder from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, 1, @count = @children_count output
      else
        exec dbo.qp_expand @user_id, @local_code, @local_id, 0, 1, @count = @children_count output

      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      TREE_NODE.PARENT_ID as PARENT_ID,
      dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('User Groups', 'list_user_group', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('user_group'), '~/UserGroup/Index/', dbo.qp_tab_id('User Groups'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Groups', 'refresh_user_groups', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('user_group'), dbo.qp_tab_id('User Groups'), 1)


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New Group', 'new_user_group', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('user_group'), '~/UserGroup/New/', dbo.qp_tab_id('New Group'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Group', 'save_user_group', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('user_group'), dbo.qp_tab_id('New Group'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, CONTROLLER_ACTION_URL)
values('Create Like Group', 'copy_user_group', dbo.qp_action_type_id('copy'), dbo.qp_entity_type_id('user_group'), dbo.qp_tab_id('New Group'), '~/UserGroup/Copy/')


insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Group Properties', 'Properties', 'edit_user_group', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('user_group'), '~/UserGroup/Properties/', dbo.qp_tab_id('Group Details'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Group', 'update_user_group', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('user_group'), dbo.qp_tab_id('Group Details'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Group', 'refresh_user_group', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('user_group'), dbo.qp_tab_id('Group Details'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Group', 'remove_user_group', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('user_group'), 'Do you really want to remove this user group?', dbo.qp_tab_id('Group Details'), '~/UserGroup/Remove/', 1)
GO

exec qp_update_translations 'User Groups', 'Группы пользователей'
exec qp_update_translations 'New Group', 'Новая группа'
exec qp_update_translations 'Do you really want to remove this user group?', 'Вы действительно хотите удалить данную группу пользователей?'
GO

if not exists (select * from context_menu where code = 'user_groups')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('user_groups')
END
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('user_groups'), dbo.qp_action_id('refresh_user_groups'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('user_groups'), dbo.qp_action_id('new_user_group'), 'New Group', 2, 'add.gif')
GO


if not exists (select * from context_menu where code = 'user_group')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('user_group')
END
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('user_group'), dbo.qp_action_id('copy_user_group'), 'Create Like', 1, 'create_like.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('user_group'), dbo.qp_action_id('remove_user_group'), 'Remove', 2, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('user_group'), dbo.qp_action_id('edit_user_group'), 'Properties', 3, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_user_group'), dbo.qp_action_id('edit_user_group'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_user_group'), dbo.qp_action_id('copy_user_group'), 'Create Like', 'create_like.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_user_group'), dbo.qp_action_id('refresh_user_groups'), 'Refresh', 'refresh.gif', NULL, 3, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_user_group'), dbo.qp_action_id('save_user_group'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_user_group'), dbo.qp_action_id('refresh_user_group'), 'Refresh', 'refresh.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_user_group'), dbo.qp_action_id('update_user_group'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_user_group'), dbo.qp_action_id('refresh_user_group'), 'Refresh', 'refresh.gif', NULL, 2, 1)
GO

INSERT INTO VIEW_TYPE (NAME, CODE, ICON)
VALUES ('Tree', 'user_group_tree', 'tree_view.gif')
GO

exec qp_update_translations 'List', 'Список'
exec qp_update_translations 'Tree', 'Дерево'
GO

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_user_group'), dbo.qp_view_id('list'), '~/UserGroup/Index/', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_user_group'), dbo.qp_view_id('user_group_tree'), '~/UserGroup/Tree/', 2)
GO

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_user_group'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_user_group'),

  CONTEXT_MENU_ID = dbo.qp_context_menu_id('user_group'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('user_groups'),

  [DISABLED] = 0
where CODE = 'user_group'
GO

exec qp_drop_existing 'USER_GROUP_TREE', 'IsView'
GO
CREATE VIEW [dbo].[USER_GROUP_TREE]
WITH SCHEMABINDING
AS
select ug.[GROUP_ID]
      ,ug.[GROUP_NAME]
      ,ug.[DESCRIPTION]
      ,ug.[CREATED]
      ,ug.[MODIFIED]
      ,ug.[LAST_MODIFIED_BY]
      ,U.[LOGIN] as LAST_MODIFIED_BY_LOGIN
      ,ug.[shared_content_items]
      ,ug.[nt_group]
      ,ug.[ad_sid]
      ,ug.[BUILT_IN]
      ,ug.[READONLY]
      ,ug.[use_parallel_workflow]
    ,gtg.Parent_Group_Id AS PARENT_GROUP_ID
from dbo.USER_GROUP ug
left join dbo.Group_To_Group gtg on ug.GROUP_ID = gtg.Child_Group_Id
join dbo.USERS U ON U.[USER_ID] = ug.LAST_MODIFIED_BY
GO

exec qp_drop_existing 'qp_copy_user_group', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_copy_user_group]
  @group_id numeric(18,0),
  @new_name nvarchar(255),
  @create_by_id numeric(18,0),
  @new_group_id numeric(18,0) output
AS
BEGIN
  declare @now datetime;
  set @now = getdate();

  INSERT INTO [USER_GROUP]
           ([GROUP_NAME]
           ,[DESCRIPTION]
           ,[CREATED]
           ,[MODIFIED]
           ,[LAST_MODIFIED_BY]
           ,[shared_content_items]
           ,[nt_group]
           ,[ad_sid]
           ,[BUILT_IN]
           ,[READONLY]
           ,[use_parallel_workflow])
     SELECT @new_name
      ,[DESCRIPTION]
      ,@now
      ,@now
      ,@create_by_id
      ,[SHARED_CONTENT_ITEMS]
      ,[NT_GROUP]
      ,[AD_SID]
      ,0
      ,0
      ,[USE_PARALLEL_WORKFLOW]
  FROM [USER_GROUP]
  WHERE [GROUP_ID] = @group_id

  set @new_group_id = scope_identity();


  INSERT INTO [GROUP_TO_GROUP] ([CHILD_GROUP_ID] ,[PARENT_GROUP_ID])
    SELECT @new_group_id, [PARENT_GROUP_ID] from [GROUP_TO_GROUP] WHERE [CHILD_GROUP_ID] = @group_id


  INSERT INTO [USER_GROUP_BIND] ([GROUP_ID],[USER_ID])
  select @new_group_id, [USER_ID] from [USER_GROUP_BIND] where [GROUP_ID] = @group_id

  INSERT INTO [TAB_ACCESS]([TAB_ID],[USER_ID],[GROUP_ID],[PERMISSION_LEVEL_ID])
  select [TAB_ID],[USER_ID],@new_group_id,[PERMISSION_LEVEL_ID] from [TAB_ACCESS] where [GROUP_ID] = @group_id

  INSERT INTO [SITE_ACCESS]
       ([SITE_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_contents])
  SELECT [SITE_ID]
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_contents]
  FROM [SITE_ACCESS]
  where [GROUP_ID] = @group_id

  INSERT INTO CONTENT_ACCESS
       ([CONTENT_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_items])
  SELECT [CONTENT_ID]
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_items]
  FROM [CONTENT_ACCESS]
  where [GROUP_ID] = @group_id

  INSERT INTO CONTENT_ITEM_ACCESS
       (CONTENT_ITEM_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT CONTENT_ITEM_ID
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM CONTENT_ITEM_ACCESS
  where [GROUP_ID] = @group_id

  INSERT INTO FOLDER_ACCESS
       (FOLDER_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT FOLDER_ID
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM FOLDER_ACCESS
  where [GROUP_ID] = @group_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.10', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.10 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.11
-- Entity Access Rules
-- **************************************

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CNT_ACC_PL]') AND parent_object_id = OBJECT_ID(N'[dbo].[CONTENT_ACCESS]'))
ALTER TABLE [dbo].[CONTENT_ACCESS] DROP CONSTRAINT [FK_CNT_ACC_PL]
GO
ALTER TABLE [dbo].[CONTENT_ACCESS] WITH CHECK ADD CONSTRAINT [FK_CNT_ACC_PL] FOREIGN KEY([PERMISSION_LEVEL_ID])
REFERENCES [dbo].[PERMISSION_LEVEL] ([PERMISSION_LEVEL_ID])
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CNT_ITM_ACC_PL]') AND parent_object_id = OBJECT_ID(N'[dbo].[CONTENT_ITEM_ACCESS]'))
ALTER TABLE [dbo].[CONTENT_ITEM_ACCESS] DROP CONSTRAINT [FK_CNT_ITM_ACC_PL]
GO
ALTER TABLE [dbo].[CONTENT_ITEM_ACCESS] WITH CHECK ADD CONSTRAINT [FK_CNT_ITM_ACC_PL] FOREIGN KEY([PERMISSION_LEVEL_ID])
REFERENCES [dbo].[PERMISSION_LEVEL] ([PERMISSION_LEVEL_ID])
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_SITE_ACC_PL]') AND parent_object_id = OBJECT_ID(N'[dbo].[SITE_ACCESS]'))
ALTER TABLE [dbo].[SITE_ACCESS] DROP CONSTRAINT [FK_SITE_ACC_PL]
GO
ALTER TABLE [dbo].[SITE_ACCESS] WITH CHECK ADD CONSTRAINT [FK_SITE_ACC_PL] FOREIGN KEY([PERMISSION_LEVEL_ID])
REFERENCES [dbo].[PERMISSION_LEVEL] ([PERMISSION_LEVEL_ID])
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_WF_ACC_PL]') AND parent_object_id = OBJECT_ID(N'[dbo].[WORKFLOW_ACCESS]'))
ALTER TABLE [dbo].[WORKFLOW_ACCESS] DROP CONSTRAINT [FK_WF_ACC_PL]
GO
ALTER TABLE [dbo].[WORKFLOW_ACCESS] WITH CHECK ADD CONSTRAINT [FK_WF_ACC_PL] FOREIGN KEY([PERMISSION_LEVEL_ID])
REFERENCES [dbo].[PERMISSION_LEVEL] ([PERMISSION_LEVEL_ID])
GO


insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TAB_ID, [DISABLED])
values ('Site Permission', 'site_permission', dbo.qp_entity_type_id('site'), 4, 'SITE_ACCESS', 'SITE_ACCESS_ID', dbo.qp_tab_id('Site Permissions'), 1)
GO

insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TAB_ID, [DISABLED])
values ('Content Permission', 'content_permission', dbo.qp_entity_type_id('content'), 4, 'CONTENT_ACCESS', 'CONTENT_ACCESS_ID', dbo.qp_tab_id('Content Permissions'), 1)
GO

insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TAB_ID, [DISABLED])
values ('Article Permission', 'article_permission', dbo.qp_entity_type_id('article'), 4, 'CONTENT_ITEM_ACCESS', 'CONTENT_ITEM_ACCESS_ID', dbo.qp_tab_id('Article Permissions'), 1)
GO

insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TAB_ID, [DISABLED])
values ('Workflow Permission', 'workflow_permission', dbo.qp_entity_type_id('workflow'), 4, 'WORKFLOW_ACCESS', 'WORKFLOW_ACCESS_ACCESS_ID', dbo.qp_tab_id('Workflow Permissions'), 1)
GO

insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TAB_ID, [DISABLED])
values ('Site Folder Permission', 'site_folder_permission', dbo.qp_entity_type_id('site_folder'), 4, 'FOLDER_ACCESS', 'FOLDER_ACCESS_ID', dbo.qp_tab_id('Site Library'), 1)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.11', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.11 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.12
-- Remove obsolete objects
-- **************************************

exec qp_drop_existing 'qp_paged_custom_actions', 'IsProcedure'
GO
exec qp_drop_existing 'qp_paged_action_log', 'IsProcedure'
GO
exec qp_drop_existing 'qp_paged_button_trace', 'IsProcedure'
GO
exec qp_drop_existing 'qp_paged_removed_entities', 'IsProcedure'
GO
exec qp_drop_existing 'qp_paged_session_log', 'IsProcedure'
GO
exec qp_drop_existing 'qp_paged_contents_list', 'IsProcedure'
GO
exec qp_drop_existing 'V_REMOVED_ENTITIES', 'IsView'
GO
exec qp_drop_existing 'V_CUSTOM_ACTION', 'IsView'
GO
exec qp_drop_existing 'V_BUTTON_TRACE', 'IsView'
GO
exec qp_drop_existing 'V_BACKEND_ACTION_LOG', 'IsView'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.12', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.12 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.13
-- Fix
-- **************************************

exec qp_drop_existing 'ti_site_content_link', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[ti_site_content_link] ON [dbo].[site_content_link] INSTEAD OF INSERT
AS BEGIN
  INSERT INTO CONTENT_TO_CONTENT(l_content_id, r_content_id, map_as_class, net_link_name, net_plural_link_name)
  select l_content_id, r_content_id, map_as_class, net_link_name, net_plural_link_name from inserted
END
GO

exec qp_drop_existing 'td_site_content_link', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[td_site_content_link] ON [dbo].[site_content_link] INSTEAD OF DELETE
AS BEGIN
  DELETE FROM CONTENT_TO_CONTENT WHERE LINK_ID IN (select link_id from deleted)
END
GO

update USER_GROUP set LAST_MODIFIED_BY = 1 where LAST_MODIFIED_BY is null
GO

exec qp_drop_existing 'qp_get_breadcrumbs', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_get_breadcrumbs]
  @user_id numeric(18,0),
  @entity_type_code nvarchar(50),
  @entity_id numeric(18,0) = 0,
  @parent_entity_id numeric(18,0) = NULL,
  @one_level bit = 0
AS
BEGIN
  DECLARE @result table
  (
    ID numeric(18,0),
    PARENT_ID numeric(18,0),
    CODE nvarchar(50),
    NAME nvarchar(50),
    TITLE nvarchar(255),
    IS_FOLDER bit,
    ACTION_CODE nvarchar(50),
    FOLDER_ACTION_CODE nvarchar(50)
  )

  DECLARE @language_id AS numeric(18,0)
  DECLARE @id AS numeric(18,0)
  DECLARE @parent_id AS numeric(18,0)
  DECLARE @code AS nvarchar(50)
  DECLARE @title AS nvarchar(255)
  DECLARE @name AS nvarchar(50)
  DECLARE @recurring_id_field AS nvarchar(50)
  DECLARE @recurring_id AS numeric(18,0)
  DECLARE @default_action_code AS nvarchar(50)
  DECLARE @folder_default_action_code AS nvarchar(50)
  DECLARE @entity_exist AS bit
  DECLARE @level as int

  SET @language_id = dbo.qp_language(@user_id)

  IF (@entity_id != 0)
    BEGIN
      SET @level = 0
      SET @id = @entity_id
      SET @code = @entity_type_code
      SET @parent_id = @parent_entity_id
    END
  ELSE
    BEGIN
      SET @level = 1
      SET @id = @parent_entity_id

      EXEC qp_get_parent_entity_type_code_by_entity_type_code
        @entity_type_code = @entity_type_code,
        @parent_entity_type_code = @code out

      SET @parent_id = NULL
    END

  WHILE (@code IS NOT NULL)
    BEGIN
      SET @title = ''

      SELECT
        @name = NAME,
        @recurring_id_field = RECURRING_ID_FIELD,
        @default_action_code = dbo.qp_action_code(DEFAULT_ACTION_ID),
        @folder_default_action_code = dbo.qp_action_code(FOLDER_DEFAULT_ACTION_ID)
      FROM
        ENTITY_TYPE
      WHERE
        CODE = @code

      EXEC qp_get_entity_title
        @id,
        @code,
        @parent_entity_id,
        @title OUT

      IF ((@code = 'site_folder' OR @code = 'content_folder') AND @title = '')
        BEGIN
          SET @title = dbo.qp_translate('Root Folder', @language_id)
        END

      EXEC qp_get_recurring_parent_entity_id
        @id,
        @code,
        @recurring_id OUT

      IF (@recurring_id IS NOT NULL)
        BEGIN
          SET @parent_id = @recurring_id
          SET @folder_default_action_code = null
        END
      ELSE
        BEGIN
          IF (@code = 'virtual_article')
            BEGIN
              SET @parent_id = @parent_entity_id
            END
          ELSE
            BEGIN
              EXEC qp_get_parent_entity_id @id, @code, @parent_id OUT
            END
        END

      if @parent_id is null
      begin
        if @code = 'db'
          set @parent_id = 0
        else
          set @parent_id = dbo.qp_entity_type_id('db')
      end

      INSERT INTO @result(ID, PARENT_ID, CODE, NAME, TITLE, IS_FOLDER, ACTION_CODE, FOLDER_ACTION_CODE)
      SELECT
        @id,
        @parent_id,
        @code,
        dbo.qp_translate(@name, @language_id),
        @title,
        0,
        @default_action_code,
        @folder_default_action_code

      SET @id = @parent_id

      IF (@recurring_id IS NULL)
        select @code = et2.code from entity_type et1 left join entity_type et2 on et1.parent_id = et2.id where et1.code = @code

      IF @level = 1 and @one_level = 1
        BREAK

      SET @level = @level + 1

    END

  UPDATE r1 SET ACTION_CODE = r2.FOLDER_ACTION_CODE from @result AS r1 inner join @result AS r2 on r1.ID = r2.PARENT_ID AND r2.FOLDER_ACTION_CODE is not null

  SELECT
    ID,
    PARENT_ID,
    CODE,
    NAME,
    TITLE,
    IS_FOLDER,
    ACTION_CODE
  FROM
    @result
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.13', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.13 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.14
-- Entity Access Rules
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Site Permissions', 'list_site_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('site_permission'), '~/SitePermission/Index/', dbo.qp_tab_id('Site Permissions'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Site Permissions', 'refresh_site_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site_permission'), dbo.qp_tab_id('Site Permissions'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('New Site Permission', 'new_site_permission', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('site_permission'), '~/SitePermission/New/', dbo.qp_tab_id('Site Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Site Permission', 'save_site_permission', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('site_permission'), dbo.qp_tab_id('Site Permissions'), 0)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Site Permission Properties', 'Properties', 'edit_site_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('site_permission'), '~/SitePermission/Properties/', dbo.qp_tab_id('Site Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Site Permission', 'update_site_permission', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('site_permission'), dbo.qp_tab_id('Site Permissions'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Site Permission', 'refresh_site_permission', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site_permission'), dbo.qp_tab_id('Site Permissions'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Site Permission', 'remove_site_permission', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('site_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Site Permissions'), '~/SitePermission/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Site Permission', 'multiple_remove_site_permission', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('site_permission'), 'Do you really want to remove the following permissions: {0}?', dbo.qp_tab_id('Site Permissions'), '~/SitePermission/MultipleRemove/')
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Content Permissions', 'list_content_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/Index/', dbo.qp_tab_id('Content Permissions'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Content Permissions', 'refresh_content_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content_permission'), dbo.qp_tab_id('Content Permissions'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('New Content Permission', 'new_content_permission', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/New/', dbo.qp_tab_id('Content Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Content Permission', 'save_content_permission', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('content_permission'), dbo.qp_tab_id('Content Permissions'), 0)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Content Permission Properties', 'Properties', 'edit_content_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/Properties/', dbo.qp_tab_id('Content Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Content Permission', 'update_content_permission', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('content_permission'), dbo.qp_tab_id('Content Permissions'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Content Permission', 'refresh_content_permission', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content_permission'), dbo.qp_tab_id('Content Permissions'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Content Permission', 'remove_content_permission', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('content_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Content Permissions'), '~/ContentPermission/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Content Permission', 'multiple_remove_content_permission', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('content_permission'), 'Do you really want to remove the following permissions: {0}?', dbo.qp_tab_id('Content Permissions'), '~/ContentPermission/MultipleRemove/')
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Article Permissions', 'list_article_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/Index/', dbo.qp_tab_id('Article Permissions'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Article Permissions', 'refresh_article_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article_permission'), dbo.qp_tab_id('Article Permissions'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('New Article Permission', 'new_article_permission', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/New/', dbo.qp_tab_id('Article Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Article Permission', 'save_article_permission', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('article_permission'), dbo.qp_tab_id('Article Permissions'), 0)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Article Permission Properties', 'Properties', 'edit_article_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/Properties/', dbo.qp_tab_id('Article Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Article Permission', 'update_article_permission', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('article_permission'), dbo.qp_tab_id('Article Permissions'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Article Permission', 'refresh_article_permission', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article_permission'), dbo.qp_tab_id('Article Permissions'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Article Permission', 'remove_article_permission', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('article_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Article Permissions'), '~/ArticlePermission/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Article Permission', 'multiple_remove_article_permission', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('article_permission'), 'Do you really want to remove the following permissions: {0}?', dbo.qp_tab_id('Article Permissions'), '~/ArticlePermission/MultipleRemove/')
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Workflow Permissions', 'list_workflow_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('workflow_permission'), '~/WorkflowPermission/Index/', dbo.qp_tab_id('Workflow Permissions'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Workflow Permissions', 'refresh_workflow_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('workflow_permission'), dbo.qp_tab_id('Workflow Permissions'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('New Workflow Permission', 'new_workflow_permission', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('workflow_permission'), '~/WorkflowPermission/New/', dbo.qp_tab_id('Workflow Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Workflow Permission', 'save_workflow_permission', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('workflow_permission'), dbo.qp_tab_id('Workflow Permissions'), 0)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Workflow Permission Properties', 'Properties', 'edit_workflow_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('workflow_permission'), '~/WorkflowPermission/Properties/', dbo.qp_tab_id('Workflow Permissions'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Workflow Permission', 'update_workflow_permission', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('workflow_permission'), dbo.qp_tab_id('Workflow Permissions'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Workflow Permission', 'refresh_workflow_permission', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('workflow_permission'), dbo.qp_tab_id('Workflow Permissions'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Workflow Permission', 'remove_workflow_permission', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('workflow_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Workflow Permissions'), '~/WorkflowPermission/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Workflow Permission', 'multiple_remove_workflow_permission', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('workflow_permission'), 'Do you really want to remove the following permissions: {0}?', dbo.qp_tab_id('Workflow Permissions'), '~/WorkflowPermission/MultipleRemove/')
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Site Folder Permissions', 'list_site_folder_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('site_folder_permission'), '~/SiteFolderPermission/Index/', dbo.qp_tab_id('Site Library'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Site Folder Permissions', 'refresh_site_folder_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site_folder_permission'), dbo.qp_tab_id('Site Library'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('New Site Folder Permission', 'new_site_folder_permission', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('site_folder_permission'), '~/SiteFolderPermission/New/', dbo.qp_tab_id('Site Library'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Site Folder Permission', 'save_site_folder_permission', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('site_folder_permission'), dbo.qp_tab_id('Site Library'), 0)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Site Folder Permission Properties', 'Properties', 'edit_site_folder_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('site_folder_permission'), '~/SiteFolderPermission/Properties/', dbo.qp_tab_id('Site Library'), 1, 1, 700, 360)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Site Folder Permission', 'update_site_folder_permission', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('site_folder_permission'), dbo.qp_tab_id('Site Library'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Site Folder Permission', 'refresh_site_folder_permission', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site_folder_permission'), dbo.qp_tab_id('Site Library'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Site Folder Permission', 'remove_site_folder_permission', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('site_folder_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Site Library'), '~/SiteFolderPermission/Remove/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Site Folder Permission', 'multiple_remove_site_folder_permission', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('site_folder_permission'), 'Do you really want to remove the following permissions: {0}?', dbo.qp_tab_id('Site Library'), '~/SiteFolderPermission/MultipleRemove/')
GO


update dbo.CONTEXT_MENU_ITEM set [ORDER] = [ORDER] * 10
GO


update dbo.CONTEXT_MENU_ITEM set [ORDER] = 45
where CONTEXT_MENU_ID = dbo.qp_context_menu_id('content')
AND ACTION_ID = dbo.qp_action_id('clear_content')
GO


update dbo.CONTEXT_MENU_ITEM set BOTTOM_SEPARATOR = 1
where CONTEXT_MENU_ID = dbo.qp_context_menu_id('site')
AND ACTION_ID = dbo.qp_action_id('site_library')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('list_site_permission'), 'Permissions', 80, 'permissions.gif')
GO


update dbo.CONTEXT_MENU_ITEM set BOTTOM_SEPARATOR = 1
where CONTEXT_MENU_ID = dbo.qp_context_menu_id('content')
AND ACTION_ID = dbo.qp_action_id('content_library')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('list_content_permission'), 'Permissions', 100, 'permissions.gif')
GO


update dbo.CONTEXT_MENU_ITEM set BOTTOM_SEPARATOR = 1
where CONTEXT_MENU_ID = dbo.qp_context_menu_id('article')
AND ACTION_ID = dbo.qp_action_id('list_article_version')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('article'), dbo.qp_action_id('list_article_permission'), 'Permissions', 70, 'permissions.gif')
GO


IF NOT EXISTS (select * from context_menu  where CODE = 'workflow')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('workflow')
END
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('workflow'), dbo.qp_action_id('list_workflow_permission'), 'Permissions', 60, 'permissions.gif')
GO


update dbo.CONTEXT_MENU_ITEM set BOTTOM_SEPARATOR = 1
where CONTEXT_MENU_ID = dbo.qp_context_menu_id('site_folder')
AND ACTION_ID = dbo.qp_action_id('edit_site_folder')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('site_folder'), dbo.qp_action_id('list_site_folder_permission'), 'Permissions', 50, 'permissions.gif')
GO


INSERT INTO context_menu (CODE) VALUES ('site_permission')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site_permission'), dbo.qp_action_id('remove_site_permission'), 'Remove', 10, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('site_permission'), dbo.qp_action_id('edit_site_permission'), 'Properties', 20, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site_permission'), dbo.qp_action_id('edit_site_permission'), 'Properties', 'properties.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site_permission'), dbo.qp_action_id('multiple_remove_site_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site_permission'), dbo.qp_action_id('refresh_site_permissions'), 'Refresh', 'refresh.gif', NULL, 30, 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_site_permission'), dbo.qp_action_id('save_site_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_site_permission'), dbo.qp_action_id('refresh_site_permission'), 'Refresh', 'refresh.gif', NULL, 20, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_permission'), dbo.qp_action_id('update_site_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_permission'), dbo.qp_action_id('remove_site_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_permission'), dbo.qp_action_id('refresh_site_permission'), 'Refresh', 'refresh.gif', NULL, 30, 1)
GO


INSERT INTO context_menu (CODE) VALUES ('content_permission')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('content_permission'), dbo.qp_action_id('remove_content_permission'), 'Remove', 10, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('content_permission'), dbo.qp_action_id('edit_content_permission'), 'Properties', 20, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_content_permission'), dbo.qp_action_id('edit_content_permission'), 'Properties', 'properties.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_content_permission'), dbo.qp_action_id('multiple_remove_content_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_content_permission'), dbo.qp_action_id('refresh_content_permissions'), 'Refresh', 'refresh.gif', NULL, 30, 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_content_permission'), dbo.qp_action_id('save_content_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_content_permission'), dbo.qp_action_id('refresh_content_permission'), 'Refresh', 'refresh.gif', NULL, 20, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_permission'), dbo.qp_action_id('update_content_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_permission'), dbo.qp_action_id('remove_content_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_content_permission'), dbo.qp_action_id('refresh_content_permission'), 'Refresh', 'refresh.gif', NULL, 30, 1)
GO



INSERT INTO context_menu (CODE) VALUES ('article_permission')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('article_permission'), dbo.qp_action_id('remove_article_permission'), 'Remove', 10, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('article_permission'), dbo.qp_action_id('edit_article_permission'), 'Properties', 20, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_permission'), dbo.qp_action_id('edit_article_permission'), 'Properties', 'properties.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_permission'), dbo.qp_action_id('multiple_remove_article_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_article_permission'), dbo.qp_action_id('refresh_article_permissions'), 'Refresh', 'refresh.gif', NULL, 30, 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_article_permission'), dbo.qp_action_id('save_article_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_article_permission'), dbo.qp_action_id('refresh_article_permission'), 'Refresh', 'refresh.gif', NULL, 20, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article_permission'), dbo.qp_action_id('update_article_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article_permission'), dbo.qp_action_id('remove_article_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article_permission'), dbo.qp_action_id('refresh_article_permission'), 'Refresh', 'refresh.gif', NULL, 30, 1)
GO


INSERT INTO context_menu (CODE) VALUES ('workflow_permission')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('workflow_permission'), dbo.qp_action_id('remove_workflow_permission'), 'Remove', 10, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('workflow_permission'), dbo.qp_action_id('edit_workflow_permission'), 'Properties', 20, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_workflow_permission'), dbo.qp_action_id('edit_workflow_permission'), 'Properties', 'properties.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_workflow_permission'), dbo.qp_action_id('multiple_remove_workflow_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_workflow_permission'), dbo.qp_action_id('refresh_workflow_permissions'), 'Refresh', 'refresh.gif', NULL, 30, 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_workflow_permission'), dbo.qp_action_id('save_workflow_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_workflow_permission'), dbo.qp_action_id('refresh_workflow_permission'), 'Refresh', 'refresh.gif', NULL, 20, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_workflow_permission'), dbo.qp_action_id('update_workflow_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_workflow_permission'), dbo.qp_action_id('remove_workflow_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_workflow_permission'), dbo.qp_action_id('refresh_workflow_permission'), 'Refresh', 'refresh.gif', NULL, 30, 1)
GO


INSERT INTO context_menu (CODE) VALUES ('site_folder_permission')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site_folder_permission'), dbo.qp_action_id('remove_site_folder_permission'), 'Remove', 10, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('site_folder_permission'), dbo.qp_action_id('edit_site_folder_permission'), 'Properties', 20, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site_folder_permission'), dbo.qp_action_id('edit_site_folder_permission'), 'Properties', 'properties.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site_folder_permission'), dbo.qp_action_id('multiple_remove_site_folder_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_site_folder_permission'), dbo.qp_action_id('refresh_site_folder_permissions'), 'Refresh', 'refresh.gif', NULL, 30, 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_site_folder_permission'), dbo.qp_action_id('save_site_folder_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_site_folder_permission'), dbo.qp_action_id('refresh_site_folder_permission'), 'Refresh', 'refresh.gif', NULL, 20, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_folder_permission'), dbo.qp_action_id('update_site_folder_permission'), 'Save', 'save.gif', NULL, 10, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_folder_permission'), dbo.qp_action_id('remove_site_folder_permission'), 'Remove', 'delete.gif', NULL, 20, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_site_folder_permission'), dbo.qp_action_id('refresh_site_folder_permission'), 'Refresh', 'refresh.gif', NULL, 30, 1)
GO

update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_site_permission'),
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('site_permission'),
  [PARENT_ID_FIELD] = 'SITE_ID'
where CODE = 'site_permission'
GO
update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_content_permission'),
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('content_permission'),
  [PARENT_ID_FIELD] = 'CONTENT_ID'
where CODE = 'content_permission'
GO
update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_article_permission'),
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('article_permission'),
  [PARENT_ID_FIELD] = 'CONTENT_ITEM_ID'
where CODE = 'article_permission'
GO
update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_site_folder_permission'),
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('site_folder_permission'),
  [PARENT_ID_FIELD] = 'FOLDER_ID'
where CODE = 'site_folder_permission'
GO
update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_workflow_permission'),
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('site_workflow_permission'),
  [PARENT_ID_FIELD] = 'WORKFLOW_ID'
where CODE = 'workflow_permission'
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Select Users', 'select_user', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('user'), '~/User/Select/', dbo.qp_tab_id('Users'), 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Select User Groups', 'select_user_group', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('user_group'), '~/UserGroup/Select/', dbo.qp_tab_id('User Groups'), 1, dbo.qp_view_id('list'))
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.14', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.14 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.15
-- Entity Access Rules
-- **************************************

update [dbo].[CONTENT_ACCESS] set [CREATED] = GETDATE() WHERE [CREATED] IS NULL
GO
ALTER TABLE [dbo].[CONTENT_ACCESS] ALTER COLUMN [CREATED] DATETIME NOT NULL
GO

update [dbo].[CONTENT_ACCESS] set [MODIFIED] = GETDATE() WHERE [MODIFIED] IS NULL
GO
ALTER TABLE [dbo].[CONTENT_ACCESS] ALTER COLUMN [MODIFIED] DATETIME NOT NULL
GO


update [dbo].[CONTENT_ITEM_ACCESS] set [CREATED] = GETDATE() WHERE [CREATED] IS NULL
GO
ALTER TABLE [CONTENT_ITEM_ACCESS] ALTER COLUMN [CREATED] DATETIME NOT NULL
GO

update [dbo].[CONTENT_ITEM_ACCESS] set [MODIFIED] = GETDATE() WHERE [MODIFIED] IS NULL
GO
ALTER TABLE [CONTENT_ITEM_ACCESS] ALTER COLUMN [MODIFIED] DATETIME NOT NULL
GO


update [dbo].[WORKFLOW_ACCESS] set [CREATED] = GETDATE() WHERE [CREATED] IS NULL
GO
ALTER TABLE [WORKFLOW_ACCESS] ALTER COLUMN [CREATED] DATETIME NOT NULL
GO
if exists
  (SELECT * FROM dbo.sysobjects DF
  JOIN dbo.sysobjects T ON T.id = DF.parent_obj
  WHERE DF.id = OBJECT_ID(N'[DF_WORKFLOW_ACCESS_CREATED]') AND DF.type = 'D'
  AND T.id = OBJECT_ID(N'[WORKFLOW_ACCESS]') AND T.type = 'U')
BEGIN
  ALTER TABLE [dbo].[WORKFLOW_ACCESS] DROP CONSTRAINT [DF_WORKFLOW_ACCESS_CREATED]
END
GO
ALTER TABLE [dbo].[WORKFLOW_ACCESS] ADD CONSTRAINT [DF_WORKFLOW_ACCESS_CREATED] DEFAULT (getdate()) FOR [CREATED]
GO

update [dbo].[WORKFLOW_ACCESS] set [MODIFIED] = GETDATE() WHERE [MODIFIED] IS NULL
GO
ALTER TABLE [WORKFLOW_ACCESS] ALTER COLUMN [MODIFIED] DATETIME NOT NULL
GO
if exists
  (SELECT * FROM dbo.sysobjects DF
  JOIN dbo.sysobjects T ON T.id = DF.parent_obj
  WHERE DF.id = OBJECT_ID(N'[DF_WORKFLOW_ACCESS_MODIFIED]') AND DF.type = 'D'
  AND T.id = OBJECT_ID(N'[WORKFLOW_ACCESS]') AND T.type = 'U')
BEGIN
  ALTER TABLE [dbo].[WORKFLOW_ACCESS] DROP CONSTRAINT [DF_WORKFLOW_ACCESS_MODIFIED]
END
GO
ALTER TABLE [dbo].[WORKFLOW_ACCESS] ADD CONSTRAINT [DF_WORKFLOW_ACCESS_MODIFIED] DEFAULT (getdate()) FOR [MODIFIED]
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.15', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.15 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.16
-- Fix CREATED_BY for versions
-- **************************************

ALTER PROCEDURE [dbo].[create_content_item_version]
  @uid NUMERIC,
  @content_item_id NUMERIC,
  @content_version_id NUMERIC = NULL
AS
  DECLARE @content_item_version_id NUMERIC, @tm DATETIME
  SET @tm = GETDATE()
  -- delete > max_num_of_stored_versions
  DECLARE @max_num_of_stored_versions NUMERIC
  DECLARE @content_id NUMERIC
  SELECT @max_num_of_stored_versions = c.max_num_of_stored_versions,
  @content_id = c.content_id
  FROM content AS c
  INNER JOIN content_item AS ci ON c.content_id = ci.content_id
  WHERE ci.content_item_id = @content_item_id
IF @max_num_of_stored_versions <> 0
BEGIN
  DECLARE @item_version_count INT
  SELECT @item_version_count = COUNT(content_item_version_id) FROM content_item_version
  WHERE content_item_id = @content_item_id
  IF @item_version_count >= @max_num_of_stored_versions
  BEGIN
  DECLARE @item_version_id NUMERIC
  SELECT TOP 1 @item_version_id = content_item_version_id FROM content_item_version
  WHERE content_item_id = @content_item_id ORDER BY content_item_version_id
  DELETE item_to_item_version WHERE content_item_version_id = @item_version_id
  DELETE content_item_version WHERE content_item_version_id = @item_version_id
  END

  -- Create content item version
  IF @content_version_id IS NOT NULL
    DELETE FROM content_item_version
    WHERE content_version_id = @content_version_id AND content_item_id = @content_item_id
  INSERT INTO content_item_version (version, version_label, content_version_id, content_item_id, created_by)
  VALUES (@tm, 'backup', @content_version_id, @content_item_id, @uid)
  SET @content_item_version_id = @@IDENTITY

  -- Store content item data
  INSERT INTO version_content_data (attribute_id, content_item_version_id, data, blob_data, created)
  SELECT attribute_id, @content_item_version_id, data, blob_data, @tm
  FROM content_data
  WHERE content_item_id = @content_item_id

  -- Store Many-to-Many slice
  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, ca.attribute_id, linked_item_id
  FROM item_link_united AS il
  INNER JOIN content_attribute AS ca ON ca.link_id = il.link_id
  INNER JOIN content_item AS ci ON ci.content_id =  ca.content_id AND ci.content_item_id = il.item_id
  WHERE il.item_id = @content_item_id

  -- Store Many-to-One data
  declare @many_to_ones table (id numeric, content_id numeric, name nvarchar(255))
  insert into @many_to_ones (id, content_id, name)
  select ca.attribute_id, rca.CONTENT_ID, rca.ATTRIBUTE_NAME from CONTENT_ATTRIBUTE ca
  inner join CONTENT_ATTRIBUTE rca on ca.BACK_RELATED_ATTRIBUTE_ID = rca.ATTRIBUTE_ID
  where ca.CONTENT_ID = @content_id

  while exists(select * from @many_to_ones)
  begin
  declare @currentFieldId numeric, @currentContentId numeric, @currentFieldName nvarchar(255)
  select @currentFieldId = id, @currentContentId = content_id, @currentFieldName = name from @many_to_ones

  declare @ids table (id numeric)
  insert into @ids
  exec qp_get_m2o_ids @currentContentId, @currentFieldName, @content_item_id

  SELECT @content_item_version_id, @currentFieldId, id from @ids

  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, @currentFieldId, id from @ids

  delete from @ids

  delete from @many_to_ones where id = @currentFieldId
  end

  -- Write status history log
  INSERT INTO content_item_status_history
    (content_item_id, user_id, description, created, content_item_version_id,
    system_status_type_id)
  VALUES
    (@content_item_id, @uid, 'Record version backup has been created', @tm, @content_item_version_id,
    2)
END

GO

update CONTENT_ITEM_VERSION set CONTENT_ITEM_VERSION.CREATED_BY = cish.USER_ID FROM CONTENT_ITEM_VERSION civ INNER JOIN CONTENT_ITEM_STATUS_HISTORY cish ON civ.CONTENT_ITEM_VERSION_ID = cish.content_item_version_id and cish.SYSTEM_STATUS_TYPE_ID = 2 and cish.USER_ID != 1
GO

exec qp_drop_existing 'qp_paged_sites_list', 'IsProcedure' -- extra fix
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.16', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.16 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.17
-- Fix LAST_MODIFIED_BY foreign key for some entities
-- **************************************

update [USERS] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)
update [USER_GROUP] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)
update [NOTIFICATIONS] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)
update [CONTENT_ACCESS] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)
update [CONTENT_ITEM_ACCESS] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)
update [SITE_ACCESS] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)
update [FOLDER_ACCESS] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)
update [WORKFLOW_ACCESS] set [LAST_MODIFIED_BY] = 1 where [LAST_MODIFIED_BY] is null or [LAST_MODIFIED_BY] NOT IN (select USER_ID from USERS)

GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_USERS_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[USERS]'))
ALTER TABLE [dbo].[USERS] DROP CONSTRAINT [FK_USERS_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[USERS] WITH CHECK ADD CONSTRAINT [FK_USERS_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[USERS] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_USER_GROUP_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[USER_GROUP]'))
ALTER TABLE [dbo].[USER_GROUP] DROP CONSTRAINT [FK_USER_GROUP_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[USER_GROUP] WITH CHECK ADD CONSTRAINT [FK_USER_GROUP_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
exec qp_drop_existing 'USER_GROUP_TREE', 'IsView'
GO
ALTER TABLE [dbo].[USER_GROUP] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO
CREATE VIEW [dbo].[USER_GROUP_TREE]
WITH SCHEMABINDING
AS
select ug.[GROUP_ID]
      ,ug.[GROUP_NAME]
      ,ug.[DESCRIPTION]
      ,ug.[CREATED]
      ,ug.[MODIFIED]
      ,ug.[LAST_MODIFIED_BY]
      ,U.[LOGIN] as LAST_MODIFIED_BY_LOGIN
      ,ug.[shared_content_items]
      ,ug.[nt_group]
      ,ug.[ad_sid]
      ,ug.[BUILT_IN]
      ,ug.[READONLY]
      ,ug.[use_parallel_workflow]
    ,gtg.Parent_Group_Id AS PARENT_GROUP_ID
from dbo.USER_GROUP ug
left join dbo.Group_To_Group gtg on ug.GROUP_ID = gtg.Child_Group_Id
join dbo.USERS U ON U.[USER_ID] = ug.LAST_MODIFIED_BY
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_NOTIFICATIONS_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[NOTIFICATIONS]'))
ALTER TABLE [dbo].[NOTIFICATIONS] DROP CONSTRAINT [FK_NOTIFICATIONS_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[NOTIFICATIONS] WITH CHECK ADD CONSTRAINT [FK_NOTIFICATIONS_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[NOTIFICATIONS] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CONTENT_ACCESS_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[CONTENT_ACCESS]'))
ALTER TABLE [dbo].[CONTENT_ACCESS] DROP CONSTRAINT [FK_CONTENT_ACCESS_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[CONTENT_ACCESS] WITH CHECK ADD CONSTRAINT [FK_CONTENT_ACCESS_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[CONTENT_ACCESS] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CONTENT_ITEM_ACCESS_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[CONTENT_ITEM_ACCESS]'))
ALTER TABLE [dbo].[CONTENT_ITEM_ACCESS] DROP CONSTRAINT [FK_CONTENT_ITEM_ACCESS_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[CONTENT_ITEM_ACCESS] WITH CHECK ADD CONSTRAINT [FK_CONTENT_ITEM_ACCESS_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[CONTENT_ITEM_ACCESS] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_SITE_ACCESS_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[SITE_ACCESS]'))
ALTER TABLE [dbo].[SITE_ACCESS] DROP CONSTRAINT [FK_SITE_ACCESS_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[SITE_ACCESS] WITH CHECK ADD CONSTRAINT [FK_SITE_ACCESS_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[SITE_ACCESS] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_FOLDER_ACCESS_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[FOLDER_ACCESS]'))
ALTER TABLE [dbo].[FOLDER_ACCESS] DROP CONSTRAINT [FK_FOLDER_ACCESS_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[FOLDER_ACCESS] WITH CHECK ADD CONSTRAINT [FK_FOLDER_ACCESS_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[FOLDER_ACCESS] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_WORKFLOW_ACCESS_LAST_MODIFIED_BY]') AND parent_object_id = OBJECT_ID(N'[dbo].[WORKFLOW_ACCESS]'))
ALTER TABLE [dbo].[WORKFLOW_ACCESS] DROP CONSTRAINT [FK_WORKFLOW_ACCESS_LAST_MODIFIED_BY]
GO
ALTER TABLE [dbo].[WORKFLOW_ACCESS] WITH CHECK ADD CONSTRAINT [FK_WORKFLOW_ACCESS_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[WORKFLOW_ACCESS] ALTER COLUMN [LAST_MODIFIED_BY] numeric(18,0) NOT NULL
GO

update BACKEND_ACTION
set [IS_WINDOW] = 1, [WINDOW_WIDTH] = 700, [WINDOW_HEIGHT] = 360
where CODE in
(
  'new_site_permission'
  ,'edit_site_permission'
  ,'new_content_permission'
  ,'edit_content_permission'
  ,'new_article_permission'
  ,'edit_article_permission'
  ,'new_workflow_permission'
  ,'edit_workflow_permission'
  ,'new_site_folder_permission'
  ,'edit_site_folder_permission'
)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.17', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.17 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.18
-- Permissions
-- **************************************

INSERT INTO [dbo].[ACTION_TYPE]
           ([NAME]
           ,[CODE]
           ,[REQUIRED_PERMISSION_LEVEL_ID]
           ,[ITEMS_AFFECTED])
     VALUES ('Simple Update','simple_update',2,1)
GO

insert into [dbo].BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID)
values('Enable Articles Permissions', 'enable_article_permissions', dbo.qp_action_type_id('simple_update'), dbo.qp_entity_type_id('content'), '~/Content/EnableArticlePermissions/', dbo.qp_tab_id('Content Info'))
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.18', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.18 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.19
-- Permissions
-- **************************************

exec qp_drop_existing 'tiud_content_access_copy_to_folders', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[tiud_content_access_copy_to_folders] ON [dbo].[CONTENT_ACCESS]
FOR INSERT, UPDATE, DELETE
AS BEGIN
  -- DELETE all folder permissions for accessed folders
  DELETE FROM content_folder_access
  WHERE content_folder_id IN (
    SELECT folder_id FROM content_folder
    WHERE content_id IN (SELECT content_id FROM inserted) OR content_id IN (SELECT content_id FROM deleted)
  )
  -- COPY content permissions to folder
  INSERT INTO content_folder_access (
    content_folder_id, permission_level_id, user_id, group_id,
    created, modified, last_modified_by
  ) SELECT
    f.folder_id, ca.permission_level_id, ca.user_id, ca.group_id,
    ca.created, ca.modified, ca.last_modified_by
  FROM
    content_folder AS f
    LEFT OUTER JOIN content_access AS ca ON ca.content_id = f.content_id
  WHERE
    f.content_id IN (SELECT content_id FROM inserted)
END
GO

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED) VALUES('Multiple Child Permission Modify', 'multiple_child_permission_modify', 2, 255)
GO
insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED) VALUES('Multiple Child Permission Remove', 'multiple_child_permission_remove', 1, 255)
GO
insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED) VALUES('All Child Permission Modify', 'all_child_permission_modify', 2, 0)
GO
insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED) VALUES('All Child Permission Remove', 'all_child_permission_remove', 1, 0)
GO
insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED) VALUES('Child Permission Modify', 'child_permission_modify', 2, 1)
GO
insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED) VALUES('Child Permission Remove', 'child_permission_remove', 1, 1)
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Child Content Permissions', 'list_child_content_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/ChildIndex/', dbo.qp_tab_id('Content Permissions'), 1, dbo.qp_view_id('list'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Content Permissions', 'refresh_child_content_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('content_permission'), dbo.qp_tab_id('Content Permissions'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change Selected Child Content Permissions', 'multiple_change_child_content_permission', dbo.qp_action_type_id('multiple_child_permission_modify'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/MultipleChangeAsChild/', dbo.qp_tab_id('Content Permissions'), 1, 1, 700, 150)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, CONFIRM_PHRASE)
values('Remove Selected Child Content Permissions', 'multiple_remove_child_content_permission', dbo.qp_action_type_id('multiple_child_permission_remove'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/MultipleRemoveAsChild/', dbo.qp_tab_id('Content Permissions'), 'Do you really want to remove selected permissions?')
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change All Child Content Permissions', 'change_all_child_content_permission', dbo.qp_action_type_id('all_child_permission_modify'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/AllChangeAsChild/', dbo.qp_tab_id('Content Permissions'), 1, 1, 700, 150)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, CONFIRM_PHRASE)
values('Remove All Child Content Permissions', 'remove_all_child_content_permission', dbo.qp_action_type_id('all_child_permission_remove'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/AllRemoveAsChild/', dbo.qp_tab_id('Content Permissions'), 'Do you really want to remove all permissions?')
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change Child Content Permissions', 'change_child_content_permission', dbo.qp_action_type_id('child_permission_modify'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/ChangeAsChild/', dbo.qp_tab_id('Content Permissions'), 1, 1, 700, 150)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, CONFIRM_PHRASE)
values('Remove Child Content Permissions', 'remove_child_content_permission', dbo.qp_action_type_id('child_permission_remove'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/RemoveAsChild/', dbo.qp_tab_id('Content Permissions'), 'Do you really want to remove this permission?')
GO


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_content_permission'), dbo.qp_action_id('multiple_change_child_content_permission'), 'Change', 'multi_change.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_content_permission'), dbo.qp_action_id('multiple_remove_child_content_permission'), 'Delete', 'delete.gif', NULL, 20, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_content_permission'), dbo.qp_action_id('change_all_child_content_permission'), 'Change All', 'all_change.gif', NULL, 30, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_content_permission'), dbo.qp_action_id('remove_all_child_content_permission'), 'Delete All', 'delete.gif', NULL, 40, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_content_permission'), dbo.qp_action_id('refresh_child_content_permissions'), 'Refresh', 'refresh.gif', NULL, 50, 1)
GO

INSERT INTO context_menu (CODE) VALUES ('child_content_permission')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('child_content_permission'), dbo.qp_action_id('change_child_content_permission'), 'Change', 1, 'change.gif')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('child_content_permission'), dbo.qp_action_id('remove_child_content_permission'), 'Delete', 1, 'delete.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('list_child_content_permission'), 'Child Permissions', 90, 'child_permissions.gif')
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Child Article Permissions', 'list_child_article_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/ChildIndex/', dbo.qp_tab_id('Article Permissions'), 1, dbo.qp_view_id('list'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Article Permissions', 'refresh_child_article_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article_permission'), dbo.qp_tab_id('Article Permissions'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change Selected Child Article Permissions', 'multiple_change_child_article_permission', dbo.qp_action_type_id('multiple_child_permission_modify'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/MultipleChangeAsChild/', dbo.qp_tab_id('Article Permissions'), 1, 1, 700, 150)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID)
values('Remove Selected Child Article Permissions', 'multiple_remove_child_article_permission', dbo.qp_action_type_id('multiple_child_permission_remove'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/MultipleRemoveAsChild/', dbo.qp_tab_id('Article Permissions'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change All Child Article Permissions', 'change_all_child_article_permission', dbo.qp_action_type_id('all_child_permission_modify'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/AllChangeAsChild/', dbo.qp_tab_id('Article Permissions'), 1, 1, 700, 150)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID)
values('Remove All Child Article Permissions', 'remove_all_child_article_permission', dbo.qp_action_type_id('all_child_permission_remove'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/AllRemoveAsChild/', dbo.qp_tab_id('Article Permissions'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change Child Article Permissions', 'change_child_article_permission', dbo.qp_action_type_id('child_permission_modify'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/ChangeAsChild/', dbo.qp_tab_id('Article Permissions'), 1, 1, 700, 150)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID)
values('Remove Child Article Permissions', 'remove_child_article_permission', dbo.qp_action_type_id('child_permission_remove'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/RemoveAsChild/', dbo.qp_tab_id('Article Permissions'))
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_article_permission'), dbo.qp_action_id('multiple_change_child_article_permission'), 'Change', 'multi_change.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_article_permission'), dbo.qp_action_id('multiple_remove_child_article_permission'), 'Delete', 'delete.gif', NULL, 20, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_article_permission'), dbo.qp_action_id('change_all_child_article_permission'), 'Change All', 'all_change.gif', NULL, 30, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_article_permission'), dbo.qp_action_id('remove_all_child_article_permission'), 'Delete All', 'delete.gif', NULL, 40, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_child_article_permission'), dbo.qp_action_id('refresh_child_article_permissions'), 'Refresh', 'refresh.gif', NULL, 50, 1)
GO

INSERT INTO context_menu (CODE) VALUES ('child_article_permission')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('child_article_permission'), dbo.qp_action_id('change_child_article_permission'), 'Change', 1, 'change.gif')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('child_article_permission'), dbo.qp_action_id('remove_child_article_permission'), 'Delete', 1, 'delete.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('content'), dbo.qp_action_id('list_child_article_permission'), 'Child Permissions', 110, 'child_permissions.gif')
GO

exec qp_update_translations 'Do you really want to remove selected permissions?', 'Вы действительно хотите удалить выбранные правила доступа?';
exec qp_update_translations 'Do you really want to remove all permissions?', 'Вы действительно хотите удалить все правила доступа?';
exec qp_update_translations 'Do you really want to remove this permission?', 'Вы действительно хотите удалить выбранное правило доступа?';
exec qp_update_translations 'Child Permissions', 'Дочерние права доступа';
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.19', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.19 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.20
-- Fix Action Toolbar Button: correct always enabled
-- **************************************

update ACTION_TYPE set ITEMS_AFFECTED = 0 where CODE = 'refresh'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.20', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.20 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.21
-- Permissions
-- **************************************

exec qp_update_translations 'Change', 'Изменить';
exec qp_update_translations 'Change All', 'Изменить все';
exec qp_update_translations 'Delete All', 'Удалить все';
GO


insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED) VALUES('Child Permission Save', 'child_permission_save', 2, 0)
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Child Content Permissions', 'save_child_content_permission', dbo.qp_action_type_id('child_permission_save'), dbo.qp_entity_type_id('content_permission'), dbo.qp_tab_id('Content Permissions'))
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('multiple_change_child_content_permission'), dbo.qp_action_id('save_child_content_permission'), 'Save', 'save.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('change_all_child_content_permission'), dbo.qp_action_id('save_child_content_permission'), 'Save', 'save.gif', NULL, 20, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('change_child_content_permission'), dbo.qp_action_id('save_child_content_permission'), 'Save', 'save.gif', NULL, 30, 1)
GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Save Child Article Permissions', 'save_child_article_permission', dbo.qp_action_type_id('child_permission_save'), dbo.qp_entity_type_id('article_permission'), dbo.qp_tab_id('Article Permissions'))
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('multiple_change_child_article_permission'), dbo.qp_action_id('save_child_article_permission'), 'Save', 'save.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('change_all_child_article_permission'), dbo.qp_action_id('save_child_article_permission'), 'Save', 'save.gif', NULL, 20, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('change_child_article_permission'), dbo.qp_action_id('save_child_article_permission'), 'Save', 'save.gif', NULL, 30, 1)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.21', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.21 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.22
-- Notifications
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Notifications', 'list_notification', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('notification'), '~/Notification/Index/', dbo.qp_tab_id('Notifications'), 1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Notifications', 'refresh_notifications', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('notification'), dbo.qp_tab_id('Notifications'), 1)


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('New Notification', 'new_notification', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('notification'), '~/Notification/New/', dbo.qp_tab_id('New Notification'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Notification', 'save_notification', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('notification'), dbo.qp_tab_id('New Notification'), 0)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Notification Properties', 'Properties', 'edit_notification', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('notification'), '~/Notification/Properties/', dbo.qp_tab_id('Notification Info'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Notification', 'update_notification', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('notification'), dbo.qp_tab_id('Notification Info'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Notification', 'refresh_notification', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('notification'), dbo.qp_tab_id('Notification Info'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Notification', 'remove_notification', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('notification'), 'Do you really want to remove this notification?', dbo.qp_tab_id('Notification Info'), '~/Notification/Remove/', 1)
GO

if not exists (select * from context_menu where code = 'notifications')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('notifications')
END
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('notifications'), dbo.qp_action_id('refresh_notifications'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('notifications'), dbo.qp_action_id('new_notification'), 'New Notification', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('notification'), dbo.qp_action_id('remove_notification'), 'Remove', 2, 'delete.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('notification'), dbo.qp_action_id('edit_notification'), 'Properties', 3, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_notification'), dbo.qp_action_id('edit_notification'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_notification'), dbo.qp_action_id('remove_notification'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_notification'), dbo.qp_action_id('refresh_notifications'), 'Refresh', 'refresh.gif', NULL, 3, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_notification'), dbo.qp_action_id('save_notification'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_notification'), dbo.qp_action_id('refresh_notification'), 'Refresh', 'refresh.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_notification'), dbo.qp_action_id('update_notification'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_notification'), dbo.qp_action_id('remove_notification'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_notification'), dbo.qp_action_id('refresh_notification'), 'Refresh', 'refresh.gif', NULL, 3, 1)
GO

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_notification'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_notification'),

  CONTEXT_MENU_ID = dbo.qp_context_menu_id('notification'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('notifications'),

  [DISABLED] = 0
where CODE = 'notification'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.22', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.22 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.23
-- Fix Site Folder Tree Permission Check
-- **************************************

exec qp_drop_existing 'qp_get_folders_tree', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_get_folders_tree]
  @user_id numeric(18,0),
  @parent_entity_id numeric(18,0),
  @is_site bit = 1,
  @parent_folder_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN

  DECLARE @security_sql AS nvarchar(max), @sql_result AS nvarchar(max)
  DECLARE @entity_name AS nvarchar(50), @parent_entity_name AS nvarchar(50)
  DECLARE @use_security bit, @parent_level numeric, @block_filter nvarchar(10)

  SET @entity_name = case @is_site when 1 then 'folder' else 'content_folder' end
  print @entity_name
  SET @parent_entity_name = case @is_site when 1 then 'site' else 'content' end
  print @parent_entity_name

  set @use_security = 1
  set @block_filter = ''
  if @entity_name = 'content_folder'
  begin
    set @use_security = 0
    select @parent_level = dbo.qp_entity_access_level(@user_id, @parent_entity_name, @parent_entity_id)
    if @parent_level = 0
      set @block_filter = ' AND 1 = 0 '
  end

  if @use_security = 1 BEGIN
    EXEC dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
      @start_level = @permission_level,
      @end_level = 4,
      @entity_name = @entity_name,
      @parent_entity_name = @parent_entity_name,
      @parent_entity_id = @parent_entity_id,
      @SQLOut = @security_sql OUTPUT
    IF(@is_site = 1) BEGIN
      CREATE TABLE #tmp
      (
        N int identity,
        FOLDER_ID numeric(18,0),
        PARENT_FOLDER_ID numeric(18,0),
        PERMISSION_LEVEL int
      );

      set @security_sql = N'insert into #tmp (FOLDER_ID, PARENT_FOLDER_ID, PERMISSION_LEVEL)
        select F.FOLDER_ID, F.PARENT_FOLDER_ID, P.PERMISSION_LEVEL from
        (' + @security_sql +  ') P
        RIGHT JOIN FOLDER F ON P.FOLDER_ID = F.FOLDER_ID
        WHERE F.SITE_ID = @p0';
      exec sp_executesql @security_sql, N'@p0 int', @p0 = @parent_entity_id;

      declare @tmp_count int, @tmp_i int, @tmp_p0 int, @tmp_pl int;
      set @tmp_i = 1;
      select @tmp_count = COUNT(*) from #tmp;

      WHILE(@tmp_i <= @tmp_count)
      BEGIN
        select @tmp_p0 = FOLDER_ID, @tmp_pl = PERMISSION_LEVEL from #tmp where N = @tmp_i;
        set @tmp_i = @tmp_i + 1;
        if(@tmp_pl IS NULL) BEGIN
          exec sp_executesql N'WITH FLD_TREE(FOLDER_ID, PARENT_FOLDER_ID, PERMISSION_LEVEL, HL) AS
          (
            select #tmp.FOLDER_ID, #tmp.PARENT_FOLDER_ID, #tmp.PERMISSION_LEVEL, 0 as HL from #tmp WHERE FOLDER_ID = @p0
            UNION ALL
            select #tmp.FOLDER_ID, #tmp.PARENT_FOLDER_ID, #tmp.PERMISSION_LEVEL, FLD_TREE.HL + 1  as HL from #tmp
            join FLD_TREE ON #tmp.FOLDER_ID = FLD_TREE.PARENT_FOLDER_ID
          )
          update #tmp set #tmp.PERMISSION_LEVEL = T.PERMISSION_LEVEL
          from #tmp
          join
          (
            select @p0 as FOLDER_ID, F1.PERMISSION_LEVEL from FLD_TREE F1
            JOIN (select min(HL) as MHL from FLD_TREE where PERMISSION_LEVEL IS NOT NULL)  F2 ON F2.MHL = F1.HL
          ) T ON #tmp.FOLDER_ID = T.FOLDER_ID', N'@p0 int', @p0 = @tmp_p0
        END;
      END;
      set @security_sql = 'select FOLDER_ID, PERMISSION_LEVEL from #tmp';
    END;
  END;

  SET @sql_result = ''
  SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + ' c.FOLDER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
      SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
      SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '     COUNT(FOLDER_ID) ' + CHAR(13)
      SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
      SET @sql_result = @sql_result + '     ' + @entity_name + CHAR(13)
      SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
      SET @sql_result = @sql_result + '     PARENT_FOLDER_ID = c.FOLDER_ID ' + CHAR(13)
      SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
      SET @sql_result = @sql_result + '   1 ' + CHAR(13)
      SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
      SET @sql_result = @sql_result + '   0 ' + CHAR(13)
      SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' @record_count = COUNT(c.FOLDER_ID) ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
  SET @sql_result = @sql_result + ' ' + @entity_name + ' AS c '+ CHAR(13)
  if @use_security = 1
  BEGIN
    SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
    SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
    SET @sql_result = @sql_result + 'ON ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.folder_id = pi.' + @entity_name + '_id ' + CHAR(13)
  END
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
  IF (@parent_folder_id IS NOT NULL)
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID = ' + CAST(@parent_folder_id AS varchar) + ' ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID IS NULL ' + CHAR(13)
      SET @sql_result = @sql_result + '   AND c.' + @parent_entity_name + '_ID = ' + CAST(@parent_entity_id AS varchar) + ' '  + CHAR(13)
    END
  SET @sql_result = @sql_result + @block_filter
  IF (@count_only = 0)
    BEGIN
    SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.NAME ASC '
  END

  IF (@count_only = 0)
    BEGIN
      print @sql_result
      EXEC(@sql_result)

      SET @total_records = @@ROWCOUNT
    END
  ELSE
    BEGIN
      print @sql_result
      EXEC sp_executesql
        @sql_result,
        N'@record_count int OUTPUT',
        @record_count = @total_records OUTPUT
    END
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.23', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.23 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.24
-- Action Permissions
-- **************************************

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ENTITY_TYPE_ACCESS]') AND type in (N'U'))
  DROP TABLE [dbo].[ENTITY_TYPE_ACCESS]
GO
CREATE TABLE [dbo].[ENTITY_TYPE_ACCESS](
  [ENTITY_TYPE_ACCESS_ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
  [ENTITY_TYPE_ID] int NOT NULL,
  [USER_ID] [numeric](18, 0) NULL,
  [GROUP_ID] [numeric](18, 0) NULL,
  [PERMISSION_LEVEL_ID] [numeric](18, 0) NOT NULL,
  [CREATED] [datetime] NOT NULL  DEFAULT (getdate()),
  [MODIFIED] [datetime] NOT NULL  DEFAULT (getdate()),
  [LAST_MODIFIED_BY] [numeric](18, 0) NOT NULL,
  CONSTRAINT [PK_ENTITY_TYPE_ACCESS] PRIMARY KEY NONCLUSTERED ([ENTITY_TYPE_ACCESS_ID] ASC),
  CONSTRAINT [IX_ENT_TYPE_ACC] UNIQUE CLUSTERED
  (
    [ENTITY_TYPE_ID] ASC,
    [USER_ID] ASC,
    [GROUP_ID] ASC
  )
)
GO
ALTER TABLE [dbo].[ENTITY_TYPE_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ENT_TYPE_ACC_ENTITY_TYPE] FOREIGN KEY([ENTITY_TYPE_ID])
  REFERENCES [dbo].[ENTITY_TYPE] ([ID])
GO
ALTER TABLE [dbo].[ENTITY_TYPE_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ENT_TYPE_ACC_GROUP] FOREIGN KEY([GROUP_ID])
  REFERENCES [dbo].[USER_GROUP] ([GROUP_ID]) ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ENTITY_TYPE_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ENT_TYPE_ACC_USERS] FOREIGN KEY([USER_ID])
  REFERENCES [dbo].[USERS] ([USER_ID]) ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ENTITY_TYPE_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ENT_TYPE_ACC_PL] FOREIGN KEY([PERMISSION_LEVEL_ID])
  REFERENCES [dbo].[PERMISSION_LEVEL] ([PERMISSION_LEVEL_ID])
GO
ALTER TABLE [dbo].[ENTITY_TYPE_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ENT_TYPE_ACC_LAST_MDF_BY] FOREIGN KEY([LAST_MODIFIED_BY])
  REFERENCES [dbo].[USERS] ([USER_ID])
GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ACTION_ACCESS]') AND type in (N'U'))
  DROP TABLE [dbo].[ACTION_ACCESS]
GO
CREATE TABLE [dbo].[ACTION_ACCESS](
  [ACTION_ACCESS_ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
  [ACTION_ID] int NOT NULL,
  [USER_ID] [numeric](18, 0) NULL,
  [GROUP_ID] [numeric](18, 0) NULL,
  [PERMISSION_LEVEL_ID] [numeric](18, 0) NOT NULL,
  [CREATED] [datetime] NOT NULL  DEFAULT (getdate()),
  [MODIFIED] [datetime] NOT NULL  DEFAULT (getdate()),
  [LAST_MODIFIED_BY] [numeric](18, 0) NOT NULL,
  CONSTRAINT [PK_ACTION_ACCESS] PRIMARY KEY NONCLUSTERED ([ACTION_ACCESS_ID] ASC),
  CONSTRAINT [IX_ACT_ACC] UNIQUE CLUSTERED
  (
    [ACTION_ACCESS_ID] ASC,
    [USER_ID] ASC,
    [GROUP_ID] ASC
  )
)
GO
ALTER TABLE [dbo].[ACTION_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ACT_ACC_ACTION] FOREIGN KEY([ACTION_ID])
  REFERENCES [dbo].[BACKEND_ACTION] ([ID])
GO
ALTER TABLE [dbo].[ACTION_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ACT_ACC_GROUP] FOREIGN KEY([GROUP_ID])
  REFERENCES [dbo].[USER_GROUP] ([GROUP_ID]) ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ACTION_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ACT_ACC_USERS] FOREIGN KEY([USER_ID])
  REFERENCES [dbo].[USERS] ([USER_ID]) ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ACTION_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ACT_ACC_PL] FOREIGN KEY([PERMISSION_LEVEL_ID])
  REFERENCES [dbo].[PERMISSION_LEVEL] ([PERMISSION_LEVEL_ID])
GO
ALTER TABLE [dbo].[ACTION_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ACT_ACC_LAST_MDF_BY] FOREIGN KEY([LAST_MODIFIED_BY])
  REFERENCES [dbo].[USERS] ([USER_ID])
GO

exec qp_drop_existing 'tbd_user', 'IsTrigger'
GO

CREATE TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id

    UPDATE CONTAINER SET locked = NULL, locked_by = NULL FROM CONTAINER c inner join deleted d on c.locked_by = d.user_id
    UPDATE CONTENT_FORM SET locked = NULL, locked_by = NULL FROM CONTENT_FORM c inner join deleted d on c.locked_by = d.user_id
    UPDATE CONTENT_ITEM SET locked = NULL, locked_by = NULL FROM CONTENT_ITEM c inner join deleted d on c.locked_by = d.user_id
    UPDATE [OBJECT] SET locked = NULL, locked_by = NULL FROM [OBJECT] c inner join deleted d on c.locked_by = d.user_id
    UPDATE OBJECT_FORMAT SET locked = NULL, locked_by = NULL FROM OBJECT_FORMAT c inner join deleted d on c.locked_by = d.user_id
    UPDATE PAGE SET locked = NULL, locked_by = NULL FROM PAGE c inner join deleted d on c.locked_by = d.user_id
    UPDATE PAGE_TEMPLATE SET locked = NULL, locked_by = NULL FROM PAGE_TEMPLATE c inner join deleted d on c.locked_by = d.user_id
    UPDATE [SITE] SET locked = NULL, locked_by = NULL FROM [SITE] c inner join deleted d on c.locked_by = d.user_id

    UPDATE [SITE] SET last_modified_by = 1 FROM [SITE] c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET created_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.created_by = d.user_id
    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
    UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
    UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CUSTOM_ACTION SET LAST_MODIFIED_BY = 1 FROM CUSTOM_ACTION c INNER JOIN deleted d on c.LAST_MODIFIED_BY = d.[USER_ID]

  UPDATE NOTIFICATIONS SET FROM_BACKENDUSER_ID = 1 FROM NOTIFICATIONS c inner join deleted d on c.FROM_BACKENDUSER_ID = d.user_id

  UPDATE ENTITY_TYPE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE ACTION_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.24', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.24 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.25
-- NotificationObjectFormats
-- **************************************

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, IS_WINDOW, WINDOW_WIDTH, WINDOW_HEIGHT)
values('Notification Template Format Properties', 'Properties', 'edit_notification_template_format', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('template_object_format'), '~/Notification/NotificationTemplateFormatProperties/', dbo.qp_tab_id('Notification Info'), 1, 1, 1200, 350)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Notification Template Format', 'update_notification_template_format', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('template_object_format'), dbo.qp_tab_id('Notification Info'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Notification Template Format', 'refresh_notification_template_format', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template_object_format'), dbo.qp_tab_id('Notification Info'), 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_notification_template_format'), dbo.qp_action_id('update_notification_template_format'), 'Save', 'save.gif', NULL, 20, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_notification_template_format'), dbo.qp_action_id('refresh_notification_template_format'), 'Refresh', 'refresh.gif', NULL, 30, 0)

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.25', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.25 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.26
-- NOtification bug fix
-- **************************************
UPDATE [dbo].[BACKEND_ACTION]
   SET
      [HAS_PRE_ACTION] = 0

 WHERE CODE = 'remove_notification'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.26', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.26 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.27
-- Action Permissions and New Action Security Model
-- **************************************

insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TAB_ID, [DISABLED])
values ('Entity Type Permission', 'entity_type_permission', dbo.qp_entity_type_id('db'), 20, 'ENTITY_TYPE_ACCESS', 'ENTITY_TYPE_ACCESS_ID', dbo.qp_tab_id('Tab Access'), 1)
GO
insert into ENTITY_TYPE (NAME, CODE, PARENT_ID, [ORDER], SOURCE, ID_FIELD, TAB_ID, [DISABLED])
values ('Action Permission', 'action_permission', dbo.qp_entity_type_id('db'), 30, 'ACTION_ACCESS', 'ACTION_ACCESS_ID', dbo.qp_tab_id('Tab Access'), 1)
GO

------------- Дерево ----------------------
insert into ACTION_TYPE(NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('Action Permissions', 'action_permission_tree', 3, 1)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Action Permission Tree', 'action_permission_tree', dbo.qp_action_type_id('action_permission_tree'), dbo.qp_entity_type_id('db'), '~/ActionPermissionTree/TreeView/', dbo.qp_tab_id('Tab Access'), 1)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Action Permission Tree', 'refresh_action_permission_tree', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('db'), dbo.qp_tab_id('Tab Access'), 1)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Entity Type Permission', 'refresh_entity_type_permission_node', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('entity_type_permission'), dbo.qp_tab_id('Tab Access'), 0)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Action Permission', 'refresh_action_permission_node', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('action_permission'), dbo.qp_tab_id('Tab Access'), 0)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('db'), dbo.qp_action_id('action_permission_tree'), 'Action Permissions', 60, 'permissions.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('action_permission_tree'), dbo.qp_action_id('refresh_action_permission_tree'), 'Refresh', 'refresh.gif', NULL, 1, 0)
GO


INSERT INTO context_menu (CODE) VALUES ('action_permission_entity_type_node')
GO
INSERT INTO context_menu (CODE) VALUES ('action_permission_action_node')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('action_permission_entity_type_node'), dbo.qp_action_id('refresh_entity_type_permission_node'), 'Refresh', 10, 'refresh.gif', 1)
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('action_permission_action_node'), dbo.qp_action_id('refresh_action_permission_node'), 'Refresh', 10, 'refresh.gif', 1)
GO



exec qp_drop_existing 'ENTITY_TYPE_ACCESS_PERMLEVEL', 'IsView'
GO
CREATE VIEW [dbo].ENTITY_TYPE_ACCESS_PERMLEVEL WITH SCHEMABINDING AS
SELECT C.ENTITY_TYPE_ACCESS_ID, C.[USER_ID], C.GROUP_ID,
PL.PERMISSION_LEVEL, X.ID AS ENTITY_TYPE_ID
FROM [dbo].ENTITY_TYPE_ACCESS AS C
INNER JOIN [dbo].PERMISSION_LEVEL AS PL ON C.PERMISSION_LEVEL_ID = PL.PERMISSION_LEVEL_ID
INNER JOIN [dbo].ENTITY_TYPE AS X ON C.ENTITY_TYPE_ID = X.ID
GO


exec qp_drop_existing 'BACKEND_ACTION_ACCESS_PERMLEVEL', 'IsView'
GO
CREATE VIEW [dbo].BACKEND_ACTION_ACCESS_PERMLEVEL WITH SCHEMABINDING AS
SELECT C.ACTION_ACCESS_ID, C.[USER_ID], C.GROUP_ID,
PL.PERMISSION_LEVEL, X.ID AS BACKEND_ACTION_ID
FROM [dbo].ACTION_ACCESS AS C
INNER JOIN [dbo].PERMISSION_LEVEL AS PL ON C.PERMISSION_LEVEL_ID = PL.PERMISSION_LEVEL_ID
INNER JOIN [dbo].BACKEND_ACTION AS X ON C.ACTION_ID = X.ID
GO
--------------------------------------


----- Форма Entity Permission Change ----------
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change Entity Type Permission', 'change_entity_type_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('entity_type_permission'), '~/EntityTypePermission/Change/', dbo.qp_tab_id('Tab Access'), 1, 1, 700, 90)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Entity Type Permission (Change)', 'update_entity_type_permission_changes', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('entity_type_permission'), dbo.qp_tab_id('Tab Access'), 0)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Entity Type Permission (Change)', 'remove_entity_type_permission_changes', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('entity_type_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Tab Access'), '~/EntityTypePermission/RemoveForNode/')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('change_entity_type_permission'), dbo.qp_action_id('update_entity_type_permission_changes'), 'Save', 'save.gif', NULL, 10, 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('action_permission_entity_type_node'), dbo.qp_action_id('change_entity_type_permission'), 'Change', 20, 'change.gif')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('action_permission_entity_type_node'), dbo.qp_action_id('remove_entity_type_permission_changes'), 'Remove', 25, 'delete.gif', 1)
GO
---------------------

----- Форма Action Permission Change ----------
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Change Action Permission', 'change_action_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('action_permission'), '~/ActionPermission/Change/', dbo.qp_tab_id('Tab Access'), 1, 1, 700, 90)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Action Permission (Change)', 'update_action_permission_changes', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('action_permission'), dbo.qp_tab_id('Tab Access'), 0)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Action Permission (Change)', 'remove_action_permission_changes', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('action_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Tab Access'), '~/ActionPermission/RemoveForNode/')
GO


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('change_action_permission'), dbo.qp_action_id('update_action_permission_changes'), 'Save', 'save.gif', NULL, 10, 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('action_permission_action_node'), dbo.qp_action_id('change_action_permission'), 'Change', 20, 'change.gif')
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('action_permission_action_node'), dbo.qp_action_id('remove_action_permission_changes'), 'Remove', 25, 'delete.gif', 1)
GO
----------------------------------------




-------- Списки ------------------
-------- Entity Type Permission ---------
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Entity Type Permissions', 'list_entity_type_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('entity_type_permission'), '~/EntityTypePermission/Index/', dbo.qp_tab_id('Tab Access'), 1, dbo.qp_view_id('list'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Entity Type Permissions', 'refresh_entity_type_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('entity_type_permission'), dbo.qp_tab_id('Tab Access'), 1)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('New Entity Type Permission', 'new_entity_type_permission', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('entity_type_permission'), '~/EntityTypePermission/New/', dbo.qp_tab_id('Tab Access'), 1, 1, 700, 360)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Entity Type Permission', 'save_entity_type_permission', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('entity_type_permission'), dbo.qp_tab_id('Tab Access'), 0)
GO
insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Entity Type Permission Properties', 'Properties', 'edit_entity_type_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('entity_type_permission'), '~/EntityTypePermission/Properties/', dbo.qp_tab_id('Tab Access'), 1, 1, 700, 360)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Entity Type Permission', 'update_entity_type_permission', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('entity_type_permission'), dbo.qp_tab_id('Tab Access'),0)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Entity Type Permission', 'refresh_entity_type_permission', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('entity_type_permission'), dbo.qp_tab_id('Tab Access'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Entity Type Permission', 'remove_entity_type_permission', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('entity_type_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Tab Access'), '~/EntityTypePermission/Remove/')
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Entity Type Permission', 'multiple_remove_entity_type_permission', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('entity_type_permission'), 'Do you really want to remove the following permissions: {0}?', dbo.qp_tab_id('Tab Access'), '~/EntityTypePermission/MultipleRemove/')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('action_permission_entity_type_node'), dbo.qp_action_id('list_entity_type_permission'), 'Permissions', 30, 'permissions.gif')
GO

INSERT INTO context_menu (CODE) VALUES ('entity_type_permission')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('entity_type_permission'), dbo.qp_action_id('remove_entity_type_permission'), 'Remove', 10, 'delete.gif', 1)
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('entity_type_permission'), dbo.qp_action_id('edit_entity_type_permission'), 'Properties', 20, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_entity_type_permission'), dbo.qp_action_id('edit_entity_type_permission'), 'Properties', 'properties.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_entity_type_permission'), dbo.qp_action_id('multiple_remove_entity_type_permission'), 'Remove', 'delete.gif', NULL, 20, 0)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_entity_type_permission'), dbo.qp_action_id('refresh_entity_type_permissions'), 'Refresh', 'refresh.gif', NULL, 30, 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_entity_type_permission'), dbo.qp_action_id('save_entity_type_permission'), 'Save', 'save.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_entity_type_permission'), dbo.qp_action_id('refresh_entity_type_permission'), 'Refresh', 'refresh.gif', NULL, 20, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_entity_type_permission'), dbo.qp_action_id('update_entity_type_permission'), 'Save', 'save.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_entity_type_permission'), dbo.qp_action_id('remove_entity_type_permission'), 'Remove', 'delete.gif', NULL, 20, 0)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_entity_type_permission'), dbo.qp_action_id('refresh_entity_type_permission'), 'Refresh', 'refresh.gif', NULL, 30, 1)
GO

update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_entity_type_permission'),
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('entity_type_permission')
where CODE = 'entity_type_permission'
GO
---------------------

------ Action Permission -----------
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Action Permissions', 'list_action_permission', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('action_permission'), '~/ActionPermission/Index/', dbo.qp_tab_id('Tab Access'), 1, dbo.qp_view_id('list'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Refresh Action Permissions', 'refresh_action_permissions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('action_permission'), dbo.qp_tab_id('Tab Access'), 1)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('New Action Permission', 'new_action_permission', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('action_permission'), '~/ActionPermission/New/', dbo.qp_tab_id('Tab Access'), 1, 1, 700, 360)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Save Action Permission', 'save_action_permission', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('action_permission'), dbo.qp_tab_id('Tab Access'), 0)
GO
insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, [IS_WINDOW], [WINDOW_WIDTH], [WINDOW_HEIGHT])
values('Action Permission Properties', 'Properties', 'edit_action_permission', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('action_permission'), '~/ActionPermission/Properties/', dbo.qp_tab_id('Tab Access'), 1, 1, 700, 360)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID, IS_INTERFACE)
values('Update Action Permission', 'update_action_permission', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('action_permission'), dbo.qp_tab_id('Tab Access'),0)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, TAB_ID)
values('Refresh Action Permission', 'refresh_action_permission', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('action_permission'), dbo.qp_tab_id('Tab Access'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Remove Action Permission', 'remove_action_permission', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('action_permission'), 'Do you really want to remove this permission?', dbo.qp_tab_id('Tab Access'), '~/ActionPermission/Remove/')
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, TAB_ID, CONTROLLER_ACTION_URL)
values('Multiple Remove Action Permission', 'multiple_remove_action_permission', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('action_permission'), 'Do you really want to remove the following permissions: {0}?', dbo.qp_tab_id('Tab Access'), '~/ActionPermission/MultipleRemove/')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('action_permission_action_node'), dbo.qp_action_id('list_action_permission'), 'Permissions', 30, 'permissions.gif')
GO

INSERT INTO context_menu (CODE) VALUES ('action_permission')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('action_permission'), dbo.qp_action_id('remove_action_permission'), 'Remove', 10, 'delete.gif', 1)
GO
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('action_permission'), dbo.qp_action_id('edit_action_permission'), 'Properties', 20, 'properties.gif')
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_action_permission'), dbo.qp_action_id('edit_action_permission'), 'Properties', 'properties.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_action_permission'), dbo.qp_action_id('multiple_remove_action_permission'), 'Remove', 'delete.gif', NULL, 20, 0)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_action_permission'), dbo.qp_action_id('refresh_action_permissions'), 'Refresh', 'refresh.gif', NULL, 30, 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_action_permission'), dbo.qp_action_id('save_action_permission'), 'Save', 'save.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_action_permission'), dbo.qp_action_id('refresh_action_permission'), 'Refresh', 'refresh.gif', NULL, 20, 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_action_permission'), dbo.qp_action_id('update_action_permission'), 'Save', 'save.gif', NULL, 10, 1)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_action_permission'), dbo.qp_action_id('remove_action_permission'), 'Remove', 'delete.gif', NULL, 20, 0)
GO
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_action_permission'), dbo.qp_action_id('refresh_action_permission'), 'Refresh', 'refresh.gif', NULL, 30, 1)
GO


update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_action_permission'),
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('action_permission')
where CODE = 'action_permission'
GO
----------------------------

---- SPs -------
exec qp_drop_existing 'qp_GetEntityPermissionAsQuery', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_GetEntityPermissionAsQuery]
  @user_id numeric(18,0),
  @SQLOut nvarchar(max) OUTPUT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @entitySecQuery nvarchar(max);

  EXEC  [dbo].[qp_GetPermittedItemsAsQuery]
      @user_id = @user_id,
      @start_level = 0,
      @end_level = 100,
      @entity_name = N'ENTITY_TYPE',
      @SQLOut = @entitySecQuery OUTPUT


  SELECT @SQLOut = REPLACE(
    REPLACE(N'select COALESCE(L.PERMISSION_LEVEL, 0) AS PERMISSION_LEVEL, T.ID AS ENTITY_TYPE_ID FROM
      (<$_security_insert_$>) P1
      LEFT JOIN ENTITY_TYPE_ACCESS_PERMLEVEL P2 ON P1.entity_type_id = P2.entity_type_id and P1.permission_level = p2.permission_level and P2.[USER_ID] = <$_userid_$>
      RIGHT JOIN ENTITY_TYPE T ON P1.ENTITY_TYPE_ID = T.ID
      LEFT join PERMISSION_LEVEL L ON P1.PERMISSION_LEVEL = L.PERMISSION_LEVEL', N'<$_security_insert_$>', @entitySecQuery)
  , N'<$_userid_$>', @user_id)

END
GO

exec qp_drop_existing 'qp_GetActionPermissionAsQuery', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_GetActionPermissionAsQuery]
  @user_id numeric(18,0),
  @result nvarchar(max) OUTPUT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @actionSecQuery nvarchar(max);
  declare @entitySecQuery nvarchar(max);

  EXEC [dbo].[qp_GetPermittedItemsAsQuery]
    @user_id = @user_id,
    @start_level = 0,
    @end_level = 100,
    @entity_name = N'BACKEND_ACTION',
    @SQLOut = @actionSecQuery OUTPUT

  EXEC [dbo].[qp_GetEntityPermissionAsQuery]
    @user_id = @user_id,
    @SQLOut = @entitySecQuery OUTPUT


  SELECT @result = REPLACE(
    REPLACE (N'select AP.BACKEND_ACTION_ID, COALESCE(AP.PERMISSION_LEVEL, EP.PERMISSION_LEVEL, 0) AS PERMISSION_LEVEL from
    (select L.PERMISSION_LEVEL AS PERMISSION_LEVEL, T.ID AS BACKEND_ACTION_ID, T.ENTITY_TYPE_ID FROM
      (<$_security_insert_$>) P1
      LEFT JOIN backend_action_access_PermLevel P2 ON P1.BACKEND_ACTION_ID = P2.BACKEND_ACTION_ID and P1.permission_level = p2.permission_level and P2.[USER_ID] = <$_userid_$>
      RIGHT JOIN BACKEND_ACTION T ON P1.BACKEND_ACTION_ID = T.ID
      LEFT join PERMISSION_LEVEL L ON P1.PERMISSION_LEVEL = L.PERMISSION_LEVEL
    ) AP
    JOIN ', N'<$_security_insert_$>', @actionSecQuery) +
    REPLACE(N'(<$_security_insert_$>) EP ON AP.ENTITY_TYPE_ID = EP.ENTITY_TYPE_ID', N'<$_security_insert_$>', @entitySecQuery)
  , N'<$_userid_$>', @user_id)

END
GO

exec qp_drop_existing 'qp_get_toolbar', 'IsProcedure'
GO
CREATE procedure [dbo].[qp_get_toolbar](@user_id int, @action_id int)
AS
begin
  declare @language_id numeric(18, 0)

  set @language_id = dbo.qp_language(@user_id)

  select
    ba.CODE,
    ba2.CODE AS PARENT_CODE,
    dbo.qp_translate(atb.NAME, @language_id) as NAME,
    atb.[ORDER],
    atb.ICON,
    atb.ICON_DISABLED,
    atb.IS_COMMAND
  from ACTION_TOOLBAR_BUTTON atb
  inner join BACKEND_ACTION ba on atb.ACTION_ID = ba.ID
  inner join BACKEND_ACTION ba2 on atb.PARENT_ACTION_ID = ba2.ID
  WHERE atb.PARENT_ACTION_ID = @action_id
  order by [ORDER]
end
GO

exec qp_drop_existing 'qp_get_toolbar_buttons_list_by_action_code', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_get_toolbar_buttons_list_by_action_code](@user_id int, @action_code nvarchar(50), @entity_id int)
AS
BEGIN
  DECLARE @action_id int
  SET @action_id = dbo.qp_action_id(@action_code)

  DECLARE @language_id numeric(18, 0)
  SET @language_id = dbo.qp_language(@user_id)

  if EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1 BEGIN
    SELECT
    ba.ID AS ACTION_ID,
    ba.CODE AS ACTION_CODE,
    bat.CODE AS ACTION_TYPE_CODE,
    ba2.ID AS PARENT_ACTION_ID,
    ba2.CODE AS PARENT_ACTION_CODE,
    dbo.qp_translate(atb.NAME, @language_id) AS NAME,
    bat.ITEMS_AFFECTED,
    atb.[ORDER],
    ISNULL(ca.ICON_URL, atb.ICON) AS ICON,
    atb.ICON_DISABLED,
    atb.IS_COMMAND
  FROM
    ACTION_TOOLBAR_BUTTON AS atb
    INNER JOIN BACKEND_ACTION AS ba ON atb.ACTION_ID = ba.ID
    LEFT OUTER JOIN CUSTOM_ACTION AS ca ON ca.ACTION_ID = ba.ID
    INNER JOIN ACTION_TYPE AS bat ON bat.ID = ba.TYPE_ID
    INNER JOIN BACKEND_ACTION AS ba2 ON atb.PARENT_ACTION_ID = ba2.ID
  WHERE
    atb.PARENT_ACTION_ID = @action_id
  ORDER BY
    [ORDER]
  END
  ELSE BEGIN
    DECLARE @entity_code nvarchar(50)
    select @entity_code = dbo.qp_entity_type_code(entity_type_id) from backend_action where code = @action_code

    declare @seqQuery nvarchar(max);
    EXEC [dbo].[qp_GetActionPermissionAsQuery]
      @user_id = @user_id,
      @result = @seqQuery OUTPUT

    declare @fullQuery nvarchar(max);

    select @fullQuery = REPLACE (N'SELECT
      ba.ID AS ACTION_ID,
      ba.CODE AS ACTION_CODE,
      bat.CODE AS ACTION_TYPE_CODE,
      ba2.ID AS PARENT_ACTION_ID,
      ba2.CODE AS PARENT_ACTION_CODE,
      dbo.qp_translate(atb.NAME, @p0) AS NAME,
      bat.ITEMS_AFFECTED,
      atb.[ORDER],
      ISNULL(ca.ICON_URL, atb.ICON) AS ICON,
      atb.ICON_DISABLED,
      atb.IS_COMMAND
    FROM
      ACTION_TOOLBAR_BUTTON AS atb
      INNER JOIN BACKEND_ACTION AS ba ON atb.ACTION_ID = ba.ID
      LEFT OUTER JOIN CUSTOM_ACTION AS ca ON ca.ACTION_ID = ba.ID
      INNER JOIN ACTION_TYPE AS bat ON bat.ID = ba.TYPE_ID
      INNER JOIN PERMISSION_LEVEL PL ON PL.PERMISSION_LEVEL_ID = bat.REQUIRED_PERMISSION_LEVEL_ID
      INNER JOIN BACKEND_ACTION AS ba2 ON atb.PARENT_ACTION_ID = ba2.ID
      INNER JOIN
      (<$_security_insert_$>) SEC ON SEC.BACKEND_ACTION_ID = ba.ID
    WHERE
      atb.PARENT_ACTION_ID = @p1
      AND SEC.PERMISSION_LEVEL >= PL.PERMISSION_LEVEL
      AND dbo.qp_action_visible(@p2, @p3, @p4, ba.CODE) = 1
    ORDER BY
      [ORDER]', N'<$_security_insert_$>', @seqQuery)

    EXEC sp_executesql @fullQuery,
      N'@p0 numeric(18, 0), @p1 int, @p2 int, @p3 nvarchar(50), @p4 int',
      @p0 = @language_id, @p1 = @action_id, @p2 = @user_id, @p3 = @entity_code, @p4 = @entity_id;
  END
END
GO

exec qp_drop_existing 'qp_get_context_menus_list', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_get_context_menus_list](@user_id int)
AS
BEGIN
  SELECT cm.ID, cm.CODE
  FROM CONTEXT_MENU AS cm
  ORDER BY CODE ASC
END
GO

exec qp_drop_existing 'qp_get_context_menu_by_id', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_get_context_menu_by_id]
  @user_id int,
  @menu_id int,
  @load_related_data bit = 0
AS
BEGIN
  DECLARE @context_menu_id AS int
  DECLARE @context_menu_code AS nvarchar(50)

  SELECT DISTINCT
    @context_menu_id = cm.ID,
    @context_menu_code = cm.CODE
  FROM CONTEXT_MENU AS cm
    INNER JOIN CONTEXT_MENU_ITEM AS cmi ON cm.ID = cmi.CONTEXT_MENU_ID
  WHERE cm.ID = @menu_id


  IF (@context_menu_id IS NOT NULL) BEGIN
    SELECT
      @context_menu_id AS ID,
      @context_menu_code AS CODE

    IF (@load_related_data = 1)BEGIN
        EXEC qp_get_context_menu_items_list
          @user_id = @user_id,
          @menu_id = @context_menu_id
    END
  END
END
GO

exec qp_drop_existing 'qp_get_context_menu_items_list', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_get_context_menu_items_list](@user_id int, @menu_id int)
AS
BEGIN
  DECLARE @language_id AS numeric(18, 0)

  SET @language_id = dbo.qp_language(@user_id)

  SELECT
    cmi.CONTEXT_MENU_ID,
    cmi.ACTION_ID,
    dbo.qp_context_menu_code(cmi.CONTEXT_MENU_ID) as CONTEXT_MENU_CODE,
    ba.CODE as ACTION_CODE,
    at.CODE AS ACTION_TYPE_CODE,
    dbo.qp_translate(cmi.NAME, @language_id) as NAME,
    cmi.[ORDER],
    ISNULL(ca.ICON_URL, cmi.ICON) AS ICON,
    cmi.ICON_DISABLED,
    cmi.BOTTOM_SEPARATOR
  FROM
    CONTEXT_MENU_ITEM cmi
    INNER JOIN backend_action AS ba ON cmi.ACTION_ID = ba.ID
    LEFT OUTER JOIN CUSTOM_ACTION AS ca ON ca.ACTION_ID = ba.ID
    INNER JOIN ACTION_TYPE AS at ON ba.TYPE_ID = at.ID
  WHERE
    CONTEXT_MENU_ID = @menu_id
  ORDER BY
    [ORDER] asc
END
GO

exec qp_drop_existing 'qp_get_menu_status_list', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_get_menu_status_list](@user_id int, @menu_code nvarchar(50), @entity_id numeric)
AS
  BEGIN
    if EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1 BEGIN
    SELECT ba.CODE, cast(1 as bit) as visible
    FROM CONTEXT_MENU_ITEM cmi
      INNER JOIN BACKEND_ACTION ba on ba.ID = cmi.ACTION_ID
    WHERE cmi.context_menu_id = dbo.qp_context_menu_id(@menu_code)
  END
  ELSE BEGIN
    declare @seqQuery nvarchar(max);
    EXEC [dbo].[qp_GetActionPermissionAsQuery]
      @user_id = @user_id,
      @result = @seqQuery OUTPUT

    declare @fullQuery nvarchar(max);
    select @fullQuery = REPLACE(N'SELECT ba.CODE,
                  CAST(
                      (
                        CASE
                          WHEN
                            sec.PERMISSION_LEVEL >= PL.PERMISSION_LEVEL AND dbo.qp_action_visible(@p2, @p3, @p4, ba.CODE) = 1
                          THEN 1
                          ELSE 0
                        END
                      ) AS BIT
                  ) as visible
                  FROM CONTEXT_MENU_ITEM cmi
                    INNER JOIN BACKEND_ACTION ba on ba.ID = cmi.ACTION_ID
                    JOIN ACTION_TYPE AS AT ON AT.ID = ba.[TYPE_ID]
                    JOIN PERMISSION_LEVEL PL ON PL.PERMISSION_LEVEL_ID = AT.REQUIRED_PERMISSION_LEVEL_ID
                    JOIN (<$_security_insert_$>) SEC ON SEC.BACKEND_ACTION_ID = ba.ID
                  WHERE cmi.context_menu_id = dbo.qp_context_menu_id(@menu_code)', N'<$_security_insert_$>', @seqQuery);
    EXEC sp_executesql @fullQuery,
      N'@menu_code nvarchar(50), @p2 int, @p3 nvarchar(50), @p4 int',
      @menu_code = @menu_code, @p2 = @user_id, @p3 = @menu_code, @p4 = @entity_id;
  END
END
GO

exec qp_drop_existing 'qp_get_action_status_list', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_get_action_status_list](@user_id int, @action_code nvarchar(50), @entity_id numeric)
AS
BEGIN
  if EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1 BEGIN
    SELECT ba.CODE, cast(1 as bit) as visible
    FROM ACTION_TOOLBAR_BUTTON atb
    INNER JOIN BACKEND_ACTION ba on ba.ID = atb.ACTION_ID
    INNER JOIN ACTION_TYPE at on ba.TYPE_ID = at.ID
    WHERE atb.PARENT_ACTION_ID = dbo.qp_action_id(@action_code) AND at.items_affected = 1
  END
  ELSE BEGIN
    DECLARE @entity_code nvarchar(50)
    select @entity_code = dbo.qp_entity_type_code(entity_type_id) from backend_action where code = @action_code

    declare @seqQuery nvarchar(max);
    EXEC [dbo].[qp_GetActionPermissionAsQuery]
      @user_id = @user_id,
      @result = @seqQuery OUTPUT

    declare @fullQuery nvarchar(max);
    select @fullQuery = REPLACE(N'SELECT ba.CODE,
                    CAST(
                        (
                          CASE
                            WHEN
                              sec.PERMISSION_LEVEL >= PL.PERMISSION_LEVEL AND dbo.qp_action_visible(@p2, @p3, @p4, ba.CODE) = 1
                            THEN 1
                            ELSE 0
                          END
                        ) AS BIT
                    ) as visible
                    FROM ACTION_TOOLBAR_BUTTON atb
                      INNER JOIN BACKEND_ACTION ba on ba.ID = atb.ACTION_ID
                      INNER JOIN ACTION_TYPE at on ba.TYPE_ID = at.ID
                      JOIN PERMISSION_LEVEL PL ON PL.PERMISSION_LEVEL_ID = AT.REQUIRED_PERMISSION_LEVEL_ID
                      JOIN (<$_security_insert_$>) SEC ON SEC.BACKEND_ACTION_ID = ba.ID
                    WHERE atb.PARENT_ACTION_ID = dbo.qp_action_id(@p1) AND at.items_affected = 1', N'<$_security_insert_$>', @seqQuery);
      EXEC sp_executesql @fullQuery,
        N'@p1 nvarchar(50), @p2 int, @p3 nvarchar(50), @p4 int',
        @p1 = @action_code, @p2 = @user_id, @p3 = @entity_code, @p4 = @entity_id;
  END
END
GO

exec qp_drop_existing 'qp_expand', 'IsProcedure'
GO
CREATE procedure [dbo].[qp_expand](@user_id numeric = 0, @code nvarchar(50) = null, @id bigint = 0, @is_folder bit = 0, @count_only bit=0, @count int = 0 output )
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint
  declare @default_action_id int, @context_menu_id int
  declare @is_admin bit

  set @language_id = dbo.qp_language(@user_id)

  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @id_str = CAST(@id as nvarchar(10))

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'


      -- process recurring --
      if @recurring_id_field is not null
      begin
        if @is_folder = 1
        begin
          if @parent_id_field is null
            set @where = @recurring_id_field + ' is null '
          else
            set @where = @parent_id_field + ' = ' + @id_str + ' and ' + @recurring_id_field + ' is null '
        end
        else
          set @where = @recurring_id_field + ' = ' + @id_str
      end
      else if @parent_id_field is not null
      begin
        set @where = @parent_id_field + ' = ' + @id_str
      end
      else
        set @where = '1 = 1'

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end

    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql

    --PRINT @sql;


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @id,
        CODE = @code,
        IS_FOLDER = 0,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id
    end
    else
      select @count = COUNT(ID) from @result
  end
  else begin
    if @count_only = 0
    begin
      declare @entitySecQuery nvarchar(max);

      EXEC [dbo].[qp_GetEntityPermissionAsQuery]
      @user_id = @user_id,
      @SQLOut = @entitySecQuery OUTPUT

      CREATE TABLE #sectmp
      (
        PERMISSION_LEVEL int,
        ENTITY_TYPE_ID int
      );
      set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
      exec sp_executesql @entitySecQuery;

      if @code is not null
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, dbo.qp_translate(dbo.qp_pluralize(NAME), @language_id), CODE, 1, dbo.qp_get_icon(NULL, dbo.qp_pluralize(CODE), NULL), FOLDER_DEFAULT_ACTION_ID, FOLDER_CONTEXT_MENU_ID
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID = dbo.qp_entity_type_id(@code) and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0 order by [Order]
      else
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, NAME, CODE, 0, dbo.qp_get_icon(NULL, CODE, NULL), DEFAULT_ACTION_ID, CONTEXT_MENU_ID
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID is null and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0 order by [Order]
    end
    else
    begin
      if @code is not null
        select @count = COUNT(ID)
        From ENTITY_TYPE
        where PARENT_ID = dbo.qp_entity_type_id(@code) and disabled = 0
      else
        select @count = COUNT(ID)
        From ENTITY_TYPE
        where PARENT_ID is null and disabled = 0
    end

  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit
    declare @children_count int
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = Is_folder from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, 1, @count = @children_count output
      else
        exec dbo.qp_expand @user_id, @local_code, @local_id, 0, 1, @count = @children_count output

      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      TREE_NODE.PARENT_ID as PARENT_ID,
      dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO


exec qp_drop_existing 'qp_get_node', 'IsProcedure'
GO
CREATE procedure [dbo].[qp_get_node]
  @user_id numeric = 0,
  @code nvarchar(50) = null,
  @id bigint = 0,
  @parent_id bigint = null,
  @is_folder bit = 0
as
begin
  declare @result table
  (
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @local_id bigint, @local_name nvarchar(50)
  declare @local_code nvarchar(50), @local_parent_id bigint
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50), @icon_modifier_field nvarchar(50)
  declare @order_field nvarchar(50), @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10)
  declare @default_action_id int, @folder_default_action_id int
  declare @context_menu_id int, @folder_context_menu_id int

  set @language_id = dbo.qp_language(@user_id)

  declare @is_admin bit
  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  declare @entitySecQuery nvarchar(max);
  EXEC [dbo].[qp_GetEntityPermissionAsQuery]
    @user_id = @user_id,
    @SQLOut = @entitySecQuery OUTPUT
  CREATE TABLE #sectmp
  (
    PERMISSION_LEVEL int,
    ENTITY_TYPE_ID int
  );
  set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
  exec sp_executesql @entitySecQuery;

  select
    @local_id = ID,
    @local_name = NAME,
    @local_code = CODE,
    @local_parent_id = PARENT_ID,
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @folder_default_action_id = FOLDER_DEFAULT_ACTION_ID,
    @context_menu_id = CONTEXT_MENU_ID,
    @folder_context_menu_id = FOLDER_CONTEXT_MENU_ID
  from
    ENTITY_TYPE
    JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
  where
    ID = dbo.qp_entity_type_id(@code)
    and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0)
    and disabled = 0

  if (@@ROWCOUNT > 0)
  begin
    set @id_str = CAST(@id as nvarchar(10))

    if (@icon_field is null)
    begin
      set @icon_field = 'NULL'
    end
    if (@icon_modifier_field is null)
    begin
      set @icon_modifier_field = 'NULL'
    end

    if (@is_folder = 1 OR @local_parent_id IS NULL)
    begin
      if (@local_parent_id IS NOT NULL)
      begin
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select
          @local_id,
          @parent_id,
          dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
          @local_code,
          @is_folder,
          dbo.qp_get_icon(NULL, dbo.qp_pluralize(@local_code), NULL),
          @folder_default_action_id,
          @folder_context_menu_id
      end
      else
      begin
      insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
      select
        @local_id,
        @parent_id,
        dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
        @local_code,
        @is_folder,
        dbo.qp_get_icon(NULL, @local_code, NULL),
        @default_action_id,
        @context_menu_id
      end
    end
    else
    begin
      if (@source IS NOT NULL)
      begin
        declare @sql nvarchar(800), @select nvarchar(800), @where nvarchar(800)

        set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'
        set @where = @id_field + ' = ' + @id_str

        set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where

        insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
        exec sp_executesql @sql

        --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
        update
          @result
        set
          PARENT_ID = @parent_id,
          CODE = @local_code,
          IS_FOLDER = @is_folder,
          ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
          DEFAULT_ACTION_ID = @default_action_id,
          CONTEXT_MENU_ID = @context_menu_id
      end
    end

    declare @children_count int

    exec dbo.qp_expand
      @user_id,
      @local_code,
      @local_id,
      0,
      1,
      @count = @children_count output

    if @children_count = 0
      update
        @result
      set
        has_children = 0
    else
      update
        @result
      set
        has_children = 1
  end

  SELECT
    TREE_NODE.ID,
    TREE_NODE.CODE,
    CASE WHEN (TREE_NODE.CODE != 'site') THEN
      TREE_NODE.PARENT_ID
    ELSE
      NULL
    END AS PARENT_ID,
    dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
    TREE_NODE.IS_FOLDER,
    TREE_NODE.ICON,
    TREE_NODE.TITLE,
    dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
    ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
    dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
    TREE_NODE.HAS_CHILDREN
  FROM
    @result AS TREE_NODE
  LEFT OUTER JOIN
    BACKEND_ACTION
  ON
    TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
  LEFT OUTER JOIN
    ACTION_TYPE
  ON
    BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
end
GO

exec qp_drop_existing 'qp_copy_user_group', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_copy_user_group]
  @group_id numeric(18,0),
  @new_name nvarchar(255),
  @create_by_id numeric(18,0),
  @new_group_id numeric(18,0) output
AS
BEGIN
  declare @now datetime;
  set @now = getdate();

  INSERT INTO [USER_GROUP]
       ([GROUP_NAME]
       ,[DESCRIPTION]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[shared_content_items]
       ,[nt_group]
       ,[ad_sid]
       ,[BUILT_IN]
       ,[READONLY]
       ,[use_parallel_workflow])
   SELECT @new_name
      ,[DESCRIPTION]
      ,@now
      ,@now
      ,@create_by_id
      ,[SHARED_CONTENT_ITEMS]
      ,[NT_GROUP]
      ,[AD_SID]
      ,0
      ,0
      ,[USE_PARALLEL_WORKFLOW]
  FROM [USER_GROUP]
  WHERE [GROUP_ID] = @group_id

  set @new_group_id = scope_identity();


  INSERT INTO [GROUP_TO_GROUP] ([CHILD_GROUP_ID] ,[PARENT_GROUP_ID])
  SELECT @new_group_id, [PARENT_GROUP_ID] from [GROUP_TO_GROUP] WHERE [CHILD_GROUP_ID] = @group_id


  INSERT INTO [USER_GROUP_BIND] ([GROUP_ID],[USER_ID])
  select @new_group_id, [USER_ID] from [USER_GROUP_BIND] where [GROUP_ID] = @group_id

  INSERT INTO [TAB_ACCESS]([TAB_ID],[USER_ID],[GROUP_ID],[PERMISSION_LEVEL_ID])
  select [TAB_ID],[USER_ID],@new_group_id,[PERMISSION_LEVEL_ID] from [TAB_ACCESS] where [GROUP_ID] = @group_id

  INSERT INTO [SITE_ACCESS]
       ([SITE_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_contents])
  SELECT [SITE_ID]
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_contents]
  FROM [SITE_ACCESS]
  where [GROUP_ID] = @group_id

  INSERT INTO CONTENT_ACCESS
       ([CONTENT_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_items])
  SELECT [CONTENT_ID]
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_items]
  FROM [CONTENT_ACCESS]
  where [GROUP_ID] = @group_id

  INSERT INTO CONTENT_ITEM_ACCESS
       (CONTENT_ITEM_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT CONTENT_ITEM_ID
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM CONTENT_ITEM_ACCESS
  where [GROUP_ID] = @group_id

  INSERT INTO FOLDER_ACCESS
       (FOLDER_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT FOLDER_ID
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM FOLDER_ACCESS
  where [GROUP_ID] = @group_id

  INSERT INTO ENTITY_TYPE_ACCESS
       (ENTITY_TYPE_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT ENTITY_TYPE_ID
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM ENTITY_TYPE_ACCESS
  where [GROUP_ID] = @group_id

  INSERT INTO ACTION_ACCESS
       (ACTION_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT ACTION_ID
      ,[USER_ID]
      ,@new_group_id
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM ACTION_ACCESS
  where [GROUP_ID] = @group_id
END
GO

exec qp_drop_existing 'qp_copy_user', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_copy_user]
  @user_id numeric(18,0),
  @new_login nvarchar(30),
  @create_by_id numeric(18,0),
  @new_user_id numeric(18,0) output
AS
BEGIN
  declare @now datetime;
  set @now = getdate();

  INSERT INTO [USERS]
    ([PASSWORD]
    ,[DISABLED]
    ,[FIRST_NAME]
    ,[LAST_NAME]
    ,[EMAIL]
    ,[AUTO_LOGIN]
    ,[NT_LOGIN]
    ,[LAST_LOGIN]
    ,[SUBSCRIBED]
    ,[CREATED]
    ,[MODIFIED]
    ,[LAST_MODIFIED_BY]
    ,[LANGUAGE_ID]
    ,[VMODE]
    ,[ad_sid]
    ,[allow_stage_edit_field]
    ,[allow_stage_edit_object]
    ,[BUILT_IN]
    ,[LOGIN]
    ,[hash]
    ,[salt]
    ,[PASSWORD_MODIFIED])
  SELECT ''
      ,[DISABLED]
      ,[FIRST_NAME]
      ,[LAST_NAME]
      ,[EMAIL]
      ,[AUTO_LOGIN]
      ,[NT_LOGIN]
      ,[LAST_LOGIN]
      ,[SUBSCRIBED]
      ,@now
      ,@now
      ,@create_by_id
      ,[LANGUAGE_ID]
      ,[VMODE]
      ,[ad_sid]
      ,[allow_stage_edit_field]
      ,[allow_stage_edit_object]
      ,0
      ,@new_login
      ,[hash]
      ,[salt]
      ,[PASSWORD_MODIFIED]
  FROM [USERS]
  WHERE [USER_ID] = @user_id

  set @new_user_id = scope_identity();

  delete from [USER_GROUP_BIND] where [USER_ID] = @new_user_id
  INSERT INTO [USER_GROUP_BIND] ([GROUP_ID],[USER_ID])
  select [GROUP_ID], @new_user_id from [USER_GROUP_BIND] where [USER_ID] = @user_id

  INSERT INTO [TAB_ACCESS]([TAB_ID],[USER_ID],[GROUP_ID],[PERMISSION_LEVEL_ID])
  select [TAB_ID],@new_user_id,[GROUP_ID],[PERMISSION_LEVEL_ID] from [TAB_ACCESS] where [USER_ID] = @user_id

  INSERT INTO [SITE_ACCESS]
       ([SITE_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_contents])
  SELECT [SITE_ID]
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_contents]
  FROM [SITE_ACCESS]
  where [USER_ID] = @user_id

  INSERT INTO CONTENT_ACCESS
       ([CONTENT_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_items])
  SELECT [CONTENT_ID]
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_items]
  FROM [CONTENT_ACCESS]
  where [USER_ID] = @user_id

  INSERT INTO CONTENT_ITEM_ACCESS
       (CONTENT_ITEM_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT CONTENT_ITEM_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM CONTENT_ITEM_ACCESS
  where [USER_ID] = @user_id

  INSERT INTO FOLDER_ACCESS
       (FOLDER_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT FOLDER_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM FOLDER_ACCESS
  where [USER_ID] = @user_id

  INSERT INTO ENTITY_TYPE_ACCESS
       (ENTITY_TYPE_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT ENTITY_TYPE_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM ENTITY_TYPE_ACCESS
  where [USER_ID] = @user_id

  INSERT INTO ACTION_ACCESS
       (ACTION_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT ACTION_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM ACTION_ACCESS
  where [USER_ID] = @user_id
END
GO
----------------------------

ALTER TABLE dbo.ENTITY_TYPE ADD
  ACTION_PERMISSION_ENABLE bit NOT NULL CONSTRAINT DF_ENTITY_TYPE_ACTION_PERMISSION_ENABLE DEFAULT 0
GO

update ENTITY_TYPE
set ENTITY_TYPE.ACTION_PERMISSION_ENABLE = 1
FROM ENTITY_TYPE
JOIN
( select distinct T.ID from BACKEND_ACTION A
  join ENTITY_TYPE T ON A.ENTITY_TYPE_ID = T.ID
) T ON T.ID = ENTITY_TYPE.ID
GO
--update ENTITY_TYPE set ENTITY_TYPE.ACTION_PERMISSION_ENABLE = 0 where CODE in ('entity_type_permission', 'action_permission')
--GO

----- fixes------
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_ENT_TYPE_ACC_ENTITY_TYPE]') AND type in (N'F'))
BEGIN
  ALTER TABLE [dbo].[ENTITY_TYPE_ACCESS] DROP CONSTRAINT [FK_ENT_TYPE_ACC_ENTITY_TYPE]
  ALTER TABLE [dbo].[ENTITY_TYPE_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ENT_TYPE_ACC_ENTITY_TYPE] FOREIGN KEY([ENTITY_TYPE_ID]) REFERENCES [dbo].[ENTITY_TYPE] ([ID]) ON DELETE CASCADE
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_ACT_ACC_ACTION]') AND type in (N'F'))
BEGIN
  ALTER TABLE [dbo].[ACTION_ACCESS] DROP CONSTRAINT [FK_ACT_ACC_ACTION]
  ALTER TABLE [dbo].[ACTION_ACCESS]  WITH CHECK ADD CONSTRAINT [FK_ACT_ACC_ACTION] FOREIGN KEY([ACTION_ID])REFERENCES [dbo].[BACKEND_ACTION] ([ID]) ON DELETE CASCADE
END
GO

update ACTION_TYPE set REQUIRED_PERMISSION_LEVEL_ID = 6 where CODE = 'multiple_select'
GO

update BACKEND_ACTION set ENTITY_TYPE_ID = dbo.qp_entity_type_id('content_permission')
where CODE in (
'list_child_content_permission'
,'refresh_child_content_permissions'
,'multiple_change_child_content_permission'
,'multiple_remove_child_content_permission'
,'change_all_child_content_permission'
,'remove_all_child_content_permission'
,'change_child_content_permission'
,'remove_child_content_permission'
,'save_child_content_permission'
)
GO

update BACKEND_ACTION set ENTITY_TYPE_ID = dbo.qp_entity_type_id('article_permission')
where CODE in (
'list_child_article_permission'
,'refresh_child_article_permissions'
,'multiple_change_child_article_permission'
,'multiple_remove_child_article_permission'
,'change_all_child_article_permission'
,'remove_all_child_article_permission'
,'change_child_article_permission'
,'remove_child_article_permission'
,'save_child_article_permission'
)
GO

update BACKEND_ACTION set [WINDOW_HEIGHT] = 360
where CODE in
(
  'new_site_permission'
  ,'edit_site_permission'
  ,'new_content_permission'
  ,'edit_content_permission'
  ,'new_article_permission'
  ,'edit_article_permission'
  ,'new_workflow_permission'
  ,'edit_workflow_permission'
  ,'new_site_folder_permission'
  ,'edit_site_folder_permission'
)
GO
update BACKEND_ACTION set [WINDOW_HEIGHT] = 150
where CODE in
(
  'multiple_change_child_content_permission'
  ,'change_all_child_content_permission'
  ,'change_child_content_permission'
  ,'multiple_change_child_article_permission'
  ,'change_all_child_article_permission'
  ,'change_child_article_permission'
)
GO

update BACKEND_ACTION set NAME='Change Child Content Permission' where CODE = 'change_child_content_permission'
update BACKEND_ACTION set NAME='Remove Child Content Permission' where CODE = 'remove_child_content_permission'
update BACKEND_ACTION set NAME='Change Child Article Permission' where CODE = 'change_child_article_permission'
update BACKEND_ACTION set NAME='Remove Child Article Permission' where CODE = 'remove_child_article_permission'
GO
----------------

exec qp_update_translations 'Custom Action', 'Действие'
exec qp_update_translations 'Site Permission', 'Право доступа к сайту'
exec qp_update_translations 'Content Permission', 'Право доступа к контенту'
exec qp_update_translations 'Article Permission', 'Право доступа к статье'
exec qp_update_translations 'Workflow Permission', 'Право доступа к Workflow'
exec qp_update_translations 'Site Folder Permission', 'Право доступа к папке сайта'
exec qp_update_translations 'Site Folder Permission', 'Право доступа к папке сайта'
exec qp_update_translations 'Entity Type Permission', 'Право доступа к типу сущности'
exec qp_update_translations 'Action Permission', 'Право доступа к действию'
GO

exec qp_update_translations 'Action Permissions', 'Права доступа к действиям'
exec qp_update_translations 'Action Permission Tree', 'Показать дерево прав доступа к действиям'
exec qp_update_translations 'Refresh Action Permission Tree', 'Обновить дерево прав доступа к действиям'
GO

exec qp_update_translations 'Entity Type Permissions', 'Список прав доступа'
exec qp_update_translations 'Refresh Entity Type Permission', 'Обновить право доступа'
exec qp_update_translations 'Change Entity Type Permission', 'Изменить право доступа'
exec qp_update_translations 'Update Entity Type Permission', 'Обновить право доступа'
exec qp_update_translations 'Update Entity Type Permission (Change)', 'Обновить право доступа (Изменить)'
exec qp_update_translations 'Remove Entity Type Permission (Change)', 'Удалить право доступа (Изменить)'
exec qp_update_translations 'Refresh Entity Type Permissions', 'Обновить список прав доступа'
exec qp_update_translations 'New Entity Type Permission', 'Создать право доступа'
exec qp_update_translations 'Save Entity Type Permission', 'Сохранить право доступа'
exec qp_update_translations 'Entity Type Permission Properties', 'Свойства права доступа'
exec qp_update_translations 'Update Entity Type Permission', 'Изменить право доступа'
exec qp_update_translations 'Refresh Entity Type Permission', 'Обновить право доступа'
exec qp_update_translations 'Remove Entity Type Permission', 'Удалить право доступа'
exec qp_update_translations 'Multiple Remove Entity Type Permission', 'Удалить права доступа'
GO

exec qp_update_translations 'Action Permissions', 'Список прав доступа'
exec qp_update_translations 'Refresh Action Permission', 'Обновить право доступа'
exec qp_update_translations 'Change Action Permission', 'Изменить право доступа'
exec qp_update_translations 'Update Action Permission', 'Обновить право доступа'
exec qp_update_translations 'Update Action Permission (Change)', 'Обновить право доступа (Изменить)'
exec qp_update_translations 'Remove Action Permission (Change)', 'Удалить право доступа (Изменить)'
exec qp_update_translations 'Refresh Action Permissions', 'Обновить список прав доступа'
exec qp_update_translations 'New Action Permission', 'Создать право доступа'
exec qp_update_translations 'Save Action Permission', 'Сохранить право доступа'
exec qp_update_translations 'Action Permission Properties', 'Свойства права доступа'
exec qp_update_translations 'Update Action Permission', 'Изменить право доступа'
exec qp_update_translations 'Refresh Action Permission', 'Обновить право доступа'
exec qp_update_translations 'Remove Action Permission', 'Удалить право доступа'
exec qp_update_translations 'Multiple Remove Action Permission', 'Удалить права доступа'
GO

exec qp_update_translations 'Site Permissions', 'Список прав доступа'
exec qp_update_translations 'Refresh Site Permission', 'Обновить право доступа'
exec qp_update_translations 'Change Site Permission', 'Изменить право доступа'
exec qp_update_translations 'Update Site Permission', 'Обновить право доступа'
exec qp_update_translations 'Refresh Site Permissions', 'Обновить список прав доступа'
exec qp_update_translations 'New Site Permission', 'Создать право доступа'
exec qp_update_translations 'Save Site Permission', 'Сохранить право доступа'
exec qp_update_translations 'Site Permission Properties', 'Свойства права доступа'
exec qp_update_translations 'Update Site Permission', 'Изменить право доступа'
exec qp_update_translations 'Refresh Site Permission', 'Обновить право доступа'
exec qp_update_translations 'Remove Site Permission', 'Удалить право доступа'
exec qp_update_translations 'Multiple Remove Site Permission', 'Удалить права доступа'
GO

exec qp_update_translations 'Content Permissions', 'Список прав доступа'
exec qp_update_translations 'Refresh Content Permission', 'Обновить право доступа'
exec qp_update_translations 'Change Content Permission', 'Изменить право доступа'
exec qp_update_translations 'Update Content Permission', 'Обновить право доступа'
exec qp_update_translations 'Refresh Content Permissions', 'Обновить список прав доступа'
exec qp_update_translations 'New Content Permission', 'Создать право доступа'
exec qp_update_translations 'Save Content Permission', 'Сохранить право доступа'
exec qp_update_translations 'Content Permission Properties', 'Свойства права доступа'
exec qp_update_translations 'Update Content Permission', 'Изменить право доступа'
exec qp_update_translations 'Refresh Content Permission', 'Обновить право доступа'
exec qp_update_translations 'Remove Content Permission', 'Удалить право доступа'
exec qp_update_translations 'Multiple Remove Content Permission', 'Удалить права доступа'
GO

exec qp_update_translations 'Article Permissions', 'Список прав доступа'
exec qp_update_translations 'Refresh Article Permission', 'Обновить право доступа'
exec qp_update_translations 'Change Article Permission', 'Изменить право доступа'
exec qp_update_translations 'Update Article Permission', 'Обновить право доступа'
exec qp_update_translations 'Refresh Article Permissions', 'Обновить список прав доступа'
exec qp_update_translations 'New Article Permission', 'Создать право доступа'
exec qp_update_translations 'Save Article Permission', 'Сохранить право доступа'
exec qp_update_translations 'Article Permission Properties', 'Свойства права доступа'
exec qp_update_translations 'Update Article Permission', 'Изменить право доступа'
exec qp_update_translations 'Refresh Article Permission', 'Обновить право доступа'
exec qp_update_translations 'Remove Article Permission', 'Удалить право доступа'
exec qp_update_translations 'Multiple Remove Article Permission', 'Удалить права доступа'
GO

exec qp_update_translations 'Site Folder Permissions', 'Список прав доступа'
exec qp_update_translations 'Refresh Site Folder Permission', 'Обновить право доступа'
exec qp_update_translations 'Change Site Folder Permission', 'Изменить право доступа'
exec qp_update_translations 'Update Site Folder Permission', 'Обновить право доступа'
exec qp_update_translations 'Refresh Site Folder Permissions', 'Обновить список прав доступа'
exec qp_update_translations 'New Site Folder Permission', 'Создать право доступа'
exec qp_update_translations 'Save Site Folder Permission', 'Сохранить право доступа'
exec qp_update_translations 'Site Folder Permission Properties', 'Свойства права доступа'
exec qp_update_translations 'Update Site Folder Permission', 'Изменить право доступа'
exec qp_update_translations 'Refresh Site Folder Permission', 'Обновить право доступа'
exec qp_update_translations 'Remove Site Folder Permission', 'Удалить право доступа'
exec qp_update_translations 'Multiple Remove Site Folder Permission', 'Удалить права доступа'
GO

exec qp_update_translations 'Workflow Permissions', 'Список прав доступа'
exec qp_update_translations 'Refresh Workflow Permission', 'Обновить право доступа'
exec qp_update_translations 'Change Workflow Permission', 'Изменить право доступа'
exec qp_update_translations 'Update Workflow Permission', 'Обновить право доступа'
exec qp_update_translations 'Refresh Workflow Permissions', 'Обновить список прав доступа'
exec qp_update_translations 'New Workflow Permission', 'Создать право доступа'
exec qp_update_translations 'Save Workflow Permission', 'Сохранить право доступа'
exec qp_update_translations 'Workflow Permission Properties', 'Свойства права доступа'
exec qp_update_translations 'Update Workflow Permission', 'Изменить право доступа'
exec qp_update_translations 'Refresh Workflow Permission', 'Обновить право доступа'
exec qp_update_translations 'Remove Workflow Permission', 'Удалить право доступа'
exec qp_update_translations 'Multiple Remove Workflow Permission', 'Удалить права доступа'
GO

exec qp_update_translations 'Child Content Permissions', 'Права доступа к дочерним контентам'
exec qp_update_translations 'Change Selected Child Content Permissions', 'Изменить выбранные права доступа к дочерним контентам'
exec qp_update_translations 'Remove Selected Child Content Permissions', 'Удалить выбранные права доступа к дочерним контентам'
exec qp_update_translations 'Change All Child Content Permissions', 'Изменить права доступа ко всем дочерним контентам'
exec qp_update_translations 'Remove All Child Content Permissions', 'Удалить права доступа ко всем дочерним контентам'
exec qp_update_translations 'Change Child Content Permission', 'Изменить право доступа к дочерниму контенту'
exec qp_update_translations 'Remove Child Content Permission', 'Удалить право доступа к дочерниму контенту'
GO

exec qp_update_translations 'Child Article Permissions', 'Права доступа к дочерним статьям'
exec qp_update_translations 'Change Selected Child Article Permissions', 'Изменить выбранные права доступа к дочерним статьям'
exec qp_update_translations 'Remove Selected Child Article Permissions', 'Удалить выбранные права доступа к дочерним статьям'
exec qp_update_translations 'Change All Child Article Permissions', 'Изменить права доступа ко всем дочерним статьям'
exec qp_update_translations 'Remove All Child Article Permissions', 'Удалить права доступа ко всем дочерним статьям'
exec qp_update_translations 'Change Child Article Permission', 'Изменить право доступа к дочерней статье'
exec qp_update_translations 'Remove Child Article Permission', 'Удалить право доступа к дочерней статье'
GO

exec qp_update_translations 'Do you really want to remove selected permissions?', 'Вы действительно хотите удалить выбранные права доступа?';
exec qp_update_translations 'Do you really want to remove all permissions?', 'Вы действительно хотите удалить все права доступа?';
exec qp_update_translations 'Do you really want to remove this permission?', 'Вы действительно хотите удалить выбранное право доступа?';
exec qp_update_translations 'Child Permissions', 'Дочерние права доступа';
GO


---- Convert Tab Access To Action permission
exec qp_drop_existing 'qp_convert_tab_access_to_action_access', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_convert_tab_access_to_action_access]
AS
BEGIN
  BEGIN TRY
    BEGIN TRAN

    truncate TABLE ENTITY_TYPE_ACCESS
    truncate TABLE [ACTION_ACCESS]

    CREATE TABLE #TABS_FULL_ACCESS
    (
      ID int identity,
      TAB_ID int,
      PARENT_TAB_ID int,
      [LEVEL] int,
      [USER_ID] int,
      [GROUP_ID] int,
      PERMISSION_LEVEL_ID int
    );

    CREATE TABLE #EXPAND_TABS_ACCESS
    (
      TAB_ID int,
      [USER_ID] int,
      [GROUP_ID] int,
      PERMISSION_LEVEL_ID int
    );

    with TAB_TREE(TAB_ID, PARENT_TAB_ID, [LEVEL]) AS
    (
      select TAB_ID, PARENT_TAB_ID, 0 from TABS where PARENT_TAB_ID is null
      union all
      select T.TAB_ID, T.PARENT_TAB_ID, TR.[LEVEL] + 1 from TABS T
      join TAB_TREE TR ON T.PARENT_TAB_ID = TR.TAB_ID
    )
    insert into #TABS_FULL_ACCESS
    select TR.TAB_ID, TR.PARENT_TAB_ID, TR.[LEVEL], TA.[USER_ID], TA.[GROUP_ID], TA.PERMISSION_LEVEL_ID
    from TAB_TREE TR
    LEFT JOIN TAB_ACCESS TA ON TA.TAB_ID = TR.TAB_ID
    order by TR.TAB_ID, TR.[LEVEL]

    declare @tmp_count int, @tmp_i int;
    declare @TAB_ID int,
        @PARENT_TAB_ID int,
        @USER_ID int,
        @GROUP_ID int,
        @PERMISSION_LEVEL_ID int,
        @DENY_PERMISSION_LEVEL_ID int;

    select @DENY_PERMISSION_LEVEL_ID = PERMISSION_LEVEL_ID from PERMISSION_LEVEL where PERMISSION_LEVEL = 0;
    set @tmp_i = 1;
    select @tmp_count = COUNT(*) from #TABS_FULL_ACCESS;

    WHILE(@tmp_i <= @tmp_count) BEGIN
      select @TAB_ID = TAB_ID, @PARENT_TAB_ID = PARENT_TAB_ID, @USER_ID = [USER_ID], @GROUP_ID = GROUP_ID, @PERMISSION_LEVEL_ID = PERMISSION_LEVEL_ID
      from #TABS_FULL_ACCESS where ID = @tmp_i;

      IF @PERMISSION_LEVEL_ID is null
      BEGIN
        set @PARENT_TAB_ID = @TAB_ID;
        set @PERMISSION_LEVEL_ID = @PERMISSION_LEVEL_ID;
        while(1 = 1) BEGIN
          IF NOT EXISTS(select * from #TABS_FULL_ACCESS where TAB_ID = @PARENT_TAB_ID)
            BREAK;

          select @PARENT_TAB_ID = PARENT_TAB_ID, @PERMISSION_LEVEL_ID = PERMISSION_LEVEL_ID, @USER_ID = [USER_ID], @GROUP_ID = GROUP_ID
          from #TABS_FULL_ACCESS
          where TAB_ID = @PARENT_TAB_ID;
          if(@PERMISSION_LEVEL_ID is not null)
            BREAK;
        END;
      END
      IF @PERMISSION_LEVEL_ID is not null BEGIN
        insert into #EXPAND_TABS_ACCESS(TAB_ID, [USER_ID], GROUP_ID, PERMISSION_LEVEL_ID)
        values(@TAB_ID, @USER_ID, @GROUP_ID, @PERMISSION_LEVEL_ID);
      END
      ELSE BEGIN
        insert into #EXPAND_TABS_ACCESS(TAB_ID, [USER_ID], GROUP_ID, PERMISSION_LEVEL_ID)
        select @TAB_ID, [USER_ID], null, @DENY_PERMISSION_LEVEL_ID from USERS where [USER_ID] <> 1;

        insert into #EXPAND_TABS_ACCESS(TAB_ID, [USER_ID], GROUP_ID, PERMISSION_LEVEL_ID)
        select @TAB_ID, NULL, GROUP_ID, @DENY_PERMISSION_LEVEL_ID from USER_GROUP where GROUP_ID <> 1;
      END

      set @tmp_i = @tmp_i + 1;
    END;

    insert into ENTITY_TYPE_ACCESS(ENTITY_TYPE_ID, [USER_ID], [GROUP_ID], [PERMISSION_LEVEL_ID], CREATED, MODIFIED, LAST_MODIFIED_BY)
    select ET.ID ENTITY_TYPE_ID, TA.[USER_ID], TA.[GROUP_ID], TA.PERMISSION_LEVEL_ID, GETDATE(), GETDATE(), 1
    from #EXPAND_TABS_ACCESS TA
    JOIN ENTITY_TYPE ET ON ET.TAB_ID = TA.TAB_ID

    INSERT INTO [ACTION_ACCESS]
         ([ACTION_ID]
         ,[USER_ID]
         ,[GROUP_ID]
         ,[PERMISSION_LEVEL_ID]
         ,[CREATED]
         ,[MODIFIED]
         ,[LAST_MODIFIED_BY])
    select AC.ID AS [ACTION_ID], TA.[USER_ID], TA.GROUP_ID, TA.PERMISSION_LEVEL_ID, GETDATE(), GETDATE(), 1
    from BACKEND_ACTION AC
    JOIN #EXPAND_TABS_ACCESS TA ON TA.TAB_ID = AC.TAB_ID
    JOIN ENTITY_TYPE_ACCESS ETA ON AC.ENTITY_TYPE_ID = ETA.ENTITY_TYPE_ID
    WHERE TA.PERMISSION_LEVEL_ID <> ETA.PERMISSION_LEVEL_ID


    COMMIT TRAN
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION;

    DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int;
    SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY();
    RAISERROR(@ErrMsg, @ErrSeverity, 1);
  END CATCH
END
GO
exec [dbo].[qp_convert_tab_access_to_action_access]
GO
-----------------------

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.27', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.27 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.28
-- Split optimization
-- **************************************

exec qp_drop_existing 'dbo.SplitNew', 'IsTableFunction'
GO

CREATE FUNCTION dbo.SplitNew
                 (@list      nvarchar(MAX),
                  @delimiter nchar(1) = N',')
      RETURNS @tbl TABLE (nstr    nvarchar(2000)     NOT NULL) AS

BEGIN
   DECLARE @endpos   int,
           @startpos int,
           @textpos  int,
           @chunklen smallint,
           @tmpstr   nvarchar(4000),
           @leftover nvarchar(4000),
           @tmpval   nvarchar(4000)

   SET @textpos = 1
   SET @leftover = ''
   WHILE @textpos <= datalength(@list) / 2
   BEGIN
      SET @chunklen = 4000 - datalength(@leftover) / 2
      SET @tmpstr = @leftover + substring(@list, @textpos, @chunklen)
      SET @textpos = @textpos + @chunklen

      SET @startpos = 0
      SET @endpos = charindex(@delimiter COLLATE Slovenian_BIN2, @tmpstr)

      WHILE @endpos > 0
      BEGIN
         SET @tmpval = ltrim(rtrim(substring(@tmpstr, @startpos + 1,
                                             @endpos - @startpos - 1)))
         INSERT @tbl (nstr) VALUES(@tmpval)
         SET @startpos = @endpos
         SET @endpos = charindex(@delimiter COLLATE Slovenian_BIN2,
                                 @tmpstr, @startpos + 1)
      END

      SET @leftover = right(@tmpstr, datalength(@tmpstr) / 2 - @startpos)
   END

   INSERT @tbl(nstr)
      VALUES (ltrim(rtrim(@leftover)))
   RETURN
END
GO

ALTER FUNCTION [dbo].[qp_filter_columns](@content_id numeric, @str nvarchar(max)) RETURNS nvarchar(max)
AS BEGIN

  DECLARE @columns TABLE
  (
  name nvarchar(255)
  )

  DECLARE @result nvarchar(max)
  set @result = NULL

  SET @str = REPLACE(REPLACE(RTrim(LTrim(@str)), '[', ''), ']', '')
  if @str <> ''
  BEGIN

    WITH fields (name) AS (SELECT nstr from dbo.splitNew(@str, ','))
    INSERT INTO @columns(name)
    select '[' + name + ']' from fields
    where name in (SELECT attribute_name from content_attribute where content_id = @content_id) or name in ('content_item_id', 'archive', 'visible', 'created', 'modified', 'last_modified_by')

    SELECT @result = COALESCE(@result + ', ', '') + name
    FROM @columns
    WHERE name IS NOT NULL

  END

  if @result is null set @result = 'c.*'
  RETURN @result

END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.28', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.28 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.29
-- Notification properties bug fix
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Unbind Notification', 'unbind_notification', dbo.qp_action_type_id('simple_update'), dbo.qp_entity_type_id('notification'),'~/Notification/Unbind/', 0)

GO
--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.29', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.29 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.30
-- External notifications
-- **************************************
if not exists (select * From information_schema.columns where table_name = 'NOTIFICATIONS' and column_name = 'IS_EXTERNAL')
  begin
  ALTER TABLE NOTIFICATIONS  ADD
  IS_EXTERNAL bit NOT NULL CONSTRAINT DF_NOTIFICATIONS_IS_EXTERNAL DEFAULT 0
  end
GO

if not exists (select * From information_schema.columns where table_name = 'NOTIFICATIONS' and column_name = 'EXTERNAL_URL')
  begin
  ALTER TABLE NOTIFICATIONS  ADD EXTERNAL_URL NVARCHAR(1024) NULL
  end
GO

if not exists (select * From information_schema.columns where table_name = 'NOTIFICATIONS' and column_name = 'FOR_DELAYED_PUBLICATION')
  begin
  ALTER TABLE NOTIFICATIONS  ADD
  FOR_DELAYED_PUBLICATION bit not NULL CONSTRAINT DF_NOTIFICATIONS_FOR_DELAYED_PUBLICATION DEFAULT 0
  end
GO


--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.30', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.30 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.31
-- Site External URL Field
-- **************************************
if not exists (select * From information_schema.columns where table_name = 'SITE' and column_name = 'EXTERNAL_URL')
  begin
  ALTER TABLE SITE  ADD
  EXTERNAL_URL NVARCHAR(1024) NULL
  end
go
--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.31', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.31 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.32
-- Assembling notifications
-- **************************************
Insert into ACTION_TYPE(NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('Multiple Assemble', 'multiple_assemble', 1, 255)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE)
values('Multiple Remove Notification', 'multiple_remove_notification', dbo.qp_action_type_id('multiple_remove'), dbo.qp_entity_type_id('notification'), '~/Notification/MultipleRemove/', dbo.qp_tab_id('Notifications'), 0)

update ACTION_TOOLBAR_BUTTON
SET ACTION_ID = dbo.qp_action_id('multiple_remove_notification')
where ACTION_ID = dbo.qp_action_id('remove_notification') and PARENT_ACTION_ID = dbo.qp_action_id('list_notification')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Notification', 'assemble_notification', dbo.qp_action_type_id('assemble'), dbo.qp_entity_type_id('notification'), '~/Notification/AssembleNotification/', dbo.qp_tab_id('Notifications'), 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, TAB_ID, IS_INTERFACE, HAS_PRE_ACTION)
values('Multiple Assemble Notification', 'multiple_assemble_notification', dbo.qp_action_type_id('multiple_assemble'), dbo.qp_entity_type_id('notification'), '~/Notification/MultipleAssembleNotification/', dbo.qp_tab_id('Notifications'), 0, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_notification'), dbo.qp_action_id('multiple_assemble_notification'), 'Assemble', 'assemble.gif', NULL, 30, 0)

update CONTEXT_MENU_ITEM
SET [ORDER] = 40
where ACTION_ID = dbo.qp_action_id('remove_notification')
go

update CONTEXT_MENU_ITEM
SET [ORDER] = 20
where ACTION_ID = dbo.qp_action_id('edit_notification')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('notification'), dbo.qp_action_id('assemble_notification'), 'Assemble', 30, 'assemble.gif', 1)
--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.32', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.32 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.33
-- Fix view_in_list for O2M related fields
-- **************************************

UPDATE CONTENT_ATTRIBUTE SET view_in_list = 1
where ATTRIBUTE_ID in
(
  select A.ATTRIBUTE_ID from CONTENT_ATTRIBUTE O2M
  join CONTENT_ATTRIBUTE A ON A.ATTRIBUTE_ID = O2M.RELATED_ATTRIBUTE_ID
  where O2M.ATTRIBUTE_TYPE_ID = 11 and O2M.link_id is null
  and (A.ATTRIBUTE_TYPE_ID not in (9, 10, 11, 12, 13) or (A.ATTRIBUTE_TYPE_ID = 11 and A.link_id is null))
)
AND view_in_list = 0
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.33', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.33 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.34
-- Notification template format pop-up window`s size fix
-- **************************************

update BACKEND_ACTION set WINDOW_HEIGHT='700' where CODE = 'edit_notification_template_format'

--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.34', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.34 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.35
-- Notification template format pop-up window`s size fix
-- **************************************

update BACKEND_ACTION set WINDOW_WIDTH='1220', WINDOW_HEIGHT='740' where CODE = 'edit_notification_template_format'

--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.35', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.35 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.36
-- User Sessions and Failed Logins views names fix
-- **************************************

update VIEW_TYPE Set NAME = 'User sessions' where CODE = 'successful_sessions_list'

update VIEW_TYPE Set NAME = 'Failed logins' where CODE = 'failed_sessions_list'

--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.36', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.36 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.37
-- Site and Content libraries context menu items names fix
-- **************************************
update CONTEXT_MENU_ITEM set NAME = 'New Subfolder'
where NAME = 'New Site Folder' or NAME = 'New Content Folder'


--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.37', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.37 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.38
-- Site and Content libraries context menu items names fix
-- **************************************
update CONTEXT_MENU_ITEM set NAME = 'New Subfolder'
where NAME = 'New Site Folder' or NAME = 'New Content Folder'


--------------------------------------------
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.38', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.38 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.39
-- Remove clearing history
-- **************************************

UPDATE buttons SET action_file = 'contents/fields/act_update_field.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 25 AND button_name ='Save')
GO

UPDATE buttons SET action_file = 'contents/fields/act_save_field.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 24 AND button_name ='Update')
GO

UPDATE buttons SET action_file = 'contents/fields/act_update_field.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 24 AND button_name ='Update & Up')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.39', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.39 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.40
-- Fix languages and default notification format
-- **************************************

delete from languages where language_id = 3
GO

ALTER TRIGGER [dbo].[ti_statuses_and_default_notif] ON [dbo].[SITE]
FOR INSERT
AS

 insert into status_type (site_id, status_type_name, weight, description, last_modified_by)
             (select site_id , 'Created',  10, 'Article has been created' ,1 from inserted)
 insert into status_type (site_id, status_type_name, weight, description, last_modified_by)
             (select site_id , 'Approved',  50, 'Article has been modified' ,1 from inserted)
 insert into status_type (site_id, status_type_name, weight, description, last_modified_by)
             (select site_id , 'Published',  100, 'Article has been published' ,1 from inserted)
 insert into status_type (site_id, status_type_name, weight, description, last_modified_by)
             (select site_id , 'None',  0, 'No Status has been assigned' ,1 from inserted)

INSERT INTO page_template(site_id, template_name, net_template_name, template_picture, created, modified, last_modified_by, charset, codepage, locale, is_system, net_language_id)
select site_id, 'Default Notification Template', 'Default_Notification_Template', '', getdate(), getdate(), 1, 'utf-8', 65001, 1049, 1, dbo.qp_default_net_language(script_language) from inserted
GO

update PAGE_TEMPLATE set charset = 'utf-8', codepage = 65001, locale = 1049
From page_template pt
inner join site s on pt.SITE_ID = s.SITE_ID
where template_name = 'Default Notification Template'
and script_language = '.net final'
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.40', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.40 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.1.41
-- Visual Editors configuration tables
-- **************************************


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VE_PLUGIN]') AND type in (N'U'))
BEGIN
  IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_VC_PLUGIN_ID]') AND parent_object_id = OBJECT_ID(N'[dbo].[VE_COMMAND]'))
    begin
      ALTER TABLE [dbo].[VE_COMMAND] DROP CONSTRAINT [FK_VC_PLUGIN_ID]
      DROP TABLE [dbo].[VE_PLUGIN]
    end
END
GO

CREATE TABLE [dbo].VE_PLUGIN
(
[ID] NUMERIC(18,0) NOT NULL IDENTITY(1,1),
[NAME] NVARCHAR(255),
[DESCRIPTION] NVARCHAR(512),
[URL] NVARCHAR(512),
[ORDER] INT NOT NULL CONSTRAINT [DF_ML_ORDER] DEFAULT(0),
[CREATED]       [datetime]     NOT NULL CONSTRAINT [DF__ML_CREATED] DEFAULT (getdate()),
[MODIFIED]        [datetime]     NOT NULL CONSTRAINT [DF__ML_MODIFIED] DEFAULT (getdate()),
[LAST_MODIFIED_BY]    [numeric](18, 0) NOT NULL,
CONSTRAINT [PK_VE_PLUGIN] PRIMARY KEY CLUSTERED
([ID] ASC)
)
GO

-----------------------------------------------------------------------------------------------------------
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VE_COMMAND]') AND type in (N'U'))
BEGIN
  IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_VE_COMMAND_SITE_BIND_COMMAND]') AND parent_object_id = OBJECT_ID(N'[dbo].[VE_COMMAND_SITE_BIND]'))
  begin
    ALTER TABLE [dbo].[VE_COMMAND_SITE_BIND] DROP CONSTRAINT [FK_VE_COMMAND_SITE_BIND_COMMAND]
  end

  IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_VE_COMMAND_FIELD_BIND_FIELD]') AND parent_object_id = OBJECT_ID(N'[dbo].[VE_COMMAND_FIELD_BIND]'))
  begin
    ALTER TABLE [dbo].[VE_COMMAND_FIELD_BIND] DROP CONSTRAINT [FK_VE_COMMAND_FIELD_BIND_COMMAND]
  end

  DROP TABLE [dbo].[VE_COMMAND]
END
GO


CREATE TABLE [dbo].VE_COMMAND
(
[ID] NUMERIC(18,0) NOT NULL IDENTITY(1,1),
[NAME] NVARCHAR(255),
[ALIAS] NVARCHAR(255),
[ROW_ORDER] INT,
[TOOLBAR_IN_ROW_ORDER] INT,
[GROUP_IN_TOOLBAR_ORDER] INT,
[COMMAND_IN_GROUP_ORDER] INT,
[ON] BIT NOT NULL,
[PLUGIN_ID] NUMERIC(18,0) CONSTRAINT [FK_VC_PLUGIN_ID] FOREIGN KEY ([PLUGIN_ID]) REFERENCES [dbo].[VE_PLUGIN] ([ID]) ON DELETE CASCADE,
[CREATED]       [datetime]     NOT NULL CONSTRAINT [DF__VEC_CREATED] DEFAULT (getdate()),
[MODIFIED]        [datetime]     NOT NULL CONSTRAINT [DF__VEC_MODIFIED] DEFAULT (getdate()),
[LAST_MODIFIED_BY]    [numeric](18, 0) NOT NULL
CONSTRAINT [PK_VE_COMMAND] PRIMARY KEY CLUSTERED
([ID] ASC)
)
GO

------------------------------------------------------------------------------------------------------------

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VE_COMMAND_SITE_BIND]') AND type in (N'U'))
  DROP TABLE [dbo].[VE_COMMAND_SITE_BIND]
GO

CREATE TABLE [dbo].[VE_COMMAND_SITE_BIND](
  [COMMAND_ID] NUMERIC(18,0) NOT NULL,
  [SITE_ID] NUMERIC(18,0) NOT NULL,
  [ON] [bit] NOT NULL
 CONSTRAINT [PK_VE_COMMAND_SITE_BIND] PRIMARY KEY CLUSTERED
(
  [COMMAND_ID] ASC,
  [SITE_ID] ASC
)
)
GO

ALTER TABLE [dbo].[VE_COMMAND_SITE_BIND]  WITH CHECK ADD CONSTRAINT [FK_VE_COMMAND_SITE_BIND_COMMAND] FOREIGN KEY([COMMAND_ID])
REFERENCES [dbo].[VE_COMMAND] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[VE_COMMAND_SITE_BIND] CHECK CONSTRAINT [FK_VE_COMMAND_SITE_BIND_COMMAND]
GO

ALTER TABLE [dbo].[VE_COMMAND_SITE_BIND]  WITH CHECK ADD  CONSTRAINT [FK_VE_COMMAND_SITE_BIND_SITE] FOREIGN KEY([SITE_ID])
REFERENCES [dbo].[SITE] ([SITE_ID])
GO
ALTER TABLE [dbo].[VE_COMMAND_SITE_BIND] CHECK CONSTRAINT [FK_VE_COMMAND_SITE_BIND_SITE]
GO

---------------------------------------------------------------------------------------------------------------------------------------------------

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item
  alter table content_attribute disable trigger td_content_attribute_clean_empty_links
  alter table content_attribute disable trigger td_remove_field
  alter table content_attribute disable trigger td_reorder_fields
  alter table content_constraint disable trigger td_content_indexes
  alter table [object] disable trigger tu_object_format_modified
  alter table [object] disable trigger tiu_bind_objects_by_name
  alter table object_format disable trigger tbd_delete_object_format
  alter table object_values disable trigger tiud_values_format_modified
  alter table container_statuses disable trigger tiud_statuses_format_modified
  alter table item_to_item disable trigger td_item_to_item


  delete from item_to_item where link_id in
  (select link_id from site_content_link scl
  inner join deleted d on d.site_id = scl.site_id)

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  update [object] set object_format_id = null from [object] obj
  inner join page_template pt on obj.page_template_id = pt.page_template_id
  inner join deleted d on d.site_id = pt.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete [ACTION_SITE_BIND] from [ACTION_SITE_BIND] asb
  inner join deleted d on d.site_id = asb.site_id

  delete [VE_COMMAND_SITE_BIND] from [VE_COMMAND_SITE_BIND] vcsb
  inner join deleted d on d.SITE_ID = vcsb.SITE_ID

  delete site from site s
  inner join deleted d on d.site_id = s.site_id


  alter table content_item enable trigger td_delete_item
  alter table content_attribute enable trigger td_content_attribute_clean_empty_links
  alter table content_attribute enable trigger td_remove_field
  alter table content_attribute enable trigger td_reorder_fields
  alter table content_constraint enable trigger td_content_indexes
  alter table [object] enable trigger tu_object_format_modified
  alter table [object] enable trigger tiu_bind_objects_by_name
  alter table object_format enable trigger tbd_delete_object_format
  alter table object_values enable trigger tiud_values_format_modified
  alter table container_statuses enable trigger tiud_statuses_format_modified
  alter table item_to_item enable trigger td_item_to_item
END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VE_COMMAND_FIELD_BIND]') AND type in (N'U'))
  DROP TABLE [dbo].[VE_COMMAND_FIELD_BIND]
GO

CREATE TABLE [dbo].[VE_COMMAND_FIELD_BIND](
  [COMMAND_ID] NUMERIC(18,0) NOT NULL,
  [FIELD_ID] NUMERIC(18,0) NOT NULL,
  [ON] [bit] NOT NULL
 CONSTRAINT [PK_VE_COMMAND_FIELD_BIND] PRIMARY KEY CLUSTERED
(
  [COMMAND_ID] ASC,
  [FIELD_ID] ASC
)
)
GO

ALTER TABLE [dbo].[VE_COMMAND_FIELD_BIND]  WITH CHECK ADD CONSTRAINT [FK_VE_COMMAND_FIELD_BIND_COMMAND] FOREIGN KEY([COMMAND_ID])
REFERENCES [dbo].[VE_COMMAND] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[VE_COMMAND_FIELD_BIND] CHECK CONSTRAINT [FK_VE_COMMAND_FIELD_BIND_COMMAND]
GO

ALTER TABLE [dbo].[VE_COMMAND_FIELD_BIND]  WITH CHECK ADD  CONSTRAINT [FK_VE_COMMAND_FIELD_BIND_FIELD] FOREIGN KEY([FIELD_ID])
REFERENCES [dbo].[CONTENT_ATTRIBUTE] ([ATTRIBUTE_ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[VE_COMMAND_FIELD_BIND] CHECK CONSTRAINT [FK_VE_COMMAND_FIELD_BIND_FIELD]
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.41', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.41 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.42
-- Visual Editors configuration actions
-- **************************************

insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD)
values ('Visual Editor Plugin', 'visual_editor_plugin', 5, dbo.qp_entity_type_id('db'), 'VE_PLUGIN', 'ID', 'NAME')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Visual Editor Plugins', 'list_visual_editor_plugin', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('visual_editor_plugin'), '~/VisualEditorPlugin/Index/',  1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Visual Editor Plugin', 'new_visual_editor_plugin', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('visual_editor_plugin'), '~/VisualEditorPlugin/New/', 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Visual Editor Plugin Properties', 'Properties', 'edit_visual_editor_plugin', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('visual_editor_plugin'), '~/VisualEditorPlugin/Properties/', 1)


update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_visual_editor_plugin'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_visual_editor_plugin'),
  [DISABLED] = 0
where CODE = 'visual_editor_plugin'
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.42', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.42 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.43
-- long numerics support in LINQ-to-SQL
-- **************************************


if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'IS_LONG' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE
  ADD
    IS_LONG bit NOT NULL CONSTRAINT [DF_IS_LONG] DEFAULT ((0))
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.43', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.43 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.44
-- notifications support in LINQ-to-SQL
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'SEND_NOTIFICATIONS' and TABLE_NAME = 'SITE')
ALTER TABLE SITE
  ADD
    SEND_NOTIFICATIONS bit NOT NULL CONSTRAINT [DF_SEND_NOTIFICATIONS] DEFAULT ((1))
GO

update site set send_notifications = 0
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.44', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.44 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.45
-- fix on fix
-- **************************************

UPDATE buttons SET action_file = 'contents/fields/act_update_field.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 25 AND button_name ='Update')
GO

UPDATE buttons SET action_file = 'contents/fields/act_save_field.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 24 AND button_name ='Save')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.45', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.45 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.47
-- Visual editors toolbars etc
-- **************************************

ALTER TABLE [dbo].[VE_PLUGIN]  WITH CHECK ADD CONSTRAINT [FK_VE_PLUGIN_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Visual Editor Plugin', 'update_visual_editor_plugin', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('visual_editor_plugin'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Refresh Visual Editor Plugin', 'refresh_visual_editor_plugin', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('visual_editor_plugin'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Visual Editor Plugin', 'remove_visual_editor_plugin', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('visual_editor_plugin'), 'Do you really want to remove this visual editor plugin?', '~/VisualEditorPlugin/Remove/', 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_visual_editor_plugin'), dbo.qp_action_id('update_visual_editor_plugin'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_visual_editor_plugin'), dbo.qp_action_id('remove_visual_editor_plugin'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_visual_editor_plugin'), dbo.qp_action_id('refresh_visual_editor_plugin'), 'Refresh', 'refresh.gif', NULL, 3, 1)


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Visual Editor Plugin', 'save_visual_editor_plugin', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('visual_editor_plugin'), 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_visual_editor_plugin'), dbo.qp_action_id('save_visual_editor_plugin'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_visual_editor_plugin'), dbo.qp_action_id('refresh_visual_editor_plugin'), 'Refresh', 'refresh.gif', NULL, 2, 1)



insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_visual_editor_plugin'), dbo.qp_action_id('edit_visual_editor_plugin'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_visual_editor_plugin'), dbo.qp_action_id('remove_visual_editor_plugin'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_visual_editor_plugin'), dbo.qp_action_id('refresh_visual_editor_plugin'), 'Refresh', 'refresh.gif', NULL, 3, 0)

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.47', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.47 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.48
-- Visual editors tables fixes
-- **************************************

ALTER TABLE [dbo].[VE_COMMAND]  WITH CHECK ADD CONSTRAINT [FK_VE_COMMAND_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO
ALTER TABLE [dbo].[VE_PLUGIN] ALTER COLUMN [NAME] NVARCHAR(255) NOT NULL
ALTER TABLE [dbo].[VE_COMMAND]
ALTER COLUMN [NAME] NVARCHAR(255) NOT NULL
ALTER TABLE [dbo].[VE_COMMAND]
ALTER COLUMN [ROW_ORDER] INT NOT NULL
ALTER TABLE [dbo].[VE_COMMAND]
ALTER COLUMN [TOOLBAR_IN_ROW_ORDER] INT NOT NULL
ALTER TABLE [dbo].[VE_COMMAND]
ALTER COLUMN [GROUP_IN_TOOLBAR_ORDER] INT NOT NULL
ALTER TABLE [dbo].[VE_COMMAND]
ALTER COLUMN [COMMAND_IN_GROUP_ORDER] INT NOT NULL
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.48', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.48 completed'
GO


-- **************************************
-- Maxim Tertyshnyy
-- version 7.9.1.49
-- Fix and Rebuild Permission
-- **************************************
update ENTITY_TYPE set TAB_ID = dbo.qp_tab_id('Site Permissions')
where CODE = 'site_folder_permission'
GO
update BACKEND_ACTION set TAB_ID = dbo.qp_tab_id('Site Permissions')
where ENTITY_TYPE_ID = dbo.qp_entity_type_id('site_folder_permission')
GO
update BACKEND_ACTION set TAB_ID = dbo.qp_tab_id('Sessions')
where CODE in ('list_action_log', 'list_button_trace', 'list_removed_entities', 'refresh_action_log', 'list_successful_sessions', 'list_failed_sessions')
GO

exec [dbo].[qp_convert_tab_access_to_action_access]
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.49', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.49 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.50
-- Security Optimization
-- **************************************

ALTER PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'CONTENT_ITEM_ID DESC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @link_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  DECLARE @relations TABLE (
    attribute_id numeric,
    attribute_name nvarchar(255),
    rel_attribute_id numeric,
    rel_attribute_type_id numeric,
    rel_attribute_name nvarchar(255),
    rel_content_id  numeric,
    rel_count numeric
  )

  INSERT INTO @relations
  SELECT
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
    rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
    rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
    rca.CONTENT_ID AS RELATED_CONTENT_ID,
    ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ID ASC) AS 'RELATED_COUNT'
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.view_in_list = 1
  ORDER BY
    ca.permanent_flag DESC,
    ca.attribute_order ASC

  -- Открываем курсор
  WHILE EXISTS(select * from @relations)
  BEGIN
    select
      @attribute_id = attribute_id,
      @attribute_name = attribute_name,
      @rel_attribute_id = rel_attribute_id,
      @rel_attribute_type_id = rel_attribute_type_id,
      @rel_attribute_name = rel_attribute_name,
      @rel_content_id = rel_content_id,
      @rel_count = rel_count
    from @relations

    SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

    IF (@rel_attribute_id IS NOT NULL)
    BEGIN
      declare @current_block nvarchar(512)
      set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
      set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
      if (@rel_count > 1)
      begin
        set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
        set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
      end

      SET @related_select_block = @related_select_block + ' '
      SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
      if @rel_attribute_type_id in (9, 10)
        SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
      SET @related_select_block = @related_select_block + @current_block
      SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
      SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
        content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
        @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
    END

    delete from @relations where attribute_id = @attribute_id

  END


  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  COALESCE(ci.status_type_id, c.status_type_id) AS workflow_status_type_id,
  COALESCE(c2.status_type_id, c.status_type_id) AS current_status_type_id,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  CAST(c.visible as bit) as visible,
  CAST((CASE WHEN (sch.content_item_id  IS NOT NULL) THEN 1 ELSE 0 END) AS bit) AS scheduled,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END
  SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + ' AS c2 ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' c2.content_item_id = c.content_item_id ' + CHAR(13)

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many и Many To One --
  declare @link_filter nvarchar(max)
  set @link_filter = ''
  IF(@link_params IS NOT NULL)
    BEGIN
      declare @m2m_condition as varchar(max)
      set @m2m_condition = ''

      declare @link_params_table table (id numeric, ids varchar(max), m2m bit, [isnull] bit)

      insert into @link_params_table
      select T.f.value('./@lid', 'numeric'), T.f.value('./@iids', 'varchar(max)'), T.f.value('./@m2m', 'bit'), T.f.value('./@isnull', 'bit')
      from @link_params.nodes('/link/f') as T(f)

      while exists (select * from @link_params_table)
      begin
        declare @currentLinkId numeric,
            @currentIds varchar(max),
            @isCurrentM2M bit,
            @isNull bit,
            @currentLinkText nvarchar(20)

        select @currentLinkId = id, @currentIds = ids, @isCurrentM2M = m2m, @isNull = [isnull] from @link_params_table
        set @currentLinkText = cast(@currentLinkId as nvarchar(20))

        declare @currentFieldName nvarchar(255),
            @currentContentId numeric
        select @currentContentId = content_id, @currentFieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @currentLinkId

        if @isNull = 0 begin
          if @isCurrentM2M = 1 begin
            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct item_id from dbo.item_link_united where link_id = ' + @currentLinkText + ' AND linked_item_id in (' + @currentIds + ') ' +
              ') as link_' + @currentLinkText + '  ON c.content_item_id = link_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
          else begin

            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct [' + @currentFieldName + '] as item_id from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where CONTENT_ITEM_ID in (' + @currentIds + ') ' +
              ' ) as back_' + @currentLinkText + '  ON c.content_item_id = back_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
        end
        else begin
          if @isCurrentM2M = 1 begin
            set @link_filter = ' NOT EXISTS (select item_id from dbo.item_link_united where c.content_item_id = item_id and link_id = '  + @currentLinkText + ') '
          end
          else begin
            set @link_filter = 'NOT EXISTS (select * from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where c.content_item_id = [' + @currentFieldName + ']) '
          end
        end

        delete from @link_params_table where id = @currentLinkId and m2m = @isCurrentM2M
      end
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  if LEN(@link_filter) > 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + @link_filter
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @order_by_block = @order_by
    END
  ELSE
    BEGIN
      SET @order_by_block = 'CONTENT_ITEM_ID DESC'
    END

  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)

  if @fts_is_incorrect_query = 1 OR @parent_level = 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + '1 = 0'
  END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = 'content',
    @parent_entity_id = @content_id

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.50', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.50 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.51
-- Folder Security and hierarchy
-- **************************************

ALTER PROCEDURE [dbo].[qp_get_folders_tree]
  @user_id numeric(18,0),
  @parent_entity_id numeric(18,0),
  @is_site bit = 1,
  @parent_folder_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN

  DECLARE @security_sql AS nvarchar(max), @sql_result AS nvarchar(max)
  DECLARE @entity_name AS nvarchar(50), @parent_entity_name AS nvarchar(50)
  DECLARE @use_security bit, @parent_level numeric, @block_filter nvarchar(10)

  SET @entity_name = case @is_site when 1 then 'folder' else 'content_folder' end
  print @entity_name
  SET @parent_entity_name = case @is_site when 1 then 'site' else 'content' end
  print @parent_entity_name

  set @use_security = 1

  if dbo.qp_is_user_admin(@user_id) = 1
    set @use_security = 0

  set @block_filter = ''
  if @entity_name = 'content_folder'
  begin
    set @use_security = 0
    select @parent_level = dbo.qp_entity_access_level(@user_id, @parent_entity_name, @parent_entity_id)
    if @parent_level = 0
      set @block_filter = ' AND 1 = 0 '
  end
  else if @parent_folder_id is not null
  begin
    select @parent_level = dbo.qp_entity_access_level(@user_id, 'site_folder', @parent_folder_id)
  end
  else
  begin
    select @parent_level = dbo.qp_entity_access_level(@user_id, @parent_entity_name, @parent_entity_id)
  end

  if @use_security = 1
    EXEC dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
      @start_level = 0,
      @end_level = 4,
      @entity_name = @entity_name,
      @parent_entity_name = @parent_entity_name,
      @parent_entity_id = @parent_entity_id,
      @SQLOut = @security_sql OUTPUT

  SET @sql_result = ''
  SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + ' c.FOLDER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
      SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
      SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '     COUNT(FOLDER_ID) ' + CHAR(13)
      SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
      SET @sql_result = @sql_result + '     ' + @entity_name + CHAR(13)
      SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
      SET @sql_result = @sql_result + '     PARENT_FOLDER_ID = c.FOLDER_ID ' + CHAR(13)
      SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
      SET @sql_result = @sql_result + '   1 ' + CHAR(13)
      SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
      SET @sql_result = @sql_result + '   0 ' + CHAR(13)
      SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
      if @use_security = 1
        SET @sql_result = @sql_result + ',  COALESCE(pi.permission_level, ' + CAST(@parent_level as varchar)  + ') as EFFECTIVE_PERMISSION_LEVEL' + CHAR(13)


    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' @record_count = COUNT(c.FOLDER_ID) ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
  SET @sql_result = @sql_result + ' ' + @entity_name + ' AS c '+ CHAR(13)
  if @use_security = 1
  BEGIN
    SET @sql_result = @sql_result + 'LEFT JOIN ' + CHAR(13)
    SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
    SET @sql_result = @sql_result + 'ON ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.folder_id = pi.' + @entity_name + '_id ' + CHAR(13)
  END
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
  IF (@parent_folder_id IS NOT NULL)
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID = ' + CAST(@parent_folder_id AS varchar) + ' ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID IS NULL ' + CHAR(13)
      SET @sql_result = @sql_result + '   AND c.' + @parent_entity_name + '_ID = ' + CAST(@parent_entity_id AS varchar) + ' '  + CHAR(13)
    END

  if @use_security = 1
  begin
    SET @sql_result = @sql_result + ' AND COALESCE(pi.permission_level, 4) >= ' + CAST(@permission_level AS varchar) + CHAR(13)
  end

  SET @sql_result = @sql_result + @block_filter
  IF (@count_only = 0)
    BEGIN
    SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.NAME ASC '
  END

  IF (@count_only = 0)
    BEGIN
      print @sql_result
      EXEC(@sql_result)

      SET @total_records = @@ROWCOUNT
    END
  ELSE
    BEGIN
      print @sql_result
      EXEC sp_executesql
        @sql_result,
        N'@record_count int OUTPUT',
        @record_count = @total_records OUTPUT
    END
END
GO

ALTER Function [dbo].[qp_is_entity_accessible](
  @entity_name varchar(100)='content',
  @entity_id numeric (18,0),
  @user_id numeric (18,0)=0,
  @group_id numeric (18,0)=0,
  @start_level int=1,
  @end_level int=4,
  @return_level int=0
)
Returns int
AS

BEGIN

Declare @FullAccessLevel int
SET @FullAccessLevel = 4

if @user_id = 1 or @group_id = 1 return @FullAccessLevel

if @user_id > 0 and dbo.qp_is_user_admin(@user_id)>0 return @FullAccessLevel


/***********************************/
/**** Declare Table Variables   ****/
/***********************************/
declare @ChildGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @ParentGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @UsedGroups table
(
  group_id numeric(18,0)
)

declare @TempParentGroups table
(
  group_id numeric(18,0) PRIMARY KEY
)

declare @Entities table
(
  entity_id numeric(18,0) NOT NULL,
    permission_level numeric(18,0) NOT NULL,
    user_id numeric(18,0) NULL,
    group_id numeric(18,0) NULL
)
/***********************************/

declare @content_id decimal

  If @entity_name='content'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select content_id, permission_level, user_id, group_id from content_access_permlevel
           where content_id = @entity_id
    End
  If @entity_name='content_item'
    Begin
     declare @use_own_security bit
     select @use_own_security = c.allow_items_permission, @content_id = ci.content_id
      from content c with(nolock) inner join content_item ci with(nolock) on c.content_id = ci.content_id where ci.content_item_id = @entity_id
     if (@use_own_security = 1)
      insert into @Entities (entity_id, permission_level, user_id, group_id)
        select content_item_id, permission_level, user_id, group_id from content_item_access_permlevel
        where content_item_id = @entity_id
    else
      insert into @Entities (entity_id, permission_level, user_id, group_id)
        select @entity_id, permission_level, user_id, group_id from content_access_permlevel
        where content_id = @content_id
    End
  If @entity_name='site'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select site_id, permission_level, user_id, group_id from site_access_permlevel
           where site_id = @entity_id
    End
  If @entity_name='folder'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select folder_id, permission_level, user_id, group_id from folder_access_permlevel
       where folder_id = @entity_id
    End
  If @entity_name='content_folder'
    Begin
    select @content_id = content_id from content_folder with(nolock) where folder_id = @entity_id

    insert into @Entities (entity_id, permission_level, user_id, group_id)
      select @entity_id, permission_level, user_id, group_id from content_access_permlevel
      where content_id = @content_id

      End
  If @entity_name='workflow'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select workflow_id, permission_level, user_id, group_id from workflow_access_permlevel
       where workflow_id = @entity_id
    End
  If @entity_name='tab'
    Begin
     insert into @Entities (entity_id, permission_level, user_id, group_id)
       select tab_id, permission_level, user_id, group_id from tab_access_permlevel
       where tab_id = @entity_id
      End


Declare @maxLevel int
Declare @nothing_found int
Declare @yes_access int
Declare @no_access int
Declare @current_result int

select @yes_access = 1
select @no_access = 0
select @nothing_found = -1
select @current_result = @nothing_found

if @user_id > 0
Begin
   select @maxLevel = IsNull(max(permission_level),@nothing_found) from @Entities where
       user_id = @user_id

   Select @current_result = @maxLevel

   if @maxLevel != @nothing_found
   Begin
      if @return_level>0 return @maxLevel
      if @maxLevel < @start_level or @maxLevel> @end_level return @no_access
      if @maxLevel >= @start_level And @maxLevel <= @end_level return @yes_access
   End

   insert into @ChildGroups (group_id) select distinct group_id from user_group_bind where user_id = @user_id
End

if @group_id > 0 AND @user_id <= 0
Begin
   insert into @ChildGroups(group_id) values (@group_id)
End

if (select count(*) from @ChildGroups) = 0
Begin
   return @current_result
End

select @maxLevel = IsNull(max(permission_level),@nothing_found) from @Entities where
       group_id in (select group_id from @ChildGroups)

Select @current_result = @maxLevel

if @maxLevel != @nothing_found
Begin
  if @return_level>0 return @maxLevel
  if @maxLevel < @start_level or @maxLevel> @end_level return @no_access
  if @maxLevel >= @start_level And @maxLevel <= @end_level return @yes_access
End

insert into @UsedGroups(group_id) select group_id from @ChildGroups


WHILE 1=1
BEGIN
    insert into @ParentGroups (group_id) select distinct gtg.parent_group_id from group_to_group gtg inner join @ChildGroups cg on gtg.child_group_id = cg.group_id
    if (select count(*) from @ParentGroups) = 0 BREAK

    /* need to check that parent groups are not appearing in child groups */
    insert into @TempParentGroups (group_id) select pg.group_id from @ParentGroups pg where pg.group_id not in(select cg.group_id from @ChildGroups cg) and pg.group_id not in (select group_id from @UsedGroups)

  select @maxLevel = IsNull(max(permission_level),@nothing_found) from @Entities where
       group_id in (select group_id from @TempParentGroups)

    Select @current_result = @maxLevel

  if @maxLevel != @nothing_found
  Begin
    if @return_level>0 return @maxLevel
    if @maxLevel < @start_level or @maxLevel> @end_level return @no_access
    if @maxLevel >= @start_level And @maxLevel <= @end_level return @yes_access
  End

    delete @ChildGroups
    delete @TempParentGroups
    insert into @ChildGroups (group_id) select (group_id) from @ParentGroups
    delete @ParentGroups
    CONTINUE
END

if @entity_name = 'folder' and @current_result = @nothing_found
begin
  declare @parentFolderId numeric, @siteId numeric
  select @parentFolderId = PARENT_FOLDER_ID, @siteId = site_id from FOLDER where FOLDER_ID = @entity_id
  if @parentFolderId is not null
    set @current_result = dbo.qp_is_entity_accessible('folder', @parentFolderId, @user_id, @group_id, @start_level, @end_level, @return_level)
  else
    set @current_result = dbo.qp_is_entity_accessible('site', @siteId, @user_id, @group_id, @start_level, @end_level, @return_level)

end

return @current_result
END
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[ti_content_folder_access]'))
DROP TRIGGER [dbo].[ti_content_folder_access]
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[ti_folder_access]'))
DROP TRIGGER [dbo].[ti_folder_access]
GO

truncate table content_folder_access
GO

delete from folder_access where USER_ID = 1 or group_id = 1
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.51', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.51 completed'
GO



-- **************************************
-- Pavel Celut
-- version 7.9.1.52
-- Fix content deleting and M2O
-- **************************************

ALTER TRIGGER [dbo].[tbd_delete_content] ON [dbo].[CONTENT] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item

  UPDATE content_attribute SET related_attribute_id = NULL
  where related_attribute_id in (
    select attribute_id from content_attribute ca
    inner join deleted d on ca.content_id = d.content_id
  )

  update content_attribute set link_id = null where link_id in (select link_id from content_link cl
  inner join deleted d on cl.content_id = d.content_id)

  delete content_to_content from content_to_content cc
  inner join deleted d on d.content_id = cc.r_content_id or d.content_id = cc.l_content_id

  delete container from container c
  inner join deleted d on d.content_id = c.content_id

  delete content_form from content_form cf
  inner join deleted d on d.content_id = cf.content_id

  delete content_item from content_item ci
  inner join deleted d on d.content_id = ci.content_id

  delete content_tab_bind from content_tab_bind ctb
  inner join deleted d on d.content_id = ctb.content_id

  delete [ACTION_CONTENT_BIND] from [ACTION_CONTENT_BIND] acb
  inner join deleted d on d.content_id = acb.content_id

  delete ca from CONTENT_ATTRIBUTE ca
  inner join CONTENT_ATTRIBUTE cad on ca.BACK_RELATED_ATTRIBUTE_ID = cad.ATTRIBUTE_ID
  inner join deleted c on cad.CONTENT_ID = c.CONTENT_ID

  delete content from content c inner join deleted d on c.content_id = d.content_id

  alter table content_item enable trigger td_delete_item
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.52', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.52 completed'
GO


-- **************************************
-- Maxim Tertyshnyy
-- version 7.9.1.53
-- Save & Up
-- **************************************

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Save and Up', 'save_and_up', 2)
insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID)
VALUES('Update and Up', 'update_and_up', 2)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, NEXT_SUCCESSFUL_ACTION_ID)
values('Save Article and Up', 'save_article_and_up', dbo.qp_action_type_id('save_and_up'), dbo.qp_entity_type_id('article'), dbo.qp_action_id('edit_article'))
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, NEXT_SUCCESSFUL_ACTION_ID)
values('Update Article and Up', 'update_article_and_up', dbo.qp_action_type_id('update_and_up'), dbo.qp_entity_type_id('article'), dbo.qp_action_id('edit_article'))
GO

update ACTION_TOOLBAR_BUTTON set [ORDER] = [ORDER] * 10
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_article'), dbo.qp_action_id('save_article_and_up'), 'Save & Up', 'saveup.gif', NULL, 15, 1)
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_article'), dbo.qp_action_id('update_article_and_up'), 'Save & Up', 'saveup.gif', NULL, 15, 1)
GO

exec qp_update_translations 'Save & Up', 'Сохранить и закрыть';
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.53', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.53 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.54
-- Visible and Archive history
-- **************************************

if not exists (select * From information_schema.columns where table_name = 'CONTENT_ITEM_STATUS_HISTORY' and column_name = 'ARCHIVE')
  begin
  ALTER TABLE dbo.CONTENT_ITEM_STATUS_HISTORY ADD
  ARCHIVE BIT NULL
  end
go

if not exists (select * From information_schema.columns where table_name = 'CONTENT_ITEM_STATUS_HISTORY' and column_name = 'VISIBLE')
  begin
  ALTER TABLE dbo.CONTENT_ITEM_STATUS_HISTORY ADD
  VISIBLE BIT NULL
  end
go

ALTER TRIGGER [dbo].[tu_save_content_item_history] ON [dbo].[CONTENT_ITEM] FOR UPDATE AS
BEGIN
  if update(modified) and not update(not_for_replication)
    insert into content_item_status_history
      (content_item_id, status_type_id, ARCHIVE, VISIBLE, user_id, description, created)
      select i.content_item_id, i.status_type_id, i.ARCHIVE, i.VISIBLE, i.last_modified_by, st.description, GETDATE()
      from inserted i INNER JOIN status_type st ON i.status_type_id = st.status_type_id
      INNER JOIN deleted d on i.content_item_id = d.content_item_id where i.modified <> d.modified
END
GO

ALTER TRIGGER [dbo].[ti_save_content_item_history] ON [dbo].[CONTENT_ITEM] FOR INSERT AS
BEGIN
  insert into content_item_status_history
    (content_item_id, status_type_id, ARCHIVE, VISIBLE, user_id, description, created)
    select i.content_item_id, i.status_type_id, i.ARCHIVE, i.VISIBLE, i.last_modified_by, st.description, GETDATE()
    from inserted i INNER JOIN status_type st ON i.status_type_id = st.status_type_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.54', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.54 completed'
GO

-- **************************************
-- Maxim Tertyshnyy
-- version 7.9.1.55
-- Search Articles on Site by ID
-- **************************************

exec qp_drop_existing 'dbo.qp_all_article_search', 'IsProcedure'
go

CREATE PROCEDURE [dbo].[qp_all_article_search]
  @p_site_id int,
  @p_user_id int,
  @p_searchparam nvarchar(4000),
  @p_order_by nvarchar(max) = N'Rank DESC',
  @p_start_row int = 0,
  @p_page_size int = 0,
  @p_item_id int = null,

  @total_records int OUTPUT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

    -- Задаем номер начальной записи по умолчанию
  IF (@p_start_row <= 0)
    BEGIN
      SET @p_start_row = 1
    END

  -- Задаем номер конечной записи
  DECLARE @p_end_row AS int
  SET @p_end_row = @p_start_row + @p_page_size - 1

  -- свормировать запрос для подмножества контентов к которым есть доступ
  DECLARE @security_sql AS nvarchar(max)
  SET @security_sql = ''
  EXEC dbo.qp_GetPermittedItemsAsQuery
        @user_id = @p_user_id,
        @group_id = 0,
        @start_level = 1,
        @end_level = 4,
        @entity_name = 'content',
        @parent_entity_name = 'site',
        @parent_entity_id = @p_site_id,
        @SQLOut = @security_sql OUTPUT

  -- посчитать общее кол-во записей
  declare @paramdef nvarchar(4000);
  declare @query nvarchar(4000);

  create table #temp
  ([rank] int, content_item_id numeric, attribute_id numeric, [priority] int)

  create table #temp2
  ([rank] int, content_item_id numeric, attribute_id numeric, [priority] int)

  set @query = 'insert into #temp ' + CHAR(13)
    + ' select ft.[rank], cd.content_item_id, cd.attribute_id, 0 ' + CHAR(13)
    + ' from CONTAINSTABLE(content_data, *,  @searchparam) ft ' + CHAR(13)
    + ' inner join content_data cd on ft.[key] = cd.content_data_id ' + CHAR(13)

  IF @p_item_id is not null
    set @query = @query + ' union select 0, ' + cast(@p_item_id as varchar(20)) + ', 0, 1 ' + CHAR(13)
  exec sp_executesql @query, N'@searchparam nvarchar(4000)', @searchparam = @p_searchparam

  set @query = 'insert into #temp2 ' + CHAR(13)
    + ' select cd.* from #temp cd ' + CHAR(13)
    + ' inner join content_item ci on cd.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID ' + CHAR(13)
    + ' inner join (' + @security_sql + ') c on c.CONTENT_ID = ci.CONTENT_ID ' + CHAR(13)
  exec sp_executesql @query

  select @total_records = count(distinct content_item_id) from #temp2

  -- главный запрос
  declare @query_template nvarchar(4000);
  set @query_template = N'WITH PAGED_DATA_CTE AS ' + CHAR(13)
    + ' (select wrapper.*, ' + CHAR(13)
    + '     ROW_NUMBER() OVER (ORDER BY wrapper.[priority] DESC, <$_order_by_$>) AS ROW ' + CHAR(13)
    + '  from ' + CHAR(13)
    + '  (select ' + CHAR(13)
    + '   ci.CONTENT_ID as ParentId, ' + CHAR(13)
    + '   data.CONTENT_ITEM_ID as Id, ' + CHAR(13)
    + '   data.ATTRIBUTE_ID as FieldId, ' + CHAR(13)
    + '   attr.ATTRIBUTE_TYPE_ID as FieldTypeId, ' + CHAR(13)
    + '   c.CONTENT_NAME as ParentName, ' + CHAR(13)
    + '   st.STATUS_TYPE_NAME as StatusName, ' + CHAR(13)
    + '   ci.CREATED as Created, ' + CHAR(13)
    + '   ci.MODIFIED as Modified, ' + CHAR(13)
    + '   usr.[LOGIN] as LastModifiedByUser, ' + CHAR(13)
    + '   data.[rank] as Rank, ' + CHAR(13)
    + '   data.[priority] as [priority], ' + CHAR(13)
    + '   ROW_NUMBER() OVER (PARTITION BY data.CONTENT_ITEM_ID ORDER BY data.[rank] DESC) AS SIMILAR_ITEM_ROW ' + CHAR(13)
    + '   from #temp2 data ' + CHAR(13)
    + '   left join dbo.CONTENT_ATTRIBUTE attr on data.ATTRIBUTE_ID = attr.ATTRIBUTE_ID ' + CHAR(13)
    + '   inner join dbo.CONTENT_ITEM ci on data.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID ' + CHAR(13)
    + '   inner join dbo.CONTENT c on c.CONTENT_ID = ci.CONTENT_ID ' + CHAR(13)
    + '   inner join dbo.STATUS_TYPE st on st.STATUS_TYPE_ID = ci.STATUS_TYPE_ID ' + CHAR(13)
    + '   inner join dbo.USERS usr on usr.[USER_ID] = ci.LAST_MODIFIED_BY ' + CHAR(13)
    + '   ) as wrapper ' + CHAR(13)
    + '   where wrapper.SIMILAR_ITEM_ROW = 1 ' + CHAR(13)
    + ' ) ' + CHAR(13)
    + ' select ' + CHAR(13)
    + '   ParentId, ' + CHAR(13)
    + '   ParentName, ' + CHAR(13)
    + '   Id, ' + CHAR(13)
    + '   FieldId, ' + CHAR(13)
    + '   (case when FieldTypeId in (9, 10) THEN cd.BLOB_DATA ELSE cd.DATA END) as Text, ' + CHAR(13)
    + '   dbo.qp_get_article_title_func(Id, ParentId) as Name, ' + CHAR(13)
    + '   StatusName, ' + CHAR(13)
    + '   pdc.Created, ' + CHAR(13)
    + '   pdc.Modified, ' + CHAR(13)
    + '   LastModifiedByUser, ' + CHAR(13)
    + '   Rank ' + CHAR(13)
    + ' from PAGED_DATA_CTE pdc ' + CHAR(13)
    + ' left join content_data cd on pdc.Id = cd.content_item_id and pdc.FieldId = cd.attribute_id ' + CHAR(13)
    + ' where ROW between @start_row and @end_row';


  declare @sortExp nvarchar(4000);
  set @sortExp = case when @p_order_by is null or @p_order_by = '' then N'Rank DESC' else @p_order_by end;
  set @query = REPLACE(@query_template, '<$_order_by_$>', @sortExp);
  set @paramdef = '@searchparam nvarchar(4000), @site_id int, @start_row int, @end_row int';
  EXECUTE sp_executesql @query, @paramdef, @searchparam = @p_searchparam, @site_id = @p_site_id, @start_row = @p_start_row, @end_row = @p_end_row;

  drop table #temp
  drop table #temp2
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.55', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.55 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.56
-- Fix writing to content_item_status_history
-- **************************************

ALTER PROCEDURE [dbo].[qp_merge_article]
@item_id numeric
AS
BEGIN
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) SET schedule_new_version_publication = 0, not_for_replication = 1 WHERE content_item_id = @item_id
  exec qp_replicate @item_id
  UPDATE content_item set MODIFIED = GETDATE(), LAST_MODIFIED_BY = 1 where CONTENT_ITEM_ID = @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE child_id = @item_id
END
GO

ALTER  PROCEDURE [dbo].[restore_content_item_version]
  @uid NUMERIC,
  @version_id NUMERIC
AS
  DECLARE @id NUMERIC, @tm DATETIME
  DECLARE @content_id numeric, @splitted bit
  SET @tm = GETDATE()
  SELECT @id = content_item_id FROM content_item_version WHERE content_item_version_id = @version_id
  IF @id IS NOT NULL BEGIN
    select @content_id = content_id, @splitted = splitted from content_item where content_item_id = @id

    -- Restore common data
    DELETE FROM content_data WHERE content_item_id = @id
    INSERT INTO content_data (attribute_id, content_item_id, data, blob_data)
    SELECT attribute_id, @id, data, blob_data
    FROM version_content_data
    WHERE content_item_version_id = @version_id

    -- Restore many-to-many data
    IF @splitted = 1
    begin
    DELETE FROM item_link_async where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    INSERT INTO item_link_async
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id and link_id is not null
    end else
    begin
    DELETE FROM item_link_united_full where item_id = @id and link_id in (select link_id from content_attribute where content_id = @content_id)

    INSERT INTO item_to_item
    SELECT link_id, @id, linked_item_id FROM item_to_item_version AS iv
    INNER JOIN content_attribute ca on iv.attribute_id = ca.attribute_id
    WHERE iv.content_item_version_id = @version_id and link_id is not null
    end

    -- Restore many-to-one data
    create table #resultIds (id numeric, attribute_id numeric not null, to_remove bit not null default 0)

    declare @fieldIds table (id numeric, back_id numeric)

    insert into @fieldIds
    select ATTRIBUTE_ID, BACK_RELATED_ATTRIBUTE_ID From CONTENT_ATTRIBUTE where BACK_RELATED_ATTRIBUTE_ID is not null and CONTENT_ID = @content_id

    while exists(select * from @fieldIds)
    begin
      declare @currentFieldId numeric, @currentBackFieldId numeric
      select @currentFieldId = id, @currentBackFieldId = back_id from @fieldIds

      declare @ids table (id numeric)
      insert into @ids
      select linked_item_id from item_to_item_version where attribute_id = @currentFieldId and content_item_version_id = @version_id

      declare @value nvarchar(max)
      set @value = ''
      while exists(select * from @ids)
      begin
        declare @currentId numeric
        select @currentId = id from @ids
        if @value <> ''
          set @value = @value + ','
        set @value = @value + CAST(@currentId as nvarchar)

        delete from @ids where id = @currentId

      end

      exec qp_update_m2o @id, @currentBackFieldId, @value


    delete from @fieldIds where id = @currentFieldId
    end

    exec qp_update_m2o_final @id

    drop table #resultIds

    update content_item set MODIFIED = GETDATE(), LAST_MODIFIED_BY = @uid where CONTENT_ITEM_ID = @id

    -- Write status history log
    INSERT INTO content_item_status_history
      (content_item_id, user_id, description, created,
      system_status_type_id, content_item_version_id)
    VALUES
      (@id, @uid, 'Record has been restored from version backup', @tm,
      4, @version_id)
  END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.56', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.56 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.1.57
-- missing VePlugin`s translations context menus, etc.
-- **************************************

exec qp_update_translations 'Visual Editor Plugins', 'Плагины визуального редактора';
exec qp_update_translations 'New Visual Editor Plugin', 'Создать новый плагин виз. редактора';
GO

if not exists (select * from context_menu where code = 'visual_editor_plugins')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('visual_editor_plugins')
END
GO

if not exists (select * from context_menu where code = 'visual_editor_plugin')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('visual_editor_plugin')
END
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Visual Editor Plugins', 'refresh_visual_editor_plugins', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('visual_editor_plugin'), 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('visual_editor_plugins'), dbo.qp_action_id('refresh_visual_editor_plugins'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('visual_editor_plugins'), dbo.qp_action_id('new_visual_editor_plugin'), 'New Visual Editor Plugin', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('visual_editor_plugin'), dbo.qp_action_id('remove_visual_editor_plugin'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('visual_editor_plugin'), dbo.qp_action_id('edit_visual_editor_plugin'), 'Properties', 3, 'properties.gif')
GO

update ENTITY_TYPE
set

  CONTEXT_MENU_ID = dbo.qp_context_menu_id('visual_editor_plugin'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('visual_editor_plugins')
where CODE = 'visual_editor_plugin'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.57', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO
PRINT '7.9.1.57 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.58
-- Fix multiple self-relations
-- **************************************

ALTER PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'CONTENT_ITEM_ID DESC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @link_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  DECLARE @relations TABLE (
    attribute_id numeric,
    attribute_name nvarchar(255),
    rel_attribute_id numeric,
    rel_attribute_type_id numeric,
    rel_attribute_name nvarchar(255),
    rel_content_id  numeric,
    rel_count numeric
  )

  INSERT INTO @relations
  SELECT
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
    rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
    rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
    rca.CONTENT_ID AS RELATED_CONTENT_ID,
    ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ORDER ASC) AS 'RELATED_COUNT'
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.view_in_list = 1
  ORDER BY
    ca.permanent_flag DESC,
    ca.attribute_order ASC

  -- Открываем курсор
  WHILE EXISTS(select * from @relations)
  BEGIN
    select
      @attribute_id = attribute_id,
      @attribute_name = attribute_name,
      @rel_attribute_id = rel_attribute_id,
      @rel_attribute_type_id = rel_attribute_type_id,
      @rel_attribute_name = rel_attribute_name,
      @rel_content_id = rel_content_id,
      @rel_count = rel_count
    from @relations

    SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

    IF (@rel_attribute_id IS NOT NULL)
    BEGIN
      declare @current_block nvarchar(512)
      set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
      set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
      if (@rel_count > 1)
      begin
        set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
        set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
      end

      SET @related_select_block = @related_select_block + ' '
      SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
      if @rel_attribute_type_id in (9, 10)
        SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
      SET @related_select_block = @related_select_block + @current_block
      SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
      SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
        content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
        @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
    END

    delete from @relations where attribute_id = @attribute_id

  END


  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  COALESCE(ci.status_type_id, c.status_type_id) AS workflow_status_type_id,
  COALESCE(c2.status_type_id, c.status_type_id) AS current_status_type_id,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  CAST(c.visible as bit) as visible,
  CAST((CASE WHEN (sch.content_item_id  IS NOT NULL) THEN 1 ELSE 0 END) AS bit) AS scheduled,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END
  SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + ' AS c2 ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' c2.content_item_id = c.content_item_id ' + CHAR(13)

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many и Many To One --
  declare @link_filter nvarchar(max)
  set @link_filter = ''
  IF(@link_params IS NOT NULL)
    BEGIN
      declare @m2m_condition as varchar(max)
      set @m2m_condition = ''

      declare @link_params_table table (id numeric, ids varchar(max), m2m bit, [isnull] bit)

      insert into @link_params_table
      select T.f.value('./@lid', 'numeric'), T.f.value('./@iids', 'varchar(max)'), T.f.value('./@m2m', 'bit'), T.f.value('./@isnull', 'bit')
      from @link_params.nodes('/link/f') as T(f)

      while exists (select * from @link_params_table)
      begin
        declare @currentLinkId numeric,
            @currentIds varchar(max),
            @isCurrentM2M bit,
            @isNull bit,
            @currentLinkText nvarchar(20)

        select @currentLinkId = id, @currentIds = ids, @isCurrentM2M = m2m, @isNull = [isnull] from @link_params_table
        set @currentLinkText = cast(@currentLinkId as nvarchar(20))

        declare @currentFieldName nvarchar(255),
            @currentContentId numeric
        select @currentContentId = content_id, @currentFieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @currentLinkId

        if @isNull = 0 begin
          if @isCurrentM2M = 1 begin
            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct item_id from dbo.item_link_united where link_id = ' + @currentLinkText + ' AND linked_item_id in (' + @currentIds + ') ' +
              ') as link_' + @currentLinkText + '  ON c.content_item_id = link_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
          else begin

            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct [' + @currentFieldName + '] as item_id from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where CONTENT_ITEM_ID in (' + @currentIds + ') ' +
              ' ) as back_' + @currentLinkText + '  ON c.content_item_id = back_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
        end
        else begin
          if @isCurrentM2M = 1 begin
            set @link_filter = ' NOT EXISTS (select item_id from dbo.item_link_united where c.content_item_id = item_id and link_id = '  + @currentLinkText + ') '
          end
          else begin
            set @link_filter = 'NOT EXISTS (select * from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where c.content_item_id = [' + @currentFieldName + ']) '
          end
        end

        delete from @link_params_table where id = @currentLinkId and m2m = @isCurrentM2M
      end
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  if LEN(@link_filter) > 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + @link_filter
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @order_by_block = @order_by
    END
  ELSE
    BEGIN
      IF (@use_custom_selection = 1)
        SET @order_by_block = 'is_selected desc, CONTENT_ITEM_ID DESC'
      ELSE
        SET @order_by_block = 'CONTENT_ITEM_ID DESC'
    END

  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)

  if @fts_is_incorrect_query = 1 OR @parent_level = 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + '1 = 0'
  END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = 'content',
    @parent_entity_id = @content_id

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.58', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO
PRINT '7.9.1.58 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.59
-- fix on fix
-- **************************************

UPDATE buttons SET action_file = 'contents/fields/act_update_field.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 24 AND button_name ='Update')
GO

UPDATE buttons SET action_file = 'contents/fields/act_save_field.asp'
  WHERE button_id = (SELECT button_id FROM buttons WHERE location_tab_id = 25 AND button_name ='Save')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.59', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.59 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.60
-- default VE commands
-- **************************************

delete from VE_COMMAND
GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Source'
           ,'Source'
           ,0
           ,0
           ,0
           ,0
           ,1
           ,1)

exec qp_update_translations 'Source', 'Источник'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Cut'
           ,'Cut'
           ,0
           ,1
           ,0
           ,0
           ,1
           ,1)

exec qp_update_translations 'Cut', 'Вырезать'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Copy'
           ,'Copy'
           ,0
           ,1
           ,0
           ,1
           ,1
           ,1)

exec qp_update_translations 'Copy', 'Копировать'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Paste'
           ,'Paste'
           ,0
           ,1
           ,0
           ,2
           ,1
           ,1)

exec qp_update_translations 'Paste', 'Вставить'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('PasteText'
           ,'Paste as plain text'
           ,0
           ,1
           ,0
           ,3
           ,1
           ,1)

exec qp_update_translations 'Paste as plain text', 'Вставить только текст'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('PasteFromWord'
           ,'Paste from Word'
           ,0
           ,1
           ,0
           ,4
           ,1
           ,1)

exec qp_update_translations 'Paste from Word', 'Вставить из Word'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Cleaner'
           ,'Clean HTML'
           ,0
           ,1
           ,0
           ,5
           ,1
           ,1)

exec qp_update_translations 'Clean HTML', 'Чистка HTML'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Typographer'
           ,'Typograf'
           ,0
           ,1
           ,0
           ,6
           ,1
           ,1)
GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('SpellChecker'
           ,'Check Spelling'
           ,0
           ,1
           ,1
           ,0
           ,1
           ,1)

exec qp_update_translations 'Check Spelling', 'Проверить орфографию'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Scayt'
           ,'Spell Check As You Type'
           ,0
           ,1
           ,1
           ,1
           ,1
           ,1)

exec qp_update_translations 'Spell Check As You Type', 'Проверка орфографии по мере ввода'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Undo'
           ,'Undo'
           ,0
           ,2--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Undo', 'Отменить'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Redo'
           ,'Redo'
           ,0
           ,2--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Redo', 'Повторить'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Find'
           ,'Find'
           ,0
           ,2--toolbar
           ,1--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Find', 'Найти'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Replace'
           ,'Replace'
           ,0
           ,2--toolbar
           ,1--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Replace', 'Заменить'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('SelectAll'
           ,'Select All'
           ,0
           ,2--toolbar
           ,2--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Select All', 'Выделить все'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('RemoveFormat'
           ,'Remove Format'
           ,0
           ,2--toolbar
           ,2--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Remove Format', 'Убрать форматирование'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Bold'
           ,'Bold'
           ,1
           ,0--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Bold', 'Жирный'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Italic'
           ,'Italic'
           ,1
           ,0--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Italic', 'Курсив'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Underline'
           ,'Underline'
           ,1
           ,0--toolbar
           ,0--group
           ,2--command
           ,1
           ,1)

exec qp_update_translations 'Underline', 'Подчеркнутый'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Strike'
           ,'Strike Through'
           ,1
           ,0--toolbar
           ,0--group
           ,3--command
           ,1
           ,1)

exec qp_update_translations 'Strike Through', 'Зачеркнутый'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Subscript'
           ,'Subscript'
           ,1
           ,0--toolbar
           ,1--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Subscript', 'Подстрочный индекс'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Superscript'
           ,'Superscript'
           ,1
           ,0--toolbar
           ,1--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Superscript', 'Надстрочный индекс'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('NumberedList'
           ,'Insert/Remove Numbered List'
           ,1
           ,1--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Insert/Remove Numbered List', 'Нумерованный список'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('BulletedList'
           ,'Insert/Remove Bulleted List'
           ,1
           ,1--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Insert/Remove Bulleted List', 'Маркированный список'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Outdent'
           ,'Decrease Indent'
           ,1
           ,1--toolbar
           ,1--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Decrease Indent', 'Уменьшить отступ'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Indent'
           ,'Increase Indent'
           ,1
           ,1--toolbar
           ,1--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Increase Indent', 'Увеличить отступ'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('JustifyLeft'
           ,'Align Left'
           ,1
           ,2--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Align Left', 'По левому краю'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('JustifyCenter'
           ,'Center'
           ,1
           ,2--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Center', 'По центру'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('JustifyRight'
           ,'Align Right'
           ,1
           ,2--toolbar
           ,0--group
           ,2--command
           ,1
           ,1)

exec qp_update_translations 'Align Right', 'По правому краю'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('JustifyBlock'
           ,'Justify'
           ,1
           ,2--toolbar
           ,0--group
           ,3--command
           ,1
           ,1)

exec qp_update_translations 'Justify', 'По ширине'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Link'
           ,'Link'
           ,1
           ,3--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Link', 'Вставить/Редактировать ссылку'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Unlink'
           ,'Unlink'
           ,1
           ,3--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Unlink', 'Убрать ссылку'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Anchor'
           ,'Anchor'
           ,1
           ,3--toolbar
           ,0--group
           ,2--command
           ,1
           ,1)

exec qp_update_translations 'Anchor', 'Вставить/Редактировать якорь'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Image'
           ,'Image'
           ,1
           ,4--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Image', 'Изображение'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Flash'
           ,'Flash'
           ,1
           ,4--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)
GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Table'
           ,'Table'
           ,1
           ,4--toolbar
           ,1--group
           ,0--command
           ,1
           ,1)
GO

exec qp_update_translations 'Table', 'Таблица'

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('QSpecChar'
           ,'Insert Special Character'
           ,1
           ,4--toolbar
           ,1--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Insert Special Character', 'Вставить специальный символ'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('HorizontalRule'
           ,'Insert Horizontal Line'
           ,1
           ,4--toolbar
           ,1--group
           ,2--command
           ,1
           ,1)

exec qp_update_translations 'Insert Horizontal Line', 'Вставить горизонтальную линию'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('LineBreak'
           ,'Insert Line Break'
           ,1
           ,4--toolbar
           ,1--group
           ,3--command
           ,1
           ,1)

exec qp_update_translations 'Insert Line Break', 'Вставить новую строку'

GO


INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('PageBreak'
           ,'Insert Page Break for Printing'
           ,1
           ,4--toolbar
           ,1--group
           ,4--command
           ,1
           ,1)

exec qp_update_translations 'Insert Page Break for Printing', 'Вставить разрыв страницы'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Styles'
           ,'Formatting Styles'
           ,2
           ,0--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Formatting Styles', 'Стили форматирования'

GO


INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Format'
           ,'Paragraph Format'
           ,2
           ,0--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Paragraph Format', 'Форматирование'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('Font'
           ,'Font Name'
           ,2
           ,0--toolbar
           ,0--group
           ,2--command
           ,1
           ,1)

exec qp_update_translations 'Font Name', 'Шрифт'

GO


INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('FontSize'
           ,'Font Size'
           ,2
           ,0--toolbar
           ,0--group
           ,3--command
           ,1
           ,1)

exec qp_update_translations 'Font Size', 'Размер'

GO

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('TextColor'
           ,'Text Color'
           ,2
           ,1--toolbar
           ,0--group
           ,0--command
           ,1
           ,1)

exec qp_update_translations 'Text Color', 'Цвет текста'

GO


INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('BGColor'
           ,'Background Color'
           ,2
           ,1--toolbar
           ,0--group
           ,1--command
           ,1
           ,1)

exec qp_update_translations 'Background Color', 'Цвет фона'

GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.60', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.60 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.61
-- Field & Site External CSS
-- **************************************

if not exists (select * From information_schema.columns where table_name = 'SITE' and column_name = 'EXTERNAL_CSS')
  begin
  ALTER TABLE SITE ADD
    EXTERNAL_CSS NVARCHAR(MAX) NULL
  end
GO

if not exists (select * From information_schema.columns where table_name = 'CONTENT_ATTRIBUTE' and column_name = 'EXTERNAL_CSS')
  begin
  ALTER TABLE CONTENT_ATTRIBUTE ADD
    EXTERNAL_CSS NVARCHAR(MAX) NULL
  end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.61', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.61 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.1.62
-- Field & Site ROOT_ELEMENT_CLASS
-- **************************************

if not exists (select * From information_schema.columns where table_name = 'SITE' and column_name = 'ROOT_ELEMENT_CLASS')
  begin
  ALTER TABLE SITE ADD
    ROOT_ELEMENT_CLASS NVARCHAR(50) NULL
  end
GO

if not exists (select * From information_schema.columns where table_name = 'CONTENT_ATTRIBUTE' and column_name = 'ROOT_ELEMENT_CLASS')
  begin
  ALTER TABLE CONTENT_ATTRIBUTE ADD
    ROOT_ELEMENT_CLASS NVARCHAR(50) NULL
  end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.62', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.62 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.63
-- Activate search block for virtual articles
-- **************************************

update BACKEND_ACTION set ALLOW_SEARCH = 1 where CODE='list_virtual_article'
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.63', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.63 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.1.64
-- Child Permissions Fix
-- **************************************

delete from BACKEND_ACTION where CODE in ('list_content_permission_for_child', 'list_article_permission_for_child')
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Content Permissions for Child', 'list_content_permission_for_child', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('content_permission'), '~/ContentPermission/Index/', 1, dbo.qp_view_id('list'))
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Article Permissions for Child', 'list_article_permission_for_child', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('article_permission'), '~/ArticlePermission/Index/', 1, dbo.qp_view_id('list'))
GO

exec qp_update_translations 'Content Permissions for Child', 'Список прав доступа для списка дочерних прав'
exec qp_update_translations 'Article Permissions for Child', 'Список прав доступа для списка дочерних прав'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.64', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.64 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.1.65
-- VE_STYLE, VE_STYLE_SITE_BIND, VE_STYLE_FIELD_BIND
-- **************************************

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VE_STYLE]') AND type in (N'U'))
BEGIN
  DROP TABLE [dbo].[VE_STYLE]
END
GO

CREATE TABLE [dbo].VE_STYLE
(
  [ID] NUMERIC(18,0) NOT NULL IDENTITY(1,1),
  [NAME] NVARCHAR(255),
  [DESCRIPTION] NVARCHAR(512),
  [TAG] NVARCHAR(20),
  [ORDER] INT NOT NULL CONSTRAINT [DF_VES_ORDER] DEFAULT(0),
  [OVERRIDES_TAG] NVARCHAR (20),
  [IS_FORMAT] BIT NOT NULL CONSTRAINT [DF_VES_IS_FORMAT] DEFAULT(0),
  [IS_SYSTEM] BIT NOT NULL CONSTRAINT [DF_VES_IS_SYSTEM] DEFAULT(0),
  [ATTRIBUTES] NVARCHAR(MAX),
  [STYLES] NVARCHAR(MAX),
  [CREATED]       [datetime]     NOT NULL CONSTRAINT [DF_VES_CREATED] DEFAULT (getdate()),
  [MODIFIED]        [datetime]     NOT NULL CONSTRAINT [DF_VES_MODIFIED] DEFAULT (getdate()),
  [LAST_MODIFIED_BY]    [numeric](18, 0) NOT NULL,
  CONSTRAINT [PK_VE_STYLE] PRIMARY KEY CLUSTERED
  ([ID] ASC)
)
GO

ALTER TABLE [dbo].[VE_STYLE]  WITH CHECK ADD CONSTRAINT [FK_VES_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])

------------------------------------------------------------------------------------------------------------

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VE_STYLE_SITE_BIND]') AND type in (N'U'))
  DROP TABLE [dbo].[VE_STYLE_SITE_BIND]
GO

CREATE TABLE [dbo].[VE_STYLE_SITE_BIND](
  [STYLE_ID] NUMERIC(18,0) NOT NULL,
  [SITE_ID] NUMERIC(18,0) NOT NULL,
  [ON] [bit] NOT NULL
 CONSTRAINT [PK_VE_STYLE_SITE_BIND] PRIMARY KEY CLUSTERED
(
  [STYLE_ID] ASC,
  [SITE_ID] ASC
)
)
GO

ALTER TABLE [dbo].[VE_STYLE_SITE_BIND]  WITH CHECK ADD CONSTRAINT [FK_VE_STYLE_SITE_BIND_STYLE] FOREIGN KEY([STYLE_ID])
REFERENCES [dbo].[VE_STYLE] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[VE_STYLE_SITE_BIND] CHECK CONSTRAINT [FK_VE_STYLE_SITE_BIND_STYLE]
GO

ALTER TABLE [dbo].[VE_STYLE_SITE_BIND]  WITH CHECK ADD  CONSTRAINT [FK_VE_STYLE_SITE_BIND_SITE] FOREIGN KEY([SITE_ID])
REFERENCES [dbo].[SITE] ([SITE_ID])
GO
ALTER TABLE [dbo].[VE_STYLE_SITE_BIND] CHECK CONSTRAINT [FK_VE_STYLE_SITE_BIND_SITE]
GO

---------------------------------------------------------------------------------------------------------------------------------------------------

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  alter table content_item disable trigger td_delete_item
  alter table content_attribute disable trigger td_content_attribute_clean_empty_links
  alter table content_attribute disable trigger td_remove_field
  alter table content_attribute disable trigger td_reorder_fields
  alter table content_constraint disable trigger td_content_indexes
  alter table [object] disable trigger tu_object_format_modified
  alter table [object] disable trigger tiu_bind_objects_by_name
  alter table object_format disable trigger tbd_delete_object_format
  alter table object_values disable trigger tiud_values_format_modified
  alter table container_statuses disable trigger tiud_statuses_format_modified
  alter table item_to_item disable trigger td_item_to_item


  delete from item_to_item where link_id in
  (select link_id from site_content_link scl
  inner join deleted d on d.site_id = scl.site_id)

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  update [object] set object_format_id = null from [object] obj
  inner join page_template pt on obj.page_template_id = pt.page_template_id
  inner join deleted d on d.site_id = pt.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete [ACTION_SITE_BIND] from [ACTION_SITE_BIND] asb
  inner join deleted d on d.site_id = asb.site_id

  delete [VE_COMMAND_SITE_BIND] from [VE_COMMAND_SITE_BIND] vcsb
  inner join deleted d on d.SITE_ID = vcsb.SITE_ID

  delete [VE_STYLE_SITE_BIND] from [VE_STYLE_SITE_BIND] vssb
  inner join deleted d on d.SITE_ID = vssb.SITE_ID

  delete site from site s
  inner join deleted d on d.site_id = s.site_id

  alter table content_item enable trigger td_delete_item
  alter table content_attribute enable trigger td_content_attribute_clean_empty_links
  alter table content_attribute enable trigger td_remove_field
  alter table content_attribute enable trigger td_reorder_fields
  alter table content_constraint enable trigger td_content_indexes
  alter table [object] enable trigger tu_object_format_modified
  alter table [object] enable trigger tiu_bind_objects_by_name
  alter table object_format enable trigger tbd_delete_object_format
  alter table object_values enable trigger tiud_values_format_modified
  alter table container_statuses enable trigger tiud_statuses_format_modified
  alter table item_to_item enable trigger td_item_to_item
END

GO

-----------------------------------------------------------------------------------------------------------

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VE_STYLE_FIELD_BIND]') AND type in (N'U'))
  DROP TABLE [dbo].[VE_STYLE_FIELD_BIND]
GO

CREATE TABLE [dbo].[VE_STYLE_FIELD_BIND](
  [STYLE_ID] NUMERIC(18,0) NOT NULL,
  [FIELD_ID] NUMERIC(18,0) NOT NULL,
  [ON] [bit] NOT NULL
 CONSTRAINT [PK_VE_STYLE_FIELD_BIND] PRIMARY KEY CLUSTERED
(
  [STYLE_ID] ASC,
  [FIELD_ID] ASC
)
)
GO

ALTER TABLE [dbo].[VE_STYLE_FIELD_BIND]  WITH CHECK ADD CONSTRAINT [FK_VE_STYLE_FIELD_BIND_STYLE] FOREIGN KEY([STYLE_ID])
REFERENCES [dbo].[VE_STYLE] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[VE_STYLE_FIELD_BIND] CHECK CONSTRAINT [FK_VE_STYLE_FIELD_BIND_STYLE]
GO

ALTER TABLE [dbo].[VE_STYLE_FIELD_BIND]  WITH CHECK ADD  CONSTRAINT [FK_VE_STYLE_BIND_FIELD] FOREIGN KEY([FIELD_ID])
REFERENCES [dbo].[CONTENT_ATTRIBUTE] ([ATTRIBUTE_ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[VE_STYLE_FIELD_BIND] CHECK CONSTRAINT [FK_VE_STYLE_BIND_FIELD]
GO



INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.65', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.65 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.66
-- Redundant fields and joins
-- **************************************

ALTER PROCEDURE [dbo].[qp_paged_articles_list]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @selected_article_ids AS nvarchar(max) = NULL,
  @permission_level numeric(18,0),
  @order_by nvarchar(max) = 'CONTENT_ITEM_ID DESC',
  @filter nvarchar(max) = '',
  @fts_attribute_ids AS NVARCHAR(max) = NULL,
  @fts_query_string AS NVARCHAR(max) = NULL,
  @fts_is_incorrect_query AS bit = null,
  @link_params AS XML = null,
  @count_only bit = 0,
  @total_records int OUTPUT,
  @start_row int,
  @page_size int
AS
BEGIN
  DECLARE @select_block AS nvarchar(max)
  DECLARE @from_block AS nvarchar(max)
  DECLARE @where_block AS nvarchar(max)
  DECLARE @order_by_block AS nvarchar(max)
  DECLARE @processed_order_by_block AS nvarchar(max)

  DECLARE @dynamic_select_block AS nvarchar(max)
  DECLARE @related_select_block AS nvarchar(max)
  DECLARE @related_from_block AS nvarchar(max)

  DECLARE @attribute_id numeric, @rel_attribute_id numeric, @rel_attribute_type_id numeric, @rel_content_id numeric, @rel_count int
  DECLARE @attribute_name nvarchar(255), @rel_attribute_name nvarchar(255), @rel_field_name nvarchar(255), @rel_table_name nvarchar(255)

  DECLARE @use_custom_selection AS bit -- признак, разрешающий использование выделения заданного пользователем
  DECLARE @use_security bit, @parent_level numeric

  SET NOCOUNT ON

  IF (dbo.qp_is_user_admin(@user_id) = 1)
    set @use_security = 0
  ELSE
    select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id

  SET @dynamic_select_block = ''
  SET @related_select_block = ''
  SET @related_from_block = ''

  SET @use_custom_selection = 0
  IF (@selected_article_ids IS NOT NULL)
    BEGIN
      SET @use_custom_selection = 1
    END

  DECLARE @relations TABLE (
    attribute_id numeric,
    attribute_name nvarchar(255),
    rel_attribute_id numeric,
    rel_attribute_type_id numeric,
    rel_attribute_name nvarchar(255),
    rel_content_id  numeric,
    rel_count numeric
  )

  INSERT INTO @relations
  SELECT
    ca.ATTRIBUTE_ID,
    ca.ATTRIBUTE_NAME,
    rca.ATTRIBUTE_ID AS RELATED_ATTRIBUTE_ID,
    rca.ATTRIBUTE_TYPE_ID AS RELATED_ATTRIBUTE_TYPE_ID,
    rca.ATTRIBUTE_NAME AS RELATED_ATTRIBUTE_NAME,
    rca.CONTENT_ID AS RELATED_CONTENT_ID,
    ROW_NUMBER() OVER(PARTITION BY rca.ATTRIBUTE_ID ORDER BY ca.ATTRIBUTE_ORDER ASC) AS 'RELATED_COUNT'
  FROM
    CONTENT_ATTRIBUTE AS ca
  LEFT OUTER JOIN
    CONTENT_ATTRIBUTE AS rca
  ON
    rca.ATTRIBUTE_ID = ca.RELATED_ATTRIBUTE_ID
  WHERE
    ca.CONTENT_ID = @content_id
    AND ca.view_in_list = 1
  ORDER BY
    ca.permanent_flag DESC,
    ca.attribute_order ASC

  -- Открываем курсор
  WHILE EXISTS(select * from @relations)
  BEGIN
    select
      @attribute_id = attribute_id,
      @attribute_name = attribute_name,
      @rel_attribute_id = rel_attribute_id,
      @rel_attribute_type_id = rel_attribute_type_id,
      @rel_attribute_name = rel_attribute_name,
      @rel_content_id = rel_content_id,
      @rel_count = rel_count
    from @relations

    SET @dynamic_select_block = @dynamic_select_block + ' c.[' + @attribute_name + '], '

    IF (@rel_attribute_id IS NOT NULL)
    BEGIN
      declare @current_block nvarchar(512)
      set @rel_table_name = 'rel_' + CAST(@rel_attribute_id AS varchar)
      set @rel_field_name = 'rel_field_' + CAST(@rel_attribute_id AS varchar)
      if (@rel_count > 1)
      begin
        set @rel_table_name = @rel_table_name + '_' + CAST(@rel_count AS varchar)
        set @rel_field_name = @rel_field_name + '_' + CAST(@rel_count AS varchar)
      end

      SET @related_select_block = @related_select_block + ' '
      SET @current_block = @rel_table_name + '.[' + @rel_attribute_name + ']'
      if @rel_attribute_type_id in (9, 10)
        SET @current_block = 'cast (' + @current_block + ' as nvarchar(255))'
      SET @related_select_block = @related_select_block + @current_block
      SET @related_select_block = @related_select_block +   ' AS ' + @rel_field_name + ', '
      SET @related_from_block = @related_from_block + 'LEFT OUTER JOIN
        content_' + CAST(@rel_content_id AS varchar)  + '_united AS ' + @rel_table_name + ' ON ' +
        @rel_table_name + '.content_item_id = c.[' + @attribute_name + '] '
    END

    delete from @relations where attribute_id = @attribute_id

  END


  SET @select_block = '
  c.CONTENT_ITEM_ID,
  c.CREATED,
  c.MODIFIED,
  c.LAST_MODIFIED_BY,
  ci.CONTENT_ID,
  ci.SCHEDULE_NEW_VERSION_PUBLICATION,
  ci.splitted,
  CAST(c.visible as bit) as visible,
  CAST((CASE WHEN (sch.content_item_id  IS NOT NULL) THEN 1 ELSE 0 END) AS bit) AS scheduled,
  ci.not_for_replication,
  ci.LOCKED_BY,
  st.STATUS_TYPE_NAME,
  [dbo].qp_get_visibility_code(c.visible, sch.content_item_id) AS visibility_code,
  lu.FIRST_NAME AS LOCKER_FIRST_NAME,
  lu.LAST_NAME AS LOCKER_LAST_NAME,
  lu.[LOGIN] AS LOCKER_LOGIN,
  mu.FIRST_NAME AS MODIFIER_FIRST_NAME,
  mu.LAST_NAME AS MODIFIER_LAST_NAME,
  mu.[LOGIN] AS MODIFIER_LOGIN, '

  SET @select_block = @select_block + ' CAST(( ' + CHAR(13)
  IF (@use_custom_selection = 1)
    BEGIN
      SET @select_block = @select_block + '   CASE WHEN (cis.content_item_id IS NOT NULL) THEN ' + CHAR(13)
      SET @select_block = @select_block + '     1 ' + CHAR(13)
      SET @select_block = @select_block + '   ELSE ' + CHAR(13)
      SET @select_block = @select_block + '     0 ' + CHAR(13)
      SET @select_block = @select_block + '   END ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @select_block = @select_block + '   0 ' + CHAR(13)
    END
  SET @select_block = @select_block + ' ) AS bit) AS is_selected ' + CHAR(13)

  IF (LEN(@dynamic_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@dynamic_select_block, LEN(@dynamic_select_block) - 1)
    END

  IF (LEN(@related_select_block) > 0)
    BEGIN
      SET @select_block = @select_block + ', ' + LEFT(@related_select_block, LEN(@related_select_block) - 1)
    END

  SET @from_block = ''
  SET @from_block = @from_block + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)
  IF @use_security = 1
  BEGIN
    SET @from_block = @from_block + 'INNER JOIN ' + CHAR(13)
    SET @from_block = @from_block + ' (<$_security_insert_$>) AS pi ' + CHAR(13)
    SET @from_block = @from_block + 'ON ' + CHAR(13)
    SET @from_block = @from_block + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
  END

  -- FULL TEXT SEARCH
  declare @use_full_text bit, @full_text_sql nvarchar(max)
  set @use_full_text = 0
  IF ((@fts_is_incorrect_query IS NULL OR @fts_is_incorrect_query = 0) AND
    LEN(@fts_attribute_ids) > 0 AND LEN(@fts_query_string) > 0)
    set @use_full_text = 1

  IF @use_full_text = 1
  BEGIN
    CREATE TABLE #ft_temp (content_item_id int primary key)

    SET @from_block = @from_block + 'INNER JOIN #ft_temp as qp_fts' + CHAR(13)
    SET @from_block = @from_block + 'ON c.content_item_id = qp_fts.content_item_id ' + CHAR(13)

    SET @full_text_sql = ' insert into #ft_temp select distinct CI.CONTENT_ITEM_ID from content_item CI, content_data CD ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'where CI.CONTENT_ITEM_ID = CD.CONTENT_ITEM_ID ' + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CI.CONTENT_ID = ' + CAST(@content_id AS varchar)  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and CD.ATTRIBUTE_ID in (' + @fts_attribute_ids + ') '  + CHAR(13)
    SET @full_text_sql = @full_text_sql + 'and contains(CD.*, ''' + @fts_query_string + ''')'  + CHAR(13)
    exec sp_executesql @full_text_sql
  END
  -----
  -- Поиск по Many To Many и Many To One --
  declare @link_filter nvarchar(max)
  set @link_filter = ''
  IF(@link_params IS NOT NULL)
    BEGIN
      declare @m2m_condition as varchar(max)
      set @m2m_condition = ''

      declare @link_params_table table (id numeric, ids varchar(max), m2m bit, [isnull] bit)

      insert into @link_params_table
      select T.f.value('./@lid', 'numeric'), T.f.value('./@iids', 'varchar(max)'), T.f.value('./@m2m', 'bit'), T.f.value('./@isnull', 'bit')
      from @link_params.nodes('/link/f') as T(f)

      while exists (select * from @link_params_table)
      begin
        declare @currentLinkId numeric,
            @currentIds varchar(max),
            @isCurrentM2M bit,
            @isNull bit,
            @currentLinkText nvarchar(20)

        select @currentLinkId = id, @currentIds = ids, @isCurrentM2M = m2m, @isNull = [isnull] from @link_params_table
        set @currentLinkText = cast(@currentLinkId as nvarchar(20))

        declare @currentFieldName nvarchar(255),
            @currentContentId numeric
        select @currentContentId = content_id, @currentFieldName = attribute_name from CONTENT_ATTRIBUTE where ATTRIBUTE_ID = @currentLinkId

        if @isNull = 0 begin
          if @isCurrentM2M = 1 begin
            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct item_id from dbo.item_link_united where link_id = ' + @currentLinkText + ' AND linked_item_id in (' + @currentIds + ') ' +
              ') as link_' + @currentLinkText + '  ON c.content_item_id = link_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
          else begin

            SET @from_block = @from_block + ' INNER JOIN ( ' +
              ' select distinct [' + @currentFieldName + '] as item_id from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where CONTENT_ITEM_ID in (' + @currentIds + ') ' +
              ' ) as back_' + @currentLinkText + '  ON c.content_item_id = back_' + @currentLinkText + '.item_id ' + CHAR(13)
          end
        end
        else begin
          if @isCurrentM2M = 1 begin
            set @link_filter = ' NOT EXISTS (select item_id from dbo.item_link_united where c.content_item_id = item_id and link_id = '  + @currentLinkText + ') '
          end
          else begin
            set @link_filter = 'NOT EXISTS (select * from content_' + cast(@currentContentId as nvarchar(20)) + '_united ' +
              ' where c.content_item_id = [' + @currentFieldName + ']) '
          end
        end

        delete from @link_params_table where id = @currentLinkId and m2m = @isCurrentM2M
      end
    END
  -----

  IF (@use_custom_selection = 1)
    BEGIN
      SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @from_block = @from_block + ' ( ' + CHAR(13)
      SET @from_block = @from_block + '   SELECT ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id ' + CHAR(13)
      SET @from_block = @from_block + '   FROM ' + CHAR(13)
      SET @from_block = @from_block + '     content_' + CAST(@content_id AS varchar) + '_united AS c ' + CHAR(13)
      SET @from_block = @from_block + '   WHERE ' + CHAR(13)
      SET @from_block = @from_block + '     content_item_id IN (' + @selected_article_ids + ') ' + CHAR(13)
      SET @from_block = @from_block + ' ) AS cis ' + CHAR(13)
      SET @from_block = @from_block + 'ON ' + CHAR(13)
      SET @from_block = @from_block + ' c.content_item_id = cis.content_item_id ' + CHAR(13)
    END
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item AS ci with(nolock) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' users AS u ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' u.user_id = c.last_modified_by ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' status_type AS st WITH(NOLOCK) ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' st.status_type_id = COALESCE(ci.status_type_id, c.status_type_id) ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' content_item_schedule AS sch ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' sch.content_item_id = c.content_item_id ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS lu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
  SET @from_block = @from_block + 'LEFT OUTER JOIN ' + CHAR(13)
  SET @from_block = @from_block + ' USERS AS mu ' + CHAR(13)
  SET @from_block = @from_block + 'ON ' + CHAR(13)
  SET @from_block = @from_block + ' mu.USER_ID = ci.LAST_MODIFIED_BY ' + CHAR(13)

  IF (LEN(@related_from_block) > 0)
    BEGIN
      SET @from_block = @from_block + @related_from_block
    END

  SET @where_block = @filter

  if LEN(@link_filter) > 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + @link_filter
  END

  IF (LEN(@order_by) > 0)
    BEGIN
      SET @order_by_block = @order_by
    END
  ELSE
    BEGIN
      IF (@use_custom_selection = 1)
        SET @order_by_block = 'is_selected desc, CONTENT_ITEM_ID DESC'
      ELSE
        SET @order_by_block = 'CONTENT_ITEM_ID DESC'
    END

  select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)

  if @fts_is_incorrect_query = 1 OR @parent_level = 0
  BEGIN
    IF (LEN(@where_block) > 0)
      SET @where_block = @where_block + ' AND '
    SET @where_block = @where_block + '1 = 0'
  END

  EXEC qp_get_paged_data
    @select_block = @select_block,
    @from_block = @from_block,
    @where_block = @where_block,
    @order_by_block = @order_by_block,
    @count_only = @count_only,
    @total_records = @total_records OUTPUT,
    @start_row = @start_row,
    @page_size = @page_size,

    @use_security = @use_security,
    @user_id = @user_id,
    @group_id = 0,
    @start_level = @permission_level,
    @end_level = 4,
    @entity_name = 'content_item',
    @parent_entity_name = 'content',
    @parent_entity_id = @content_id

  IF @use_full_text = 1
    DROP TABLE #ft_temp

  SET NOCOUNT OFF
END

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.66', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.66 completed'

GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.67
-- Fixing Actions
-- **************************************

update BACKEND_ACTION set ENTITY_TYPE_ID = dbo.qp_entity_type_id('db') where CODE in ('edit_profile', 'update_profile', 'refresh_profile')

update backend_action set name = 'Profile Properties' where code = 'edit_profile'
delete from backend_action where code = 'save_edit_site'

update backend_action set name = 'Content Group Properties' where code = 'edit_content_group'
update backend_action set name = 'Content Properties' where code = 'edit_content'
update backend_action set name = 'Field Properties' where code = 'edit_field'
update backend_action set name = 'Article Properties' where code = 'edit_article'
update backend_action set name = 'Virtual Content Properties' where code = 'edit_virtual_content'
update backend_action set name = 'Virtual Field Properties' where code = 'edit_virtual_field'
update backend_action set name = 'Form Restore Article From Archive' where code = 'form_restore_from_archive_article'
update ACTION_TOOLBAR_BUTTON set ACTION_ID = dbo.qp_action_id('restore_from_archive_article') where ACTION_ID = dbo.qp_action_id('form_restore_from_archive_article')
delete from BACKEND_ACTION where CODE = 'form_restore_from_archive_article'
update BACKEND_ACTION set NAME = 'Archive Article Properties' where CODE = 'view_archive_article'
update BACKEND_ACTION set NAME = 'Archive Articles List', SHORT_NAME = 'Archive Articles' where CODE = 'list_archive_article'
update BACKEND_ACTION set NAME = 'Multiple Move Articles To Archive' where CODE = 'multiple_move_to_archive_article'
update BACKEND_ACTION set NAME = 'Multiple Restore Articles From Archive' where CODE = 'multiple_restore_from_archive_article'
update BACKEND_ACTION set NAME = 'Multiple Remove Archive Articles' where CODE = 'multiple_remove_archive_article'
delete from BACKEND_ACTION where CODE = 'fake_article_versions'

exec qp_update_translations 'Archive Article Properties', 'Свойства архивной статьи'
exec qp_update_translations 'Archive Articles List', 'Список архивных статей'
exec qp_update_translations 'Multiple Remove Archive Articles', 'Множественное удаление архивных статей'
exec qp_update_translations 'Multiple Restore Articles From Archive', 'Множественное восстановление архивных статей'
exec qp_update_translations 'Remove Archive Article', 'Удаление архивной статьи'
exec qp_update_translations 'Restore Article From Archive', 'Восстановление архивной статьи'

update BACKEND_ACTION set NAME = 'Multiple Remove Article Versions' where CODE = 'multiple_remove_article_version'
update BACKEND_ACTION set NAME = 'Article Versions List', SHORT_NAME = 'Article Versions' where CODE = 'list_article_version'
update BACKEND_ACTION set NAME = 'Compare Version with Current', SHORT_NAME = 'Compare with Current' where CODE = 'compare_article_version_with_current'

update ENTITY_TYPE set CANCEL_ACTION_ID = null where CODE = 'article_version'
delete from BACKEND_ACTION where CODE = 'cancel_article_version'
exec qp_update_translations 'Article Versions List', 'Список версий статей'
exec qp_update_translations 'Multiple Remove Article Versions', 'Множественное удаление версий статей'
exec qp_update_translations 'Remove Article Version', 'Удаление версии статьи'
exec qp_update_translations 'Restore Article Version', 'Восстановление версии статьи'
exec qp_update_translations 'Compare Version with Current', 'Сравнить версию с текущей'

update BACKEND_ACTION set NAME = 'Virtual Fields List', SHORT_NAME = 'Fields' where CODE = 'list_virtual_field'
update BACKEND_ACTION set NAME = 'Update Virtual Field' where CODE = 'update_virtual_field'

exec qp_update_translations 'Update Virtual Field', 'Обновление виртуального поля'
exec qp_update_translations 'Virtual Fields List', 'Список виртуальных полей'
exec qp_update_translations 'Virtual Field Properties', 'Свойства виртуального поля'

update BACKEND_ACTION set NAME = 'Virtual Articles List', SHORT_NAME = 'Articles' where CODE = 'list_virtual_article'
update BACKEND_ACTION set NAME = 'Virtual Article Properties' where CODE = 'view_virtual_article'
exec qp_update_translations 'Virtual Articles List', 'Список виртуальных статей'
exec qp_update_translations 'Virtual Article Properties', 'Свойства виртуальной статьи'

update BACKEND_ACTION set NAME = 'Virtual Contents List', SHORT_NAME = 'Virtual Contents' where CODE = 'list_virtual_content'
update BACKEND_ACTION set NAME = 'Multiple Remove Virtual Contents', SHORT_NAME = NULL where CODE = 'multiple_remove_virtual_content'
delete from BACKEND_ACTION where CODE = 'export_virtual_content'

exec qp_update_translations 'Virtual Contents List', 'Список виртуальных контентов'
exec qp_update_translations 'New Virtual Content', 'Новый виртуальный контент'
exec qp_update_translations 'Save Virtual Content', 'Сохранение виртуального контента'
exec qp_update_translations 'Virtual Content Properties', 'Свойства виртуального контента'
exec qp_update_translations 'Update Virtual Content', 'Обновление виртуального контента'
exec qp_update_translations 'Remove Virtual Content', 'Удаление виртуального контента'
exec qp_update_translations 'Multiple Remove Virtual Contents', 'Множественное удаление виртуальных контентов'

update BACKEND_ACTION set NAME = 'Create Like User Group' where CODE = 'copy_user_group'
update BACKEND_ACTION set NAME = 'User Group Properties' where CODE = 'edit_user_group'
update BACKEND_ACTION set NAME = 'User Groups List', SHORT_NAME = 'User Groups' where CODE = 'list_user_group'
update BACKEND_ACTION set NAME = 'New User Group' where CODE = 'new_user_group'
update BACKEND_ACTION set NAME = 'Remove User Group' where CODE = 'remove_user_group'
update BACKEND_ACTION set NAME = 'Save User Group' where CODE = 'save_user_group'
update BACKEND_ACTION set NAME = 'Update User Group' where code = 'update_user_group'
update BACKEND_ACTION set NAME = 'Select User Group' where code = 'select_user_group'

exec qp_update_translations 'Create Like User Group', 'Создание группы пользователей по образцу'
exec qp_update_translations 'User Group Properties', 'Свойства группы пользователей'
exec qp_update_translations 'User Groups List', 'Список групп пользователей'
exec qp_update_translations 'New User Group', 'Новая группа пользователей'
exec qp_update_translations 'Remove User Group', 'Удаление группы пользователей'
exec qp_update_translations 'Save User Group', 'Сохранение группы пользователей'
exec qp_update_translations 'Select User Group', 'Выбор группы пользователей'
exec qp_update_translations 'Update User Group', 'Обновление группы пользователей'

exec qp_update_translations 'New Content Group', 'Новая группа контентов'
exec qp_update_translations 'Content Group Properties', 'Свойства группы контентов'
exec qp_update_translations 'Save Content Group', 'Сохранение группы контентов'
exec qp_update_translations 'Update Content Group', 'Обновление группы контентов'
exec qp_update_translations 'Remove Content Group', 'Удаление группы контентов'

update BACKEND_ACTION set NAME = 'Current User Profile', SHORT_NAME = 'Your Profile' where CODE = 'edit_profile'
update BACKEND_ACTION set NAME = 'Update Current User Profile' where CODE = 'update_profile'

update BACKEND_ACTION set NAME = 'User Sessions' where CODE = 'list_successful_sessions'
update BACKEND_ACTION set NAME = 'Failed Logins' where CODE = 'list_failed_sessions'

update ENTITY_TYPE set CANCEL_ACTION_ID = null where CODE = 'db'
delete from BACKEND_ACTION where CODE = 'cancel'

exec qp_update_translations 'Failed Logins', 'Неудачные попытки входа'
exec qp_update_translations 'User Sessions', 'Пользовательские сессии'
exec qp_update_translations 'QP7: Button Trace', 'QP7: Трассировка кнопок'
exec qp_update_translations 'QP7: Removed Entities', 'QP7: Удаленные сущности'

exec qp_update_translations 'Custom Actions', 'Пользовательские действия'
exec qp_update_translations 'Custom Action', 'Пользовательское действие'
exec qp_update_translations 'Your Profile', 'Ваш профиль'
exec qp_update_translations 'Current User Profile', 'Профиль текущего пользователя'
exec qp_update_translations 'Update Current User Profile', 'Обновление профиля текущего пользователя'
exec qp_update_translations 'Action Permission Tree', 'Дерево прав доступа к действиям'

update BACKEND_ACTION set NAME = 'Custom Action Properties' where CODE = 'edit_custom_action'
update BACKEND_ACTION set NAME = 'Custom Actions List', SHORT_NAME = 'Custom Actions' where CODE = 'list_custom_action'
update BACKEND_ACTION set NAME = 'Multiple Remove Custom Actions' where CODE = 'multiple_remove_custom_action'

delete from BACKEND_ACTION where CODE = 'copy_custom_action'

exec qp_update_translations 'Update Custom Action', 'Обновление пользовательского действия'
exec qp_update_translations 'Save Custom Action', 'Сохранение пользовательского действия'
exec qp_update_translations 'Remove Custom Action', 'Удаление пользовательского действия'
exec qp_update_translations 'New Custom Action', 'Новое пользовательское действие'
exec qp_update_translations 'Multiple Remove Custom Actions', 'Множественное удаление пользовательских действий'
exec qp_update_translations 'Custom Actions List', 'Список пользовательских действий'
exec qp_update_translations 'Custom Action Properties', 'Свойства пользовательского действия'

update BACKEND_ACTION set NAME = 'Change Explicit Action Permission', SHORT_NAME = 'Change Explicit Permission' where CODE = 'change_action_permission'
update BACKEND_ACTION set NAME = 'Action Permissions List', SHORT_NAME = 'Action Permissions' where CODE = 'list_action_permission'
update BACKEND_ACTION set NAME = 'Multiple Remove Action Permissions' where CODE = 'multiple_remove_action_permission'
update BACKEND_ACTION set NAME = 'Remove Explicit Action Permission' where CODE = 'remove_action_permission_changes'
update BACKEND_ACTION set NAME = 'Update Explicit Action Permission' where CODE = 'update_action_permission_changes'

exec qp_update_translations 'Change Explicit Action Permission', 'Изменить явное право доступа к действию'
exec qp_update_translations 'Action Permission Properties', 'Свойства права доступа к действию'
exec qp_update_translations 'Action Permissions List', 'Список прав доступа к действию'
exec qp_update_translations 'Multiple Remove Action Permissions', 'Множественное удаление прав доступа к действию'
exec qp_update_translations 'New Action Permission', 'Новое право доступа к действию'
exec qp_update_translations 'Remove Action Permission', 'Удаление права доступа к действию'
exec qp_update_translations 'Remove Explicit Action Permission', 'Удаление явного права доступа к действию'
exec qp_update_translations 'Save Action Permission', 'Сохранение права доступа к действию'
exec qp_update_translations 'Update Action Permission', 'Обновление права доступа к действию'
exec qp_update_translations 'Update Explicit Action Permission', 'Обновление явного права доступа к действию'

update BACKEND_ACTION set NAME = 'Workflow Permissions List', SHORT_NAME = 'Workflow Permissions' where CODE = 'list_workflow_permission'
update BACKEND_ACTION set NAME = 'Multiple Remove Workflow Permissions' where CODE = 'multiple_remove_workflow_permission'

exec qp_update_translations 'Workflow Permissions List', 'Список прав доступа к Workflow'
exec qp_update_translations 'Multiple Remove Workflow Permissions', 'Множественное удаление прав доступа к Workflow'
exec qp_update_translations 'New Workflow Permission', 'Новое право доступа к Workflow'
exec qp_update_translations 'Remove Workflow Permission', 'Удаление права доступа к Workflow'
exec qp_update_translations 'Save Workflow Permission', 'Сохранение права доступа к Workflow'
exec qp_update_translations 'Update Workflow Permission', 'Обновление права доступа к Workflow'

update BACKEND_ACTION set NAME = 'Change Explicit Entity Type Permission', SHORT_NAME = 'Change Explicit Permission' where CODE = 'change_entity_type_permission'
update BACKEND_ACTION set NAME = 'Entity Type Permissions List', SHORT_NAME = 'Entity Type Permissions' where CODE = 'list_entity_type_permission'
update BACKEND_ACTION set NAME = 'Multiple Remove Entity Type Permissions' where CODE = 'multiple_remove_entity_type_permission'
update BACKEND_ACTION set NAME = 'Remove Explicit Entity Type Permission' where CODE = 'remove_entity_type_permission_changes'
update BACKEND_ACTION set NAME = 'Update Explicit Entity Type Permission' where CODE = 'update_entity_type_permission_changes'

exec qp_update_translations 'Change Explicit Permission', 'Изменение явного права доступа'
exec qp_update_translations 'Change Explicit Entity Type Permission', 'Изменение явного права доступа к типу сущности'
exec qp_update_translations 'Entity Type Permission Properties', 'Свойства права доступа к типу сущности'
exec qp_update_translations 'Entity Type Permissions List', 'Список прав доступа к типу сущности'
exec qp_update_translations 'Multiple Remove Entity Type Permissions', 'Множественное удаление прав доступа к типу сущности'
exec qp_update_translations 'New Entity Type Permission', 'Новое право доступа к типу сущности'
exec qp_update_translations 'Remove Entity Type Permission', 'Удаление права доступа к типу сущности'
exec qp_update_translations 'Remove Explicit Entity Type Permission', 'Удаление явного права доступа к типу сущности'
exec qp_update_translations 'Save Entity Type Permission', 'Сохранение права доступа к типу сущности'
exec qp_update_translations 'Update Entity Type Permission', 'Обновление права доступа к типу сущности'
exec qp_update_translations 'Update Explicit Entity Type Permission', 'Обновление явного права доступа к типу сущности'

delete from BACKEND_ACTION where CODE = 'down_field'
delete from BACKEND_ACTION where CODE = 'up_field'

update BACKEND_ACTION set NAME = 'Fields List', SHORT_NAME = 'Fields' where CODE = 'list_field'
update BACKEND_ACTION set NAME = 'Multiple Remove Fields' where CODE = 'multiple_remove_field'

exec qp_update_translations 'Fields List', 'Список полей'
exec qp_update_translations 'Multiple Remove Fields', 'Множественное удаление полей'
exec qp_update_translations 'New Field', 'Новое поле'
exec qp_update_translations 'Remove Field', 'Удаление поля'
exec qp_update_translations 'Save Field', 'Создание поля'
exec qp_update_translations 'Update Field', 'Обновление поля'
exec qp_update_translations 'Field Properties', 'Свойства поля'

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.67', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.67 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.1.68
-- Missed translations
-- **************************************
exec qp_update_translations 'Do you really want to remove this notification?', 'Вы действительно хотите удалить это уведомление?'
exec qp_update_translations 'Do you really want to remove this visual editor plugin?', 'Вы действительно хотите удалить этот плагин визуального редактора?'
exec qp_update_translations 'Do you really want to remove this action?', 'Вы действительно хотите удалить это пользовательское действие?'
GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.68', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.68 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.1.69
-- Fixing Actions (part 2)
-- **************************************

update context_menu_item set NAME = 'Remove' where action_id = dbo.qp_action_id('remove_field')
update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove all explicit permissions?' where code = 'remove_all_child_content_permission'

exec qp_update_translations 'Do you really want to remove selected permissions?', 'Вы действительно хотите удалить выбранные права доступа?';
exec qp_update_translations 'Do you really want to remove all explicit permissions?', 'Вы действительно хотите удалить все явные права доступа?';
exec qp_update_translations 'Do you really want to remove this permission?', 'Вы действительно хотите удалить выбранное право доступа?';

update backend_action set name = 'Visual Editor Plugins List', short_name = 'Visual Editor Plugins' where CODE = 'list_visual_editor_plugin'
update ENTITY_TYPE set ACTION_PERMISSION_ENABLE = 1 where CODE = 'visual_editor_plugin'
update BACKEND_ACTION set SHORT_NAME = 'Permissions' where CODE in
(
'list_site_permission',
'list_content_permission',
'list_article_permission',
'list_workflow_permission',
'list_site_folder_permission',
'list_entity_type_permission',
'list_action_permission'
)

exec qp_update_translations 'Visual Editor Plugin', 'Плагин визуального редактора'

exec qp_update_translations 'Remove Visual Editor Plugin', 'Удаление плагина визуального редактора'
exec qp_update_translations 'Save Visual Editor Plugin', 'Сохранение плагина визуального редактора'
exec qp_update_translations 'Update Visual Editor Plugin', 'Обновление плагина визуального редактора'
exec qp_update_translations 'New Visual Editor Plugin', 'Новый плагин визуального редактора'
exec qp_update_translations 'Visual Editor Plugin Properties' , 'Свойства плагина визуального редактора'
exec qp_update_translations 'Visual Editor Plugins List' , 'Список плагинов визуального редактора'

update backend_action set name = 'Contents List', short_name = 'Contents' where CODE = 'list_content'
update backend_action set name = 'Multiple Remove Contents' where CODE = 'multiple_remove_content'
update backend_action set name = 'Clear Content' where CODE = 'clear_content'
update backend_action set name = 'Content Library in Popup Window' where CODE = 'popup_content_library'
update backend_action set name = 'Multiple Select Contents For UNION' where CODE = 'multiple_select_contents_for_union'

exec qp_update_translations 'Contents List' , 'Список контентов'
exec qp_update_translations 'Content Properties' , 'Свойства контента'
exec qp_update_translations 'Save Content' , 'Сохранение контента'
exec qp_update_translations 'Update Content' , 'Обновление контента'
exec qp_update_translations 'Remove Content' , 'Удаление контента'
exec qp_update_translations 'Multiple Remove Contents' , 'Множественное удаление контентов'
exec qp_update_translations 'Create Like Content' , 'Создание контента по образцу'
exec qp_update_translations 'Popup Content Library' , 'Библиотека сайта в окне'
exec qp_update_translations 'Content Library in Popup Window' , 'Библиотека контента в popup-окне'
exec qp_update_translations 'Multiple Select Contents For UNION' , 'Множественный выбор контентов для UNION'
exec qp_update_translations 'Multiple Select Contents' , 'Множественный выбор контентов'
exec qp_update_translations 'Clear Content' , 'Очистка контента'
exec qp_update_translations 'Clear' , 'Очистить'
exec qp_update_translations 'Enable Articles Permissions' , 'Включение прав доступа к статьям'

delete from BACKEND_ACTION where CODE in ('export_content', 'import_content')

update backend_action set name = 'Sites List', short_name = 'Sites' where CODE = 'list_site'
update backend_action set name = 'Multiple Remove Sites' where CODE = 'multiple_remove_site'
update backend_action set name = 'Site Library in Popup Window' where CODE = 'popup_site_library'
update backend_action set name = 'Cancel Site Editing' where CODE = 'cancel_site'
update backend_action set name = 'Assemble Site Contents' where CODE = 'assemble_contents'


exec qp_update_translations 'Cancel Site Editing', 'Отмена редактирования сайта'
exec qp_update_translations 'Save Site', 'Сохранение сайта'
exec qp_update_translations 'Update Site', 'Обновление сайта'
exec qp_update_translations 'Remove Site', 'Удаление сайта'
exec qp_update_translations 'Multiple Remove Sites', 'Множественное удаление сайтов'
exec qp_update_translations 'Create Like Site', 'Создание сайта по образцу'
exec qp_update_translations 'Assemble Site', 'Сборка сайта'
exec qp_update_translations 'Assemble Site Contents', 'Сборка контентов сайта'
exec qp_update_translations 'Capture Lock Site', 'Перехват блокировки сайта'
exec qp_update_translations 'Site Library in Popup Window', 'Библиотека сайта в popup-окне'
exec qp_update_translations 'Multiple Select Sites', 'Множественный выбор сайтов'

update backend_action set name = 'Users List', short_name = 'Users' where CODE = 'list_user'
update backend_action set name = 'Select User' where CODE = 'select_user'

exec qp_update_translations 'Users List', 'Список пользователей'
exec qp_update_translations 'Multiple Select Users', 'Множественный выбор пользователей'
exec qp_update_translations 'Save User', 'Сохранение пользователя'
exec qp_update_translations 'Create Like User', 'Создание пользователя по образцу'
exec qp_update_translations 'User Properties', 'Свойства пользователя'
exec qp_update_translations 'Update User', 'Обновление пользователя'
exec qp_update_translations 'Remove User', 'Удаление пользователя'
exec qp_update_translations 'Select User', 'Выбор пользователя'


exec qp_update_translations 'Save Site Folder', 'Сохранение папки сайта'
exec qp_update_translations 'Update Site Folder', 'Обновление папки сайта'
exec qp_update_translations 'Site Folder Properties', 'Свойства папки сайта'
exec qp_update_translations 'Remove Site Folder', 'Удаление папки сайта'
exec qp_update_translations 'Save Content Folder', 'Сохранение папки контента'
exec qp_update_translations 'Update Content Folder', 'Обновление папки контента'
exec qp_update_translations 'Content Folder Properties', 'Свойства папки контента'
exec qp_update_translations 'Remove Content Folder', 'Удаление папки контента'

update backend_action set name = 'Multiple Remove Content Files' where CODE = 'multiple_remove_content_file'
update backend_action set name = 'Multiple Remove Site Files' where CODE = 'multiple_remove_site_file'

exec qp_update_translations 'Multiple Remove Site Files', 'Множественное удаление файлов сайта'
exec qp_update_translations 'Remove Site File', 'Удаление файла сайта'
exec qp_update_translations 'Preview Site File', 'Просмотр файла сайта'
exec qp_update_translations 'Download Site File', 'Скачать файл сайта'
exec qp_update_translations 'Site File Properties', 'Свойства файла сайта'
exec qp_update_translations 'Update Site File', 'Обновление файла сайта'
exec qp_update_translations 'Multiple Remove Content Files', 'Множественное удаление файлов контента'
exec qp_update_translations 'Remove Content File', 'Удаление файла контента'
exec qp_update_translations 'Preview Content File', 'Просмотр файла контента'
exec qp_update_translations 'Download Content File', 'Скачать файл контента'
exec qp_update_translations 'Content File Properties', 'Свойства файла контента'
exec qp_update_translations 'Update Content File', 'Обновление файла контента'

update backend_action set name = 'Notifications List', short_name = 'Notifications' where CODE = 'list_notification'
update backend_action set name = 'Multiple Assemble Notifications' where CODE = 'multiple_assemble_notification'
update backend_action set name = 'Multiple Remove Notifications' where CODE = 'multiple_remove_notification'
update backend_action set name = 'Unbind Notification from Workflow' where CODE = 'unbind_notification'
update backend_action set name = 'Notification Format Properties' where CODE = 'edit_notification_template_format'
update backend_action set name = 'Update Notification Format' where CODE = 'update_notification_template_format'
update backend_action set name = 'Select User' where CODE = 'select_user'


exec qp_update_translations 'Update Notification', 'Обновление уведомления'
exec qp_update_translations 'Update Notification Format', 'Обновление формата уведомления'
exec qp_update_translations 'Unbind Notification from Workflow', 'Отвязать уведомление от workflow'
exec qp_update_translations 'Save Notification', 'Сохранение уведомления'
exec qp_update_translations 'Remove Notification', 'Удаление уведомления'
exec qp_update_translations 'New Notification', 'Новое уведомление'
exec qp_update_translations 'Multiple Remove Notifications', 'Множественное удаление уведомлений'
exec qp_update_translations 'Multiple Assemble Notifications', 'Множественное сборка уведомлений'
exec qp_update_translations 'Notifications List', 'Список уведомлений'
exec qp_update_translations 'Notification Format Properties', 'Свойства формата уведомления'
exec qp_update_translations 'Notification Properties', 'Свойства уведомления'
exec qp_update_translations 'Assemble Notification', 'Сборка уведомления'

update backend_action set name = 'Articles List', short_name = 'Articles' where CODE = 'list_article'
update backend_action set name = 'Multiple Select Articles' where CODE = 'multiple_select_article'
update backend_action set name = 'Multiple Remove Articles' where CODE = 'multiple_remove_article'
update backend_action set name = 'Multiple Move Articles To Archive' where CODE = 'multiple_move_to_archive_article'
update backend_action set name = 'Cancel Article Editing' where CODE = 'cancel_article'

exec qp_update_translations 'Save and Up', 'Сохранить и вернуться'

exec qp_update_translations 'Articles List', 'Список статей'
exec qp_update_translations 'Select Article', 'Выбор статьи'
exec qp_update_translations 'Multiple Select Articles', 'Множественный выбор статей'
exec qp_update_translations 'Cancel Article Editing', 'Отмена редактирования статьи'
exec qp_update_translations 'New Article', 'Новая статья'
exec qp_update_translations 'Save Article', 'Сохранение статьи'
exec qp_update_translations 'Article Properties', 'Свойства статьи'
exec qp_update_translations 'Update Article', 'Обновление статьи'
exec qp_update_translations 'Remove Article', 'Удаление статьи'
exec qp_update_translations 'Multiple Remove Articles', 'Множественное удаление статей'
exec qp_update_translations 'Create Like Article', 'Создание статьи по образцу'
exec qp_update_translations 'Move Article To Archive', 'Перенос статьи в архив'
exec qp_update_translations 'Capture Lock Article', 'Перехват блокировки статьи'
exec qp_update_translations 'Multiple Move Articles To Archive', 'Множественный перенос статей в архив'
exec qp_update_translations 'Save Article and Up', 'Сохранение статьи и возврат'
exec qp_update_translations 'Update Article and Up', 'Обновление статьи и возврат'

update backend_action set name = 'Site Permissions List' where CODE = 'list_site_permission'
update backend_action set name = 'Content Permissions List' where CODE = 'list_content_permission'
update backend_action set name = 'Article Permissions List' where CODE = 'list_article_permission'
update backend_action set name = 'Site Folder Permissions List' where CODE = 'list_site_folder_permission'

update backend_action set name = 'Multiple Remove Site Permissions' where CODE = 'multiple_remove_site_permission'
update backend_action set name = 'Multiple Remove Site Folder Permissions' where CODE = 'multiple_remove_site_folder_permission'
update backend_action set name = 'Multiple Remove Article Permissions' where CODE = 'multiple_remove_article_permission'
update backend_action set name = 'Multiple Remove Content Permissions' where CODE = 'multiple_remove_content_permission'

exec qp_update_translations 'Site Permissions List', 'Список прав доступа к сайту'
exec qp_update_translations 'Content Permissions List', 'Список прав доступа к контенту'
exec qp_update_translations 'Article Permissions List', 'Список прав доступа к статье'
exec qp_update_translations 'Site Folder Permissions List', 'Список прав доступа к папке сайта'
exec qp_update_translations 'Multiple Remove Site Permissions', 'Множественное удаление прав доступа к сайту'
exec qp_update_translations 'Multiple Remove Content Permissions', 'Множественное удаление прав доступа к контенту'
exec qp_update_translations 'Multiple Remove Article Permissions', 'Множественное удаление прав доступа к статье'
exec qp_update_translations 'Multiple Remove Site Folder Permissions', 'Множественное удаление прав доступа к папке сайта'

exec qp_update_translations 'Update Site Permission', 'Обновление права доступа к сайту'
exec qp_update_translations 'Remove Site Permission', 'Удаление права доступа к сайту'
exec qp_update_translations 'New Site Permission', 'Новое право доступа к сайту'
exec qp_update_translations 'Save Site Permission', 'Сохранение права доступа к сайту'
exec qp_update_translations 'Site Permission Properties', 'Свойства права доступа к сайту'

exec qp_update_translations 'Update Site Folder Permission', 'Обновление права доступа к папке сайта'
exec qp_update_translations 'Remove Site Folder Permission', 'Удаление права доступа к папке сайта'
exec qp_update_translations 'New Site Folder Permission', 'Новое право доступа к папке сайта'
exec qp_update_translations 'Save Site Folder Permission', 'Сохранение права доступа к папке сайта'
exec qp_update_translations 'Site Folder Permission Properties', 'Свойства права доступа к папке сайта'

exec qp_update_translations 'Update Content Permission', 'Обновление права доступа к контенту'
exec qp_update_translations 'Remove Content Permission', 'Удаление права доступа к контенту'
exec qp_update_translations 'New Content Permission', 'Новое право доступа к контенту'
exec qp_update_translations 'Save Content Permission', 'Сохранение права доступа к контенту'
exec qp_update_translations 'Content Permission Properties', 'Свойства права доступа к контенту'

exec qp_update_translations 'Update Article Permission', 'Обновление права доступа к статье'
exec qp_update_translations 'Remove Article Permission', 'Удаление права доступа к статье'
exec qp_update_translations 'New Article Permission', 'Новое право доступа к статье'
exec qp_update_translations 'Save Article Permission', 'Сохранение права доступа к статье'
exec qp_update_translations 'Article Permission Properties', 'Свойства права доступа к статье'


update backend_action set name = 'Explicit Child Contents Permissions List', short_name = 'Child Contents Permissions' where CODE = 'list_child_content_permission'
update backend_action set name = 'Child Content Permissions List', short_name = 'Permissions' where CODE = 'list_content_permission_for_child'

update backend_action set name = 'Remove Explicit Child Content Permission' where CODE = 'remove_child_content_permission'
update backend_action set name = 'Change Explicit Child Content Permission' where CODE = 'change_child_content_permission'
update backend_action set name = 'Multiple Remove Explicit Child Contents Permissions' where CODE = 'multiple_remove_child_content_permission'
update backend_action set name = 'Multiple Change Explicit Child Contents Permissions' where CODE = 'multiple_change_child_content_permission'
update backend_action set name = 'Remove All Explicit Child Contents Permissions' where CODE = 'remove_all_child_content_permission'
update backend_action set name = 'Change All Explicit Child Contents Permissions' where CODE = 'change_all_child_content_permission'
update backend_action set name = 'Save Explicit Child Content Permission' where CODE = 'save_child_content_permission'

exec qp_update_translations 'Explicit Child Contents Permissions List', 'Список явных прав доступа к дочерним контентам'
exec qp_update_translations 'Child Content Permissions List', 'Список прав доступа к дочернему контенту'
exec qp_update_translations 'Remove Explicit Child Content Permission', 'Удаление явного права доступа к дочернему контенту'
exec qp_update_translations 'Change Explicit Child Content Permission', 'Изменение явного права доступа к дочернему контенту'
exec qp_update_translations 'Multiple Remove Explicit Child Contents Permissions', 'Множественное удаление явных прав доступа к дочерним контентам'
exec qp_update_translations 'Multiple Change Explicit Child Contents Permissions', 'Множественное изменение явных прав доступа к дочерним контентам'
exec qp_update_translations 'Remove All Explicit Child Contents Permissions', 'Удаление всех явных прав доступа к дочерним контентам'
exec qp_update_translations 'Change All Explicit Child Contents Permissions', 'Изменение всех явных прав доступа к дочерним контентам'
exec qp_update_translations 'Save Explicit Child Content Permission', 'Сохранение явного права доступа к дочернему контенту'

update backend_action set name = 'Explicit Child Articles Permissions List', short_name = 'Child Articles Permissions' where CODE = 'list_child_article_permission'
update backend_action set name = 'Child Article Permissions List', short_name = 'Permissions' where CODE = 'list_article_permission_for_child'

update backend_action set name = 'Remove Explicit Child Article Permission' where CODE = 'remove_child_article_permission'
update backend_action set name = 'Change Explicit Child Article Permission' where CODE = 'change_child_article_permission'
update backend_action set name = 'Multiple Remove Explicit Child Articles Permissions' where CODE = 'multiple_remove_child_article_permission'
update backend_action set name = 'Multiple Change Explicit Child Articles Permissions' where CODE = 'multiple_change_child_article_permission'
update backend_action set name = 'Remove All Explicit Child Articles Permissions' where CODE = 'remove_all_child_article_permission'
update backend_action set name = 'Change All Explicit Child Articles Permissions' where CODE = 'change_all_child_article_permission'
update backend_action set name = 'Save Explicit Child Article Permission' where CODE = 'save_child_article_permission'

exec qp_update_translations 'Explicit Child Articles Permissions List', 'Список явных прав доступа к дочерним статьям'
exec qp_update_translations 'Child Article Permissions List', 'Список прав доступа к дочерней статье'
exec qp_update_translations 'Remove Explicit Child Article Permission', 'Удаление явного права доступа к дочерней статье'
exec qp_update_translations 'Change Explicit Child Article Permission', 'Изменение явного права доступа к дочерней статье'
exec qp_update_translations 'Multiple Remove Explicit Child Articles Permissions', 'Множественное удаление явных прав доступа к дочерним статьям'
exec qp_update_translations 'Multiple Change Explicit Child Articles Permissions', 'Множественное изменение явных прав доступа к дочерним статьям'
exec qp_update_translations 'Remove All Explicit Child Articles Permissions', 'Удаление всех явных прав доступа к дочерним статьям'
exec qp_update_translations 'Change All Explicit Child Articles Permissions', 'Изменение всех явных прав доступа к дочерним статьям'
exec qp_update_translations 'Save Explicit Child Article Permission', 'Сохранение явного права доступа к дочерней статье'

exec qp_update_translations 'Child Contents Permissions', 'Права доступа к дочерним контентам'
exec qp_update_translations 'Child Articles Permissions', 'Права доступа к дочерним статьям'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.69', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.69 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.1.70
-- Fix: Convert Tab Access To Action permission
-- **************************************
exec qp_drop_existing 'qp_convert_tab_access_to_action_access', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_convert_tab_access_to_action_access]
AS
BEGIN
  BEGIN TRY
    BEGIN TRAN

    truncate TABLE ENTITY_TYPE_ACCESS
    truncate TABLE [ACTION_ACCESS]

    CREATE TABLE #TABS_FULL_ACCESS
    (
      ID int identity,
      TAB_ID int,
      PARENT_TAB_ID int,
      [LEVEL] int,
      [USER_ID] int,
      [GROUP_ID] int,
      PERMISSION_LEVEL_ID int
    );

    CREATE TABLE #EXPAND_TABS_ACCESS
    (
      TAB_ID int,
      [USER_ID] int,
      [GROUP_ID] int,
      PERMISSION_LEVEL_ID int
    );

    with TAB_TREE(TAB_ID, PARENT_TAB_ID, [LEVEL]) AS
    (
      select TAB_ID, PARENT_TAB_ID, 0 from TABS where PARENT_TAB_ID is null
      union all
      select T.TAB_ID, T.PARENT_TAB_ID, TR.[LEVEL] + 1 from TABS T
      join TAB_TREE TR ON T.PARENT_TAB_ID = TR.TAB_ID
    )
    insert into #TABS_FULL_ACCESS
    select TR.TAB_ID, TR.PARENT_TAB_ID, TR.[LEVEL], TA.[USER_ID], TA.[GROUP_ID], TA.PERMISSION_LEVEL_ID
    from TAB_TREE TR
    LEFT JOIN TAB_ACCESS TA ON TA.TAB_ID = TR.TAB_ID
    order by TR.TAB_ID, TR.[LEVEL]

    declare @tmp_count int, @tmp_i int;
    declare @TAB_ID int,
        @PARENT_TAB_ID int,
        @USER_ID int,
        @GROUP_ID int,
        @PERMISSION_LEVEL_ID int,
        @DENY_PERMISSION_LEVEL_ID int;

    select @DENY_PERMISSION_LEVEL_ID = PERMISSION_LEVEL_ID from PERMISSION_LEVEL where PERMISSION_LEVEL = 0;
    set @tmp_i = 1;
    select @tmp_count = COUNT(*) from #TABS_FULL_ACCESS;

    WHILE(@tmp_i <= @tmp_count) BEGIN
      select @TAB_ID = TAB_ID, @PARENT_TAB_ID = PARENT_TAB_ID, @USER_ID = [USER_ID], @GROUP_ID = GROUP_ID, @PERMISSION_LEVEL_ID = PERMISSION_LEVEL_ID
      from #TABS_FULL_ACCESS where ID = @tmp_i;

      IF @PERMISSION_LEVEL_ID is null
      BEGIN
        set @PARENT_TAB_ID = @TAB_ID;
        set @PERMISSION_LEVEL_ID = @PERMISSION_LEVEL_ID;
        while(1 = 1) BEGIN
          IF NOT EXISTS(select * from #TABS_FULL_ACCESS where TAB_ID = @PARENT_TAB_ID)
            BREAK;

          select @PARENT_TAB_ID = PARENT_TAB_ID, @PERMISSION_LEVEL_ID = PERMISSION_LEVEL_ID, @USER_ID = [USER_ID], @GROUP_ID = GROUP_ID
          from #TABS_FULL_ACCESS
          where TAB_ID = @PARENT_TAB_ID;
          if(@PERMISSION_LEVEL_ID is not null)
            BREAK;
        END;
      END
      IF @PERMISSION_LEVEL_ID is not null BEGIN
        insert into #EXPAND_TABS_ACCESS(TAB_ID, [USER_ID], GROUP_ID, PERMISSION_LEVEL_ID)
        values(@TAB_ID, @USER_ID, @GROUP_ID, @PERMISSION_LEVEL_ID);
      END
      ELSE BEGIN
        insert into #EXPAND_TABS_ACCESS(TAB_ID, [USER_ID], GROUP_ID, PERMISSION_LEVEL_ID)
        select @TAB_ID, [USER_ID], null, @DENY_PERMISSION_LEVEL_ID from USERS where [USER_ID] <> 1;

        insert into #EXPAND_TABS_ACCESS(TAB_ID, [USER_ID], GROUP_ID, PERMISSION_LEVEL_ID)
        select @TAB_ID, NULL, GROUP_ID, @DENY_PERMISSION_LEVEL_ID from USER_GROUP where GROUP_ID <> 1;
      END

      set @tmp_i = @tmp_i + 1;
    END;

    insert into ENTITY_TYPE_ACCESS(ENTITY_TYPE_ID, [USER_ID], [GROUP_ID], [PERMISSION_LEVEL_ID], CREATED, MODIFIED, LAST_MODIFIED_BY)
      select ET.ID ENTITY_TYPE_ID, TA.[USER_ID], TA.[GROUP_ID], TA.PERMISSION_LEVEL_ID, GETDATE(), GETDATE(), 1
      from #EXPAND_TABS_ACCESS TA
      JOIN ENTITY_TYPE ET ON ET.TAB_ID = TA.TAB_ID

    INSERT INTO [ACTION_ACCESS]([ACTION_ID],[USER_ID],[GROUP_ID],[PERMISSION_LEVEL_ID],[CREATED],[MODIFIED],[LAST_MODIFIED_BY])
      select AC.ID AS [ACTION_ID], TA.[USER_ID], TA.GROUP_ID, TA.PERMISSION_LEVEL_ID, GETDATE(), GETDATE(), 1
      from BACKEND_ACTION AC
      JOIN #EXPAND_TABS_ACCESS TA ON TA.TAB_ID = AC.TAB_ID

    -- удалить то, что может быть унаследовано из ENTITY_TYPE_ACCESS без изменений
    delete from ACTION_ACCESS
    where ACTION_ACCESS_ID in
    (
      select ACTION_ACCESS_ID from
      (
        select ISNULL(AA.[USER_ID], -1) AS [USER_ID], ISNULL(AA.GROUP_ID, -1) AS GROUP_ID, AC.TAB_ID, AA.PERMISSION_LEVEL_ID, AC.ENTITY_TYPE_ID, AA.ACTION_ACCESS_ID
        from ACTION_ACCESS AA
        join BACKEND_ACTION AC ON AA.ACTION_ID = AC.ID
      ) AS T1
      JOIN
      (
        select ISNULL(EA.[USER_ID], -1) AS [USER_ID], ISNULL(EA.[GROUP_ID], -1) AS GROUP_ID, ET.TAB_ID, EA.PERMISSION_LEVEL_ID, EA.ENTITY_TYPE_ID
        from ENTITY_TYPE_ACCESS EA
        JOIN ENTITY_TYPE ET ON EA.ENTITY_TYPE_ID = ET.ID
      ) AS T2 ON T1.[USER_ID] = T2.[USER_ID] AND
             T1.GROUP_ID = T2.GROUP_ID AND
             T1.TAB_ID = T2.TAB_ID AND
             T1.PERMISSION_LEVEL_ID = T2.PERMISSION_LEVEL_ID AND
             T1.ENTITY_TYPE_ID = T2.ENTITY_TYPE_ID
    )

    COMMIT TRAN
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION;

    DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int;
    SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY();
    RAISERROR(@ErrMsg, @ErrSeverity, 1);
  END CATCH
END
GO

exec [dbo].[qp_convert_tab_access_to_action_access]
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.1.70', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.1.70 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.0
-- Release
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.0', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.0 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.3.1
-- VE Styles toolbars
-- **************************************
insert into ENTITY_TYPE(NAME, CODE, [ORDER], PARENT_ID, SOURCE, ID_FIELD, TITLE_FIELD)
values ('Visual Editor Style', 'visual_editor_style', 6, dbo.qp_entity_type_id('db'), 'VE_STYLE', 'ID', 'NAME')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Visual Editor Styles', 'list_visual_editor_style', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('visual_editor_style'), '~/VisualEditorStyle/Index/',  1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Visual Editor Style', 'new_visual_editor_style', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('visual_editor_style'), '~/VisualEditorStyle/New/', 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Visual Editor Style Properties', 'Properties', 'edit_visual_editor_style', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('visual_editor_style'), '~/VisualEditorStyle/Properties/', 1)


update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_visual_editor_style'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_visual_editor_style'),
  [DISABLED] = 0
where CODE = 'visual_editor_style'
GO
--
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Visual Editor Style', 'update_visual_editor_style', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('visual_editor_style'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Refresh Visual Editor Style', 'refresh_visual_editor_style', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('visual_editor_style'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Visual Editor Style', 'remove_visual_editor_style', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('visual_editor_style'), 'Do you really want to remove this visual editor style?', '~/VisualEditorStyle/Remove/', 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_visual_editor_style'), dbo.qp_action_id('update_visual_editor_style'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_visual_editor_style'), dbo.qp_action_id('remove_visual_editor_style'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_visual_editor_style'), dbo.qp_action_id('refresh_visual_editor_style'), 'Refresh', 'refresh.gif', NULL, 3, 1)


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Visual Editor Style', 'save_visual_editor_style', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('visual_editor_style'), 0)


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_visual_editor_style'), dbo.qp_action_id('save_visual_editor_style'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_visual_editor_style'), dbo.qp_action_id('refresh_visual_editor_style'), 'Refresh', 'refresh.gif', NULL, 2, 1)



insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_visual_editor_style'), dbo.qp_action_id('edit_visual_editor_style'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_visual_editor_style'), dbo.qp_action_id('remove_visual_editor_style'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_visual_editor_style'), dbo.qp_action_id('refresh_visual_editor_style'), 'Refresh', 'refresh.gif', NULL, 3, 0)

exec qp_update_translations 'Visual Editor Styles', 'Стили визуального редактора';
exec qp_update_translations 'New Visual Editor Style', 'Создать новый стиль виз. редактора';
exec qp_update_translations 'Visual Editor Style', 'Стиль визуального редактора';
GO

if not exists (select * from context_menu where code = 'visual_editor_styles')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('visual_editor_styles')
END
GO

if not exists (select * from context_menu where code = 'visual_editor_style')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('visual_editor_style')
END
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Visual Editor Styles', 'refresh_visual_editor_styles', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('visual_editor_style'), 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('visual_editor_styles'), dbo.qp_action_id('refresh_visual_editor_styles'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('visual_editor_styles'), dbo.qp_action_id('new_visual_editor_style'), 'New Visual Editor Style', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('visual_editor_style'), dbo.qp_action_id('remove_visual_editor_style'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('visual_editor_style'), dbo.qp_action_id('edit_visual_editor_style'), 'Properties', 3, 'properties.gif')
GO

update ENTITY_TYPE
set

  CONTEXT_MENU_ID = dbo.qp_context_menu_id('visual_editor_style'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('visual_editor_styles')
where CODE = 'visual_editor_style'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.1', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.1 completed'
GO

--< **************************************
-- Kirill Zakirov
-- version 7.9.3.2
-- Statuses, workflows
-- **************************************
update Entity_type set DISABLED = 0
WHERE CODE = 'workflow'

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Workflows', 'list_workflow', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('workflow'), '~/Workflow/Index/',  1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Workflow', 'new_workflow', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('workflow'), '~/Workflow/New/', 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Workflow Properties', 'Properties', 'edit_workflow', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('workflow'), '~/Workflow/Properties/', 1)

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_workflow'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_workflow')
where code = 'workflow'
GO

update workflow set LAST_MODIFIED_BY = 1 from workflow w where not exists (select * from USERS u where u.USER_ID = w.LAST_MODIFIED_BY)
GO

ALTER TABLE [dbo].[WORKFLOW]  WITH CHECK ADD CONSTRAINT [FK_VE_WORKFLOW_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO

if not exists (select * From information_schema.columns where table_name = 'STATUS_TYPE' and column_name = 'BUILT_IN')
  begin
  ALTER TABLE STATUS_TYPE  ADD
  BUILT_IN bit NOT NULL CONSTRAINT DF_STATUS_TYPE_BUILT_IN DEFAULT 0
  end
GO

update Entity_type set DISABLED = 0,
code = 'status_type'
WHERE CODE = 'status'

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Status Types', 'list_status_type', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('status_type'), '~/StatusType/Index/',  1, dbo.qp_view_id('list'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Status Type', 'new_status_type', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('status_type'), '~/StatusType/New/', 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Status Type Properties', 'Properties', 'edit_status_type', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('status_type'), '~/StatusType/Properties/', 1)

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_status_type'),
  DEFAULT_ACTION_ID = dbo.qp_action_id('edit_status_type')
where code = 'status_type'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.2', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.2 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.3.3
-- STatuses actions, toolbars etc
-- **************************************


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Status Type', 'update_status_type', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('status_type'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Refresh Status Type', 'refresh_status_type', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('status_type'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Status Type', 'remove_status_type', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('status_type'), 'Do you really want to remove this status?', '~/StatusType/Remove/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Status Type', 'save_status_type', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('status_type'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Status Types', 'refresh_status_types', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('status_type'), 1)
GO
--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_status_type'), dbo.qp_action_id('update_status_type'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_status_type'), dbo.qp_action_id('remove_status_type'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_status_type'), dbo.qp_action_id('refresh_status_type'), 'Refresh', 'refresh.gif', NULL, 3, 1)

--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_status_type'), dbo.qp_action_id('save_status_type'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_status_type'), dbo.qp_action_id('refresh_status_type'), 'Refresh', 'refresh.gif', NULL, 2, 1)

--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_status_type'), dbo.qp_action_id('edit_status_type'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_status_type'), dbo.qp_action_id('remove_status_type'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_status_type'), dbo.qp_action_id('refresh_status_type'), 'Refresh', 'refresh.gif', NULL, 3, 0)

--
exec qp_update_translations 'Status Types', 'Статусы';
exec qp_update_translations 'New Status Type', 'Создать новый статус';
exec qp_update_translations 'Status Type', 'Статус';
GO
--

if not exists (select * from context_menu where code = 'status_types')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('status_types')
END
GO

if not exists (select * from context_menu where code = 'status_type')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('status_type')
END
GO
--

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('status_types'), dbo.qp_action_id('refresh_status_types'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('status_types'), dbo.qp_action_id('new_status_type'), 'New Status Type', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('status_type'), dbo.qp_action_id('remove_status_type'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('status_type'), dbo.qp_action_id('edit_status_type'), 'Properties', 3, 'properties.gif')
GO

update ENTITY_TYPE
set

  CONTEXT_MENU_ID = dbo.qp_context_menu_id('status_type'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('status_types')
where CODE = 'status_type'




INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.3', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.3 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.3.4
-- Workflow actions, toolbars etc
-- **************************************


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Workflow', 'update_workflow', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('workflow'),0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Refresh Workflow', 'refresh_workflow', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('workflow'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Workflow', 'remove_workflow', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('workflow'), 'Do you really want to remove this workflow?', '~/Workflow/Remove/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Workflow', 'save_workflow', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('workflow'), 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Workflows', 'refresh_workflows', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('workflow'), 1)
GO
--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_workflow'), dbo.qp_action_id('update_workflow'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_workflow'), dbo.qp_action_id('remove_workflow'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_workflow'), dbo.qp_action_id('refresh_workflow'), 'Refresh', 'refresh.gif', NULL, 3, 1)

--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_workflow'), dbo.qp_action_id('save_workflow'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_workflow'), dbo.qp_action_id('refresh_workflow'), 'Refresh', 'refresh.gif', NULL, 2, 1)

--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_workflow'), dbo.qp_action_id('edit_workflow'), 'Properties', 'properties.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_workflow'), dbo.qp_action_id('remove_workflow'), 'Remove', 'delete.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_workflow'), dbo.qp_action_id('refresh_workflow'), 'Refresh', 'refresh.gif', NULL, 3, 0)

--

exec qp_update_translations 'New Workflow', 'Создать новый Workflow';
GO
--

if not exists (select * from context_menu where code = 'workflows')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('workflows')
END
GO

if not exists (select * from context_menu where code = 'workflow')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('workflow')
END
GO
--

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('workflows'), dbo.qp_action_id('refresh_workflows'), 'Refresh', 1, 'refresh.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('workflows'), dbo.qp_action_id('new_workflow'), 'New Workflow', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('workflow'), dbo.qp_action_id('remove_workflow'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('workflow'), dbo.qp_action_id('edit_workflow'), 'Properties', 3, 'properties.gif')
GO

update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('workflow'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('workflows')
where CODE = 'workflow'

update STATUS_TYPE
 Set BUILT_IN = 1
 where STATUS_TYPE_NAME = 'None' or STATUS_TYPE_NAME = 'Created' or STATUS_TYPE_NAME = 'Approved' or STATUS_TYPE_NAME = 'Published'
 GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.4', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.4 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.5
-- Tree for Virtual Contents
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'USE_FOR_TREE' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE ADD USE_FOR_TREE BIT NOT NULL CONSTRAINT DF_USE_FOR_TREE DEFAULT 0
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'AUTO_CHECK_CHILDREN' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE ADD AUTO_CHECK_CHILDREN BIT NOT NULL CONSTRAINT DF_AUTO_CHECK_CHILDREN DEFAULT 0
GO

UPDATE CONTENT SET LAST_MODIFIED_BY = 1 WHERE LAST_MODIFIED_BY IS NULL
ALTER TABLE CONTENT ALTER COLUMN LAST_MODIFIED_BY NUMERIC(18,0) NOT NULL

UPDATE WORKFLOW SET LAST_MODIFIED_BY = 1 WHERE LAST_MODIFIED_BY IS NULL
ALTER TABLE WORKFLOW ALTER COLUMN LAST_MODIFIED_BY NUMERIC(18,0) NOT NULL
GO

update CONTENT_ATTRIBUTE set USE_FOR_TREE = 1 where ATTRIBUTE_ID in (select dbo.qp_get_self_relation_field_id(CONTENT_ID) from content)
GO

ALTER FUNCTION [dbo].[qp_get_self_relation_field_id] (@contentId numeric)
RETURNS numeric
AS
BEGIN
  declare @result numeric
  select @result = ATTRIBUTE_ID from CONTENT_ATTRIBUTE where CONTENT_ID = @contentId AND USE_FOR_TREE = 1
  if @result is null
    SELECT @result = ATTRIBUTE_ID FROM dbo.qp_get_article_relation_columns(@contentId)
  RETURN @result
END
GO

ALTER PROCEDURE [dbo].[qp_get_articles_tree]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @article_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @filter varchar(max) = '',
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN
  DECLARE @attribute_name AS nvarchar(255)
  DECLARE @rel_attribute_name AS nvarchar(255)

  DECLARE @security_sql AS nvarchar(max)
  DECLARE @sql_result AS nvarchar(max)
  DECLARE @use_security bit, @parent_level numeric


  SELECT TOP 1
    @attribute_name = CA1.ATTRIBUTE_NAME,
    @rel_attribute_name = CA2.ATTRIBUTE_NAME
  FROM CONTENT_ATTRIBUTE CA1 INNER JOIN CONTENT_ATTRIBUTE CA2 ON CA1.RELATED_ATTRIBUTE_ID = CA2.ATTRIBUTE_ID
  WHERE CA1.USE_FOR_TREE = 1 AND CA1.CONTENT_ID = @content_id

  IF (@@ROWCOUNT = 1)
    BEGIN
      DECLARE @title_field_name AS nvarchar(255)

      SELECT TOP 1
        @title_field_name = ATTRIBUTE_NAME
      FROM
        CONTENT_ATTRIBUTE
      WHERE
        CONTENT_ID = @content_id AND view_in_list = 1
      ORDER BY
        ATTRIBUTE_ORDER ASC

      select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id
      select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)
      if @parent_level = 0
        SET @filter = '1 = 0'

      if @use_security = 1
        EXEC dbo.qp_GetPermittedItemsAsQuery
          @user_id = @user_id,
          @group_id = 0,
          @start_level = @permission_level,
          @end_level = 4,
          @entity_name = 'content_item',
          @parent_entity_name = 'content',
          @parent_entity_id = @content_id,
          @SQLOut = @security_sql OUTPUT

      SET @sql_result = ''
      SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST (c.[' + @title_field_name + '] as nvarchar(max)) AS CONTENT_ITEM_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST (c.[' + @rel_attribute_name + ']  as nvarchar(max)) AS CONTENT_ITEM_ALIAS, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.VISIBLE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.STATUS_TYPE_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.CONTENT_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.locked_by, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.ARCHIVE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.not_for_replication, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.SCHEDULE_NEW_VERSION_PUBLICATION, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.splitted, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.PERMANENT_LOCK, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.LOCKED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] AS PARENT_CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
          SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
          SET @sql_result = @sql_result + '     COUNT(CONTENT_ITEM_ID) ' + CHAR(13)
          SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
          SET @sql_result = @sql_result + '     content_' + CAST(@content_id AS varchar)  + '_united ' + CHAR(13)
          SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
          SET @sql_result = @sql_result + '     [' + @attribute_name + '] = c.CONTENT_ITEM_ID ' + CHAR(13)
          IF @filter <> ''
            SET @sql_result = @sql_result + '     AND ' + @filter + CHAR(13)
          SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
          SET @sql_result = @sql_result + '   1 ' + CHAR(13)
          SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
          SET @sql_result = @sql_result + '   0 ' + CHAR(13)
          SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[USER_ID] AS LOCKER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.FIRST_NAME AS LOCKER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.LAST_NAME AS LOCKER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.EMAIL AS LOCKER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[LOGIN] AS LOCKER_LOGIN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' @record_count = COUNT(c.CONTENT_ITEM_ID) ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)

      if @use_security = 1
      BEGIN
        SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
        SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
        SET @sql_result = @sql_result + 'ON ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
      END

      SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' CONTENT_ITEM AS ci ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS lu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
      IF (@article_id IS NOT NULL)
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] = ' + CAST(@article_id AS varchar) + ' ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] IS NULL ' + CHAR(13)
        END
      IF @filter <> ''
        SET @sql_result = @sql_result + ' AND ' + @filter + CHAR(13)

      IF (@count_only = 0)
        BEGIN
        SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID ASC '
      END

      IF (@count_only = 0)
        BEGIN
          EXEC(@sql_result)

          SET @total_records = @@ROWCOUNT
        END
      ELSE
        BEGIN
          EXEC sp_executesql
            @sql_result,
            N'@record_count int OUTPUT',
            @record_count = @total_records OUTPUT
        END
    END
  ELSE
    BEGIN
      SET @total_records = 0
    END
END
GO

delete from ACTION_VIEW where ACTION_ID = dbo.qp_action_id('list_virtual_article') and TYPE_ID = dbo.qp_view_id('list')

delete from ACTION_VIEW where ACTION_ID = dbo.qp_action_id('list_virtual_article') and TYPE_ID = dbo.qp_view_id('tree')

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_virtual_article'), dbo.qp_view_id('list'), '~/Article/Index/', 1)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('list_virtual_article'), dbo.qp_view_id('tree'), '~/Article/Tree/', 2)

update BACKEND_ACTION set DEFAULT_VIEW_TYPE_ID = 1 where CODE = 'list_virtual_article'
GO

update ENTITY_TYPE set ORDER_FIELD = 'WEIGHT' where CODE = 'status_type'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.5', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.5 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.3.6
-- Addin columns to CONTENT_ATTRIBUTE
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'AGGREGATED' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] ADD AGGREGATED BIT NOT NULL CONSTRAINT DF_ATTRIBUTE_AGGREGATED DEFAULT 0
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'CLASSIFIER_ATTRIBUTE_ID' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
BEGIN
  ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] ADD CLASSIFIER_ATTRIBUTE_ID numeric(18,0) NULL

  ALTER TABLE [dbo].[CONTENT_ATTRIBUTE]  ADD  CONSTRAINT [FK_CONTENT_ATTRIBUTE_CLASSIFIER_ATTRIBUTE_ID] FOREIGN KEY([CLASSIFIER_ATTRIBUTE_ID])
  REFERENCES [dbo].[CONTENT_ATTRIBUTE] ([ATTRIBUTE_ID])
END
GO


if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'IS_CLASSIFIER' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] ADD IS_CLASSIFIER BIT NOT NULL CONSTRAINT DF_ATTRIBUTE_IS_CLASSIFIER DEFAULT 0
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'CHANGEABLE' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE [dbo].[CONTENT_ATTRIBUTE] ADD CHANGEABLE BIT NOT NULL CONSTRAINT DF_ATTRIBUTE_CHANGEABLE DEFAULT 0
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.6', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.6 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.3.7
-- Default VE Styles
-- **************************************

DELETE FROM [VE_STYLE]
      WHERE IS_SYSTEM = 1
GO

INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'p',NULL,N'p',1,N'NULL',1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Red Title',N'red',N'h3',3,NULL,0, 1,NULL, N'color:red',1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'h1',NULL,N'h1',4,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'h2',NULL,N'h2',5,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'h3',NULL,N'h3',6,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'h4',NULL,N'h4',7,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'h5',NULL,N'h5',8,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'h6',NULL,N'h6',9,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'pre',NULL,N'pre',10,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'address',NULL,N'address',11,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'div',NULL,N'div',12,NULL,1, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Blue Title',NULL,N'h3',13,NULL,0, 1,NULL,N'color:blue',1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Marker Yellow',NULL,N'span',14,NULL,0, 1,NULL,N'background-color:Yellow',1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Marker Green',NULL,N'span',15,NULL,0, 1,NULL,N'background-color:lime',1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Big',NULL,N'big',16,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Small',NULL,N'small',17,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Typewriter',NULL,N'tt',18,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Computer Code',NULL,N'code',19,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Keyboard Phrase',NULL,N'kbd',20,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Sample Text',NULL,N'samp',21,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Variable',NULL,N'var',22,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Deleted Text',NULL,N'del',23,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Inserted Text',NULL,N'ins',24,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Cited Work',NULL,N'cite',25,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Inline Quotation',NULL,N'q',26,NULL,0, 1,NULL,NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Language RTL',NULL,N'span',27,NULL,0, 1,N'dir:rtl',NULL,1)
INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Language LTR',NULL,N'span',28,NULL,0, 1,N'dir:ltr',NULL,1)

INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Image on Left',NULL,N'img',29,NULL,0,1,N'border:2;align:left',N'padding:5px;margin-right:5px',1)

INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Image on Right',NULL,N'img',30,NULL,0,1,N'border:2;align:right',N'padding:5px;margin-left:5px',1)

INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Borderless Table',NULL,N'table',31,NULL,0,1,NULL,N'border-style:hidden;background-color:#E6E6FA',1)

INSERT INTO [dbo].[VE_STYLE]([NAME],[DESCRIPTION],[TAG],[ORDER],[OVERRIDES_TAG],[IS_FORMAT],[IS_SYSTEM],[ATTRIBUTES],[STYLES],[LAST_MODIFIED_BY])
VALUES (N'Square Bulleted List',NULL,N'ul',31,NULL,0,1,NULL,N'list-style-type:square',1)

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.7', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.7 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.3.8
-- Backend action for workflow`s contents import
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE, CONTROLLER_ACTION_URL, ALLOW_SEARCH)
values('Multiple Select Contents For WORKFLOW', 'multiple_select_contents_for_workflow', dbo.qp_action_type_id('import'), dbo.qp_entity_type_id('workflow'),1, '~/VirtualContent/MultipleSelectForUnion/', 1)

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.8', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.8 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.9
-- Fix children count for backend tree menu
-- **************************************

ALTER procedure [dbo].[qp_get_node]
  @user_id numeric = 0,
  @code nvarchar(50) = null,
  @id bigint = 0,
  @parent_id bigint = null,
  @is_folder bit = 0
as
begin
  declare @result table
  (
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @local_id bigint, @local_name nvarchar(50)
  declare @local_code nvarchar(50), @local_parent_id bigint
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50), @icon_modifier_field nvarchar(50)
  declare @order_field nvarchar(50), @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10)
  declare @default_action_id int, @folder_default_action_id int
  declare @context_menu_id int, @folder_context_menu_id int

  set @language_id = dbo.qp_language(@user_id)

  declare @is_admin bit
  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  declare @entitySecQuery nvarchar(max);
  EXEC [dbo].[qp_GetEntityPermissionAsQuery]
    @user_id = @user_id,
    @SQLOut = @entitySecQuery OUTPUT
  CREATE TABLE #sectmp
  (
    PERMISSION_LEVEL int,
    ENTITY_TYPE_ID int
  );
  set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
  exec sp_executesql @entitySecQuery;

  select
    @local_id = ID,
    @local_name = NAME,
    @local_code = CODE,
    @local_parent_id = PARENT_ID,
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @folder_default_action_id = FOLDER_DEFAULT_ACTION_ID,
    @context_menu_id = CONTEXT_MENU_ID,
    @folder_context_menu_id = FOLDER_CONTEXT_MENU_ID
  from
    ENTITY_TYPE
    JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
  where
    ID = dbo.qp_entity_type_id(@code)
    and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0)
    and disabled = 0

  if (@@ROWCOUNT > 0)
  begin
    set @id_str = CAST(@id as nvarchar(10))

    if (@icon_field is null)
    begin
      set @icon_field = 'NULL'
    end
    if (@icon_modifier_field is null)
    begin
      set @icon_modifier_field = 'NULL'
    end

    if (@is_folder = 1 OR @local_parent_id IS NULL)
    begin
      if (@local_parent_id IS NOT NULL)
      begin
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select
          @local_id,
          @parent_id,
          dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
          @local_code,
          @is_folder,
          dbo.qp_get_icon(NULL, dbo.qp_pluralize(@local_code), NULL),
          @folder_default_action_id,
          @folder_context_menu_id
      end
      else
      begin
      insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
      select
        @local_id,
        @parent_id,
        dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
        @local_code,
        @is_folder,
        dbo.qp_get_icon(NULL, @local_code, NULL),
        @default_action_id,
        @context_menu_id
      end
    end
    else
    begin
      if (@source IS NOT NULL)
      begin
        declare @sql nvarchar(800), @select nvarchar(800), @where nvarchar(800)

        set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'
        set @where = @id_field + ' = ' + @id_str

        set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where

        insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
        exec sp_executesql @sql

        --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
        update
          @result
        set
          PARENT_ID = @parent_id,
          CODE = @local_code,
          IS_FOLDER = @is_folder,
          ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
          DEFAULT_ACTION_ID = @default_action_id,
          CONTEXT_MENU_ID = @context_menu_id
      end
    end

    declare @children_count int

    exec dbo.qp_expand
      @user_id,
      @local_code,
      @local_id,
      @is_folder,
      1,
      @count = @children_count output

    if @children_count = 0
      update
        @result
      set
        has_children = 0
    else
      update
        @result
      set
        has_children = 1
  end

  SELECT
    TREE_NODE.ID,
    TREE_NODE.CODE,
    CASE WHEN (TREE_NODE.CODE != 'site') THEN
      TREE_NODE.PARENT_ID
    ELSE
      NULL
    END AS PARENT_ID,
    dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
    TREE_NODE.IS_FOLDER,
    TREE_NODE.ICON,
    TREE_NODE.TITLE,
    dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
    ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
    dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
    TREE_NODE.HAS_CHILDREN
  FROM
    @result AS TREE_NODE
  LEFT OUTER JOIN
    BACKEND_ACTION
  ON
    TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
  LEFT OUTER JOIN
    ACTION_TYPE
  ON
    BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
end
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.9', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.9 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.10
-- Fix children count for article tree
-- **************************************

ALTER PROCEDURE [dbo].[qp_get_articles_tree]
  @user_id numeric(18,0),
  @content_id numeric(18,0),
  @article_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @filter varchar(max) = '',
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN
  DECLARE @attribute_name AS nvarchar(255)
  DECLARE @rel_attribute_name AS nvarchar(255)

  DECLARE @security_sql AS nvarchar(max)
  DECLARE @sql_result AS nvarchar(max)
  DECLARE @use_security bit, @parent_level numeric
  DECLARE @replaced_filter nvarchar(max)
  set @replaced_filter = REPLACE(@filter, 'c.', 'cnt.')


  SELECT TOP 1
    @attribute_name = CA1.ATTRIBUTE_NAME,
    @rel_attribute_name = CA2.ATTRIBUTE_NAME
  FROM CONTENT_ATTRIBUTE CA1 INNER JOIN CONTENT_ATTRIBUTE CA2 ON CA1.RELATED_ATTRIBUTE_ID = CA2.ATTRIBUTE_ID
  WHERE CA1.USE_FOR_TREE = 1 AND CA1.CONTENT_ID = @content_id

  IF (@@ROWCOUNT = 1)
    BEGIN
      DECLARE @title_field_name AS nvarchar(255)

      SELECT TOP 1
        @title_field_name = ATTRIBUTE_NAME
      FROM
        CONTENT_ATTRIBUTE
      WHERE
        CONTENT_ID = @content_id AND view_in_list = 1
      ORDER BY
        ATTRIBUTE_ORDER ASC

      select @use_security = allow_items_permission from content with(nolock) where content_id = @content_id
      select @parent_level = dbo.qp_entity_access_level(@user_id, 'content', @content_id)
      if @parent_level = 0
        SET @filter = '1 = 0'

      if @use_security = 1
        EXEC dbo.qp_GetPermittedItemsAsQuery
          @user_id = @user_id,
          @group_id = 0,
          @start_level = @permission_level,
          @end_level = 4,
          @entity_name = 'content_item',
          @parent_entity_name = 'content',
          @parent_entity_id = @content_id,
          @SQLOut = @security_sql OUTPUT

      SET @sql_result = ''
      SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST (c.[' + @title_field_name + '] as nvarchar(max)) AS CONTENT_ITEM_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST (c.[' + @rel_attribute_name + ']  as nvarchar(max)) AS CONTENT_ITEM_ALIAS, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.VISIBLE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.STATUS_TYPE_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.CONTENT_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.locked_by, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.ARCHIVE, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.not_for_replication, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.SCHEDULE_NEW_VERSION_PUBLICATION, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.splitted, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.PERMANENT_LOCK, ' + CHAR(13)
          SET @sql_result = @sql_result + ' ci.LOCKED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] AS PARENT_CONTENT_ITEM_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
          SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
          SET @sql_result = @sql_result + '     COUNT(CONTENT_ITEM_ID) ' + CHAR(13)
          SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
          SET @sql_result = @sql_result + '     content_' + CAST(@content_id AS varchar)  + '_united cnt ' + CHAR(13)
          SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
          SET @sql_result = @sql_result + '     [' + @attribute_name + '] = c.CONTENT_ITEM_ID ' + CHAR(13)
          IF @filter <> ''
            SET @sql_result = @sql_result + '     AND ' + @replaced_filter + CHAR(13)
          SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
          SET @sql_result = @sql_result + '   1 ' + CHAR(13)
          SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
          SET @sql_result = @sql_result + '   0 ' + CHAR(13)
          SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[USER_ID] AS LOCKER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.FIRST_NAME AS LOCKER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.LAST_NAME AS LOCKER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.EMAIL AS LOCKER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.[LOGIN] AS LOCKER_LOGIN, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' @record_count = COUNT(c.CONTENT_ITEM_ID) ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
      SET @sql_result = @sql_result + ' content_' + CAST(@content_id AS varchar)  + '_united AS c ' + CHAR(13)

      if @use_security = 1
      BEGIN
        SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
        SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
        SET @sql_result = @sql_result + 'ON ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.content_item_id = pi.content_item_id ' + CHAR(13)
      END

      SET @sql_result = @sql_result + 'INNER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' CONTENT_ITEM AS ci ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' ci.content_item_id = c.content_item_id ' + CHAR(13)
      IF (@count_only = 0)
        BEGIN
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS lu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' lu.USER_ID = ci.LOCKED_BY ' + CHAR(13)
          SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
          SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
          SET @sql_result = @sql_result + 'ON ' + CHAR(13)
          SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
        END
      SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
      IF (@article_id IS NOT NULL)
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] = ' + CAST(@article_id AS varchar) + ' ' + CHAR(13)
        END
      ELSE
        BEGIN
          SET @sql_result = @sql_result + ' c.[' + @attribute_name + '] IS NULL ' + CHAR(13)
        END
      IF @filter <> ''
        SET @sql_result = @sql_result + ' AND ' + @filter + CHAR(13)

      IF (@count_only = 0)
        BEGIN
        SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
        SET @sql_result = @sql_result + ' c.CONTENT_ITEM_ID ASC '
      END

      PRINT @sql_result

      IF (@count_only = 0)
        BEGIN
          EXEC(@sql_result)

          SET @total_records = @@ROWCOUNT
        END
      ELSE
        BEGIN
          EXEC sp_executesql
            @sql_result,
            N'@record_count int OUTPUT',
            @record_count = @total_records OUTPUT
        END
    END
  ELSE
    BEGIN
      SET @total_records = 0
    END
END
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.10', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.10 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.11
-- Backend tree optimization
-- **************************************

ALTER procedure [dbo].[qp_expand](@user_id numeric = 0, @code nvarchar(50) = null, @id bigint = 0, @is_folder bit = 0, @count_only bit=0, @count int = 0 output )
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint
  declare @default_action_id int, @context_menu_id int
  declare @is_admin bit

  set @language_id = dbo.qp_language(@user_id)

  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @id_str = CAST(@id as nvarchar(10))

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'


      -- process recurring --
      if @recurring_id_field is not null
      begin
        if @is_folder = 1
        begin
          if @parent_id_field is null
            set @where = @recurring_id_field + ' is null '
          else
            set @where = @parent_id_field + ' = ' + @id_str + ' and ' + @recurring_id_field + ' is null '
        end
        else
          set @where = @recurring_id_field + ' = ' + @id_str
      end
      else if @parent_id_field is not null
      begin
        set @where = @parent_id_field + ' = ' + @id_str
      end
      else
        set @where = '1 = 1'

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end

    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql

    --PRINT @sql;


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @id,
        CODE = @code,
        IS_FOLDER = 0,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id
    end
    else
      select @count = COUNT(ID) from @result
  end
  else begin
    declare @entitySecQuery nvarchar(max);
    EXEC [dbo].[qp_GetEntityPermissionAsQuery]
      @user_id = @user_id,
      @SQLOut = @entitySecQuery OUTPUT

    CREATE TABLE #sectmp
    (
      PERMISSION_LEVEL int,
      ENTITY_TYPE_ID int
    );
    set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
    exec sp_executesql @entitySecQuery;

    if @count_only = 0
      if @code is not null
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, dbo.qp_translate(dbo.qp_pluralize(NAME), @language_id), CODE, 1, dbo.qp_get_icon(NULL, dbo.qp_pluralize(CODE), NULL), FOLDER_DEFAULT_ACTION_ID, FOLDER_CONTEXT_MENU_ID
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID = dbo.qp_entity_type_id(@code) and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0 order by [Order]
      else
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, NAME, CODE, 0, dbo.qp_get_icon(NULL, CODE, NULL), DEFAULT_ACTION_ID, CONTEXT_MENU_ID
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID is null and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0 order by [Order]
    else
      if @code is not null
        select @count = COUNT(ID)
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID = dbo.qp_entity_type_id(@code) and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0
      else
        select @count = COUNT(ID)
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID is null and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0

  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit
    declare @children_count int
    set @children_count = 0
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = Is_folder from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, 1, @count = @children_count output
      else
      begin
        if @i = 1
        begin
          exec dbo.qp_expand @user_id, @local_code, @local_id, 0, 1, @count = @children_count output
        end
      end
      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      TREE_NODE.PARENT_ID as PARENT_ID,
      dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.11', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.11 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.12
-- Virtual Content fix
-- **************************************

ALTER PROCEDURE dbo.qp_count_child_articles
  @article_id int,
  @count int output
AS
BEGIN
  set @count = 0
  declare @baseContentId numeric
  select @baseContentId  = content_id from content_item where content_item_id = @article_id
  declare @relatedFields table (
    id numeric primary key identity(1, 1),
    content_id numeric,
    attribute_name nvarchar(255)
  )

  insert into @relatedFields(content_id, attribute_name)
  select ca.content_id, ca.attribute_name from content_attribute ca inner join content c on ca.content_id = c.content_id
  where c.virtual_type = 0 and ca.attribute_type_id = 11 and related_attribute_id in (select attribute_id from content_attribute ca where ca.content_id = @baseContentId)

  declare @content_id numeric, @attribute_name nvarchar(255), @sql nvarchar(max)

  declare @total numeric, @i numeric
  select @total = count(id) from @relatedFields
  set @i = 1

  while @i <= @total
  begin
    declare @result numeric
    select @content_id = content_id, @attribute_name = attribute_name from @relatedFields where id = @i
    set @sql = N'select @result = count(content_item_id) from content_' + cast(@content_id as nvarchar) + '_united where [' + @attribute_name + '] = @value'
    exec sp_executesql @sql, N'@result numeric output, @value numeric', @result = @result out, @value = @article_id
    set @count = @count + @result
    set @i = @i + 1
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.12', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.12 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.13
-- Fix children count for backend tree menu
-- **************************************

ALTER procedure [dbo].[qp_get_node]
  @user_id numeric = 0,
  @code nvarchar(50) = null,
  @id bigint = 0,
  @parent_id bigint = null,
  @is_folder bit = 0
as
begin
  declare @result table
  (
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null
  )

  declare @language_id numeric(18, 0)
  declare @local_id bigint, @local_name nvarchar(50)
  declare @local_code nvarchar(50), @local_parent_id bigint
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50), @icon_modifier_field nvarchar(50)
  declare @order_field nvarchar(50), @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10)
  declare @default_action_id int, @folder_default_action_id int
  declare @context_menu_id int, @folder_context_menu_id int

  set @language_id = dbo.qp_language(@user_id)

  declare @is_admin bit
  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  declare @entitySecQuery nvarchar(max);
  EXEC [dbo].[qp_GetEntityPermissionAsQuery]
    @user_id = @user_id,
    @SQLOut = @entitySecQuery OUTPUT
  CREATE TABLE #sectmp
  (
    PERMISSION_LEVEL int,
    ENTITY_TYPE_ID int
  );
  set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
  exec sp_executesql @entitySecQuery;

  select
    @local_id = ID,
    @local_name = NAME,
    @local_code = CODE,
    @local_parent_id = PARENT_ID,
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @folder_default_action_id = FOLDER_DEFAULT_ACTION_ID,
    @context_menu_id = CONTEXT_MENU_ID,
    @folder_context_menu_id = FOLDER_CONTEXT_MENU_ID
  from
    ENTITY_TYPE
    JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
  where
    ID = dbo.qp_entity_type_id(@code)
    and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0)
    and disabled = 0

  if (@@ROWCOUNT > 0)
  begin
    set @id_str = CAST(@id as nvarchar(10))

    if (@icon_field is null)
    begin
      set @icon_field = 'NULL'
    end
    if (@icon_modifier_field is null)
    begin
      set @icon_modifier_field = 'NULL'
    end

    if (@is_folder = 1 OR @local_parent_id IS NULL)
    begin
      if (@local_parent_id IS NOT NULL)
      begin
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select
          @local_id,
          @parent_id,
          dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
          @local_code,
          @is_folder,
          dbo.qp_get_icon(NULL, dbo.qp_pluralize(@local_code), NULL),
          @folder_default_action_id,
          @folder_context_menu_id
      end
      else
      begin
      insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
      select
        @local_id,
        @parent_id,
        dbo.qp_translate(dbo.qp_pluralize(@local_name), @language_id),
        @local_code,
        @is_folder,
        dbo.qp_get_icon(NULL, @local_code, NULL),
        @default_action_id,
        @context_menu_id
      end
    end
    else
    begin
      if (@source IS NOT NULL)
      begin
        declare @sql nvarchar(800), @select nvarchar(800), @where nvarchar(800)

        set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'
        set @where = @id_field + ' = ' + @id_str

        set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where

        insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
        exec sp_executesql @sql

        --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
        update
          @result
        set
          PARENT_ID = @parent_id,
          CODE = @local_code,
          IS_FOLDER = @is_folder,
          ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
          DEFAULT_ACTION_ID = @default_action_id,
          CONTEXT_MENU_ID = @context_menu_id
      end
    end

    declare @children_count int

    if @is_folder = 1
    begin
      set @local_id = @parent_id
    end

    exec dbo.qp_expand
      @user_id,
      @local_code,
      @local_id,
      @is_folder,
      1,
      @count = @children_count output

    if @children_count = 0
      update
        @result
      set
        has_children = 0
    else
      update
        @result
      set
        has_children = 1
  end

  SELECT
    TREE_NODE.ID,
    TREE_NODE.CODE,
    CASE WHEN (TREE_NODE.CODE != 'site') THEN
      TREE_NODE.PARENT_ID
    ELSE
      NULL
    END AS PARENT_ID,
    dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
    TREE_NODE.IS_FOLDER,
    TREE_NODE.ICON,
    TREE_NODE.TITLE,
    dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
    ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
    dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
    TREE_NODE.HAS_CHILDREN
  FROM
    @result AS TREE_NODE
  LEFT OUTER JOIN
    BACKEND_ACTION
  ON
    TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
  LEFT OUTER JOIN
    ACTION_TYPE
  ON
    BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.13', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.13 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.14
-- Multistep Rebuild Virtual Contents
-- **************************************

if not exists(select * from BACKEND_ACTION where CODE = 'rebuild_virtual_contents')
insert into BACKEND_ACTION(TYPE_ID, ENTITY_TYPE_ID, NAME, CODE, CONTROLLER_ACTION_URL, IS_MULTISTEP)
values(dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('content'), 'Rebuild Virtual Contents', 'rebuild_virtual_contents', '~/RebuildVirtualContents/', 1)

if not exists(select * from CONTEXT_MENU_ITEM where NAME = 'Rebuild Virtual Contents')
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
VALUES(dbo.qp_context_menu_id('content'), dbo.qp_action_id('rebuild_virtual_contents'), 'Rebuild Virtual Contents', 35, 'assemble.gif')

exec qp_update_translations 'Rebuild Virtual Contents', 'Перестроить виртуальные контенты'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.14', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.14 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.15
-- Create Versions for Aggregated
-- **************************************

ALTER PROCEDURE [dbo].[create_content_item_version]
  @uid NUMERIC,
  @content_item_id NUMERIC,
  @content_version_id NUMERIC = NULL
AS
  DECLARE @content_item_version_id NUMERIC, @tm DATETIME
  SET @tm = GETDATE()
  -- delete > max_num_of_stored_versions
  DECLARE @max_num_of_stored_versions NUMERIC
  DECLARE @content_id NUMERIC
  SELECT @max_num_of_stored_versions = c.max_num_of_stored_versions,
  @content_id = c.content_id
  FROM content AS c
  INNER JOIN content_item AS ci ON c.content_id = ci.content_id
  WHERE ci.content_item_id = @content_item_id
IF @max_num_of_stored_versions <> 0
BEGIN
  DECLARE @item_version_count INT
  SELECT @item_version_count = COUNT(content_item_version_id) FROM content_item_version
  WHERE content_item_id = @content_item_id
  IF @item_version_count >= @max_num_of_stored_versions
  BEGIN
  DECLARE @item_version_id NUMERIC
  SELECT TOP 1 @item_version_id = content_item_version_id FROM content_item_version
  WHERE content_item_id = @content_item_id ORDER BY content_item_version_id
  DELETE item_to_item_version WHERE content_item_version_id = @item_version_id
  DELETE content_item_version WHERE content_item_version_id = @item_version_id
  END

  -- Create content item version
  IF @content_version_id IS NOT NULL
    DELETE FROM content_item_version
    WHERE content_version_id = @content_version_id AND content_item_id = @content_item_id
  INSERT INTO content_item_version (version, version_label, content_version_id, content_item_id, created_by)
  VALUES (@tm, 'backup', @content_version_id, @content_item_id, @uid)
  SET @content_item_version_id = @@IDENTITY

  -- Get Extensions info
  declare @contentIds TABLE
  (
    id numeric
  )

  insert into @contentIds
  select convert(numeric, DATA) as ids from content_data
  where CONTENT_ITEM_ID = @content_item_id
  and DATA is not null
  and ATTRIBUTE_ID in (
  select attribute_id from CONTENT_ATTRIBUTE where content_id = @content_id and IS_CLASSIFIER = 1
  )

  declare @extensions TABLE
  (
    id numeric,
    content_id numeric,
    attribute_id numeric
  )

  insert into @extensions
  select cd.content_item_id, ca.content_id, ca.ATTRIBUTE_ID from content_data cd inner join CONTENT_ATTRIBUTE ca on ca.ATTRIBUTE_ID = cd.ATTRIBUTE_ID
  where ca.aggregated = 1 and ca.CONTENT_ID in (select * from @contentIds) and cd.DATA = CAST(@content_item_id as nvarchar)

  declare @main_ids TABLE
  (
  id numeric,
  content_id numeric
  )

  insert into @main_ids
  select id, content_id from @extensions

  insert into @main_ids
  values(@content_item_id, @content_id)


  -- Store content item data
  INSERT INTO version_content_data (attribute_id, content_item_version_id, data, blob_data, created)
  SELECT attribute_id, @content_item_version_id, data, blob_data, @tm
  FROM content_data
  WHERE content_item_id in (select id from @main_ids)

  -- Store Many-to-Many slice
  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, ca.attribute_id, linked_item_id
  FROM item_link_united AS il
  INNER JOIN content_attribute AS ca ON ca.link_id = il.link_id
  INNER JOIN content_item AS ci ON ci.content_id =  ca.content_id AND ci.content_item_id = il.item_id
  WHERE il.item_id in (select id from @main_ids)

  -- Store Many-to-One data
  declare @many_to_ones table (id numeric, content_id numeric, content_item_id numeric, name nvarchar(255))
  insert into @many_to_ones (id, content_id, content_item_id, name)
  select ca.attribute_id, rca.CONTENT_ID, i.id, rca.ATTRIBUTE_NAME from CONTENT_ATTRIBUTE ca
  inner join CONTENT_ATTRIBUTE rca on ca.BACK_RELATED_ATTRIBUTE_ID = rca.ATTRIBUTE_ID
  inner join @main_ids i on i.content_id = ca.CONTENT_ID
  where ca.CONTENT_ID IN (select content_id from @main_ids)

  while exists(select * from @many_to_ones)
  begin
  declare @currentFieldId numeric, @currentContentId numeric, @currentFieldName nvarchar(255), @currentArticleId numeric
  select @currentFieldId = id, @currentContentId = content_id, @currentArticleId = content_item_id, @currentFieldName = name from @many_to_ones

  declare @ids table (id numeric)
  insert into @ids
  exec qp_get_m2o_ids @currentContentId, @currentFieldName, @currentArticleId

  SELECT @content_item_version_id, @currentFieldId, id from @ids

  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, @currentFieldId, id from @ids

  delete from @ids

  delete from @many_to_ones where id = @currentFieldId
  end

  -- Write status history log
  INSERT INTO content_item_status_history
    (content_item_id, user_id, description, created, content_item_version_id,
    system_status_type_id)
  VALUES
    (@content_item_id, @uid, 'Record version backup has been created', @tm, @content_item_version_id,
    2)
END

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.15', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.15 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.16
-- Getting versions for aggregated articles
-- **************************************

ALTER function [dbo].[qp_get_content_field_list](@content_id numeric, @column_prefix nvarchar(10)) returns nvarchar(max)
as
begin
declare @result nvarchar(max)
declare @attrs table
(
  id numeric primary key identity(1,1),
  name nvarchar(512)

)

insert into @attrs(name)
select CASE c.CONTENT_ID WHEN @content_id THEN ca.ATTRIBUTE_NAME ELSE c.CONTENT_NAME + '.' + CA.ATTRIBUTE_NAME END
from content_attribute ca
inner join content c on ca.CONTENT_ID = c.CONTENT_ID
where ca.CONTENT_ID = @content_id or ca.CONTENT_ID in (
  select content_id from CONTENT_ATTRIBUTE where AGGREGATED = 1 and RELATED_ATTRIBUTE_ID in (select ATTRIBUTE_ID from CONTENT_ATTRIBUTE where CONTENT_ID  = @content_id)
)
order by C.CONTENT_ID, CA.attribute_order

declare @i numeric, @count numeric, @name nvarchar(512)

set @i = 1
select @count = count(id) from @attrs
set @result = ''

while @i <= @count
begin
  if @i > 1 set @result = @result + ', '
  select @name = name from @attrs where id = @i
  set @result = @result + @column_prefix + '[' + @name + ']'
  set @i = @i + 1
end
return @result
end
GO


ALTER procedure [dbo].[qp_get_versions]
@item_id numeric,
@version_id numeric = 0
as
begin

declare @sql nvarchar(max), @version_sql nvarchar(100), @fields nvarchar(max), @prefixed_fields nvarchar(max)
declare @content_id numeric
select @content_id = content_id from content_item ci where ci.CONTENT_ITEM_ID = @item_id

if @content_id is not null
begin
  select @fields = dbo.qp_get_content_field_list(@content_id, '')
  select @prefixed_fields = dbo.qp_get_content_field_list(@content_id, 'pt.')


  if @version_id = 0
    set @version_sql = ''
  else
    set @version_sql = ' and vcd.CONTENT_ITEM_VERSION_ID= @version_id'


  set @sql = N'select pt.content_item_id, pt.version_id, pt.created AS modified, pt.created_by as last_modified_by, ' + @prefixed_fields  + N' from
  (
  select civ.CONTENT_ITEM_ID, civ.CREATED, civ.CREATED_BY, vcd.CONTENT_ITEM_VERSION_ID as version_id,
  CASE c.CONTENT_ID WHEN @content_id THEN CA.ATTRIBUTE_NAME ELSE c.CONTENT_NAME + ''.'' + ca.ATTRIBUTE_NAME END AS ATTRIBUTE_NAME,
  dbo.qp_get_version_data(vcd.ATTRIBUTE_ID, vcd.CONTENT_ITEM_VERSION_ID) as data from CONTENT_ATTRIBUTE ca
  left outer join VERSION_CONTENT_DATA vcd on ca.ATTRIBUTE_ID = vcd.ATTRIBUTE_ID
  inner join CONTENT_ITEM_VERSION civ on vcd.CONTENT_ITEM_VERSION_ID = civ.CONTENT_ITEM_VERSION_ID
  inner join CONTENT c on ca.CONTENT_ID = c.CONTENT_ID
  where
  (
    ca.CONTENT_ID = @content_id
    OR
    ca.CONTENT_ID in (
      select content_id from CONTENT_ATTRIBUTE where AGGREGATED = 1 and RELATED_ATTRIBUTE_ID in (select ATTRIBUTE_ID from CONTENT_ATTRIBUTE where CONTENT_ID  = @content_id)
    )
  )
  and civ.CONTENT_ITEM_ID = @item_id ' + @version_sql + ') as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt order by pt.version_id desc

  '

  exec sp_executesql @sql, N'@content_id numeric, @item_id numeric, @version_id numeric', @content_id = @content_id, @item_id = @item_id, @version_id = @version_id
end
end
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.16', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.16 completed'
GO

-- **************************************
-- Zakirov Kirill
-- version 7.9.3.17
-- Contents for workflow multiple content picker bug fix
-- **************************************

UPDATE [dbo].[BACKEND_ACTION]
   SET [TYPE_ID] = dbo.qp_action_type_id('multiple_select')
      ,[CONTROLLER_ACTION_URL] = '~/Workflow/MultipleSelectForWorkflow/'
 WHERE CODE = 'multiple_select_contents_for_workflow'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.17', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.17 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.18
-- Versions fixes and optimization
-- **************************************

-- MODIFIED for versions

if not exists (select * From information_schema.columns where table_name = 'content_item_version' and column_name = 'MODIFIED')
ALTER TABLE CONTENT_ITEM_VERSION
ADD
  [MODIFIED] [datetime] NOT NULL CONSTRAINT [DF_CONTENT_ITEM_VERSION_MODIFIED] DEFAULT (getdate())
GO

if not exists (select * From information_schema.columns where table_name = 'content_item_version' and column_name = 'LAST_MODIFIED_BY')
ALTER TABLE CONTENT_ITEM_VERSION
ADD
  [LAST_MODIFIED_BY] [numeric](18, 0) NOT NULL CONSTRAINT [DF_CONTENT_ITEM_VERSION_LAST_MODIFIED_BY] DEFAULT (1),
  CONSTRAINT [FK_CONTENT_ITEM_VERSION_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY]) REFERENCES [dbo].[USERS] ([USER_ID])
GO

WITH cte
AS
(
  select *, ROW_NUMBER() OVER (PARTITION BY CONTENT_ITEM_ID ORDER BY CONTENT_ITEM_VERSION_ID) as cnt
  from content_item_version
)
update base set base.MODIFIED = ISNULL(civ2.CREATED, civ1.CREATED), base.LAST_MODIFIED_BY = ISNULL(civ2.CREATED_BY, civ1.CREATED_BY) FROM
CONTENT_ITEM_VERSION base
inner join cte civ1 on civ1.CONTENT_ITEM_VERSION_ID = base.CONTENT_ITEM_VERSION_ID
left join cte civ2 on civ1.CONTENT_ITEM_ID = civ2.CONTENT_ITEM_ID AND civ1.cnt = civ2.cnt+1
GO

ALTER TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id

    UPDATE CONTAINER SET locked = NULL, locked_by = NULL FROM CONTAINER c inner join deleted d on c.locked_by = d.user_id
    UPDATE CONTENT_FORM SET locked = NULL, locked_by = NULL FROM CONTENT_FORM c inner join deleted d on c.locked_by = d.user_id
    UPDATE CONTENT_ITEM SET locked = NULL, locked_by = NULL FROM CONTENT_ITEM c inner join deleted d on c.locked_by = d.user_id
    UPDATE [OBJECT] SET locked = NULL, locked_by = NULL FROM [OBJECT] c inner join deleted d on c.locked_by = d.user_id
    UPDATE OBJECT_FORMAT SET locked = NULL, locked_by = NULL FROM OBJECT_FORMAT c inner join deleted d on c.locked_by = d.user_id
    UPDATE PAGE SET locked = NULL, locked_by = NULL FROM PAGE c inner join deleted d on c.locked_by = d.user_id
    UPDATE PAGE_TEMPLATE SET locked = NULL, locked_by = NULL FROM PAGE_TEMPLATE c inner join deleted d on c.locked_by = d.user_id
    UPDATE [SITE] SET locked = NULL, locked_by = NULL FROM [SITE] c inner join deleted d on c.locked_by = d.user_id

    UPDATE [SITE] SET last_modified_by = 1 FROM [SITE] c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET created_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.created_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET last_modified_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
    UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
    UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
    UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

    UPDATE CUSTOM_ACTION SET LAST_MODIFIED_BY = 1 FROM CUSTOM_ACTION c INNER JOIN deleted d on c.LAST_MODIFIED_BY = d.[USER_ID]

  UPDATE NOTIFICATIONS SET FROM_BACKENDUSER_ID = 1 FROM NOTIFICATIONS c inner join deleted d on c.FROM_BACKENDUSER_ID = d.user_id

  UPDATE ENTITY_TYPE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE ACTION_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

    delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO

ALTER PROCEDURE [dbo].[create_content_item_version]
  @uid NUMERIC,
  @content_item_id NUMERIC,
  @content_version_id NUMERIC = NULL
AS
  DECLARE @content_item_version_id NUMERIC, @tm DATETIME
  SET @tm = GETDATE()
  -- delete > max_num_of_stored_versions
  DECLARE @max_num_of_stored_versions NUMERIC
  DECLARE @content_id NUMERIC
  SELECT @max_num_of_stored_versions = c.max_num_of_stored_versions,
  @content_id = c.content_id
  FROM content AS c
  INNER JOIN content_item AS ci ON c.content_id = ci.content_id
  WHERE ci.content_item_id = @content_item_id
IF @max_num_of_stored_versions <> 0
BEGIN
  DECLARE @item_version_count INT
  SELECT @item_version_count = COUNT(content_item_version_id) FROM content_item_version
  WHERE content_item_id = @content_item_id
  IF @item_version_count >= @max_num_of_stored_versions
  BEGIN
  DECLARE @item_version_id NUMERIC
  SELECT TOP 1 @item_version_id = content_item_version_id FROM content_item_version
  WHERE content_item_id = @content_item_id ORDER BY content_item_version_id
  DELETE item_to_item_version WHERE content_item_version_id = @item_version_id
  DELETE content_item_version WHERE content_item_version_id = @item_version_id
  END

  -- Create content item version
  IF @content_version_id IS NOT NULL
    DELETE FROM content_item_version
    WHERE content_version_id = @content_version_id AND content_item_id = @content_item_id

  INSERT INTO content_item_version (version, version_label, content_version_id, content_item_id, created_by, modified, last_modified_by)
  SELECT @tm, 'backup', @content_version_id, content_item_id, @uid, modified, last_modified_by
  from content_item where CONTENT_ITEM_ID = @content_item_id

  SET @content_item_version_id = @@IDENTITY

  -- Get Extensions info
  declare @contentIds TABLE
  (
    id numeric
  )

  insert into @contentIds
  select convert(numeric, DATA) as ids from content_data
  where CONTENT_ITEM_ID = @content_item_id
  and DATA is not null
  and ATTRIBUTE_ID in (
  select attribute_id from CONTENT_ATTRIBUTE where content_id = @content_id and IS_CLASSIFIER = 1
  )

  declare @aggregates TABLE (content_id numeric, attribute_name nvarchar(255))
  insert into @aggregates
  select ca.content_id, ca.ATTRIBUTE_NAME from CONTENT_ATTRIBUTE ca where ca.aggregated = 1 and ca.CONTENT_ID in (select * from @contentIds)

  declare @extensions TABLE (id numeric, content_id numeric)
  declare @currentContentId numeric, @currentFieldName nvarchar(255), @sql nvarchar(1024), @resultId numeric

  while exists(select * from @aggregates)
  begin

  select @currentContentId = content_id, @currentFieldName = attribute_name from @aggregates

  set @sql = 'select @resultId = content_item_id from content_' + CAST(@currentContentId as nvarchar(255)) + '_united where [' + @currentFieldName + '] = @content_item_id'
  exec sp_executesql @sql, N'@content_item_id numeric, @resultId numeric output', @content_item_id = @content_item_id, @resultId = @resultId output

  insert into @extensions
  values (@resultId, @currentContentId)

  delete from @aggregates where content_id = @currentContentId
  end

  declare @main_ids TABLE
  (
  id numeric,
  content_id numeric
  )

  insert into @main_ids
  select id, content_id from @extensions

  insert into @main_ids
  values(@content_item_id, @content_id)


  -- Store content item data
  INSERT INTO version_content_data (attribute_id, content_item_version_id, data, blob_data, created)
  SELECT attribute_id, @content_item_version_id, data, blob_data, @tm
  FROM content_data
  WHERE content_item_id in (select id from @main_ids)

  -- Store Many-to-Many slice
  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, ca.attribute_id, linked_item_id
  FROM item_link_united AS il
  INNER JOIN content_attribute AS ca ON ca.link_id = il.link_id
  INNER JOIN content_item AS ci ON ci.content_id =  ca.content_id AND ci.content_item_id = il.item_id
  WHERE il.item_id in (select id from @main_ids)

  -- Store Many-to-One data
  declare @many_to_ones table (id numeric, content_id numeric, content_item_id numeric, name nvarchar(255))
  insert into @many_to_ones (id, content_id, content_item_id, name)
  select ca.attribute_id, rca.CONTENT_ID, i.id, rca.ATTRIBUTE_NAME from CONTENT_ATTRIBUTE ca
  inner join CONTENT_ATTRIBUTE rca on ca.BACK_RELATED_ATTRIBUTE_ID = rca.ATTRIBUTE_ID
  inner join @main_ids i on i.content_id = ca.CONTENT_ID
  where ca.CONTENT_ID IN (select content_id from @main_ids)

  while exists(select * from @many_to_ones)
  begin
  declare @currentFieldId numeric, @currentArticleId numeric
  select @currentFieldId = id, @currentContentId = content_id, @currentArticleId = content_item_id, @currentFieldName = name from @many_to_ones

  declare @ids table (id numeric)
  insert into @ids
  exec qp_get_m2o_ids @currentContentId, @currentFieldName, @currentArticleId

  SELECT @content_item_version_id, @currentFieldId, id from @ids

  INSERT INTO item_to_item_version (content_item_version_id, attribute_id, linked_item_id)
  SELECT @content_item_version_id, @currentFieldId, id from @ids

  delete from @ids

  delete from @many_to_ones where id = @currentFieldId
  end

  -- Write status history log
  INSERT INTO content_item_status_history
    (content_item_id, user_id, description, created, content_item_version_id,
    system_status_type_id)
  VALUES
    (@content_item_id, @uid, 'Record version backup has been created', @tm, @content_item_version_id,
    2)
END
GO

exec qp_drop_existing 'qp_clear_versions_for_field', 'IsProcedure'
GO

CREATE procedure [dbo].[qp_clear_versions_for_field]
@attribute_id numeric
as
BEGIN
delete from VERSION_CONTENT_DATA where ATTRIBUTE_ID = @attribute_id

delete from item_to_item_version where attribute_id = @attribute_id
end
go

exec qp_drop_existing 'qp_get_content_field_list', 'IsScalarFunction'
GO


ALTER TRIGGER [dbo].[tiu_populate_content_data] ON [dbo].[CONTENT_ITEM] FOR INSERT, UPDATE AS
BEGIN
  IF NOT
  (
    EXISTS(select content_item_id from deleted)
    AND
    (UPDATE(not_for_replication) OR UPDATE(locked_by) OR UPDATE(splitted))

  )
  insert into content_data
    (content_item_id, attribute_id, not_for_replication)
    select i.content_item_id, ca.attribute_id, i.not_for_replication
    from inserted i inner join content_attribute ca on i.content_id = ca.content_id
    where ca.attribute_id not in (select cd.attribute_id from content_data cd where cd.content_item_id = i.content_item_id)
END
GO

ALTER  TRIGGER [dbo].[td_delete_item] ON [dbo].[CONTENT_ITEM] FOR DELETE AS BEGIN
  declare @content_item_id numeric, @content_id numeric, @virtual_type numeric
  declare @char_content_item_id nvarchar(10), @char_content_id nvarchar(10)
  declare @sql nvarchar(1000), @table_name nvarchar(25), @item_exists bit
  declare @i numeric, @count numeric

  declare @ci table (
    id numeric identity(1,1) primary key,
    content_id numeric,
    content_item_id numeric,
    virtual_type numeric
  )

  declare @ca table (
    content_id numeric,
    attribute_id numeric
  )

  /* Collect affected items */
  insert into @ci (content_id, content_item_id, virtual_type)
  select d.content_id, d.content_item_id, c.virtual_type from deleted d inner join content c
  on d.content_id = c.content_id

  /* Collect relations to affected contents */
  insert into @ca(content_id, attribute_id)
    select ca2.content_id, ca1.attribute_id from content_attribute ca1
    inner join content_attribute ca2 on ca1.related_attribute_id = ca2.attribute_id
    where ca2.content_id in (select distinct content_id from @ci) and ca1.attribute_type_id = 11

  set @i = 1
  select @count = count(id) from @ci

  while @i < @count + 1
  begin
    select @content_id = content_id, @content_item_id = content_item_id,
      @virtual_type = virtual_type from @ci where id = @i

    set @char_content_item_id = convert(nvarchar, @content_item_id)
    set @char_content_id = convert(nvarchar, @content_id)

    /* Drop relations to current item */
    if exists(select attribute_id from @ca where content_id = @content_id)
    begin
      UPDATE content_attribute SET default_value=null
        WHERE attribute_id IN (select attribute_id from @ca where content_id = @content_id)
        AND default_value = @char_content_item_id

      UPDATE content_data SET data = NULL, blob_data = NULL
        WHERE attribute_id IN (select attribute_id from @ca where content_id = @content_id)
        AND data = @char_content_item_id

      DELETE from VERSION_CONTENT_DATA
        where ATTRIBUTE_ID in (select attribute_id from @ca where content_id = @content_id)
        AND data = @char_content_item_id
    end
    /* Drop items in user tables */
    if @virtual_type = 0
    begin
      set @table_name = 'content_' + @char_content_id
      exec qp_get_delete_item_sql @table_name, @content_item_id, @sql = @sql out
      exec sp_executesql @sql

      set @table_name = @table_name + '_ASYNC'
      exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out
      if @item_exists = 1
      begin
        exec qp_get_delete_item_sql @table_name, @content_item_id, @sql = @sql out
        exec sp_executesql @sql
      end
    end
    set @i = @i + 1
  end
END
GO

ALTER  TRIGGER [dbo].[tu_update_field] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
if not update(attribute_order) and
    (
      update(attribute_name) or update(attribute_type_id)
      or update(attribute_size) or update(index_flag)
    )
  begin
    declare @attribute_id numeric, @attribute_name nvarchar(255), @attribute_size numeric, @content_id numeric
    declare @indexed numeric, @required numeric
    declare @attribute_type_id numeric, @type_name nvarchar(255), @database_type nvarchar(255)

    declare @new_attribute_name nvarchar(255), @new_attribute_size numeric
    declare @new_indexed numeric, @new_required numeric
    declare @new_attribute_type_id numeric, @new_type_name nvarchar(255), @new_database_type nvarchar(255)
    declare @related_content_id numeric, @new_related_content_id numeric
    declare @link_id numeric, @new_link_id numeric

    declare @base_table_name nvarchar(30), @table_name nvarchar(30)

    declare @i numeric, @count numeric, @preserve_index bit

    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      attribute_name nvarchar(255),
      attribute_size numeric,
      indexed numeric,
      required numeric,
      attribute_type_id numeric,
      type_name nvarchar(255),
      database_type nvarchar(255),
      content_id numeric,
      related_content_id numeric,
      link_id numeric
    )

  /* Collect affected items */
    insert into @ca (attribute_id, attribute_name, attribute_size, indexed, required, attribute_type_id, type_name, database_type, content_id, related_content_id, link_id)
      select d.attribute_id, d.attribute_name, d.attribute_size, d.index_flag, d.required, d.attribute_type_id, at.type_name, at.database_type, d.content_id,
      isnull(ca1.content_id, 0), isnull(d.link_id, 0)
      from deleted d
      inner join attribute_type at on d.attribute_type_id = at.attribute_type_id
      inner join content c on d.content_id = c.content_id
      left join CONTENT_ATTRIBUTE ca1 on d.RELATED_ATTRIBUTE_ID = ca1.ATTRIBUTE_ID
      where c.virtual_type = 0

    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @attribute_id = attribute_id, @attribute_name = attribute_name, @attribute_size = attribute_size,
        @indexed = indexed, @required = required, @attribute_type_id = attribute_type_id,
        @type_name = type_name, @database_type = database_type, @content_id = content_id,
        @related_content_id = related_content_id, @link_id = link_id
        from @ca where id = @i

      select @new_attribute_name = ca.attribute_name, @new_attribute_size = ca.attribute_size,
        @new_indexed = ca.index_flag, @new_required = ca.required, @new_attribute_type_id = ca.attribute_type_id,
        @new_type_name = at.type_name, @new_database_type = at.database_type,
        @new_related_content_id = isnull(ca1.content_id, 0), @new_link_id = isnull(ca.link_id, 0)
        from content_attribute ca
        inner join attribute_type at on ca.attribute_type_id = at.attribute_type_id
        left join CONTENT_ATTRIBUTE ca1 on ca.RELATED_ATTRIBUTE_ID = ca1.ATTRIBUTE_ID
        where ca.attribute_id = @attribute_id

        set @base_table_name = 'content_' + convert(nvarchar, @content_id)
        set @table_name = @base_table_name + '_ASYNC'

        if @indexed = 1 and @new_indexed = 1
          set @preserve_index = 1
        else
          set @preserve_index = 0

        if @attribute_type_id <> @new_attribute_type_id
          or @link_id <> @new_link_id
          or @related_content_id <> @new_related_content_id
          or (@attribute_size > @new_attribute_size and @attribute_type_id = 1)
        begin
          exec qp_clear_versions_for_field @attribute_id
        end

        if @indexed = 1 and @new_indexed = 0
        begin
          exec qp_drop_index @base_table_name, @attribute_name
          exec qp_drop_index @table_name, @attribute_name
        end

        if @database_type <> @new_database_type or @attribute_size <> @new_attribute_size
        begin

          if @database_type = 'ntext' and @new_database_type <> 'ntext'
            exec qp_copy_blob_data_to_data @attribute_id
          else if @database_type <> 'ntext' and @new_database_type = 'ntext'
            exec qp_copy_data_to_blob_data @attribute_id

          exec qp_recreate_column @base_table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_recreate_column @table_name, @attribute_id, @attribute_name, @new_attribute_name, @type_name, @new_type_name, @new_database_type, @new_attribute_size, @preserve_index
          exec qp_content_united_view_recreate @content_id
          exec qp_content_frontend_views_recreate @content_id
        end
        else begin
          if @attribute_name <> @new_attribute_name
          begin
            exec qp_rename_column @base_table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_rename_column @table_name, @attribute_name, @new_attribute_name, @preserve_index
            exec qp_content_united_view_recreate @content_id
            exec qp_content_frontend_views_recreate @content_id
          end
        end
        if @attribute_name <> @new_attribute_name
          UPDATE container Set order_static = REPLACE(order_static, @attribute_name, @new_attribute_name) WHERE content_id = @content_id AND order_static LIKE '%'+ @attribute_name +'%'

        if @indexed = 0 and @new_indexed = 1
        begin
          exec qp_add_index @base_table_name, @new_attribute_name
          exec qp_add_index @table_name, @new_attribute_name
        end
      set @i = @i + 1
    end
  end
END
GO

IF  NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[item_link_async]') AND name = N'IX_ITEM_LINK_ASYNC_ITEM_ID')
CREATE NONCLUSTERED INDEX [IX_ITEM_LINK_ASYNC_ITEM_ID] ON [dbo].[item_link_async]
(
  [item_id] ASC
)
GO


ALTER procedure [dbo].[qp_get_default_article]
@content_id numeric
as
begin

declare @sql nvarchar(max), @fields nvarchar(max), @prefixed_fields nvarchar(max)

if @content_id is not null
begin
  declare @attributes table
  (
    name nvarchar(255)
  )
  insert into @attributes
  select attribute_name from CONTENT_ATTRIBUTE where CONTENT_ID = @content_id

  SELECT @fields = COALESCE(@fields + ', ', '') + '[' + name + ']' FROM @attributes
  SELECT @prefixed_fields = COALESCE(@prefixed_fields + ', ', '') + 'pt.[' + name + ']' FROM @attributes

  set @sql = N'select ' + @prefixed_fields  + N' from
  (
  select ca.ATTRIBUTE_NAME, CASE WHEN ca.attribute_type_id in (9, 10) THEN convert(nvarchar(max), ca.DEFAULT_BLOB_VALUE) ELSE ca.DEFAULT_VALUE END as data from CONTENT_ATTRIBUTE ca
  where ca.CONTENT_ID = @content_id) as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt
  '
  print @sql
  exec sp_executesql @sql, N'@content_id numeric', @content_id = @content_id
end
end
GO

exec qp_drop_existing 'qp_get_content_data_pivot', 'IsProcedure'
GO

CREATE procedure [dbo].[qp_get_content_data_pivot]
@item_id numeric
as
begin

declare @sql nvarchar(max), @version_sql nvarchar(100), @fields nvarchar(max), @prefixed_fields nvarchar(max)
declare @content_id numeric
select @content_id = content_id from content_item ci where ci.CONTENT_ITEM_ID = @item_id

if @content_id is not null
begin
  declare @attributes table
  (
    name nvarchar(255)
  )
  insert into @attributes
  select attribute_name from CONTENT_ATTRIBUTE where CONTENT_ID = @content_id

  SELECT @fields = COALESCE(@fields + ', ', '') + '[' + name + ']' FROM @attributes

  set @sql = N'select * from
  (
  select ci.CONTENT_ITEM_ID, ci.STATUS_TYPE_ID, ci.VISIBLE, ci.ARCHIVE, ci.CREATED, ci.MODIFIED, ci.LAST_MODIFIED_BY, ca.ATTRIBUTE_NAME,
  case WHEN ATTRIBUTE_TYPE_ID IN (9, 10) THEN cast (cd.blob_data as nvarchar(max)) ELSE dbo.qp_correct_data(cd.data, ca.attribute_type_id, ca.attribute_size, ca.default_value) END as data
  from CONTENT_ATTRIBUTE ca
  left outer join CONTENT_DATA cd on ca.ATTRIBUTE_ID = cd.ATTRIBUTE_ID
  inner join CONTENT_ITEM ci on cd.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID
  where ca.CONTENT_ID = @content_id and cd.CONTENT_ITEM_ID = @item_id
  ) as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt order by pt.content_item_id desc
  '
  print @sql
  exec sp_executesql @sql, N'@content_id numeric, @item_id numeric', @content_id = @content_id, @item_id = @item_id
end
end
GO

exec qp_drop_existing 'qp_update_with_content_data_pivot', 'IsProcedure'
GO

CREATE procedure [dbo].[qp_update_with_content_data_pivot]
@item_id numeric
as
begin

declare @sql nvarchar(max), @version_sql nvarchar(100), @fields nvarchar(max), @update_fields nvarchar(max), @prefixed_fields nvarchar(max), @table_name nvarchar(50)
declare @content_id numeric, @splitted bit
select @content_id = content_id, @splitted = SPLITTED from content_item ci where ci.CONTENT_ITEM_ID = @item_id

if @content_id is not null
begin

  set @table_name = 'content_' + CAST(@content_id as nvarchar)
  if (@splitted = 1)
    set @table_name = @table_name + '_async'

  declare @attributes table
  (
    name nvarchar(255)
  )
  insert into @attributes
  select attribute_name from CONTENT_ATTRIBUTE where CONTENT_ID = @content_id

  SELECT @fields = COALESCE(@fields + ', ', '') + '[' + name + ']' FROM @attributes

  SELECT @update_fields = COALESCE(@update_fields + ', ', '') + 'base.[' + name + '] = pt.[' + name + ']' FROM @attributes

  set @sql = N'update base set ' + @update_fields + ' from ' + @table_name + ' base inner join
  (
  select ci.CONTENT_ITEM_ID, ci.STATUS_TYPE_ID, ci.VISIBLE, ci.ARCHIVE, ci.CREATED, ci.MODIFIED, ci.LAST_MODIFIED_BY, ca.ATTRIBUTE_NAME,
  case WHEN ATTRIBUTE_TYPE_ID IN (9, 10) THEN cast (cd.blob_data as nvarchar(max)) ELSE dbo.qp_correct_data(cd.data, ca.attribute_type_id, ca.attribute_size, ca.default_value) END as data
  from CONTENT_ATTRIBUTE ca
  left outer join CONTENT_DATA cd on ca.ATTRIBUTE_ID = cd.ATTRIBUTE_ID
  inner join CONTENT_ITEM ci on cd.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID
  where ca.CONTENT_ID = @content_id and cd.CONTENT_ITEM_ID = @item_id
  ) as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt
  on pt.content_item_id = base.content_item_id
  '
  print @sql
  exec sp_executesql @sql, N'@content_id numeric, @item_id numeric', @content_id = @content_id, @item_id = @item_id
end
end
GO


ALTER procedure [dbo].[qp_get_versions]
@item_id numeric,
@version_id numeric = 0
as
begin

declare @sql nvarchar(max), @version_sql nvarchar(100), @fields nvarchar(max), @prefixed_fields nvarchar(max)
declare @content_id numeric
select @content_id = content_id from content_item ci where ci.CONTENT_ITEM_ID = @item_id

if @content_id is not null
begin

  declare @attributes table
  (
    name nvarchar(255)
  )

  declare @main_ids table
  (
    id numeric
  )

  insert into @main_ids
  select content_id from CONTENT_ATTRIBUTE where AGGREGATED = 1 and RELATED_ATTRIBUTE_ID in (select ATTRIBUTE_ID from CONTENT_ATTRIBUTE where CONTENT_ID  = @content_id)

  insert into @main_ids
  values(@content_id)


  insert into @attributes(name)
  select CASE c.CONTENT_ID WHEN @content_id THEN ca.ATTRIBUTE_NAME ELSE c.CONTENT_NAME + '.' + CA.ATTRIBUTE_NAME END
  from content_attribute ca
  inner join content c on ca.CONTENT_ID = c.CONTENT_ID
  where ca.CONTENT_ID in (select id from @main_ids)
  order by C.CONTENT_ID, CA.attribute_order

  SELECT @fields = COALESCE(@fields + ', ', '') + '[' + name + ']' FROM @attributes
  SELECT @prefixed_fields = COALESCE(@prefixed_fields + ', ', '') + 'pt.[' + name + ']' FROM @attributes

  if @version_id = 0
    set @version_sql = ''
  else
    set @version_sql = ' and vcd.CONTENT_ITEM_VERSION_ID= @version_id'


  declare @ids nvarchar(max)
  select @ids = coalesce(@ids + ', ', '') + cast(id as nvarchar(10)) from @main_ids

  set @sql = N'select pt.content_item_id, pt.version_id, pt.created, pt.created_by, pt.modified, pt.last_modified_by, ' + @prefixed_fields  + N' from
  (
  select civ.CONTENT_ITEM_ID, civ.CREATED, civ.CREATED_BY, civ.MODIFIED, civ.LAST_MODIFIED_BY, vcd.CONTENT_ITEM_VERSION_ID as version_id,
  case ca.CONTENT_ID when @content_id THEN ca.ATTRIBUTE_NAME ELSE c.CONTENT_NAME + ''.'' + ca.ATTRIBUTE_NAME END AS ATTRIBUTE_NAME,
  dbo.qp_get_version_data(vcd.ATTRIBUTE_ID, vcd.CONTENT_ITEM_VERSION_ID) as data
  from CONTENT_ATTRIBUTE ca
  INNER JOIN CONTENT c on ca.CONTENT_ID = c.CONTENT_ID
  left outer join VERSION_CONTENT_DATA vcd on ca.ATTRIBUTE_ID = vcd.ATTRIBUTE_ID
  inner join CONTENT_ITEM_VERSION civ on vcd.CONTENT_ITEM_VERSION_ID = civ.CONTENT_ITEM_VERSION_ID
  where ca.CONTENT_ID in (' + @ids + ') and civ.CONTENT_ITEM_ID = @item_id ' + @version_sql + ') as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt order by pt.version_id desc

  '

  exec sp_executesql @sql, N'@content_id numeric, @item_id numeric, @version_id numeric', @content_id = @content_id, @item_id = @item_id, @version_id = @version_id
end
end
GO


ALTER PROCEDURE [dbo].[qp_replicate]
@content_item_id numeric
AS
BEGIN
  set nocount on

  declare @sql nvarchar(max), @sql_piece nvarchar(max)
  declare @table_name nvarchar(50), @async_table_name nvarchar(50)

  declare @attribute_name nvarchar(255), @attribute_type_id numeric, @attribute_id numeric, @attribute_size numeric, @default_value nvarchar(255)

  declare @content_id numeric, @virtual_type numeric
  declare @workflow_id numeric, @is_async numeric, @is_target_table_async bit

  declare @status_type_id numeric, @visible numeric, @archive numeric
  declare @last_modified_by numeric, @created datetime, @modified datetime

  declare @item_exists bit

  declare @i numeric, @count numeric
  declare @end nvarchar(2)
  set @end = ';' + char(13)

  /* Replicate content_item */

  select
    @status_type_id = ci.status_type_id, @visible = ci.visible, @archive = ci.archive,
    @last_modified_by = ci.last_modified_by, @created = ci.created, @modified = ci.modified,
    @content_id = c.content_id, @workflow_id = ciw.workflow_id, @is_async = ciw.is_async
    from content_item ci with(nolock)
    inner join content c with(nolock) on ci.content_id = c.content_id
    left outer join content_item_workflow ciw with(nolock) on ci.content_item_id = ciw.content_item_id
    where ci.content_item_id = @content_item_id


  exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

  exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out

  if @item_exists = 0 begin
    exec qp_get_insert_item_sql @table_name, @content_item_id, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql_piece out, @created = @created, @modified = @modified
    set @sql = @sql_piece + @end
  end
  else begin
    exec qp_get_update_item_sql @table_name, @content_item_id, @modified, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql_piece out
    set @sql = @sql_piece + @end
  end

  if @is_target_table_async = 0
  begin
    set @async_table_name = 'content_' + convert(nvarchar, @content_id) + '_ASYNC'
    exec qp_get_delete_item_sql @async_table_name, @content_item_id, @sql = @sql_piece out
    set @sql = @sql + @sql_piece + @end
  end

  print @sql
  exec sp_executesql @sql

  /* Replicate content_data */

  exec qp_update_with_content_data_pivot @content_item_id

  update content_item with(rowlock) set not_for_replication = 0 where content_item_id = @content_item_id
END
GO

ALTER TRIGGER [dbo].[tu_not_for_replication] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
BEGIN
  if update(not_for_replication)
  begin
    update base set base.not_for_replication = i.not_for_replication
    from content_data base inner join inserted i on i.content_item_id = base.CONTENT_ITEM_ID
  end
END
GO

ALTER TRIGGER [dbo].[tu_update_item] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
begin
  if not update(locked_by) and not update(splitted) and not UPDATE(not_for_replication)
  begin
    declare @content_id numeric , @content_item_id numeric, @last_modified_by numeric, @modified datetime, @created datetime, @status_type_id numeric, @visible numeric, @archive numeric
    declare @char_content_id nvarchar(10), @char_content_item_id nvarchar(10)
    declare @sql nvarchar(2000)
    declare @async_string varchar(20), @table_name varchar(25), @is_target_table_async bit
    declare @async_id numeric, @item_exists bit, @not_for_replication bit
    declare @workflow_id numeric, @is_async NUMERIC
    declare @i numeric, @count numeric

    DECLARE @ci table (
      id numeric identity(1,1) primary key,
      content_item_id numeric,
      content_id numeric,
      workflow_id numeric,
      is_async numeric,
      not_for_replication bit
    )

    insert into @ci(content_item_id, content_id, workflow_id, is_async, not_for_replication)
      select i.content_item_id, i.content_id, ciw.workflow_id, ciw.is_async, i.not_for_replication
      FROM inserted AS i
      INNER JOIN content AS c with(nolock) ON i.content_id = c.content_id
      LEFT OUTER JOIN content_item_workflow ciw with(nolock) on i.content_item_id = ciw.content_item_id
      where c.virtual_type = 0
    select @count = count(id) from @ci

    set @i = 1
    while @i < @count + 1
    begin
      select
        @content_item_id = content_item_id, @content_id = content_id,
        @workflow_id = workflow_id, @is_async = is_async, @not_for_replication = not_for_replication
        from @ci where id = @i

      exec qp_define_target_table @content_item_id, @content_id, @workflow_id, @is_async, @is_target_table_async = @is_target_table_async out, @table_name = @table_name out

      update content_item set splitted = @is_target_table_async where content_item_id = @content_item_id

      if @not_for_replication = 0 and not update(not_for_replication)
      begin

        select @modified = modified, @created = created, @status_type_id = status_type_id,
        @archive = archive, @visible = visible, @last_modified_by = last_modified_by
        from content_item with(nolock) where content_item_id = @content_item_id

        set @char_content_item_id = convert(nvarchar, @content_item_id)
        set @char_content_id = convert(nvarchar, @content_id)

        exec qp_item_exists @table_name, @content_item_id, @item_exists = @item_exists out
        if @item_exists = 0
        begin
          exec qp_get_insert_item_sql @table_name, @content_item_id, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out, @created = @created, @modified = @modified
          print @sql
          exec sp_executesql @sql
        end
        else
        begin
          exec qp_get_update_item_sql @table_name, @content_item_id, @modified, @last_modified_by, @status_type_id, @visible, @archive, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        if @is_target_table_async = 1 and (update(archive) or update(visible)) begin
          set @table_name = 'content_' + @char_content_id
          exec qp_get_update_flags_sql @table_name, @content_item_id, @visible, @archive, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        if @is_target_table_async = 0
        begin
          set @table_name = 'content_' + @char_content_id + '_ASYNC'
          exec qp_get_delete_item_sql @table_name, @content_item_id, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end
      end
      set @i = @i + 1
    end
  end
end
GO

ALTER TRIGGER [dbo].[ti_access_content_item] ON [dbo].[CONTENT_ITEM] FOR INSERT
AS
  INSERT INTO content_item_access
    (content_item_id, user_id, permission_level_id, last_modified_by)
  SELECT
    content_item_id, last_modified_by, 1, 1
  FROM inserted
  WHERE inserted.LAST_MODIFIED_BY <> 1

  INSERT INTO content_item_access
    (content_item_id, user_id, group_id, permission_level_id, last_modified_by)
  SELECT
    i.content_item_id, ca.user_id, ca.group_id, ca.permission_level_id, 1
  FROM content_access AS ca
    INNER JOIN inserted AS i ON ca.content_id = i.content_id
    LEFT OUTER JOIN user_group AS g ON g.group_id = ca.group_id
  WHERE
    (ca.user_id <> i.last_modified_by or ca.user_id IS NULL)
    AND ((g.shared_content_items = 0 and g.GROUP_ID <> 1) OR g.group_id IS NULL)
    AND ca.propagate_to_items = 1

  INSERT INTO content_item_access
    (content_item_id, group_id, permission_level_id, last_modified_by)
  SELECT DISTINCT
    i.content_item_id, g.group_id, 1, 1
  FROM inserted AS i
    LEFT OUTER JOIN user_group_bind AS gb ON gb.user_id = i.last_modified_by
    LEFT OUTER JOIN user_group AS g ON g.group_id = gb.group_id
  WHERE
    g.shared_content_items = 1 and g.GROUP_ID <> 1

GO

ALTER TRIGGER [dbo].[ti_content_item_access_log_history] ON [dbo].[CONTENT_ITEM_ACCESS] FOR INSERT
AS BEGIN

  INSERT INTO content_item_status_history (content_item_id, user_id, description, system_status_type_id)
    SELECT i.content_item_id, i.LAST_MODIFIED_BY,
    CASE
      WHEN u.user_id IS NOT NULL THEN 'Access permission [' + p.permission_level_name + '] has been added for ' + u.login
      WHEN g.group_id IS NOT NULL THEN 'Access permission [' + p.permission_level_name + '] has been added for ' + g.group_name
      ELSE 'UNKNOWN'
    END as description, 6
  FROM inserted AS i
    LEFT OUTER JOIN permission_level AS p ON p.permission_level_id = i.permission_level_id
    LEFT OUTER JOIN users AS u ON u.user_id = i.user_id
    LEFT OUTER JOIN user_group AS g ON g.group_id = i.group_id
END
GO

delete from CONTENT_ACCESS where USER_ID = 1 or GROUP_ID = 1
GO

ALTER PROCEDURE [dbo].[qp_merge_article]
@item_id numeric
AS
BEGIN
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) set not_for_replication = 1 WHERE content_item_id = @item_id
  UPDATE content_item with(rowlock) set SCHEDULE_NEW_VERSION_PUBLICATION = 0, MODIFIED = GETDATE(), LAST_MODIFIED_BY = 1 where CONTENT_ITEM_ID = @item_id
  exec qp_replicate @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE child_id = @item_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.18', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.18 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.3.19
-- Workflow bug fixes
-- **************************************
exec qp_update_translations 'Do you really want to remove this workflow?', 'Вы действительно хотите удалить этот workflow?'
go

UPDATE BACKEND_ACTION
   SET
       [NAME] = 'Multiple Select Contents For Workflow'
 WHERE
    [Code] = 'multiple_select_contents_for_workflow'
GO

exec qp_update_translations 'Multiple Select Contents For Workflow', 'Выберите контенты для Workflow'
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.19', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.19 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.20
-- Optimization
-- **************************************

exec qp_drop_existing 'qp_get_delete_items_sql', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_get_delete_items_sql]
@content_id numeric,
@ids nvarchar(max),
@is_async bit,
@sql nvarchar(max) output
as
BEGIN
  declare @table_name nvarchar(50)
  set @table_name = 'content_' + CONVERT(nvarchar, @content_id)
  if @is_async = 1
    set @table_name = @table_name + '_async'

  set @sql = 'delete from ' + @table_name + ' with(rowlock) where content_item_id in (' + @ids +  ')'
END
GO

ALTER  TRIGGER [dbo].[td_delete_item] ON [dbo].[CONTENT_ITEM] FOR DELETE AS BEGIN
  declare @content_id numeric, @virtual_type numeric
  declare @sql nvarchar(max)
  declare @ids_list nvarchar(max)


  declare @c table (
    id numeric primary key,
    virtual_type numeric
  )

  insert into @c
  select distinct d.content_id, c.virtual_type
  from deleted d inner join content c
  on d.content_id = c.content_id


  while exists(select id from @c)
  begin

    select @content_id = id, @virtual_type = virtual_type from @c

    declare @ids table
    (
      id numeric primary key,
      char_id nvarchar(30)
    )

    insert into @ids
    select content_item_id, CONVERT(nvarchar, content_item_id) from deleted where content_id = @content_id

    declare @attr_ids table
    (
      id numeric primary key
    )

    insert into @attr_ids
    select ca1.attribute_id from CONTENT_ATTRIBUTE ca1
    inner join content_attribute ca2 on ca1.RELATED_ATTRIBUTE_ID = ca2.ATTRIBUTE_ID
    where ca2.CONTENT_ID = @content_id

    set @ids_list = null
    select @ids_list = coalesce(@ids_list + ', ', '') + char_id from @ids


    /* Drop relations to current item */
    if exists(select id from @attr_ids)
    begin
      UPDATE content_attribute SET default_value = null
        WHERE attribute_id IN (select id from @attr_ids)
        AND default_value IN (select char_id from @ids)

      UPDATE content_data SET data = NULL, blob_data = NULL
        WHERE attribute_id IN (select id from @attr_ids)
        AND data IN (select char_id from @ids)

      DELETE from VERSION_CONTENT_DATA
        where ATTRIBUTE_ID in (select id from @attr_ids)
        AND data IN (select char_id from @ids)
    end

    if @virtual_type = 0
    begin
      exec qp_get_delete_items_sql @content_id, @ids_list, 0, @sql = @sql out
      exec sp_executesql @sql

      exec qp_get_delete_items_sql @content_id, @ids_list, 1, @sql = @sql out
      exec sp_executesql @sql
    end

    delete from @c where id = @content_id
  end
END
GO

exec qp_drop_existing 'qp_get_update_column_sql', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_get_update_column_sql]
@table_name nvarchar(255),
@content_item_ids nvarchar(max),
@attribute_id numeric,
@attribute_type_id numeric,
@attribute_size numeric,
@default_value nvarchar(255),
@attribute_name nvarchar(255),
@sql nvarchar(max) output
AS
BEGIN
  declare @source_column nvarchar(10), @source_function nvarchar(512)
  if @attribute_type_id in (9, 10)
    set @source_column = 'blob_data'
  else
    set @source_column = 'data'

    if @attribute_type_id in (9,10)
    set @source_function = 'cd.' + @source_column
    else
    set @source_function = 'dbo.qp_correct_data(cd.' + @source_column + ', ' + convert(nvarchar, @attribute_type_id) + ', ' + convert(nvarchar, @attribute_size) + ', N''' + isnull(@default_value, '') + ''')'

  set @sql = ' update ' + @table_name + ' set [' + @attribute_name + '] = ' + @source_function + ' from content_data cd '
  set @sql = @sql + ' where ' + @table_name + '.content_item_id in (' + @content_item_ids + ')'
  set @sql = @sql + ' and cd.attribute_id = ' + convert(nvarchar, @attribute_id) + ' and cd.content_item_id = ' + @table_name + '.content_item_id '
END
GO

ALTER TRIGGER [dbo].[tiu_content_fill] ON [dbo].[CONTENT_DATA] FOR INSERT, UPDATE AS
BEGIN
  set nocount on
  IF EXISTS(select content_data_id from inserted where not_for_replication = 0)
  BEGIN
    IF NOT (UPDATE(not_for_replication) AND EXISTS(select content_data_id from deleted))
    BEGIN
      DECLARE @attribute_id NUMERIC, @attribute_type_id NUMERIC, @attribute_size NUMERIC, @default_value NVARCHAR(255), @attribute_name NVARCHAR(255), @content_id NUMERIC
      DECLARE @table_name nvarchar(50), @sql NVARCHAR(max), @ids_list nvarchar(max), @async_ids_list nvarchar(max)

      declare @ca table
      (
        id numeric primary key
      )

      insert into @ca
      select distinct attribute_id from inserted

      while exists(select id from @ca)
      begin

        select @attribute_id = id from @ca

        select @attribute_name = attribute_name, @attribute_type_id = attribute_type_id, @attribute_size = attribute_size, @default_value = default_value, @content_id = content_id
        from content_attribute
        where ATTRIBUTE_ID = @attribute_id

        declare @ids table
        (
          id numeric primary key,
          splitted bit
        )

        insert into @ids
        select i.content_item_id, ci.SPLITTED from inserted i
        inner join content_item ci on ci.CONTENT_ITEM_ID = i.CONTENT_ITEM_ID
        inner join content c on ci.CONTENT_ID = c.CONTENT_ID
        where ATTRIBUTE_ID = @attribute_id and ci.not_for_replication = 0 and c.virtual_type = 0

        set @ids_list = null
        select @ids_list = coalesce(@ids_list + ', ', '') + CONVERT(nvarchar, id) from @ids where splitted = 0
        set @async_ids_list = null
        select @async_ids_list = coalesce(@async_ids_list + ', ', '') + CONVERT(nvarchar, id) from @ids where splitted = 1

        set @table_name = 'content_' + CONVERT(nvarchar, @content_id)

        if @ids_list <> ''
        begin
          exec qp_get_update_column_sql @table_name, @ids_list, @attribute_id, @attribute_type_id, @attribute_size, @default_value, @attribute_name, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        if @async_ids_list <> ''
        begin
          set @table_name = @table_name + '_async'
          exec qp_get_update_column_sql @table_name, @async_ids_list, @attribute_id, @attribute_type_id, @attribute_size, @default_value, @attribute_name, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        delete from @ca where id = @attribute_id
      end --while
    end --if
  end --if
END
GO

exec qp_drop_existing 'qp_get_upsert_items_sql', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_get_upsert_items_sql]
@table_name nvarchar(25),
@ids nvarchar(max),
@sql nvarchar(max) output
as
BEGIN
  set @sql = 'update base set '
  set @sql = @sql + ' base.modified = ci.modified, base.last_modified_by = ci.last_modified_by, base.status_type_id = ci.status_type_id, '
  set @sql = @sql + ' base.visible = ci.visible, base.archive = ci.archive '
  set @sql = @sql + ' from ' + @table_name + ' base with(rowlock) '
  set @sql = @sql + ' inner join content_item ci with(rowlock) on base.content_item_id = ci.content_item_id '
  set @sql = @sql + ' where ci.content_item_id in (' + @ids + ')'
  set @sql = @sql + ';' + CHAR(13) + CHAR(10)

  set @sql = @sql + 'insert into ' + @table_name + ' (content_item_id, created, modified, last_modified_by, status_type_id, visible, archive) '
  set @sql = @sql + ' select ci.content_item_id, ci.created, ci.modified, ci.last_modified_by, ci.status_type_id, ci.visible, ci.archive '
  set @sql = @sql + ' from content_item ci left join ' + @table_name + ' c on ci.content_item_id = c.content_item_id '
  set @sql = @sql + ' where ci.content_item_id in (' + @ids + ') and c.content_item_id is null'
END
GO


exec qp_drop_existing 'qp_get_update_items_flags_sql', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_get_update_items_flags_sql]
@table_name nvarchar(25),
@ids nvarchar(max),
@sql nvarchar(max) output
as
BEGIN
  set @sql = 'update base set '
  set @sql = @sql + ' base.visible = ci.visible, base.archive = ci.archive '
  set @sql = @sql + ' from ' + @table_name + ' base with(rowlock) '
  set @sql = @sql + ' inner join content_item ci with(rowlock) on base.content_item_id = ci.content_item_id '
  set @sql = @sql + ' where ci.content_item_id in (' + @ids + ')'
  set @sql = @sql + ';' + CHAR(13) + CHAR(10)
END
GO

ALTER TRIGGER [dbo].[ti_insert_item] ON [dbo].[CONTENT_ITEM] FOR INSERT AS
BEGIN
    declare @content_id numeric
  declare @ids_list nvarchar(max)

  declare @table_name varchar(50), @sql nvarchar(max)

  declare @contents table
  (
    id numeric primary key
  )

  insert into @contents
  select distinct content_id from inserted
  where CONTENT_ID in (select CONTENT_ID from content where virtual_type = 0)


  while exists (select id from @contents)
  begin
    select @content_id = id from @contents

    declare @ids table
    (
      id numeric primary key
    )

    insert into @ids
    select i.content_item_id from inserted i
    where i.CONTENT_ID = @content_id and i.not_for_replication = 0

    set @ids_list = null
    select @ids_list = coalesce(@ids_list + ',', '') + convert(nvarchar, id) from @ids
    set @table_name = 'content_' + convert(nvarchar, @content_id)

    exec qp_get_upsert_items_sql @table_name, @ids_list, @sql = @sql out
    print @sql
    exec sp_executesql @sql

    delete from @contents where id = @content_id
  end

END
GO

exec qp_drop_existing 'qp_update_items_with_content_data_pivot', 'IsProcedure'
go

CREATE procedure [dbo].[qp_update_items_with_content_data_pivot]
@content_id numeric,
@ids nvarchar(max),
@is_async bit
as
begin

  declare @sql nvarchar(max), @fields nvarchar(max), @update_fields nvarchar(max), @prefixed_fields nvarchar(max), @table_name nvarchar(50)

  set @table_name = 'content_' + CAST(@content_id as nvarchar)
  if (@is_async = 1)
  set @table_name = @table_name + '_async'

  declare @attributes table
  (
    name nvarchar(255) primary key
  )

  insert into @attributes
  select attribute_name from CONTENT_ATTRIBUTE where CONTENT_ID = @content_id

  SELECT @fields = COALESCE(@fields + ', ', '') + '[' + name + ']' FROM @attributes

  SELECT @update_fields = COALESCE(@update_fields + ', ', '') + 'base.[' + name + '] = pt.[' + name + ']' FROM @attributes

  set @sql = N'update base set ' + @update_fields + ' from ' + @table_name + ' base inner join
  (
  select ci.CONTENT_ITEM_ID, ci.STATUS_TYPE_ID, ci.VISIBLE, ci.ARCHIVE, ci.CREATED, ci.MODIFIED, ci.LAST_MODIFIED_BY, ca.ATTRIBUTE_NAME,
  case WHEN ATTRIBUTE_TYPE_ID IN (9, 10) THEN cast (cd.blob_data as nvarchar(max)) ELSE dbo.qp_correct_data(cd.data, ca.attribute_type_id, ca.attribute_size, ca.default_value) END as data
  from CONTENT_ATTRIBUTE ca
  left outer join CONTENT_DATA cd on ca.ATTRIBUTE_ID = cd.ATTRIBUTE_ID
  inner join CONTENT_ITEM ci on cd.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID
  where ca.CONTENT_ID = @content_id and cd.CONTENT_ITEM_ID in (' + @ids + ')
  ) as src
  PIVOT
  (
  MAX(src.data)
  FOR src.ATTRIBUTE_NAME IN (' + @fields +  N')
  ) AS pt
  on pt.content_item_id = base.content_item_id
  '
  print @sql
  exec sp_executesql @sql, N'@content_id numeric', @content_id = @content_id
end
GO

ALTER TRIGGER [dbo].[tiu_populate_content_data] ON [dbo].[CONTENT_ITEM] FOR INSERT, UPDATE AS
BEGIN
  IF NOT
  (
    EXISTS(select content_item_id from deleted)
    AND
    (UPDATE(not_for_replication) OR UPDATE(locked_by) OR UPDATE(splitted))

  )
  insert into content_data
    (i.content_item_id, ca.attribute_id, i.not_for_replication)
    select i.content_item_id, ca.attribute_id, i.not_for_replication
    from inserted i
    inner join content_attribute ca on i.content_id = ca.content_id
    left join content_data cd on cd.ATTRIBUTE_ID = ca.ATTRIBUTE_ID and cd.CONTENT_ITEM_ID = i.CONTENT_ITEM_ID
    where cd.CONTENT_DATA_ID is null
END
GO

exec qp_drop_existing 'qp_replicate_items', 'IsProcedure'
GO

CREATE PROCEDURE [dbo].[qp_replicate_items]
@ids nvarchar(max)
AS
BEGIN
  set nocount on

  declare @sql nvarchar(max), @async_ids_list nvarchar(max), @sync_ids_list nvarchar(max)
  declare @table_name nvarchar(50), @async_table_name nvarchar(50)

  declare @content_id numeric

  declare @articles table
  (
    id numeric primary key,
    splitted bit,
    content_id numeric
  )

  insert into @articles(id) SELECT convert(numeric, nstr) from dbo.splitNew(@ids, ',')

  update base set base.content_id = ci.content_id, base.splitted = ci.SPLITTED from @articles base inner join content_item ci on base.id = ci.CONTENT_ITEM_ID

  declare @contents table
  (
    id numeric primary key
  )

  insert into @contents
  select distinct content_id from @articles

  while exists (select id from @contents)
  begin
    select @content_id = id from @contents

    set @sync_ids_list = null
    select @sync_ids_list = coalesce(@sync_ids_list + ',', '') + convert(nvarchar, id) from @articles where content_id = @content_id and splitted = 0
    set @async_ids_list = null
    select @async_ids_list = coalesce(@async_ids_list + ',', '') + convert(nvarchar, id) from @articles where content_id = @content_id and splitted = 1

    set @table_name = 'content_' + CONVERT(nvarchar, @content_id)
    set @async_table_name = @table_name + '_async'

    if @sync_ids_list <> ''
    begin
      exec qp_get_upsert_items_sql @table_name, @sync_ids_list, @sql = @sql out
      print @sql
      exec sp_executesql @sql

      exec qp_get_delete_items_sql @content_id, @sync_ids_list, 1, @sql = @sql out
      print @sql
      exec sp_executesql @sql

      exec qp_update_items_with_content_data_pivot @content_id, @sync_ids_list, 0
    end

    if @async_ids_list <> ''
    begin
      exec qp_get_upsert_items_sql @async_table_name, @async_ids_list, @sql = @sql out
      print @sql
      exec sp_executesql @sql

      exec qp_get_update_items_flags_sql @table_name, @async_ids_list, @sql = @sql out
      print @sql
      exec sp_executesql @sql

      exec qp_update_items_with_content_data_pivot @content_id, @async_ids_list, 1
    end

    delete from @contents where id = @content_id
  end

  set @sql = 'update content_item  set not_for_replication = 0 where content_item_id in (' + @ids + ' )'
  print @sql
  exec sp_executesql @sql
END
GO

ALTER PROCEDURE [dbo].[qp_replicate]
@content_item_id numeric
AS
BEGIN
  declare @list nvarchar(30)
  set @list = convert(nvarchar, @content_item_id)
  exec qp_replicate_items @list
END
GO

ALTER TRIGGER [dbo].[tu_update_item] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
begin
  if not update(locked_by) and not update(splitted) and not UPDATE(not_for_replication)
  begin
    declare @content_id numeric
    declare @sql nvarchar(max), @table_name varchar(50), @async_table_name varchar(50)
    declare @ids_list nvarchar(max), @async_ids_list nvarchar(max), @sync_ids_list nvarchar(max)

    declare @contents table
    (
      id numeric primary key
    )

    insert into @contents
    select distinct content_id from inserted
    where CONTENT_ID in (select CONTENT_ID from content where virtual_type = 0)

    create table #ids_with_splitted
    (
      id numeric primary key,
      new_splitted bit
    )

    while exists (select id from @contents)
    begin
      select @content_id = id from @contents

      declare @ids table
      (
        id numeric primary key,
        splitted bit,
        not_for_replication bit
      )

      insert into @ids
      select i.content_item_id, i.SPLITTED, i.not_for_replication from inserted i
      inner join content_item ci on i.content_item_id = ci.content_item_id
      where ci.CONTENT_ID = @content_id

      set @ids_list = null
      select @ids_list = coalesce(@ids_list + ',', '') + convert(nvarchar, id) from @ids

      set @sql = 'insert into #ids_with_splitted '
      set @sql = @sql + ' select content_item_id,'
      set @sql = @sql + ' case'
      set @sql = @sql + ' when curr_weight < front_weight and is_workflow_async = 1 then 1'
      set @sql = @sql + ' when curr_weight = workflow_max_weight and delayed = 1 then 1'
      set @sql = @sql + ' else 0'
      set @sql = @sql + ' end'
      set @sql = @sql + ' as new_splitted from ('
      set @sql = @sql + ' select distinct ci.content_item_id, st1.WEIGHT as curr_weight, st2.WEIGHT as front_weight, '
      set @sql = @sql + ' max(st3.WEIGHT) over (partition by ci.content_item_id) as workflow_max_weight, ciw.is_async as is_workflow_async, '
      set @sql = @sql + ' ci.SCHEDULE_NEW_VERSION_PUBLICATION as delayed '
      set @sql = @sql + ' from content_item ci'
      set @sql = @sql + ' inner join content_' + CONVERT(nvarchar, @content_id) + ' c on ci.CONTENT_ITEM_ID = c.CONTENT_ITEM_ID'
      set @sql = @sql + ' inner join STATUS_TYPE st1 on ci.STATUS_TYPE_ID = st1.STATUS_TYPE_ID'
      set @sql = @sql + ' inner join STATUS_TYPE st2 on c.STATUS_TYPE_ID = st2.STATUS_TYPE_ID'
      set @sql = @sql + ' left join content_item_workflow ciw on ci.content_item_id = ciw.content_item_id'
      set @sql = @sql + ' left join workflow_rules wr on ciw.WORKFLOW_ID = wr.WORKFLOW_ID'
      set @sql = @sql + ' left join STATUS_TYPE st3 on st3.STATUS_TYPE_ID = wr.SUCCESSOR_STATUS_ID'
      set @sql = @sql + ' where ci.content_item_id in (' + @ids_list + ')) as main'
      print @sql
      exec sp_executesql @sql

      update base set base.splitted = i.new_splitted from @ids base inner join #ids_with_splitted i on base.id = i.id
      update base set base.splitted = i.splitted from content_item base inner join @ids i on base.CONTENT_ITEM_ID = i.id

      set @sync_ids_list = null
      select @sync_ids_list = coalesce(@sync_ids_list + ',', '') + convert(nvarchar, id) from @ids where splitted = 0 and not_for_replication = 0
      set @async_ids_list = null
      select @async_ids_list = coalesce(@async_ids_list + ',', '') + convert(nvarchar, id) from @ids where splitted = 1 and not_for_replication = 0

      set @table_name = 'content_' + CONVERT(nvarchar, @content_id)
      set @async_table_name = @table_name + '_async'

      if @sync_ids_list <> ''
      begin
        exec qp_get_upsert_items_sql @table_name, @sync_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql

        exec qp_get_delete_items_sql @content_id, @sync_ids_list, 1, @sql = @sql out
        print @sql
        exec sp_executesql @sql
      end

      if @async_ids_list <> ''
      begin
        exec qp_get_upsert_items_sql @async_table_name, @async_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql

        exec qp_get_update_items_flags_sql @table_name, @async_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql
      end

      delete from #ids_with_splitted
      delete from @contents where id = @content_id
    end

    drop table #ids_with_splitted

  end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.20', 'Copyright &copy; 1998-2012 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.20 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.21
-- Local trigger disabling
-- **************************************

ALTER TRIGGER [dbo].[tbd_delete_site] ON [dbo].[SITE] INSTEAD OF DELETE
AS
BEGIN
  create table #disable_td_delete_item (id numeric)
  create table #disable_td_content_attribute_clean_empty_links (id numeric)
  create table #disable_td_remove_field (id numeric)
  create table #disable_td_reorder_fields (id numeric)
  create table #disable_td_content_indexes (id numeric)
  create table #disable_tu_object_format_modified (id numeric)
  create table #disable_tiu_bind_objects_by_name (id numeric)
  create table #disable_tbd_delete_object_format (id numeric)
  create table #disable_tiud_values_format_modified (id numeric)
  create table #disable_tiud_statuses_format_modified (id numeric)
  create table #disable_td_item_to_item (id numeric)


  delete from item_to_item where link_id in
  (select link_id from site_content_link scl
  inner join deleted d on d.site_id = scl.site_id)

  delete content_item_status_history from content_item_status_history cis
  inner join content_item ci on ci.content_item_id = cis.content_item_id
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content_item from content_item ci
  inner join content c on c.content_id = ci.content_id
  inner join deleted d on d.site_id = c.site_id

  delete content from content c
  inner join deleted d on d.site_id = c.site_id

  update [object] set object_format_id = null from [object] obj
  inner join page_template pt on obj.page_template_id = pt.page_template_id
  inner join deleted d on d.site_id = pt.site_id

  delete page_template from page_template pt
  inner join deleted d on d.site_id = pt.site_id

  delete [ACTION_SITE_BIND] from [ACTION_SITE_BIND] asb
  inner join deleted d on d.site_id = asb.site_id

  delete [VE_COMMAND_SITE_BIND] from [VE_COMMAND_SITE_BIND] vcsb
  inner join deleted d on d.SITE_ID = vcsb.SITE_ID

  delete [VE_STYLE_SITE_BIND] from [VE_STYLE_SITE_BIND] vssb
  inner join deleted d on d.SITE_ID = vssb.SITE_ID

  delete site from site s
  inner join deleted d on d.site_id = s.site_id

  drop table #disable_td_delete_item
  drop table #disable_td_content_attribute_clean_empty_links
  drop table #disable_td_remove_field
  drop table #disable_td_reorder_fields
  drop table #disable_td_content_indexes
  drop table #disable_tu_object_format_modified
  drop table #disable_tiu_bind_objects_by_name
  drop table #disable_tbd_delete_object_format
  drop table #disable_tiud_values_format_modified
  drop table #disable_tiud_statuses_format_modified
  drop table #disable_td_item_to_item
END
GO

ALTER TRIGGER [dbo].[tiud_statuses_format_modified] ON [dbo].[CONTAINER_STATUSES]
FOR UPDATE, INSERT, DELETE
AS
begin
  if object_id('tempdb..#disable_tiud_statuses_format_modified') is null
  begin
    update object_format set assemble_in_live = 1, assemble_in_stage = 1, modified = getdate() where object_id in (select object_id from deleted union select object_id from inserted)
  end
end
GO


ALTER TRIGGER [dbo].[tiud_values_format_modified] ON [dbo].[OBJECT_VALUES]
FOR UPDATE, INSERT, DELETE
AS
begin
  if object_id('tempdb..#disable_tiud_values_format_modified') is null
  begin
    update object_format set assemble_in_live = 1, assemble_in_stage = 1, modified = getdate() where object_id in (select object_id from deleted union select object_id from inserted)
  end
end
go

ALTER TRIGGER [dbo].[tbd_delete_object_format] ON [dbo].[OBJECT_FORMAT]
INSTEAD OF DELETE
AS
BEGIN
  if object_id('tempdb..#disable_tbd_delete_object_format') is null
  begin
    declare @obj table (
      id numeric identity,
      [object_id] numeric
    )
    declare @i numeric, @count numeric, @object_id numeric, @new_object_format_id numeric

    insert into @obj([object_id])
    select obj.[object_id] from deleted d
    inner join object obj
    on obj.object_format_id = d.object_format_id

    set @i = 1
    select @count = count(id) from @obj

    while @i < @count + 1
    begin
      select @object_id = object_id from @obj where id = @i

      select top 1 @new_object_format_id = object_format_id from object_format where object_id = @object_id and object_format_id not in (select object_format_id from deleted)
      update object set object_format_id = @new_object_format_id where object_id = @object_id

      set @i = @i + 1
    end


    update object set object_format_id = null where object_format_id in (select object_format_id from deleted)

    update notifications set format_id = null where format_id in (select object_format_id from deleted)

    delete page_trace from page_trace pt
    inner join page_trace_format ptf on pt.trace_id = ptf.trace_id
    inner join deleted d on ptf.format_id = d.object_format_id

    delete object_format from object_format objf
    inner join deleted d on objf.object_format_id = d.object_format_id
  end
end
go


ALTER TRIGGER [dbo].[tiu_bind_objects_by_name] ON [dbo].[OBJECT] FOR INSERT, UPDATE AS
BEGIN

  if object_id('tempdb..#disable_tiu_bind_objects_by_name') is null
  begin
    declare @i numeric, @count numeric, @max numeric
    declare @object_id numeric, @object_name nvarchar(255), @page_id numeric, @page_template_id numeric

    declare @obj table (
      id numeric identity(1,1) primary key,
      [object_id] numeric,
      [object_name] nvarchar(255),
      page_id numeric,
      page_template_id numeric
    )

    insert into @obj([object_name], page_id, page_template_id, [object_id])
    select [object_name], page_id, page_template_id, [object_id] from inserted


    set @i = 1
    select @count = count(id) from @obj

    while @i < @count + 1
    begin
      select @object_name = [object_name], @object_id = [object_id], @page_id = page_id, @page_template_id = page_template_id
      from @obj where id = @i
      if (@page_id is null) begin
        update object set parent_object_id = @object_id where page_template_id = @page_template_id and page_id is not null and [object_name] = @object_name
      end
      else begin
        update object set parent_object_id = (select [object_id] from object where page_template_id = @page_template_id and page_id is null and [object_name] = @object_name) where [object_id] = @object_id
      end

      set @i = @i + 1
    end
  end

END
GO

ALTER TRIGGER [dbo].[tu_object_format_modified] ON [dbo].[OBJECT]
FOR UPDATE
AS

if object_id('tempdb..#disable_tu_object_format_modified') is null
begin
  if update(page_id) or update([object_name]) or update(object_type_id) or update(net_object_name) or update(enable_viewstate) or update(control_custom_class) or update(disable_databind)
    update object_format set assemble_in_live = 1, assemble_in_stage = 1 where object_id in (select object_id from inserted)
    UPDATE page SET reassemble = 1 WHERE page_id IN
    (
      SELECT page_id FROM inserted
      UNION
      SELECT DISTINCT p.page_id FROM inserted AS i LEFT OUTER JOIN page AS p ON p.page_template_id = i.page_template_id
      WHERE i.page_id IS NULL
    )
end
GO

ALTER TRIGGER [dbo].[td_content_indexes] ON [dbo].[content_constraint]
FOR DELETE
AS
DECLARE @constraint_id numeric
if object_id('tempdb..#disable_td_content_indexes') is null
begin
  DECLARE @content_id numeric
  DECLARE Constraints CURSOR FOR SELECT constraint_id, content_id FROM deleted
  OPEN Constraints
  FETCH NEXT FROM Constraints INTO @constraint_id, @content_id
  WHILE @@fetch_status = 0 BEGIN
    exec qp_drop_complex_index @constraint_id, 1, @content_id
    exec qp_drop_complex_index @constraint_id, 0, @content_id
    FETCH NEXT FROM Constraints INTO @constraint_id, @content_id
  END
  CLOSE Constraints
  DEALLOCATE Constraints
end
GO

ALTER TRIGGER [dbo].[td_item_to_item] ON [dbo].[item_to_item] AFTER DELETE
AS
BEGIN
  if object_id('tempdb..#disable_td_item_to_item') is null
  begin
    delete item_to_item from item_to_item ii inner join deleted d on ii.link_id = d.link_id and ii.l_item_id = d.r_item_id and ii.r_item_id = d.l_item_id
  end
END
GO

ALTER TRIGGER [dbo].[td_reorder_fields] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN

  if object_id('tempdb..#disable_td_reorder_fields') is null
  begin

    declare @attribute_id numeric, @content_id numeric
    declare @i numeric, @j numeric
    declare @content_count numeric, @attribute_count numeric
    declare @max numeric

    declare @c table (
      id numeric identity(1,1) primary key,
      content_id numeric
    )

    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric
    )

    /* Collect affected items */
    insert into @c(content_id)
    select distinct content_id from deleted

    select @content_count = count(id) from @c
    set @i = 1

    while @i < @content_count + 1
    begin
      select @content_id = content_id from @c where id = @i

      delete from @ca

      insert into @ca (attribute_id)
      select attribute_id from content_attribute where content_id = @content_id order by attribute_order asc

      select @attribute_count = count(id) from @ca
      set @j = 1

      while @j < @attribute_count + 1
      begin
        select @attribute_id = attribute_id from @ca where id = @j

        update content_attribute set attribute_order = @j where attribute_id = @attribute_id

        set @j = @j + 1
      end

      set @i = @i + 1
    end
  end
END
GO

ALTER TRIGGER [dbo].[td_remove_field] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN

  if object_id('tempdb..#disable_td_remove_field') is null
  begin
    declare @attribute_id numeric, @attribute_name nvarchar(255), @content_id numeric
    declare @indexed numeric, @type_name nvarchar(255)

    declare @base_table_name nvarchar(30), @table_name nvarchar(30)

    declare @i numeric, @count numeric

    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      attribute_name nvarchar(255),
      type_name nvarchar(255),
      indexed numeric,
      content_id numeric
    )

    /* Collect affected items */
    insert into @ca (attribute_id, attribute_name, indexed, type_name, content_id)
      select d.attribute_id, d.attribute_name, d.index_flag, at.type_name, d.content_id
      from deleted d
      inner join attribute_type at on d.attribute_type_id = at.attribute_type_id
      inner join content c on d.content_id = c.content_id
      where c.virtual_type = 0
    IF dbo.qp_get_version_control() IS NOT NULL BEGIN
      DELETE FROM VERSION_CONTENT_DATA WHERE ATTRIBUTE_ID IN (SELECT ATTRIBUTE_ID FROM @ca)
    END
    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @attribute_id = attribute_id, @attribute_name = attribute_name, @indexed = indexed,
        @type_name = type_name, @content_id = content_id
        from @ca where id = @i

        set @base_table_name = 'content_' + convert(nvarchar, @content_id)

        /* Drop indexes if exists */
        set @table_name = @base_table_name + '_ASYNC'
        if @indexed = 1
        begin
          exec qp_drop_index @base_table_name, @attribute_name
          exec qp_drop_index @table_name, @attribute_name
        end

        /* Drop columns from both common and async tables */
        exec qp_drop_column @base_table_name, @attribute_name
        exec qp_drop_column @table_name, @attribute_name

        /* Recreate United View */
        exec qp_content_united_view_recreate @content_id
        exec qp_content_frontend_views_recreate @content_id

      set @i = @i + 1
    end
  end
END
GO

ALTER TRIGGER [dbo].[td_content_attribute_clean_empty_links] ON [dbo].[CONTENT_ATTRIBUTE] FOR DELETE
AS
BEGIN
  if object_id('tempdb..#disable_td_content_attribute_clean_empty_links') is null
  begin
    declare @link_id numeric
    declare @i numeric, @count numeric
    declare @links table (
      id numeric identity(1,1) primary key,
      link_id numeric
    )


    insert into @links (link_id)
    select link_id from deleted d where link_id is not null

    set @i = 1
    select @count = count(id) from @links

    while @i < @count + 1
    begin
      select @link_id = link_id from @links where id = @i
      exec qp_drop_link_with_check @link_id
      set @i = @i + 1
    end
  end
END
GO

ALTER  TRIGGER [dbo].[ti_union_contents_auto_map_attrs] ON [dbo].[union_contents] FOR INSERT AS BEGIN
  if object_id('tempdb..#disable_ti_union_contents_auto_map_attrs') is null
  begin
    DECLARE @vcontent_id NUMERIC, @ucontent_id NUMERIC, @master_id numeric, @source_id numeric

    DECLARE uc CURSOR
    FOR SELECT i.virtual_content_id, i.union_content_id, i.master_content_id
    FROM inserted AS i

    OPEN uc
    FETCH NEXT FROM uc INTO @vcontent_id, @ucontent_id, @master_id
    WHILE  @@FETCH_STATUS = 0 BEGIN
    -- select the source of virtual content attributes
    IF @master_id IS NULL
    SET @source_id = @ucontent_id
    ELSE
    SET @source_id = @master_id
    -- create virtual content attributes
    INSERT INTO content_attribute (
      content_id, attribute_name, attribute_size, attribute_type_id,
      last_modified_by, attribute_order, related_attribute_id,
      format_mask, input_mask, default_value, index_flag, description, required,
      primary_flag, permanent_flag, relation_condition, display_as_radio_button,
      view_in_list, readonly_flag, allow_stage_edit, attribute_configuration, related_image_attribute_id, default_blob_value,
      use_site_library, link_id

    ) SELECT
      @vcontent_id, attribute_name, attribute_size, attribute_type_id,
      last_modified_by, 0, related_attribute_id,
      format_mask, input_mask, default_value, index_flag, description, required,
      primary_flag, permanent_flag, relation_condition, display_as_radio_button,
      view_in_list, readonly_flag, allow_stage_edit, attribute_configuration, related_image_attribute_id, default_blob_value,
      use_site_library, link_id
    FROM content_attribute
    WHERE
      content_id = @source_id
      AND attribute_name NOT IN (SELECT attribute_name FROM content_attribute WHERE content_id = @vcontent_id)
    -- autocreate attributes for unified contents
    IF @master_id <> 0 BEGIN
      INSERT INTO content_attribute (
      content_id, attribute_name, attribute_size, attribute_type_id,
      last_modified_by, attribute_order, related_attribute_id,
      format_mask, input_mask, default_value, index_flag, description, required,
      primary_flag, permanent_flag, relation_condition, display_as_radio_button,
      view_in_list, readonly_flag, allow_stage_edit, attribute_configuration, related_image_attribute_id, default_blob_value,
      use_site_library, link_id
      ) SELECT
      @ucontent_id, attribute_name, attribute_size, attribute_type_id,
      last_modified_by, 0, related_attribute_id,
      format_mask, input_mask, default_value, index_flag, description, required,
      primary_flag, permanent_flag, relation_condition, display_as_radio_button,
      view_in_list, readonly_flag, allow_stage_edit, attribute_configuration, related_image_attribute_id, default_blob_value,
      use_site_library, link_id
      FROM content_attribute
      WHERE
      content_id = @vcontent_id
      AND attribute_id NOT IN (
        SELECT mca.attribute_id
        FROM content_attribute mca
        LEFT JOIN content_attribute oca
        ON mca.attribute_name = oca.attribute_name AND mca.attribute_type_id = oca.attribute_type_id
        WHERE mca.content_id = @vcontent_id and oca.content_id = @ucontent_id
      )
    END
    -- autocreate attribute mappings
    INSERT INTO union_attrs
      (virtual_attr_id, union_attr_id)
    SELECT
      va.attribute_id, map.attribute_id
    FROM content_attribute AS va
      LEFT OUTER JOIN content AS c ON c.content_id = va.content_id
      LEFT OUTER JOIN inserted AS i ON i.virtual_content_id = va.content_id
      LEFT OUTER JOIN content_attribute AS map
      ON
        map.content_id = i.union_content_id
        AND map.attribute_name = va.attribute_name
    AND map.attribute_type_id = va.attribute_type_id
    WHERE
      c.virtual_type = 2
      AND map.attribute_id IS NOT NULL
      AND NOT EXISTS (
      SELECT * FROM union_attrs AS ua
      WHERE ua.virtual_attr_id = va.attribute_id AND ua.union_attr_id = map.attribute_id
      )
    FETCH NEXT FROM uc INTO @vcontent_id, @ucontent_id, @master_id
    END
    CLOSE uc
    DEALLOCATE uc
  END
END
GO

ALTER TRIGGER [dbo].[tu_content_attribute_m2m_default_value] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
  if update(link_id) and object_id('tempdb..#disable_tu_content_attribute_m2m_default_value') is null
  begin
    declare @link_id numeric, @attribute_id numeric, @version numeric
    declare @i numeric, @count numeric
    declare @links table (
      id numeric identity(1,1) primary key,
      link_id numeric,
      attribute_id numeric
    )

    insert into @links (link_id, attribute_id)
      select i.link_id, i.attribute_id from inserted i
      inner join deleted d on d.attribute_id = i.attribute_id
      where i.link_id IS NOT NULL AND (d.link_id IS NULL OR d.link_id <> i.link_id)

    set @i = 1
    select @count = count(id) from @links

    while @i < @count + 1
    begin
      select @link_id = link_id, @attribute_id = attribute_id from @links where id = @i
      update content_attribute set default_value = link_id where attribute_id = @attribute_id
      update content_data set data = @link_id where data is not null and attribute_id = @attribute_id
      set @i = @i + 1
    end
  end
END
GO

ALTER TRIGGER [dbo].[ti_set_max_order] ON [dbo].[CONTENT_ATTRIBUTE] FOR INSERT
AS
BEGIN

  if object_id('tempdb..#disable_ti_set_max_order') is null
  begin

    declare @attribute_id numeric, @content_id numeric
    declare @i numeric, @count numeric, @max numeric
    declare @ca table (
      id numeric identity(1,1) primary key,
      attribute_id numeric,
      content_id numeric
    )

    /* Collect affected items */
    insert into @ca (attribute_id, content_id)
    select attribute_id, content_id from inserted

    set @i = 1
    select @count = count(id) from @ca

    while @i < @count + 1
    begin
      select @attribute_id = attribute_id , @content_id = content_id from @ca where id = @i

      select @max = MAX(attribute_order) from CONTENT_ATTRIBUTE where content_id = @content_id

      update CONTENT_ATTRIBUTE set ATTRIBUTE_ORDER =  ISNULL(@max, 0) + 1 where attribute_id = @attribute_id

      set @i = @i + 1
    end
  END
END
GO

ALTER TRIGGER [dbo].[tbd_delete_content] ON [dbo].[CONTENT] INSTEAD OF DELETE
AS
BEGIN
  create table #disable_td_delete_item(id numeric)

  UPDATE content_attribute SET related_attribute_id = NULL
  where related_attribute_id in (
    select attribute_id from content_attribute ca
    inner join deleted d on ca.content_id = d.content_id
  )

  update content_attribute set link_id = null where link_id in (select link_id from content_link cl
  inner join deleted d on cl.content_id = d.content_id)

  delete content_to_content from content_to_content cc
  inner join deleted d on d.content_id = cc.r_content_id or d.content_id = cc.l_content_id

  delete container from container c
  inner join deleted d on d.content_id = c.content_id

  delete content_form from content_form cf
  inner join deleted d on d.content_id = cf.content_id

  delete content_item from content_item ci
  inner join deleted d on d.content_id = ci.content_id

  delete content_tab_bind from content_tab_bind ctb
  inner join deleted d on d.content_id = ctb.content_id

  delete [ACTION_CONTENT_BIND] from [ACTION_CONTENT_BIND] acb
  inner join deleted d on d.content_id = acb.content_id

  delete ca from CONTENT_ATTRIBUTE ca
  inner join CONTENT_ATTRIBUTE cad on ca.BACK_RELATED_ATTRIBUTE_ID = cad.ATTRIBUTE_ID
  inner join deleted c on cad.CONTENT_ID = c.CONTENT_ID

  delete content from content c inner join deleted d on c.content_id = d.content_id

  drop table #disable_td_delete_item
END
GO

ALTER  TRIGGER [dbo].[td_delete_item] ON [dbo].[CONTENT_ITEM] FOR DELETE AS BEGIN

  if object_id('tempdb..#disable_td_delete_item') is null
  begin

    declare @content_id numeric, @virtual_type numeric
    declare @sql nvarchar(max)
    declare @ids_list nvarchar(max)


    declare @c table (
      id numeric primary key,
      virtual_type numeric
    )

    insert into @c
    select distinct d.content_id, c.virtual_type
    from deleted d inner join content c
    on d.content_id = c.content_id


    while exists(select id from @c)
    begin

      select @content_id = id, @virtual_type = virtual_type from @c

      declare @ids table
      (
        id numeric primary key,
        char_id nvarchar(30)
      )

      insert into @ids
      select content_item_id, CONVERT(nvarchar, content_item_id) from deleted where content_id = @content_id

      declare @attr_ids table
      (
        id numeric primary key
      )

      insert into @attr_ids
      select ca1.attribute_id from CONTENT_ATTRIBUTE ca1
      inner join content_attribute ca2 on ca1.RELATED_ATTRIBUTE_ID = ca2.ATTRIBUTE_ID
      where ca2.CONTENT_ID = @content_id

      set @ids_list = null
      select @ids_list = coalesce(@ids_list + ', ', '') + char_id from @ids


      /* Drop relations to current item */
      if exists(select id from @attr_ids)
      begin
        UPDATE content_attribute SET default_value = null
          WHERE attribute_id IN (select id from @attr_ids)
          AND default_value IN (select char_id from @ids)

        UPDATE content_data SET data = NULL, blob_data = NULL
          WHERE attribute_id IN (select id from @attr_ids)
          AND data IN (select char_id from @ids)

        DELETE from VERSION_CONTENT_DATA
          where ATTRIBUTE_ID in (select id from @attr_ids)
          AND data IN (select char_id from @ids)
      end

      if @virtual_type = 0
      begin
        exec qp_get_delete_items_sql @content_id, @ids_list, 0, @sql = @sql out
        exec sp_executesql @sql

        exec qp_get_delete_items_sql @content_id, @ids_list, 1, @sql = @sql out
        exec sp_executesql @sql
      end

      delete from @c where id = @content_id
    end
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.21', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.21 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.3.22
-- Set HAS_PRE_ACTION = 1 for clear_content mutistep action
-- **************************************

update backend_action set HAS_PRE_ACTION = 1 where CODE = 'clear_content'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.22', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.22 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.23
-- Fix multiple update
-- **************************************

ALTER TRIGGER [dbo].[tiu_content_fill] ON [dbo].[CONTENT_DATA] FOR INSERT, UPDATE AS
BEGIN
  set nocount on
  IF EXISTS(select content_data_id from inserted where not_for_replication = 0)
  BEGIN
    IF NOT (UPDATE(not_for_replication) AND EXISTS(select content_data_id from deleted))
    BEGIN
      DECLARE @attribute_id NUMERIC, @attribute_type_id NUMERIC, @attribute_size NUMERIC, @default_value NVARCHAR(255), @attribute_name NVARCHAR(255), @content_id NUMERIC
      DECLARE @table_name nvarchar(50), @sql NVARCHAR(max), @ids_list nvarchar(max), @async_ids_list nvarchar(max)

      declare @ca table
      (
        id numeric primary key
      )

      insert into @ca
      select distinct attribute_id from inserted


      declare @ids table
      (
        id numeric primary key,
        splitted bit
      )

      while exists(select id from @ca)
      begin

        select @attribute_id = id from @ca

        select @attribute_name = attribute_name, @attribute_type_id = attribute_type_id, @attribute_size = attribute_size, @default_value = default_value, @content_id = content_id
        from content_attribute
        where ATTRIBUTE_ID = @attribute_id

        insert into @ids
        select i.content_item_id, ci.SPLITTED from inserted i
        inner join content_item ci on ci.CONTENT_ITEM_ID = i.CONTENT_ITEM_ID
        inner join content c on ci.CONTENT_ID = c.CONTENT_ID
        where ATTRIBUTE_ID = @attribute_id and ci.not_for_replication = 0 and c.virtual_type = 0

        set @ids_list = null
        select @ids_list = coalesce(@ids_list + ', ', '') + CONVERT(nvarchar, id) from @ids where splitted = 0
        set @async_ids_list = null
        select @async_ids_list = coalesce(@async_ids_list + ', ', '') + CONVERT(nvarchar, id) from @ids where splitted = 1

        set @table_name = 'content_' + CONVERT(nvarchar, @content_id)

        if @ids_list <> ''
        begin
          exec qp_get_update_column_sql @table_name, @ids_list, @attribute_id, @attribute_type_id, @attribute_size, @default_value, @attribute_name, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        if @async_ids_list <> ''
        begin
          set @table_name = @table_name + '_async'
          exec qp_get_update_column_sql @table_name, @async_ids_list, @attribute_id, @attribute_type_id, @attribute_size, @default_value, @attribute_name, @sql = @sql out
          print @sql
          exec sp_executesql @sql
        end

        delete from @ca where id = @attribute_id

        delete from @ids
      end --while
    end --if
  end --if
END
GO

exec qp_drop_existing 'qp_paged_articles_list', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_related_articles_list', 'IsProcedure'
go

exec qp_drop_existing 'qp_get_articles_tree', 'IsProcedure'
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.23', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.23 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.24
-- group support
-- **************************************

ALTER function [dbo].[qp_entity_access_level](@user_id numeric, @group_id numeric, @entity_code nvarchar(255), @entity_id numeric) returns int
as
begin
  declare @old_code nvarchar(255)
  set @old_code = null
  if @entity_code = 'article'
    set @old_code = 'content_item'
  else if @entity_code = 'virtual_content'
    set @old_code = 'content'
  else if @entity_code = 'site_folder'
    set @old_code = 'folder'
  else if @entity_code in ('content', 'site', 'content_folder')
    set @old_code = @entity_code

  declare @result int
  if @old_code is null
    select @result = permission_level from PERMISSION_LEVEL where PERMISSION_LEVEL_NAME = 'Full Access'
  else
    select @result = dbo.qp_is_entity_accessible(@old_code, @entity_id, @user_id, @group_id, 0, 0, 1)
  return @result
end
GO

ALTER FUNCTION [dbo].[qp_is_entity_action_type_accessible]
(
  @user_id int,
  @group_id int,
  @entity_type_code nvarchar(50),
  @entity_id numeric,
  @action_type_code nvarchar(50)
)
RETURNS BIT
AS
BEGIN
  declare @level int
  select @level = pl.PERMISSION_LEVEL from ACTION_TYPE at
  INNER JOIN PERMISSION_LEVEL pl on at.REQUIRED_PERMISSION_LEVEL_ID = pl.PERMISSION_LEVEL_ID
  where at.CODE = @action_type_code

  declare @result bit

  if dbo.qp_entity_access_level(@user_id, @group_id, @entity_type_code, @entity_id) >= @level
    set @result = 1
  else
    set @result = 0
  RETURN @result
END
GO
GO

ALTER FUNCTION [dbo].[qp_action_visible](@user_id int, @entity_code nvarchar(50), @entity_id numeric, @action_code nvarchar(50)) returns bit
AS
BEGIN
  declare @result bit

  if @entity_id = 0
  begin
    set @result = 1
  end
  else
  begin
    declare @action_level int, @permitted_level int
    select @permitted_level = dbo.qp_entity_access_level(@user_id, 0, @entity_code, @entity_id)

    select @action_level = pl.PERMISSION_LEVEL from BACKEND_ACTION ba
    INNER JOIN ACTION_TYPE at on ba.TYPE_ID = at.ID
    INNER JOIN PERMISSION_LEVEL pl on at.REQUIRED_PERMISSION_LEVEL_ID = pl.PERMISSION_LEVEL_ID
    where ba.CODE = @action_code

    if @permitted_level >= @action_level
      set @result = 1
    else
      set @result = 0
  end
  RETURN @result
END
GO

ALTER PROCEDURE [dbo].[qp_get_folders_tree]
  @user_id numeric(18,0),
  @parent_entity_id numeric(18,0),
  @is_site bit = 1,
  @parent_folder_id numeric(18,0) = NULL,
  @permission_level numeric(18,0),
  @count_only bit = 0,
  @total_records int OUTPUT
AS
BEGIN

  DECLARE @security_sql AS nvarchar(max), @sql_result AS nvarchar(max)
  DECLARE @entity_name AS nvarchar(50), @parent_entity_name AS nvarchar(50)
  DECLARE @use_security bit, @parent_level numeric, @block_filter nvarchar(10)

  SET @entity_name = case @is_site when 1 then 'folder' else 'content_folder' end
  print @entity_name
  SET @parent_entity_name = case @is_site when 1 then 'site' else 'content' end
  print @parent_entity_name

  set @use_security = 1

  if dbo.qp_is_user_admin(@user_id) = 1
    set @use_security = 0

  set @block_filter = ''
  if @entity_name = 'content_folder'
  begin
    set @use_security = 0
    select @parent_level = dbo.qp_entity_access_level(@user_id, 0, @parent_entity_name, @parent_entity_id)
    if @parent_level = 0
      set @block_filter = ' AND 1 = 0 '
  end
  else if @parent_folder_id is not null
  begin
    select @parent_level = dbo.qp_entity_access_level(@user_id, 0, 'site_folder', @parent_folder_id)
  end
  else
  begin
    select @parent_level = dbo.qp_entity_access_level(@user_id, 0, @parent_entity_name, @parent_entity_id)
  end

  if @use_security = 1
    EXEC dbo.qp_GetPermittedItemsAsQuery
      @user_id = @user_id,
      @group_id = 0,
      @start_level = 0,
      @end_level = 4,
      @entity_name = @entity_name,
      @parent_entity_name = @parent_entity_name,
      @parent_entity_id = @parent_entity_id,
      @SQLOut = @security_sql OUTPUT

  SET @sql_result = ''
  SET @sql_result = @sql_result + 'SELECT ' + CHAR(13)
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + ' c.FOLDER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.CREATED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.MODIFIED, ' + CHAR(13)
      SET @sql_result = @sql_result + ' c.LAST_MODIFIED_BY, ' + CHAR(13)
      SET @sql_result = @sql_result + ' CAST(CASE WHEN ( ' + CHAR(13)
      SET @sql_result = @sql_result + '   SELECT ' + CHAR(13)
      SET @sql_result = @sql_result + '     COUNT(FOLDER_ID) ' + CHAR(13)
      SET @sql_result = @sql_result + '   FROM ' + CHAR(13)
      SET @sql_result = @sql_result + '     ' + @entity_name + CHAR(13)
      SET @sql_result = @sql_result + '   WHERE ' + CHAR(13)
      SET @sql_result = @sql_result + '     PARENT_FOLDER_ID = c.FOLDER_ID ' + CHAR(13)
      SET @sql_result = @sql_result + ' ) > 0 THEN ' + CHAR(13)
      SET @sql_result = @sql_result + '   1 ' + CHAR(13)
      SET @sql_result = @sql_result + ' ELSE ' + CHAR(13)
      SET @sql_result = @sql_result + '   0 ' + CHAR(13)
      SET @sql_result = @sql_result + ' END AS bit) AS HAS_CHILDREN, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[USER_ID] AS MODIFIER_USER_ID, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.FIRST_NAME AS MODIFIER_FIRST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.LAST_NAME AS MODIFIER_LAST_NAME, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.EMAIL AS MODIFIER_EMAIL, ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.[LOGIN] AS MODIFIER_LOGIN ' + CHAR(13)
      if @use_security = 1
        SET @sql_result = @sql_result + ',  COALESCE(pi.permission_level, ' + CAST(@parent_level as varchar)  + ') as EFFECTIVE_PERMISSION_LEVEL' + CHAR(13)


    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' @record_count = COUNT(c.FOLDER_ID) ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'FROM ' + CHAR(13)
  SET @sql_result = @sql_result + ' ' + @entity_name + ' AS c '+ CHAR(13)
  if @use_security = 1
  BEGIN
    SET @sql_result = @sql_result + 'LEFT JOIN ' + CHAR(13)
    SET @sql_result = @sql_result + ' (' + @security_sql + ') AS pi ' + CHAR(13)
    SET @sql_result = @sql_result + 'ON ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.folder_id = pi.' + @entity_name + '_id ' + CHAR(13)
  END
  IF (@count_only = 0)
    BEGIN
      SET @sql_result = @sql_result + 'LEFT OUTER JOIN ' + CHAR(13)
      SET @sql_result = @sql_result + ' USERS AS mu ' + CHAR(13)
      SET @sql_result = @sql_result + 'ON ' + CHAR(13)
      SET @sql_result = @sql_result + ' mu.USER_ID = c.LAST_MODIFIED_BY ' + CHAR(13)
    END
  SET @sql_result = @sql_result + 'WHERE ' + CHAR(13)
  IF (@parent_folder_id IS NOT NULL)
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID = ' + CAST(@parent_folder_id AS varchar) + ' ' + CHAR(13)
    END
  ELSE
    BEGIN
      SET @sql_result = @sql_result + ' c.PARENT_FOLDER_ID IS NULL ' + CHAR(13)
      SET @sql_result = @sql_result + '   AND c.' + @parent_entity_name + '_ID = ' + CAST(@parent_entity_id AS varchar) + ' '  + CHAR(13)
    END

  if @use_security = 1
  begin
    SET @sql_result = @sql_result + ' AND COALESCE(pi.permission_level, 4) >= ' + CAST(@permission_level AS varchar) + CHAR(13)
  end

  SET @sql_result = @sql_result + @block_filter
  IF (@count_only = 0)
    BEGIN
    SET @sql_result = @sql_result + 'ORDER BY ' + CHAR(13)
    SET @sql_result = @sql_result + ' c.NAME ASC '
  END

  IF (@count_only = 0)
    BEGIN
      print @sql_result
      EXEC(@sql_result)

      SET @total_records = @@ROWCOUNT
    END
  ELSE
    BEGIN
      print @sql_result
      EXEC sp_executesql
        @sql_result,
        N'@record_count int OUTPUT',
        @record_count = @total_records OUTPUT
    END
END
GO

go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.24', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.24 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.25
-- fix user group tree
-- **************************************

ALTER procedure [dbo].[qp_expand](@user_id numeric = 0, @code nvarchar(50) = null, @id bigint = 0, @is_folder bit = 0, @count_only bit=0, @count int = 0 output )
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_CODE nvarchar(50) null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID int null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID int null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null,
    IS_RECURRING bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint
  declare @default_action_id int, @context_menu_id int
  declare @is_admin bit

  set @language_id = dbo.qp_language(@user_id)

  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE
  where
    ID = dbo.qp_entity_type_id(@code)

  set @id_str = CAST(@id as nvarchar(10))

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'


      -- process recurring --
      if @recurring_id_field is not null
      begin
        if @is_folder = 1
        begin
          if @parent_id_field is null
            set @where = @recurring_id_field + ' is null '
          else
            set @where = @parent_id_field + ' = ' + @id_str + ' and ' + @recurring_id_field + ' is null '
        end
        else
          set @where = @recurring_id_field + ' = ' + @id_str
      end
      else if @parent_id_field is not null
      begin
        set @where = @parent_id_field + ' = ' + @id_str
      end
      else
        set @where = '1 = 1'

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end

    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql

    --PRINT @sql;


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @id,
        CODE = @code,
        IS_FOLDER = 0,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id,
        IS_RECURRING = CASE WHEN @recurring_id_field is not null THEN 1 ELSE 0 END
    end
    else
      select @count = COUNT(ID) from @result
  end
  else begin
    declare @entitySecQuery nvarchar(max);
    EXEC [dbo].[qp_GetEntityPermissionAsQuery]
      @user_id = @user_id,
      @SQLOut = @entitySecQuery OUTPUT

    CREATE TABLE #sectmp
    (
      PERMISSION_LEVEL int,
      ENTITY_TYPE_ID int
    );
    set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
    exec sp_executesql @entitySecQuery;

    if @count_only = 0
      if @code is not null
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, dbo.qp_translate(dbo.qp_pluralize(NAME), @language_id), CODE, 1, dbo.qp_get_icon(NULL, dbo.qp_pluralize(CODE), NULL), FOLDER_DEFAULT_ACTION_ID, FOLDER_CONTEXT_MENU_ID
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID = dbo.qp_entity_type_id(@code) and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0 order by [Order]
      else
        insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
        select ID, @id, NAME, CODE, 0, dbo.qp_get_icon(NULL, CODE, NULL), DEFAULT_ACTION_ID, CONTEXT_MENU_ID
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID is null and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0 order by [Order]
    else
      if @code is not null
        select @count = COUNT(ID)
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID = dbo.qp_entity_type_id(@code) and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0
      else
        select @count = COUNT(ID)
        From ENTITY_TYPE
        JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID
        where PARENT_ID is null and (@is_admin = 1 OR S.PERMISSION_LEVEL > 0) and disabled = 0

  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit, @local_is_recurring bit
    declare @children_count int
    set @children_count = 0
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = is_folder, @local_is_recurring = is_recurring from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, 1, @count = @children_count output
      else
      begin
        if @i = 1 or @local_is_recurring = 1
        begin
          exec dbo.qp_expand @user_id, @local_code, @local_id, 0, 1, @count = @children_count output
        end
      end
      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      TREE_NODE.PARENT_ID as PARENT_ID,
      dbo.qp_entity_type_code(TREE_NODE.PARENT_ID) as PARENT_CODE,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.25', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.25 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.26
-- relation security
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'USE_RELATION_SECURITY' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE ADD USE_RELATION_SECURITY BIT NOT NULL CONSTRAINT DF_USE_RELATION_SECURITY DEFAULT 0
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'COPY_PERMISSIONS_TO_CHILDREN' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE ADD COPY_PERMISSIONS_TO_CHILDREN BIT NOT NULL CONSTRAINT DF_COPY_PERMISSIONS_TO_CHILDREN DEFAULT 0
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.26', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.26 completed'
GO


-- **************************************
-- irill Zakirov
-- version 7.9.3.27
-- Yandex speller
-- **************************************

UPDATE [VE_COMMAND]
   SET
      [ON] = 0
 WHERE [NAME] = 'SpellChecker' or [NAME] = 'Scayt'
GO

delete FROM [dbo].[VE_PLUGIN] where name ='aspell'
GO

INSERT INTO [dbo].[VE_PLUGIN]
           ([NAME]
           ,[DESCRIPTION]
           ,[ORDER]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('aspell'
           ,'Yandex spell checker'
           ,1
           ,1
           )

  INSERT INTO [dbo].[VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[PLUGIN_ID]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('SpellCheck'
           ,'Check Spelling'
           ,2
           ,2
           ,0
           ,0
           ,1
           ,CAST(SCOPE_IDENTITY() AS NUMERIC)
           ,1
           )

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.27', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.27 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.3.28
-- Fix_dbo bug fix
-- **************************************

UPDATE [BACKEND_ACTION]
   SET [TYPE_ID] = dbo.qp_action_type_id('multiple_select')
      ,[CONTROLLER_ACTION_URL] = '~/Workflow/MultipleSelectForWorkflow/'
 WHERE CODE = 'multiple_select_contents_for_workflow'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.28', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.28 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.29
-- Multiple statuses support
-- **************************************

ALTER PROCEDURE [dbo].[qp_GetContentData]
(
  @SiteName nvarchar(255),
  @ContentName nvarchar(255),
  @Fields nvarchar(max) = '',
  @WhereExpression nvarchar(max) = '',
  @OrderExpression nvarchar(max) = '',
  @StartRow int = 1,
  @PageSize int = 0,
  @TotalRecords int = 0 output,
  @UseSchedule bit = 1,
  @StatusName nvarchar(255) = '',
  @ShowSplittedArticle bit = 0,
  @IncludeArchive bit = 0,

  @use_security bit=0,
  @user_id numeric(18,0)=0,
  @group_id numeric(18,0)=0,
  @start_level int=2,
  @end_level int=4,
  @filter_records bit = 1
)
AS
DECLARE @siteId numeric
DECLARE @contentId numeric
DECLARE @virtualType numeric

DECLARE @maxStatusId numeric
DECLARE @currentStatusId numeric
DECLARE @statusString nvarchar(max)
DECLARE @total numeric
DECLARE @tableSuffix nvarchar(20)
DECLARE @fromExpression nvarchar(max)
DECLARE @fullWhereExpression nvarchar(max)

DECLARE @insert_key varchar(200)
DECLARE @Select varchar(max)
DECLARE @statuses table
(
  name nvarchar(255) primary key
)

set @insert_key ='<$_security_insert_$>'


select @siteId = site_id from site where site_name = @SiteName
if @siteId is null return 1

select @contentId = content_id, @virtualType = virtual_type from content where site_id = @SiteId and content_name = @ContentName
if @contentId is null return 2

set @Select = dbo.qp_filter_columns(@contentId, @Fields)

select top 1 @maxStatusId = status_type_id from status_type where site_id = @SiteId order by weight desc

if @StatusName <> '' begin
  insert into @statuses
  SELECT nstr from dbo.splitNew(@StatusName, ',')

  if not exists(select * from STATUS_TYPE where status_type_name in (select name from @statuses)) begin
    return 3
  end else begin
    select @statusString = coalesce(@statusString + ',', '') + '''' + name + '''' from @statuses
    set @statusString = 'select status_type_id from status_type where status_type_name in (' + @StatusString + ')'
  end
end else begin
  set @statusString = cast(@maxStatusId as nvarchar)
end

if @ShowSplittedArticle = 0 begin
  set @tableSuffix = ''
end
else begin
  set @tableSuffix = '_united'
end

if @WhereExpression = '' begin
  set @fullWhereExpression = '1 = 1'
end
else begin
  set @fullWhereExpression = @WhereExpression
end

if @UseSchedule = 1 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.visible = 1'
end

if @IncludeArchive = 0 begin
  set @fullWhereExpression = @fullWhereExpression + ' and c.archive = 0'
end

set @fullWhereExpression = @fullWhereExpression + ' and c.status_type_id in (' + @statusString + ')'

set @fromExpression = 'content_' + CONVERT(NVARCHAR, @ContentId) + @tableSuffix + ' as c WITH(NOLOCK) '

if @use_security>0
begin
  if @filter_records > 0
  begin
    set @fromExpression = @fromExpression + ' INNER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
  end
  else
  begin
        set @fromExpression = @fromExpression + ' LEFT OUTER JOIN (<$_security_insert_$>) as pi on c.content_item_id = pi.content_item_id '
    set @Select = @Select + ', IsNull(pi.permission_level,0) as current_permission_level  '
  end
end

exec qp_GetContentPage  @Select = @Select,
            @From=@fromExpression,
            @Where=@fullWhereExpression,
            @OrderBy=@OrderExpression,
            @StartRow=@StartRow,
            @PageSize=@PageSize,
            @GetCount=1,
            @TotalRecords=@TotalRecords output,

              @use_security = @use_security,
              @user_id = @user_id,
              @group_id = @group_id,
              @start_level = @start_level,
              @end_level = @end_level,
              @entity_name = 'content_item',
              @parent_entity_name = 'content',
              @parent_entity_id = @ContentId,
              @insert_key = @insert_key

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.29', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.29 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.3.30
-- Ve Aspell Plugin fix
-- **************************************

delete from ve_plugin where name = 'aspell'
go
delete from VE_COMMAND where NAME = 'SpellCheck'
go

INSERT INTO [VE_COMMAND]
           ([NAME]
           ,[ALIAS]
           ,[ROW_ORDER]
           ,[TOOLBAR_IN_ROW_ORDER]
           ,[GROUP_IN_TOOLBAR_ORDER]
           ,[COMMAND_IN_GROUP_ORDER]
           ,[ON]
           ,[PLUGIN_ID]
           ,[LAST_MODIFIED_BY])
     VALUES
           ('SpellCheck'
           ,'Check Spelling'
           ,2
           ,2
           ,0
           ,0
           ,1
           ,null
           ,1
           )
go

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.30', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.30 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.31
-- Security fix
-- **************************************

ALTER PROCEDURE [dbo].[qp_all_article_search]
  @p_site_id int,
  @p_user_id int,
  @p_searchparam nvarchar(4000),
  @p_order_by nvarchar(max) = N'Rank DESC',
  @p_start_row int = 0,
  @p_page_size int = 0,
  @p_item_id int = null,

  @total_records int OUTPUT
AS
BEGIN
  -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
  SET NOCOUNT ON;

  declare @is_admin bit
  select @is_admin = dbo.qp_is_user_admin(@p_user_id)

    -- Задаем номер начальной записи по умолчанию
  IF (@p_start_row <= 0)
    BEGIN
      SET @p_start_row = 1
    END

  -- Задаем номер конечной записи
  DECLARE @p_end_row AS int
  SET @p_end_row = @p_start_row + @p_page_size - 1

  -- свормировать запрос для подмножества контентов к которым есть доступ
  DECLARE @security_sql AS nvarchar(max)
  SET @security_sql = ''

  if @is_admin = 0
  begin
    EXEC dbo.qp_GetPermittedItemsAsQuery
        @user_id = @p_user_id,
        @group_id = 0,
        @start_level = 1,
        @end_level = 4,
        @entity_name = 'content',
        @parent_entity_name = 'site',
        @parent_entity_id = @p_site_id,
        @SQLOut = @security_sql OUTPUT
  end

  -- посчитать общее кол-во записей
  declare @paramdef nvarchar(4000);
  declare @query nvarchar(4000);

  create table #temp
  ([rank] int, content_item_id numeric, attribute_id numeric, [priority] int)

  create table #temp2
  ([rank] int, content_item_id numeric, attribute_id numeric, [priority] int)

  declare @table_name nvarchar(10)
  if @is_admin = 0
    set @table_name = '#temp'
  else
    set @table_name = '#temp2'

  set @query = 'insert into ' + @table_name + CHAR(13)
    + ' select ft.[rank], cd.content_item_id, cd.attribute_id, 0 ' + CHAR(13)
    + ' from CONTAINSTABLE(content_data, *,  @searchparam) ft ' + CHAR(13)
    + ' inner join content_data cd on ft.[key] = cd.content_data_id ' + CHAR(13)

  IF @p_item_id is not null
    set @query = @query + ' union select 0, ' + cast(@p_item_id as varchar(20)) + ', 0, 1 ' + CHAR(13)
  exec sp_executesql @query, N'@searchparam nvarchar(4000)', @searchparam = @p_searchparam

  if @is_admin = 0
  begin
    set @query = 'insert into #temp2 ' + CHAR(13)
      + ' select cd.* from #temp cd ' + CHAR(13)
      + ' inner join content_item ci on cd.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID ' + CHAR(13)
      + ' inner join (' + @security_sql + ') c on c.CONTENT_ID = ci.CONTENT_ID ' + CHAR(13)
    exec sp_executesql @query
  end

  select @total_records = count(distinct content_item_id) from #temp2

  -- главный запрос
  declare @query_template nvarchar(4000);
  set @query_template = N'WITH PAGED_DATA_CTE AS ' + CHAR(13)
    + ' (select wrapper.*, ' + CHAR(13)
    + '     ROW_NUMBER() OVER (ORDER BY wrapper.[priority] DESC, <$_order_by_$>) AS ROW ' + CHAR(13)
    + '  from ' + CHAR(13)
    + '  (select ' + CHAR(13)
    + '   ci.CONTENT_ID as ParentId, ' + CHAR(13)
    + '   data.CONTENT_ITEM_ID as Id, ' + CHAR(13)
    + '   data.ATTRIBUTE_ID as FieldId, ' + CHAR(13)
    + '   attr.ATTRIBUTE_TYPE_ID as FieldTypeId, ' + CHAR(13)
    + '   c.CONTENT_NAME as ParentName, ' + CHAR(13)
    + '   st.STATUS_TYPE_NAME as StatusName, ' + CHAR(13)
    + '   ci.CREATED as Created, ' + CHAR(13)
    + '   ci.MODIFIED as Modified, ' + CHAR(13)
    + '   usr.[LOGIN] as LastModifiedByUser, ' + CHAR(13)
    + '   data.[rank] as Rank, ' + CHAR(13)
    + '   data.[priority] as [priority], ' + CHAR(13)
    + '   ROW_NUMBER() OVER (PARTITION BY data.CONTENT_ITEM_ID ORDER BY data.[rank] DESC) AS SIMILAR_ITEM_ROW ' + CHAR(13)
    + '   from #temp2 data ' + CHAR(13)
    + '   left join dbo.CONTENT_ATTRIBUTE attr on data.ATTRIBUTE_ID = attr.ATTRIBUTE_ID ' + CHAR(13)
    + '   inner join dbo.CONTENT_ITEM ci on data.CONTENT_ITEM_ID = ci.CONTENT_ITEM_ID ' + CHAR(13)
    + '   inner join dbo.CONTENT c on c.CONTENT_ID = ci.CONTENT_ID ' + CHAR(13)
    + '   inner join dbo.STATUS_TYPE st on st.STATUS_TYPE_ID = ci.STATUS_TYPE_ID ' + CHAR(13)
    + '   inner join dbo.USERS usr on usr.[USER_ID] = ci.LAST_MODIFIED_BY ' + CHAR(13)
    + '   ) as wrapper ' + CHAR(13)
    + '   where wrapper.SIMILAR_ITEM_ROW = 1 ' + CHAR(13)
    + ' ) ' + CHAR(13)
    + ' select ' + CHAR(13)
    + '   ParentId, ' + CHAR(13)
    + '   ParentName, ' + CHAR(13)
    + '   Id, ' + CHAR(13)
    + '   FieldId, ' + CHAR(13)
    + '   (case when FieldTypeId in (9, 10) THEN cd.BLOB_DATA ELSE cd.DATA END) as Text, ' + CHAR(13)
    + '   dbo.qp_get_article_title_func(Id, ParentId) as Name, ' + CHAR(13)
    + '   StatusName, ' + CHAR(13)
    + '   pdc.Created, ' + CHAR(13)
    + '   pdc.Modified, ' + CHAR(13)
    + '   LastModifiedByUser, ' + CHAR(13)
    + '   Rank ' + CHAR(13)
    + ' from PAGED_DATA_CTE pdc ' + CHAR(13)
    + ' left join content_data cd on pdc.Id = cd.content_item_id and pdc.FieldId = cd.attribute_id ' + CHAR(13)
    + ' where ROW between @start_row and @end_row';


  declare @sortExp nvarchar(4000);
  set @sortExp = case when @p_order_by is null or @p_order_by = '' then N'Rank DESC' else @p_order_by end;
  set @query = REPLACE(@query_template, '<$_order_by_$>', @sortExp);
  set @paramdef = '@searchparam nvarchar(4000), @site_id int, @start_row int, @end_row int';
  EXECUTE sp_executesql @query, @paramdef, @searchparam = @p_searchparam, @site_id = @p_site_id, @start_row = @p_start_row, @end_row = @p_end_row;

  drop table #temp
  drop table #temp2
END
GO

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.31', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.31 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.3.32
-- XAML Validation
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'XAML_VALIDATION' and TABLE_NAME = 'CONTENT')
  ALTER TABLE CONTENT ADD XAML_VALIDATION NTEXT NULL
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'DISABLE_XAML_VALIDATION' and TABLE_NAME = 'CONTENT')
  ALTER TABLE CONTENT ADD DISABLE_XAML_VALIDATION bit not null CONSTRAINT DF_CONTENT_DISABLE_XAML_VALIDATION DEFAULT 0
GO

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'XAML_DICTIONARIES' and TABLE_NAME = 'SITE')
  ALTER TABLE [SITE] ADD XAML_DICTIONARIES NTEXT NULL
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.32', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.32 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.3.33
-- String Enum Field
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'ENUM_VALUES' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
  ALTER TABLE CONTENT_ATTRIBUTE ADD ENUM_VALUES NTEXT NULL
GO
if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'SHOW_AS_RADIO_BUTTON' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
  ALTER TABLE CONTENT_ATTRIBUTE ADD SHOW_AS_RADIO_BUTTON bit not null CONSTRAINT DF_CONTENT_ATTRIBUTE_SHOW_AS_RADIO_BUTTON DEFAULT 0
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.33', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.33 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.34
-- Fix Multiple Contents Operation
-- **************************************

ALTER  TRIGGER [dbo].[td_delete_item] ON [dbo].[CONTENT_ITEM] FOR DELETE AS BEGIN

  if object_id('tempdb..#disable_td_delete_item') is null
  begin

    declare @content_id numeric, @virtual_type numeric
    declare @sql nvarchar(max)
    declare @ids_list nvarchar(max)


    declare @c table (
      id numeric primary key,
      virtual_type numeric
    )

    insert into @c
    select distinct d.content_id, c.virtual_type
    from deleted d inner join content c
    on d.content_id = c.content_id

    declare @ids table
    (
      id numeric primary key,
      char_id nvarchar(30)
    )


    declare @attr_ids table
    (
      id numeric primary key
    )

    while exists(select id from @c)
    begin

      select @content_id = id, @virtual_type = virtual_type from @c

      insert into @ids
      select content_item_id, CONVERT(nvarchar, content_item_id) from deleted where content_id = @content_id

      insert into @attr_ids
      select ca1.attribute_id from CONTENT_ATTRIBUTE ca1
      inner join content_attribute ca2 on ca1.RELATED_ATTRIBUTE_ID = ca2.ATTRIBUTE_ID
      where ca2.CONTENT_ID = @content_id

      set @ids_list = null
      select @ids_list = coalesce(@ids_list + ', ', '') + char_id from @ids


      /* Drop relations to current item */
      if exists(select id from @attr_ids)
      begin
        UPDATE content_attribute SET default_value = null
          WHERE attribute_id IN (select id from @attr_ids)
          AND default_value IN (select char_id from @ids)

        UPDATE content_data SET data = NULL, blob_data = NULL
          WHERE attribute_id IN (select id from @attr_ids)
          AND data IN (select char_id from @ids)

        DELETE from VERSION_CONTENT_DATA
          where ATTRIBUTE_ID in (select id from @attr_ids)
          AND data IN (select char_id from @ids)
      end

      if @virtual_type = 0
      begin
        exec qp_get_delete_items_sql @content_id, @ids_list, 0, @sql = @sql out
        exec sp_executesql @sql

        exec qp_get_delete_items_sql @content_id, @ids_list, 1, @sql = @sql out
        exec sp_executesql @sql
      end

      delete from @c where id = @content_id

      delete from @ids

      delete from @attr_ids
    end
  end
END
GO

ALTER TRIGGER [dbo].[ti_insert_item] ON [dbo].[CONTENT_ITEM] FOR INSERT AS
BEGIN
    declare @content_id numeric
  declare @ids_list nvarchar(max)

  declare @table_name varchar(50), @sql nvarchar(max)

  declare @contents table
  (
    id numeric primary key
  )

  insert into @contents
  select distinct content_id from inserted
  where CONTENT_ID in (select CONTENT_ID from content where virtual_type = 0)

  declare @ids table
  (
    id numeric primary key
  )


  while exists (select id from @contents)
  begin
    select @content_id = id from @contents

    insert into @ids
    select i.content_item_id from inserted i
    where i.CONTENT_ID = @content_id and i.not_for_replication = 0

    set @ids_list = null
    select @ids_list = coalesce(@ids_list + ',', '') + convert(nvarchar, id) from @ids
    set @table_name = 'content_' + convert(nvarchar, @content_id)

    exec qp_get_upsert_items_sql @table_name, @ids_list, @sql = @sql out
    print @sql
    exec sp_executesql @sql

    delete from @contents where id = @content_id

    delete from @ids
  end

END
GO

ALTER TRIGGER [dbo].[tu_update_item] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
begin
  if not update(locked_by) and not update(splitted) and not UPDATE(not_for_replication)
  begin
    declare @content_id numeric
    declare @sql nvarchar(max), @table_name varchar(50), @async_table_name varchar(50)
    declare @ids_list nvarchar(max), @async_ids_list nvarchar(max), @sync_ids_list nvarchar(max)

    declare @contents table
    (
      id numeric primary key
    )

    insert into @contents
    select distinct content_id from inserted
    where CONTENT_ID in (select CONTENT_ID from content where virtual_type = 0)

    create table #ids_with_splitted
    (
      id numeric primary key,
      new_splitted bit
    )

    declare @ids table
    (
      id numeric primary key,
      splitted bit,
      not_for_replication bit
    )

    while exists (select id from @contents)
    begin
      select @content_id = id from @contents

      insert into @ids
      select i.content_item_id, i.SPLITTED, i.not_for_replication from inserted i
      inner join content_item ci on i.content_item_id = ci.content_item_id
      where ci.CONTENT_ID = @content_id

      set @ids_list = null
      select @ids_list = coalesce(@ids_list + ',', '') + convert(nvarchar, id) from @ids

      set @sql = 'insert into #ids_with_splitted '
      set @sql = @sql + ' select content_item_id,'
      set @sql = @sql + ' case'
      set @sql = @sql + ' when curr_weight < front_weight and is_workflow_async = 1 then 1'
      set @sql = @sql + ' when curr_weight = workflow_max_weight and delayed = 1 then 1'
      set @sql = @sql + ' else 0'
      set @sql = @sql + ' end'
      set @sql = @sql + ' as new_splitted from ('
      set @sql = @sql + ' select distinct ci.content_item_id, st1.WEIGHT as curr_weight, st2.WEIGHT as front_weight, '
      set @sql = @sql + ' max(st3.WEIGHT) over (partition by ci.content_item_id) as workflow_max_weight, ciw.is_async as is_workflow_async, '
      set @sql = @sql + ' ci.SCHEDULE_NEW_VERSION_PUBLICATION as delayed '
      set @sql = @sql + ' from content_item ci'
      set @sql = @sql + ' inner join content_' + CONVERT(nvarchar, @content_id) + ' c on ci.CONTENT_ITEM_ID = c.CONTENT_ITEM_ID'
      set @sql = @sql + ' inner join STATUS_TYPE st1 on ci.STATUS_TYPE_ID = st1.STATUS_TYPE_ID'
      set @sql = @sql + ' inner join STATUS_TYPE st2 on c.STATUS_TYPE_ID = st2.STATUS_TYPE_ID'
      set @sql = @sql + ' left join content_item_workflow ciw on ci.content_item_id = ciw.content_item_id'
      set @sql = @sql + ' left join workflow_rules wr on ciw.WORKFLOW_ID = wr.WORKFLOW_ID'
      set @sql = @sql + ' left join STATUS_TYPE st3 on st3.STATUS_TYPE_ID = wr.SUCCESSOR_STATUS_ID'
      set @sql = @sql + ' where ci.content_item_id in (' + @ids_list + ')) as main'
      print @sql
      exec sp_executesql @sql

      update base set base.splitted = i.new_splitted from @ids base inner join #ids_with_splitted i on base.id = i.id
      update base set base.splitted = i.splitted from content_item base inner join @ids i on base.CONTENT_ITEM_ID = i.id

      set @sync_ids_list = null
      select @sync_ids_list = coalesce(@sync_ids_list + ',', '') + convert(nvarchar, id) from @ids where splitted = 0 and not_for_replication = 0
      set @async_ids_list = null
      select @async_ids_list = coalesce(@async_ids_list + ',', '') + convert(nvarchar, id) from @ids where splitted = 1 and not_for_replication = 0

      set @table_name = 'content_' + CONVERT(nvarchar, @content_id)
      set @async_table_name = @table_name + '_async'

      if @sync_ids_list <> ''
      begin
        exec qp_get_upsert_items_sql @table_name, @sync_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql

        exec qp_get_delete_items_sql @content_id, @sync_ids_list, 1, @sql = @sql out
        print @sql
        exec sp_executesql @sql
      end

      if @async_ids_list <> ''
      begin
        exec qp_get_upsert_items_sql @async_table_name, @async_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql

        exec qp_get_update_items_flags_sql @table_name, @async_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql
      end

      delete from #ids_with_splitted

      delete from @contents where id = @content_id

      delete from @ids
    end

    drop table #ids_with_splitted

  end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.34', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.34 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.3.35
--
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Page Templates', 'list_template', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('template'), '~/PageTemplate/IndexTemplates/',  1, dbo.qp_view_id('list'))
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Page Pages', 'list_page', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('page'), '~/PageTemplate/IndexPages/',  1, dbo.qp_view_id('list'))
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Page Template Objects', 'list_template_object', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/IndexTemplateObjects/',  1, dbo.qp_view_id('list'))
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Page Page Objects', 'list_page_object', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/IndexPageObjects/',  1, dbo.qp_view_id('list'))
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Template', 'new_template', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('template'), '~/PageTemplate/NewPageTemplate/', 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Page', 'new_page', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('page'), '~/PageTemplate/NewPage/', 1)
go

delete from BACKEND_ACTION
where CODE = 'list_template_object'
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Template Objects', 'list_template_object', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/IndexTemplateObjects/',  1, dbo.qp_view_id('list'))
go

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_template')
where CODE = 'template'
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Page Templates', 'refresh_templates', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template'), 1)
GO

if not exists (select * from context_menu where code = 'templates')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('templates')
END
GO

if not exists (select * from context_menu where code = 'template')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('template')
END
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template'), dbo.qp_action_id('refresh_templates'), 'Refresh', 'refresh.gif', NULL, 3, 0)

UPDATE [ENTITY_TYPE]
   SET
      [DISABLED] = 0
 WHERE CODE = 'page'
GO

UPDATE [ENTITY_TYPE]
   SET
       [FOLDER_DEFAULT_ACTION_ID] = dbo.qp_action_id('list_page')
 WHERE CODE = 'page'
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Pages', 'refresh_pages', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page'), 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page'), dbo.qp_action_id('refresh_pages'), 'Refresh', 'refresh.gif', NULL, 3, 0)


update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('list_page')
where CODE = 'template'

UPDATE [ENTITY_TYPE]
   SET
      [DISABLED] = 0
 WHERE CODE = 'page_object'
GO

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_template_object')
where CODE = 'template_object'

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_template_object')
where CODE = 'template_object'

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_page_object')
where CODE = 'page_object'

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Template Object', 'new_template_object', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/NewTemplateObject/', 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Page Object', 'new_page_object', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/NewPageObject/', 1)

update ENTITY_TYPE
set
  FOLDER_DEFAULT_ACTION_ID = dbo.qp_action_id('list_page_object')
where CODE = 'template_object'

update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('list_page_object')
where CODE = 'page'

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Page Objects', 'refresh_page_objects', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page'), 1)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object'), dbo.qp_action_id('refresh_page_objects'), 'Refresh', 'refresh.gif', NULL, 3, 0)


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.35', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.35 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.36
-- One-Way Link
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'SYMMETRIC' and TABLE_NAME = 'CONTENT_TO_CONTENT')
  ALTER TABLE CONTENT_TO_CONTENT ADD SYMMETRIC bit not null CONSTRAINT DF_CONTENT_TO_CONTENT_SYMMETRIC DEFAULT 1
GO

exec sp_refreshview 'dbo.site_content_link'
GO

ALTER TRIGGER [dbo].[ti_site_content_link] ON [dbo].[site_content_link] INSTEAD OF INSERT
AS BEGIN
  INSERT INTO CONTENT_TO_CONTENT(l_content_id, r_content_id, map_as_class, net_link_name, net_plural_link_name, [SYMMETRIC])
  select l_content_id, r_content_id, map_as_class, net_link_name, net_plural_link_name, [SYMMETRIC] from inserted
END
GO

exec qp_drop_existing 'qp_is_link_symmetric', 'IsScalarFunction'
GO

CREATE FUNCTION [dbo].[qp_is_link_symmetric](@link_id numeric) returns bit
AS
BEGIN
  declare @result bit
  select @result = [symmetric] from content_to_content where link_id = @link_id
  return @result
END
GO

ALTER TRIGGER [dbo].[td_item_to_item] ON [dbo].[item_to_item] AFTER DELETE
AS
BEGIN
  if object_id('tempdb..#disable_td_item_to_item') is null
  begin
    delete item_to_item from item_to_item ii
      inner join deleted d on ii.link_id = d.link_id and ii.l_item_id = d.r_item_id and ii.r_item_id = d.l_item_id
      inner join content_to_content c2c on d.link_id = c2c.link_id
      where c2c.[symmetric] = 1
  end
END
GO

ALTER TRIGGER [dbo].[ti_item_to_item] ON [dbo].[item_to_item] AFTER INSERT
AS
BEGIN

with items (link_id, item_id, linked_item_id)
AS
(
  select i1.link_id, i1.l_item_id, i1.r_item_id From inserted i1
  inner join content_to_content c2c on i1.link_id = c2c.link_id
  where c2c.[symmetric] = 1 and not exists (select * from item_to_item i2 where i1.link_id = i2.link_id and i1.r_item_id = i2.l_item_id and i2.r_item_id = i1.l_item_id)
)
insert into item_to_item(link_id, l_item_id, r_item_id)
select link_id, linked_item_id, item_id from items

END
GO

ALTER PROCEDURE [dbo].[qp_update_m2m]
@id numeric,
@linkId numeric,
@value nvarchar(max),
@splitted bit = 0
AS
BEGIN
  declare @newIds table (id numeric primary key)
  declare @ids table (id numeric primary key)
  declare @crossIds table (id numeric primary key)

  insert into @newIds select * from dbo.split(@value, ',')

  IF @splitted = 1
    insert into @ids select linked_item_id from item_link_async where link_id = @linkId and item_id = @id
  ELSE
    insert into @ids select linked_item_id from item_link where link_id = @linkId and item_id = @id

  insert into @crossIds select t1.id from @ids t1 inner join @newIds t2 on t1.id = t2.id
  delete from @ids where id in (select id from @crossIds)
  delete from @newIds where id in (select id from @crossIds)

  IF @splitted = 0
    DELETE FROM item_link_async WHERE link_id = @linkId AND item_id = @id

  IF @splitted = 1
    DELETE FROM item_link_async WHERE link_id = @linkId AND item_id = @id and linked_item_id in (select id from @ids)
  ELSE
    DELETE FROM item_link_united_full WHERE link_id = @linkId AND item_id = @id and linked_item_id in (select id from @ids)

  IF @splitted = 1
    INSERT INTO item_link_async SELECT @linkId, @id, id from @newIds
  ELSE
    INSERT INTO item_to_item SELECT @linkId, @id, id from @newIds

  if dbo.qp_is_link_symmetric(@linkId) = 1
  begin
    declare @currentId numeric
    while exists (select * from @newIds)
    begin
      select @currentId = id from @newIds

      exec qp_apply_link_id_to_data @linkId, @currentId

      IF @splitted = 0
        and exists (select * from content_item where content_item_id = @currentId and splitted = 1)
        and not exists (select * from item_link_async where link_id = @linkId and item_id = @currentId and linked_item_id = @id)
        begin
          insert into item_link_async with(rowlock) values(@linkId, @currentId, @id)
        end

      delete from @newIds where id = @currentId
    end
  end
END
GO

ALTER TRIGGER [dbo].[td_item_link_united_full] ON [dbo].[item_link_united_full] INSTEAD OF DELETE
AS BEGIN

  delete item_link_async from item_link_async ii
  inner join deleted d on d.link_id = ii.link_id and d.item_id = ii.item_id and d.linked_item_id = ii.linked_item_id

  delete item_link_async from item_link_async ii
  inner join deleted d on d.link_id = ii.link_id and d.item_id = ii.linked_item_id and d.linked_item_id = ii.item_id
  inner join content_to_content c2c on ii.link_id = c2c.link_id
  where c2c.[symmetric] = 1

  delete item_to_item from item_to_item ii
  inner join deleted d on d.link_id = ii.link_id and d.item_id = ii.l_item_id and d.linked_item_id = ii.r_item_id
END
GO


ALTER PROCEDURE [dbo].[qp_merge_links]
@content_item_id numeric
AS
declare @splitted bit
BEGIN
  select @splitted = splitted from content_item with(nolock) where content_item_id = @content_item_id
  if @splitted = 1
  BEGIN
    DELETE item_to_item with(rowlock)
    WHERE link_id in (
      select link_id from content_attribute ca with(nolock)
      inner join content_item ci with(nolock) on ca.content_id = ci.content_id
      where ci.content_item_id = @content_item_id
    )
    AND l_item_id = @content_item_id

    insert into item_to_item with(rowlock) (link_id, l_item_id, r_item_id)
    select link_id, item_id, linked_item_id from item_link_async with(nolock) where item_id = @content_item_id

    delete from item_link_async with(rowlock) where item_id = @content_item_id
  END
END
GO

ALTER TRIGGER [dbo].[td_site_item_link] ON [dbo].[site_item_link] INSTEAD OF DELETE
AS BEGIN
  delete item_to_item from item_to_item ii
  inner join deleted d on d.link_id = ii.link_id and d.l_item_id = ii.l_item_id and d.r_item_id = ii.r_item_id

  delete item_link_async from item_link_async ii
  inner join deleted d on d.link_id = ii.link_id and ii.item_id = d.l_item_id and ii.linked_item_id = d.r_item_id

  delete item_link_async from item_link_async ii
  inner join deleted d on d.link_id = ii.link_id and ii.item_id = d.r_item_id and ii.linked_item_id = d.l_item_id
  inner join content_to_content c2c on ii.link_id = c2c.link_id
  where c2c.[symmetric] = 1
END
GO

ALTER TRIGGER [dbo].[ti_site_item_link] ON [dbo].[site_item_link] INSTEAD OF INSERT
AS
BEGIN
  insert into item_to_item(link_id, l_item_id, r_item_id)
  select i.link_id, i.l_item_id, i.r_item_id from inserted i
  where not exists (select * from item_to_item i2i where i.link_id = i2i.link_id and i.l_item_id = i2i.l_item_id and i.r_item_id = i2i.r_item_id)
END
GO

ALTER TRIGGER [dbo].[tu_content_attribute_m2m_default_value] ON [dbo].[CONTENT_ATTRIBUTE] FOR UPDATE
AS
BEGIN
  if update(link_id) and object_id('tempdb..#disable_tu_content_attribute_m2m_default_value') is null
  begin
    declare @link_id numeric, @attribute_id numeric, @version numeric
    declare @i numeric, @count numeric
    declare @links table (
      id numeric identity(1,1) primary key,
      link_id numeric,
      attribute_id numeric
    )

    insert into @links (link_id, attribute_id)
      select i.link_id, i.attribute_id from inserted i
      inner join deleted d on d.attribute_id = i.attribute_id
      where i.link_id IS NOT NULL AND (d.link_id IS NULL OR d.link_id <> i.link_id)

    set @i = 1
    select @count = count(id) from @links

    while @i < @count + 1
    begin
      select @link_id = link_id, @attribute_id = attribute_id from @links where id = @i
      update content_attribute set default_value = link_id where attribute_id = @attribute_id
      update content_data set data = @link_id where data is not null and attribute_id = @attribute_id
      set @i = @i + 1
    end
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.36', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.36 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.37
-- Many-to-Many update
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'CANCEL_SPLIT' and TABLE_NAME = 'CONTENT_ITEM')
  ALTER TABLE CONTENT_ITEM ADD CANCEL_SPLIT bit not null CONSTRAINT DF_CONTENT_ITEM_CANCEL_SPLIT DEFAULT 0
GO

ALTER PROCEDURE [dbo].[qp_update_m2m]
@id numeric,
@linkId numeric,
@value nvarchar(max),
@splitted bit = 0
AS
BEGIN
  declare @newIds table (id numeric primary key, attribute_id numeric null, has_data bit, splitted bit, has_async bit null)
  declare @ids table (id numeric primary key)
  declare @crossIds table (id numeric primary key)

  insert into @newIds (id) select * from dbo.split(@value, ',')

  IF @splitted = 1
    insert into @ids select linked_item_id from item_link_async where link_id = @linkId and item_id = @id
  ELSE
    insert into @ids select linked_item_id from item_link where link_id = @linkId and item_id = @id

  insert into @crossIds select t1.id from @ids t1 inner join @newIds t2 on t1.id = t2.id
  delete from @ids where id in (select id from @crossIds)
  delete from @newIds where id in (select id from @crossIds)

  IF @splitted = 0
    DELETE FROM item_link_async WHERE link_id = @linkId AND item_id = @id

  IF @splitted = 1
    DELETE FROM item_link_async WHERE link_id = @linkId AND item_id = @id and linked_item_id in (select id from @ids)
  ELSE
    DELETE FROM item_link_united_full WHERE link_id = @linkId AND item_id = @id and linked_item_id in (select id from @ids)

  IF @splitted = 1
    INSERT INTO item_link_async SELECT @linkId, @id, id from @newIds
  ELSE
    INSERT INTO item_to_item SELECT @linkId, @id, id from @newIds

  if dbo.qp_is_link_symmetric(@linkId) = 1
  begin

    with newItems (id, attribute_id, has_data, splitted, has_async) as
    (
    select
      n.id, ca.attribute_id,
      case when cd.content_item_id is null then 0 else 1 end as has_data,
      ci.splitted,
      case when ila.link_id is null then 0 else 1 end as has_async
    from @newIds n
      inner join content_item ci on ci.CONTENT_ITEM_ID = n.id
      inner join content c on ci.content_id = c.content_id
      inner join content_attribute ca on ca.content_id = c.content_id and ca.link_id = @linkId
      left join content_data cd on cd.ATTRIBUTE_ID = ca.ATTRIBUTE_ID and cd.CONTENT_ITEM_ID = ci.content_item_id
      left join item_link_async ila on @linkId = ila.link_id and n.id = ila.item_id and ila.linked_item_id = @id
    )
    update @newIds
    set attribute_id = ext.attribute_id, has_data = ext.has_data, splitted = ext.splitted, has_async = ext.has_async
    from @newIds n inner join newItems ext on n.id = ext.id

    if @splitted = 0
    begin
      update content_data set data = @linkId
      from content_data cd
      inner join @newIds n on cd.ATTRIBUTE_ID = n.attribute_id and cd.CONTENT_ITEM_ID = n.id
      where n.has_data = 1

      insert into content_data(CONTENT_ITEM_ID, ATTRIBUTE_ID, DATA)
      select n.id, n.attribute_id, @linkId
      from @newIds n
      where n.has_data = 0 and n.attribute_id is not null

      insert into item_link_async(link_id, item_id, linked_item_id)
      select @linkId, n.id, @id
      from @newIds n
      where n.splitted = 1 and n.has_async = 0 and n.attribute_id is not null
    end
  end
END
GO

ALTER PROCEDURE [dbo].[qp_merge_article]
@item_id numeric
AS
BEGIN
  if exists (select * from content_item where content_item_id = @item_id and SCHEDULE_NEW_VERSION_PUBLICATION = 1)
  begin
  exec qp_merge_links @item_id
  UPDATE content_item with(rowlock) set not_for_replication = 1 WHERE content_item_id = @item_id
  UPDATE content_item with(rowlock) set SCHEDULE_NEW_VERSION_PUBLICATION = 0, MODIFIED = GETDATE(), LAST_MODIFIED_BY = 1, CANCEL_SPLIT = 0 where CONTENT_ITEM_ID = @item_id
  exec qp_replicate @item_id
  UPDATE content_item_schedule with(rowlock) set delete_job = 0 WHERE content_item_id = @item_id
  DELETE FROM content_item_schedule with(rowlock) WHERE content_item_id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE id = @item_id
  delete from CHILD_DELAYS with(rowlock) WHERE child_id = @item_id
  end
END
GO

ALTER PROCEDURE [dbo].[qp_merge_links]
@content_item_id numeric
AS
declare @splitted bit
BEGIN
  select @splitted = splitted from content_item with(nolock) where content_item_id = @content_item_id
  if @splitted = 1
  BEGIN

    declare @newIds table (link_id numeric, id numeric, attribute_id numeric null, has_data bit null, splitted bit null, has_async bit null, primary key (link_id, id))
    declare @oldIds table (link_id numeric, id numeric, primary key (link_id, id))
    declare @crossIds table (link_id numeric, id numeric, primary key (link_id, id))

    insert into @newIds (link_id, id) select link_id, linked_item_id from item_link_async where item_id = @content_item_id
    insert into @oldIds select link_id, linked_item_id from item_link where item_id = @content_item_id
    insert into @crossIds select t1.link_id, t1.id from @oldIds t1 inner join @newIds t2 on t1.id = t2.id and t1.link_id = t2.link_id

    delete @oldIds from @oldIds i inner join @crossIds ci on i.link_id = ci.link_id and i.id = ci.id
    delete @newIds from @newIds i inner join @crossIds ci on i.link_id = ci.link_id and i.id = ci.id

    delete item_to_item from item_to_item ii inner join @oldIds i on i.link_id = ii.link_id and i.id = ii.r_item_id
    where ii.l_item_id = @content_item_id

    insert into item_to_item (link_id, l_item_id, r_item_id)
    select link_id, @content_item_id, id from @newIds;

    with newItems (link_id, id, attribute_id, has_data, splitted, has_async) as
    (
    select
      n.link_id, n.id, ca.attribute_id,
      case when cd.content_item_id is null then 0 else 1 end as has_data,
      ci.splitted,
      case when ila.link_id is null then 0 else 1 end as has_async
    from @newIds n
      inner join content_item ci on ci.CONTENT_ITEM_ID = n.id
      inner join content c on ci.content_id = c.content_id
      inner join content_attribute ca on ca.content_id = c.content_id and ca.link_id = n.link_id
      inner join content_to_content c2c on c2c.link_id = n.link_id
      left join content_data cd on cd.ATTRIBUTE_ID = ca.ATTRIBUTE_ID and cd.CONTENT_ITEM_ID = ci.content_item_id
      left join item_link_async ila on n.link_id = ila.link_id and n.id = ila.item_id and ila.linked_item_id = @content_item_id
      where c2c.symmetric = 1
    )
    update @newIds
    set attribute_id = ext.attribute_id, has_data = ext.has_data, splitted = ext.splitted, has_async = ext.has_async
    from @newIds n inner join newItems ext on n.link_id = ext.link_id and n.id = ext.id

    update content_data set data = n.link_id
    from content_data cd
    inner join @newIds n on cd.ATTRIBUTE_ID = n.attribute_id and cd.CONTENT_ITEM_ID = n.id
    where n.has_data = 1

    insert into content_data(CONTENT_ITEM_ID, ATTRIBUTE_ID, DATA)
    select n.id, n.attribute_id, n.link_id
    from @newIds n where n.has_data = 0 and n.attribute_id is not null

    insert into item_link_async(link_id, item_id, linked_item_id)
    select n.link_id, n.id, @content_item_id
    from @newIds n
    where n.splitted = 1 and n.has_async = 0 and n.attribute_id is not null

    delete from item_link_async with(rowlock) where item_id = @content_item_id
  END
END

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.37', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.37 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.38
-- Cancel Split
-- **************************************

ALTER TRIGGER [dbo].[tu_update_item] ON [dbo].[CONTENT_ITEM] FOR UPDATE
AS
begin
  if not update(locked_by) and not update(splitted) and not UPDATE(not_for_replication)
  begin
    declare @content_id numeric
    declare @sql nvarchar(max), @table_name varchar(50), @async_table_name varchar(50)
    declare @ids_list nvarchar(max), @async_ids_list nvarchar(max), @sync_ids_list nvarchar(max)

    declare @contents table
    (
      id numeric primary key
    )

    insert into @contents
    select distinct content_id from inserted
    where CONTENT_ID in (select CONTENT_ID from content where virtual_type = 0)

    create table #ids_with_splitted
    (
      id numeric primary key,
      new_splitted bit
    )

    declare @ids table
    (
      id numeric primary key,
      splitted bit,
      not_for_replication bit,
      cancel_split bit
    )

    while exists (select id from @contents)
    begin
      select @content_id = id from @contents

      insert into @ids
      select i.content_item_id, i.SPLITTED, i.not_for_replication, i.cancel_split from inserted i
      inner join content_item ci on i.content_item_id = ci.content_item_id
      where ci.CONTENT_ID = @content_id

      set @ids_list = null
      select @ids_list = coalesce(@ids_list + ',', '') + convert(nvarchar, id) from @ids

      set @sql = 'insert into #ids_with_splitted '
      set @sql = @sql + ' select content_item_id,'
      set @sql = @sql + ' case'
      set @sql = @sql + ' when curr_weight < front_weight and is_workflow_async = 1 then 1'
      set @sql = @sql + ' when curr_weight = workflow_max_weight and delayed = 1 then 1'
      set @sql = @sql + ' else 0'
      set @sql = @sql + ' end'
      set @sql = @sql + ' as new_splitted from ('
      set @sql = @sql + ' select distinct ci.content_item_id, st1.WEIGHT as curr_weight, st2.WEIGHT as front_weight, '
      set @sql = @sql + ' max(st3.WEIGHT) over (partition by ci.content_item_id) as workflow_max_weight, case when ci.cancel_split = 1 then 0 else ciw.is_async end as is_workflow_async, '
      set @sql = @sql + ' ci.SCHEDULE_NEW_VERSION_PUBLICATION as delayed '
      set @sql = @sql + ' from content_item ci'
      set @sql = @sql + ' inner join content_' + CONVERT(nvarchar, @content_id) + ' c on ci.CONTENT_ITEM_ID = c.CONTENT_ITEM_ID'
      set @sql = @sql + ' inner join STATUS_TYPE st1 on ci.STATUS_TYPE_ID = st1.STATUS_TYPE_ID'
      set @sql = @sql + ' inner join STATUS_TYPE st2 on c.STATUS_TYPE_ID = st2.STATUS_TYPE_ID'
      set @sql = @sql + ' left join content_item_workflow ciw on ci.content_item_id = ciw.content_item_id'
      set @sql = @sql + ' left join workflow_rules wr on ciw.WORKFLOW_ID = wr.WORKFLOW_ID'
      set @sql = @sql + ' left join STATUS_TYPE st3 on st3.STATUS_TYPE_ID = wr.SUCCESSOR_STATUS_ID'
      set @sql = @sql + ' where ci.content_item_id in (' + @ids_list + ')) as main'
      print @sql
      exec sp_executesql @sql

      update base set base.splitted = i.new_splitted from @ids base inner join #ids_with_splitted i on base.id = i.id
      update base set base.splitted = i.splitted from content_item base inner join @ids i on base.CONTENT_ITEM_ID = i.id

      set @sync_ids_list = null
      select @sync_ids_list = coalesce(@sync_ids_list + ',', '') + convert(nvarchar, id) from @ids where splitted = 0 and not_for_replication = 0
      set @async_ids_list = null
      select @async_ids_list = coalesce(@async_ids_list + ',', '') + convert(nvarchar, id) from @ids where splitted = 1 and not_for_replication = 0

      set @table_name = 'content_' + CONVERT(nvarchar, @content_id)
      set @async_table_name = @table_name + '_async'

      if @sync_ids_list <> ''
      begin
        exec qp_get_upsert_items_sql @table_name, @sync_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql

        exec qp_get_delete_items_sql @content_id, @sync_ids_list, 1, @sql = @sql out
        print @sql
        exec sp_executesql @sql
      end

      if @async_ids_list <> ''
      begin
        exec qp_get_upsert_items_sql @async_table_name, @async_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql

        exec qp_get_update_items_flags_sql @table_name, @async_ids_list, @sql = @sql out
        print @sql
        exec sp_executesql @sql
      end

      delete from #ids_with_splitted

      delete from @contents where id = @content_id

      delete from @ids
    end

    drop table #ids_with_splitted

  end
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.38', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.38 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.3.39
-- Templates etc.
-- **************************************
update backend_action
set name = 'Templates'
where code = 'list_template'
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Template Properties', 'edit_template', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('template'), '~/PageTemplate/PageTemplateProperties/', 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Template', 'save_template', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('template'), 0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_template'), dbo.qp_action_id('save_template'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Template', 'refresh_template', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template'), 0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_template'), dbo.qp_action_id('refresh_template'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Template', 'remove_template', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('template'), 'Do you really want to remove this template?', '~/PageTemplate/RemovePageTemplate/', 0)
go



update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_template'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_templates')
where CODE = 'template'

GO


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Template', 'update_template', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('template'),0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template'), dbo.qp_action_id('refresh_template'), 'Refresh', 'refresh.gif', NULL, 2, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template'), dbo.qp_action_id('update_template'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template'), dbo.qp_action_id('remove_template'), 'Remove', 'delete.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template'), dbo.qp_action_id('remove_template'), 'Remove', 'delete.gif', NULL, 3, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template'), dbo.qp_action_id('edit_template'), 'Properties', 'properties.gif', NULL, 2, 1)
go

if not exists (select * From information_schema.columns where table_name = 'page_template' and column_name = 'PERMANENT_LOCK')
begin
  alter table page_template
  add PERMANENT_LOCK bit NULL
end
GO

update page_template
set permanent_lock = 0
go


ALTER TABLE page_template ALTER COLUMN permanent_lock bit NOT NULL

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Page', 'save_page', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('page'), 0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_page'), dbo.qp_action_id('save_page'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Page Properties', 'edit_page', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('page'), '~/PageTemplate/PageProperties/', 1)
go

if not exists (select * from context_menu where code = 'pages')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('pages')
END
GO

if not exists (select * from context_menu where code = 'page')
BEGIN
  INSERT INTO context_menu (CODE) VALUES ('page')
END
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Page', 'remove_page', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('page'), 'Do you really want to remove this page?', '~/PageTemplate/RemovePage/', 0)
go


insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('pages'), dbo.qp_action_id('refresh_pages'), 'Refresh', 1, 'refresh.gif', 1)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('pages'), dbo.qp_action_id('new_page'), 'New Page', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page'), dbo.qp_action_id('remove_page'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('page'), dbo.qp_action_id('edit_page'), 'Properties', 3, 'properties.gif')
GO

update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('page'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('pages')
where CODE = 'page'


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.39', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.39 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.3.40
-- Templates etc.
-- **************************************

insert into CONTEXT_MENU([CODE])
VALUES ('page_template')
go

insert into CONTEXT_MENU([CODE])
VALUES ('page_templates')
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_templates'), dbo.qp_action_id('refresh_templates'), 'Refresh', 1, 'refresh.gif', 1)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('page_templates'), dbo.qp_action_id('new_template'), 'New Page Template', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_template'), dbo.qp_action_id('remove_template'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('page_template'), dbo.qp_action_id('edit_template'), 'Properties', 3, 'properties.gif')
GO


update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_template'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_templates')
where CODE = 'template'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.40', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.40 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.3.41
-- Confirmations
-- **************************************

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following content: {0}?' where CODE = 'remove_content'
exec qp_update_translations 'Do you really want to remove the following content: {0}?', 'Вы действительно хотите удалить следующий контент: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following article: {0}?' where CODE = 'remove_article'
exec qp_update_translations 'Do you really want to remove the following article: {0}?', 'Вы действительно хотите удалить следующую статью: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following folder: {0}?' where CODE = 'remove_site_folder'
exec qp_update_translations 'Do you really want to remove the following folder: {0}?', 'Вы действительно хотите удалить следующую папку: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following folder: {0}?' where CODE = 'remove_content_folder'
exec qp_update_translations 'Do you really want to remove the following folder: {0}?', 'Вы действительно хотите удалить следующую папку: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following file: {0}?' where CODE = 'remove_site_file'
exec qp_update_translations 'Do you really want to remove the following file: {0}?', 'Вы действительно хотите удалить следующий файл: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following file: {0}?' where CODE = 'remove_content_file'
exec qp_update_translations 'Do you really want to remove the following file: {0}?', 'Вы действительно хотите удалить следующий файл: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following site: {0}?' where CODE = 'remove_site'
exec qp_update_translations 'Do you really want to remove the following site: {0}?', 'Вы действительно хотите удалить следующий сайт: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following virtual content: {0}?' where CODE = 'remove_virtual_content'
exec qp_update_translations 'Do you really want to remove the following virtual content: {0}?', 'Вы действительно хотите удалить следующий виртуальный контент: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following field: {0}?' where CODE = 'remove_field'
exec qp_update_translations 'Do you really want to remove the following field: {0}?', 'Вы действительно хотите удалить следующее поле: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following article version: {0}?' where CODE = 'remove_article_version'
exec qp_update_translations 'Do you really want to remove the following article version: {0}?', 'Вы действительно хотите удалить следующую версию статьи: {0}?'
exec qp_update_translations 'Do you really want to remove the following article versions: {0}?', 'Вы действительно хотите удалить следующие версии статьи: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to apply default value to the following field: {0}?' where CODE = 'apply_field_default_value'
exec qp_update_translations 'Do you really want to apply default value to the following field: {0}?', 'Вы действительно хотите применить значение по умолчанию к следующему полю: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to recreate dynamic images for the following field: {0}?' where CODE = 'recreate_dynamic_images'
exec qp_update_translations 'Do you really want to recreate dynamic images for the following field: {0}?', 'Вы действительно хотите пересоздать динамические изображения для следующего поля: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to clear the following content: {0}?' where CODE = 'clear_content'
exec qp_update_translations 'Do you really want to clear the following content: {0}?', 'Вы действительно хотите очистить следующий контент: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following user: {0}?' where CODE = 'remove_user'
exec qp_update_translations 'Do you really want to remove the following user: {0}?', 'Вы действительно хотите удалить следующего пользователя: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following user group: {0}?' where CODE = 'remove_user_group'
exec qp_update_translations 'Do you really want to remove the following user group: {0}?', 'Вы действительно хотите удалить следующую группу пользователей: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following visual editor plugin: {0}?' where CODE = 'remove_visual_editor_plugin'
exec qp_update_translations 'Do you really want to remove the following visual editor plugin: {0}?', 'Вы действительно хотите удалить следующий плагин визуального редактора: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following visual editor style: {0}?' where CODE = 'remove_visual_editor_style'
exec qp_update_translations 'Do you really want to remove the following visual editor style: {0}?', 'Вы действительно хотите удалить следующий стиль визуального редактора: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following notification: {0}?' where CODE = 'remove_notification'
exec qp_update_translations 'Do you really want to remove the following notification: {0}?', 'Вы действительно хотите удалить следующее уведомление: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following status: {0}?' where CODE = 'remove_status_type'
exec qp_update_translations 'Do you really want to remove the following status: {0}?', 'Вы действительно хотите удалить следующий статус: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following workflow: {0}?' where CODE = 'remove_workflow'
exec qp_update_translations 'Do you really want to remove the following workflow: {0}?', 'Вы действительно хотите удалить следующий workflow: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following template: {0}?' where CODE = 'remove_template'
exec qp_update_translations 'Do you really want to remove the following template: {0}?', 'Вы действительно хотите удалить следующий шаблон: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following page: {0}?' where CODE = 'remove_page'
exec qp_update_translations 'Do you really want to remove the following page: {0}?', 'Вы действительно хотите удалить следующую страницу: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following permission: {0}?' where CONFIRM_PHRASE = 'Do you really want to remove this permission?'
update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following permissions: {0}?' where CONFIRM_PHRASE = 'Do you really want to remove selected permissions?'
exec qp_update_translations 'Do you really want to remove the following permission: {0}?', 'Вы действительно хотите удалить следующее право доступа: {0}?'
exec qp_update_translations 'Do you really want to remove the following permissions: {0}?', 'Вы действительно хотите удалить следующие права доступа: {0}?'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.41', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.41 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.42
-- Upload action type
-- **************************************

insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('Upload', 'upload', 2, 255)
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Upload Site File', 'upload_site_file', dbo.qp_action_type_id('upload'), dbo.qp_entity_type_id('site_file'))
GO
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Upload Content File', 'upload_content_file', dbo.qp_action_type_id('upload'), dbo.qp_entity_type_id('content_file'))
GO

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove the following notifications: {0}?' where CODE = 'multiple_remove_notification'
exec qp_update_translations 'Do you really want to remove the following notifications: {0}?', 'Вы действительно хотите удалить следующие уведомления: {0}?'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.42', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.42 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.3.43
-- Upload action type
-- **************************************


update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove explicit permissions for the following contents: {0}?' where CODE = 'multiple_remove_child_content_permission'
exec qp_update_translations 'Do you really want to remove explicit permissions for the following contents: {0}?', 'Вы действительно хотите удалить явные права доступа для следующих контентов: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove explicit permissions for all of the current site contents?' where CODE = 'remove_all_child_content_permission'
exec qp_update_translations 'Do you really want to remove explicit permissions for all of the current site contents?', 'Вы действительно хотите удалить явные права доступа для всех контентов текущего сайта?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove explicit permission for the following content: {0}?' where CODE = 'remove_child_content_permission'
exec qp_update_translations 'Do you really want to remove explicit permission for the following content: {0}?', 'Вы действительно хотите удалить явное право доступа для следующего контента: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove explicit permissions for the following articles: {0}?' where CODE = 'multiple_remove_child_article_permission'
exec qp_update_translations 'Do you really want to remove explicit permissions for the following articles: {0}?', 'Вы действительно хотите удалить явные права доступа для следующих статей: {0}?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove explicit permissions for all of the current content articles?' where CODE = 'remove_all_child_article_permission'
exec qp_update_translations 'Do you really want to remove explicit permissions for all of the current content articles?', 'Вы действительно хотите удалить явные права доступа для всех статей текущего контента?'

update BACKEND_ACTION set CONFIRM_PHRASE = 'Do you really want to remove explicit permission for the following article: {0}?' where CODE = 'remove_child_article_permission'
exec qp_update_translations 'Do you really want to remove explicit permission for the following article: {0}?', 'Вы действительно хотите удалить явное право доступа для следующей статьи: {0}?'

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.43', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.43 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.3.44
-- Page Templates etc
-- **************************************

if not exists (select * From information_schema.columns where table_name = 'page' and column_name = 'PERMANENT_LOCK')
begin
  alter table page
  add PERMANENT_LOCK bit NULL
end
GO

update page
set permanent_lock = 0
go

ALTER TABLE page ALTER COLUMN permanent_lock bit NOT NULL
go

if not exists (
SELECT * FROM sysobjects WHERE xtype = 'D' AND name = 'DF_PAGE_PERMANENT_LOCK'
)
ALTER TABLE [dbo].[PAGE] ADD  CONSTRAINT [DF_PAGE_PERMANENT_LOCK]  DEFAULT (0) FOR [PERMANENT_LOCK]
GO

if not exists (
SELECT * FROM sysobjects WHERE xtype = 'D' AND name = 'DF_PAGE_TEMPLATE_PERMANENT_LOCK')
ALTER TABLE [dbo].[PAGE_TEMPLATE] ADD  CONSTRAINT [DF_PAGE_TEMPLATE_PERMANENT_LOCK]  DEFAULT (0) FOR [PERMANENT_LOCK]
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_page', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('page'), '~/PageTemplate/CancelPage/')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_template', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('template'), '~/PageTemplate/CancelTemplate/')

UPDATE ENTITY_TYPE
   SET [CANCEL_ACTION_ID] = dbo.qp_action_id('cancel_page')

 WHERE CODE = 'page'
GO

UPDATE ENTITY_TYPE
   SET [CANCEL_ACTION_ID] = dbo.qp_action_id('cancel_template')

 WHERE CODE = 'template'
 go

UPDATE ENTITY_TYPE
   SET [CANCEL_ACTION_ID] = dbo.qp_action_id('cancel_template')
 WHERE CODE = 'template'
 go

UPDATE ENTITY_TYPE
   SET [FOLDER_DEFAULT_ACTION_ID] = dbo.qp_action_id('list_template_object')
 WHERE CODE = 'template_object'
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Page Object Properties', 'edit_page_object', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/PageObjectProperties/', 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Page Object', 'update_page_object', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('page_object'),0)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Page Object', 'remove_page_object', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('page_object'), 'Do you really want to remove this object?', '~/PageTemplate/RemovePageObject/', 0)
go

insert into CONTEXT_MENU([CODE])
VALUES ('page_objects')
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_objects'), dbo.qp_action_id('refresh_page_objects'), 'Refresh', 1, 'refresh.gif', 1)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('page_objects'), dbo.qp_action_id('new_page_object'), 'New Object', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_object'), dbo.qp_action_id('remove_page_object'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('page_object'), dbo.qp_action_id('edit_page_object'), 'Properties', 3, 'properties.gif')
GO

update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_object'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_objects')
where CODE = 'page_object'
go

if not exists (select * From information_schema.columns where table_name = 'object' and column_name = 'PERMANENT_LOCK')
begin
  alter table object
  add PERMANENT_LOCK bit NULL
end

GO

update [object]
set permanent_lock = 0
go

ALTER TABLE [object] ALTER COLUMN permanent_lock bit NOT NULL

if not exists (
SELECT * FROM sysobjects WHERE xtype = 'D' AND name = 'DF_OBJECT_PERMANENT_LOCK'
)
ALTER TABLE [dbo].[object] ADD  CONSTRAINT [DF_OBJECT_PERMANENT_LOCK]  DEFAULT (0) FOR [PERMANENT_LOCK]
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_template_object', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/CancelTemplateObject/')
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_page_object', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/CancelPageObject/')
go

UPDATE ENTITY_TYPE
   SET [CANCEL_ACTION_ID] = dbo.qp_action_id('cancel_page_object')
 WHERE CODE = 'page_object'
GO

UPDATE ENTITY_TYPE
   SET [CANCEL_ACTION_ID] = dbo.qp_action_id('cancel_template_object')
 WHERE CODE = 'template_object'
GO


update ENTITY_TYPE
  SET [disabled] = 0
 where source = 'object_format'

exec sp_refreshview 'template_object'
GO

exec sp_refreshview 'page_object'
GO

exec sp_refreshview 'content_format'
GO

exec sp_refreshview 'object_attributes'
GO

update entity_type set disabled = 1 where code = 'template'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.3.44', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.3.44 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.4.0
-- Internal Release
-- **************************************

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.0', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.0 completed'
GO

-- **************************************
-- Maxim Tertyshnyy
-- version 7.9.4.1
-- USER DEFAULT FILTER
-- **************************************

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USER_DEFAULT_FILTER]') AND type in (N'U'))
BEGIN
  DROP TABLE [dbo].[USER_DEFAULT_FILTER]
END
GO
CREATE TABLE dbo.USER_DEFAULT_FILTER
  (
  [USER_ID] numeric(18, 0) NOT NULL,
  CONTENT_ID numeric(18, 0) NOT NULL,
  CONTENT_ITEM_ID numeric(18, 0) NOT NULL
  )  ON [PRIMARY]
GO
ALTER TABLE dbo.USER_DEFAULT_FILTER ADD CONSTRAINT
  PK_USER_DEFAULT_FILTER PRIMARY KEY CLUSTERED
  (
  [USER_ID],
  CONTENT_ID,
  CONTENT_ITEM_ID
  ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.USER_DEFAULT_FILTER ADD CONSTRAINT FK_USER_DEFAULT_FILTER_USERS FOREIGN KEY ([USER_ID]) REFERENCES dbo.USERS([USER_ID])
GO
ALTER TABLE dbo.USER_DEFAULT_FILTER ADD CONSTRAINT FK_USER_DEFAULT_FILTER_CONTENT FOREIGN KEY (CONTENT_ID) REFERENCES dbo.[CONTENT](CONTENT_ID)
GO
ALTER TABLE dbo.USER_DEFAULT_FILTER ADD CONSTRAINT FK_USER_DEFAULT_FILTER_CONTENT_ITEM FOREIGN KEY (CONTENT_ITEM_ID) REFERENCES dbo.CONTENT_ITEM(CONTENT_ITEM_ID) ON DELETE  CASCADE
GO

exec qp_drop_existing 'tbd_user', 'IsTrigger'
GO
CREATE TRIGGER [dbo].[tbd_user] ON [dbo].[USERS]
INSTEAD OF DELETE
AS
BEGIN

  DELETE USER_GROUP_BIND FROM USER_GROUP_BIND c inner join deleted d on c.user_id = d.user_id
  DELETE USER_DEFAULT_FILTER FROM USER_DEFAULT_FILTER f inner join deleted d on f.user_id = d.user_id

  UPDATE CONTAINER SET locked = NULL, locked_by = NULL FROM CONTAINER c inner join deleted d on c.locked_by = d.user_id
  UPDATE CONTENT_FORM SET locked = NULL, locked_by = NULL FROM CONTENT_FORM c inner join deleted d on c.locked_by = d.user_id
  UPDATE CONTENT_ITEM SET locked = NULL, locked_by = NULL FROM CONTENT_ITEM c inner join deleted d on c.locked_by = d.user_id
  UPDATE [OBJECT] SET locked = NULL, locked_by = NULL FROM [OBJECT] c inner join deleted d on c.locked_by = d.user_id
  UPDATE OBJECT_FORMAT SET locked = NULL, locked_by = NULL FROM OBJECT_FORMAT c inner join deleted d on c.locked_by = d.user_id
  UPDATE PAGE SET locked = NULL, locked_by = NULL FROM PAGE c inner join deleted d on c.locked_by = d.user_id
  UPDATE PAGE_TEMPLATE SET locked = NULL, locked_by = NULL FROM PAGE_TEMPLATE c inner join deleted d on c.locked_by = d.user_id
  UPDATE [SITE] SET locked = NULL, locked_by = NULL FROM [SITE] c inner join deleted d on c.locked_by = d.user_id

  UPDATE [SITE] SET last_modified_by = 1 FROM [SITE] c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT SET last_modified_by = 1 FROM CONTENT c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM SET last_modified_by = 1 FROM CONTENT_ITEM c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_SCHEDULE SET last_modified_by = 1 FROM CONTENT_ITEM_SCHEDULE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET created_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.created_by = d.user_id
  UPDATE CONTENT_ITEM_VERSION SET last_modified_by = 1 FROM CONTENT_ITEM_VERSION c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ATTRIBUTE SET last_modified_by = 1 FROM CONTENT_ATTRIBUTE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE PAGE_TEMPLATE SET last_modified_by = 1 FROM PAGE_TEMPLATE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE PAGE SET last_modified_by = 1 FROM PAGE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE PAGE SET last_assembled_by = 1 FROM PAGE c inner join deleted d on c.last_assembled_by  = d.user_id
  UPDATE OBJECT SET last_modified_by = 1 FROM OBJECT c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE OBJECT_FORMAT SET last_modified_by = 1 FROM OBJECT_FORMAT c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE FOLDER SET last_modified_by = 1 FROM FOLDER c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE FOLDER_ACCESS SET last_modified_by = 1 FROM FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_FOLDER SET last_modified_by = 1 FROM CONTENT_FOLDER c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_FOLDER_ACCESS SET last_modified_by = 1 FROM CONTENT_FOLDER_ACCESS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CODE_SNIPPET SET last_modified_by = 1 FROM CODE_SNIPPET c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE STYLE SET last_modified_by = 1 FROM STYLE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE STATUS_TYPE SET last_modified_by = 1 FROM STATUS_TYPE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW SET last_modified_by = 1 FROM WORKFLOW c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE SITE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE CONTENT_ITEM_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE WORKFLOW_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE USER_GROUP SET last_modified_by = 1 FROM USER_GROUP c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE USERS SET last_modified_by = 1 FROM USERS c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE NOTIFICATIONS SET last_modified_by = 1 FROM NOTIFICATIONS c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CONTENT_ITEM_STATUS_HISTORY SET user_id = 1 WHERE user_id in (select user_id from deleted)
  UPDATE DOC SET last_modified_by = 1 FROM DOC c inner join deleted d on c.last_modified_by = d.user_id

  UPDATE CUSTOM_ACTION SET LAST_MODIFIED_BY = 1 FROM CUSTOM_ACTION c INNER JOIN deleted d on c.LAST_MODIFIED_BY = d.[USER_ID]

  UPDATE NOTIFICATIONS SET FROM_BACKENDUSER_ID = 1 FROM NOTIFICATIONS c inner join deleted d on c.FROM_BACKENDUSER_ID = d.user_id

  UPDATE ENTITY_TYPE_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id
  UPDATE ACTION_ACCESS SET last_modified_by = 1 FROM SITE c inner join deleted d on c.last_modified_by = d.user_id

  delete users from users c inner join deleted d on c.user_id = d.user_id
END
GO

exec qp_drop_existing 'tbd_delete_content', 'IsTrigger'
GO
CREATE TRIGGER [dbo].[tbd_delete_content] ON [dbo].[CONTENT] INSTEAD OF DELETE
AS
BEGIN
  create table #disable_td_delete_item(id numeric)

  UPDATE content_attribute SET related_attribute_id = NULL
  where related_attribute_id in (
    select attribute_id from content_attribute ca
    inner join deleted d on ca.content_id = d.content_id
  )

  update content_attribute set link_id = null where link_id in (select link_id from content_link cl
  inner join deleted d on cl.content_id = d.content_id)

  delete USER_DEFAULT_FILTER from USER_DEFAULT_FILTER f
  inner join deleted d on d.content_id = f.CONTENT_ID

  delete content_to_content from content_to_content cc
  inner join deleted d on d.content_id = cc.r_content_id or d.content_id = cc.l_content_id

  delete container from container c
  inner join deleted d on d.content_id = c.content_id

  delete content_form from content_form cf
  inner join deleted d on d.content_id = cf.content_id

  delete content_item from content_item ci
  inner join deleted d on d.content_id = ci.content_id

  delete content_tab_bind from content_tab_bind ctb
  inner join deleted d on d.content_id = ctb.content_id

  delete [ACTION_CONTENT_BIND] from [ACTION_CONTENT_BIND] acb
  inner join deleted d on d.content_id = acb.content_id

  delete ca from CONTENT_ATTRIBUTE ca
  inner join CONTENT_ATTRIBUTE cad on ca.BACK_RELATED_ATTRIBUTE_ID = cad.ATTRIBUTE_ID
  inner join deleted c on cad.CONTENT_ID = c.CONTENT_ID

  delete content from content c inner join deleted d on c.content_id = d.content_id

  drop table #disable_td_delete_item
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.1', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.1 completed'
GO

-- **************************************
-- Maxim Tertyshnyy
-- version 7.9.4.2
-- USER DEFAULT FILTER: change qp_copy_user
-- **************************************
exec qp_drop_existing 'qp_copy_user', 'IsProcedure'
GO
CREATE PROCEDURE [dbo].[qp_copy_user]
  @user_id numeric(18,0),
  @new_login nvarchar(30),
  @create_by_id numeric(18,0),
  @new_user_id numeric(18,0) output
AS
BEGIN
  declare @now datetime;
  set @now = getdate();

  INSERT INTO [USERS]
    ([PASSWORD]
    ,[DISABLED]
    ,[FIRST_NAME]
    ,[LAST_NAME]
    ,[EMAIL]
    ,[AUTO_LOGIN]
    ,[NT_LOGIN]
    ,[LAST_LOGIN]
    ,[SUBSCRIBED]
    ,[CREATED]
    ,[MODIFIED]
    ,[LAST_MODIFIED_BY]
    ,[LANGUAGE_ID]
    ,[VMODE]
    ,[ad_sid]
    ,[allow_stage_edit_field]
    ,[allow_stage_edit_object]
    ,[BUILT_IN]
    ,[LOGIN]
    ,[hash]
    ,[salt]
    ,[PASSWORD_MODIFIED])
  SELECT ''
      ,[DISABLED]
      ,[FIRST_NAME]
      ,[LAST_NAME]
      ,[EMAIL]
      ,[AUTO_LOGIN]
      ,[NT_LOGIN]
      ,[LAST_LOGIN]
      ,[SUBSCRIBED]
      ,@now
      ,@now
      ,@create_by_id
      ,[LANGUAGE_ID]
      ,[VMODE]
      ,[ad_sid]
      ,[allow_stage_edit_field]
      ,[allow_stage_edit_object]
      ,0
      ,@new_login
      ,[hash]
      ,[salt]
      ,[PASSWORD_MODIFIED]
  FROM [USERS]
  WHERE [USER_ID] = @user_id

  set @new_user_id = scope_identity();

  delete from [USER_GROUP_BIND] where [USER_ID] = @new_user_id
  INSERT INTO [USER_GROUP_BIND] ([GROUP_ID],[USER_ID])
  select [GROUP_ID], @new_user_id from [USER_GROUP_BIND] where [USER_ID] = @user_id

  INSERT INTO [TAB_ACCESS]([TAB_ID],[USER_ID],[GROUP_ID],[PERMISSION_LEVEL_ID])
  select [TAB_ID],@new_user_id,[GROUP_ID],[PERMISSION_LEVEL_ID] from [TAB_ACCESS] where [USER_ID] = @user_id

  INSERT INTO [SITE_ACCESS]
       ([SITE_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_contents])
  SELECT [SITE_ID]
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_contents]
  FROM [SITE_ACCESS]
  where [USER_ID] = @user_id

  INSERT INTO CONTENT_ACCESS
       ([CONTENT_ID]
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY]
       ,[propagate_to_items])
  SELECT [CONTENT_ID]
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
      ,[propagate_to_items]
  FROM [CONTENT_ACCESS]
  where [USER_ID] = @user_id

  INSERT INTO CONTENT_ITEM_ACCESS
       (CONTENT_ITEM_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT CONTENT_ITEM_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM CONTENT_ITEM_ACCESS
  where [USER_ID] = @user_id

  INSERT INTO FOLDER_ACCESS
       (FOLDER_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT FOLDER_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM FOLDER_ACCESS
  where [USER_ID] = @user_id

  INSERT INTO ENTITY_TYPE_ACCESS
       (ENTITY_TYPE_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT ENTITY_TYPE_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM ENTITY_TYPE_ACCESS
  where [USER_ID] = @user_id

  INSERT INTO ACTION_ACCESS
       (ACTION_ID
       ,[USER_ID]
       ,[GROUP_ID]
       ,[PERMISSION_LEVEL_ID]
       ,[CREATED]
       ,[MODIFIED]
       ,[LAST_MODIFIED_BY])
  SELECT ACTION_ID
      ,@new_user_id
      ,[GROUP_ID]
      ,[PERMISSION_LEVEL_ID]
      ,@now
      ,@now
      ,@create_by_id
  FROM ACTION_ACCESS
  where [USER_ID] = @user_id

  insert into USER_DEFAULT_FILTER ([USER_ID], CONTENT_ID, CONTENT_ITEM_ID)
  select @new_user_id, CONTENT_ID, CONTENT_ITEM_ID from USER_DEFAULT_FILTER where [USER_ID] = @user_id
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.2', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.2 completed'
GO



-- **************************************
-- Kirill Zakirov
-- version 7.9.4.3
-- Templates
-- **************************************

update [ENTITY_TYPE]
set disabled = 0
where CODE = 'template'

update backend_action
set name = 'Pages'
where code = 'list_page'

update backend_action
set name = 'Template Objects'
where code = 'list_template_object'

update backend_action
set name = 'Page Objects'
where code = 'list_page_object'

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Formats', 'list_template_object_format', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('template_object_format'), '~/PageTemplate/IndexTemplateObjectFormats/',  1, dbo.qp_view_id('list'))
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Formats', 'list_page_object_format', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('page_object_format'), '~/PageTemplate/IndexPageObjectFormats/',  1, dbo.qp_view_id('list'))
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Format', 'new_template_object_format', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('template_object_format'), '~/PageTemplate/NewTemplateObjectFormat/', 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('New Format', 'new_page_object_format', dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('page_object_format'), '~/PageTemplate/NewPageObjectFormat/', 1)
go


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Object Properties', 'edit_template_object', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/TemplateObjectProperties/', 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Object', 'save_template_object', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('template_object'), 0)
go
--
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Format Properties', 'edit_page_object_format', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('page_object_format'), '~/PageTemplate/PageObjectFormatProperties/', 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Format', 'save_page_object', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('page_object_format'), 0)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Object', 'remove_template_object', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('template_object'), 'Do you really want to remove this object?', '~/PageTemplate/RemoveTemplateObject/', 0)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Format Properties', 'edit_template_object_format', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('template_object_format'), '~/PageTemplate/TemplateFormatProperties/', 1)
go
--
insert into CONTEXT_MENU([CODE])
VALUES ('template_objects')
go

insert into CONTEXT_MENU([CODE])
VALUES ('template_object_formats')
go

insert into CONTEXT_MENU([CODE])
VALUES ('page_object_formats')
go
--

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Objects', 'refresh_template_objects', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template_object'), 1)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Object', 'refresh_template_object', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template_object'), 0)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Formats', 'refresh_template_object_formats', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template_object_format'), 1)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Format', 'refresh_template_object_format', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template_object_format'), 0)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Formats', 'refresh_page_object_formats', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page_object_format'), 1)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Format', 'refresh_page_object_format', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page_object_format'), 0)
GO

--

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('template_objects'), dbo.qp_action_id('refresh_template_objects'), 'Refresh', 1, 'refresh.gif', 1)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('template_objects'), dbo.qp_action_id('new_template_object'), 'New Object', 2, 'add.gif')
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('template_object'), dbo.qp_action_id('remove_template_object'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('template_object'), dbo.qp_action_id('edit_template_object'), 'Properties', 3, 'properties.gif')
GO
--

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('template_object_formats'), dbo.qp_action_id('refresh_template_object_formats'), 'Refresh', 1, 'refresh.gif', 1)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('template_object_formats'), dbo.qp_action_id('new_template_object_format'), 'New Format', 2, 'add.gif')
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Format', 'remove_template_object_format', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('template_object_format'), 'Do you really want to remove this format?', '~/PageTemplate/RemoveTemplateObjectFormat/', 0)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('template_object_format'), dbo.qp_action_id('remove_template_object_format'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('template_object_format'), dbo.qp_action_id('edit_template_object_format'), 'Properties', 3, 'properties.gif')
GO
--
insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_object_formats'), dbo.qp_action_id('refresh_page_object_formats'), 'Refresh', 1, 'refresh.gif', 1)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('page_object_formats'), dbo.qp_action_id('new_page_object_format'), 'New Format', 2, 'add.gif')
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONFIRM_PHRASE, CONTROLLER_ACTION_URL, HAS_PRE_ACTION)
values('Remove Format', 'remove_page_object_format', dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('page_object_format'), 'Do you really want to remove this format?', '~/PageTemplate/RemovePageObjectFormat/', 0)
go

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_object_format'), dbo.qp_action_id('remove_page_object_format'), 'Remove', 2, 'delete.gif', 1)
GO

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON)
values(dbo.qp_context_menu_id('page_object_format'), dbo.qp_action_id('edit_page_object_format'), 'Properties', 3, 'properties.gif')
GO
--
update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('template_object'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('template_objects')
where CODE = 'template_object'
go

update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('template_object_format'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('template_object_formats')
where CODE = 'template_object_format'
go

update ENTITY_TYPE
set
  CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_object_format'),
  FOLDER_CONTEXT_MENU_ID = dbo.qp_context_menu_id('page_object_formats')
where CODE = 'page_object_format'
go

update ENTITY_TYPE
set
  DEFAULT_ACTION_ID = dbo.qp_action_id('list_page_object_format')
where CODE = 'page_object'
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Format', 'save_page_object_format', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('page_object_format'), 0)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Save Format', 'save_template_object_format', dbo.qp_action_type_id('save'), dbo.qp_entity_type_id('template_object_format'), 0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_page_object_format'), dbo.qp_action_id('save_page_object_format'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_page_object_format'), dbo.qp_action_id('refresh_page_object_format'), 'Refresh', 'refresh.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_template_object_format'), dbo.qp_action_id('save_template_object_format'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_template_object_format'), dbo.qp_action_id('refresh_template_object_format'), 'Refresh', 'refresh.gif', NULL, 1, 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Page', 'refresh_page', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page'), 0)
GO

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_page'), dbo.qp_action_id('refresh_page'), 'Refresh', 'refresh.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object'), dbo.qp_action_id('refresh_template_objects'), 'Refresh', 'refresh.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object_format'), dbo.qp_action_id('refresh_page_object_formats'), 'Refresh', 'refresh.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object_format'), dbo.qp_action_id('refresh_template_object_formats'), 'Refresh', 'refresh.gif', NULL, 1, 1)
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.3', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.3 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.4.4
-- Templates
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Template Object', 'update_template_object', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('template_object'),0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_template_object'), dbo.qp_action_id('update_template_object'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_template_object'), dbo.qp_action_id('refresh_template_object'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Refresh Page Object', 'Refresh Object', 'refresh_page_object', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page_object'), 0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_page_object'), dbo.qp_action_id('update_page_object'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('new_page_object'), dbo.qp_action_id('refresh_page_object'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object'), dbo.qp_action_id('update_page_object'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object'), dbo.qp_action_id('refresh_page_object'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object'), dbo.qp_action_id('remove_page_object'), 'Remove', 'delete.gif', NULL, 3, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object'), dbo.qp_action_id('update_template_object'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object'), dbo.qp_action_id('refresh_template_object'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object'), dbo.qp_action_id('remove_template_object'), 'Remove', 'delete.gif', NULL, 3, 1)
go
--
update BACKEND_ACTION
  set CONTROLLER_ACTION_URL = '~/PageTemplate/TemplateObjectFormatProperties/'
  where CODE = 'edit_template_object_format'
go

--

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'PERMANENT_LOCK' and TABLE_NAME = 'OBJECT_FORMAT')
ALTER TABLE OBJECT_FORMAT
  ADD PERMANENT_LOCK BIT NOT NULL CONSTRAINT DF_OBJECT_FORMAT_PERMANENT_LOCK DEFAULT (0)
GO

--
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Template Object Format', 'update_template_object_format', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('template_object_format'),0)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Page Object Format', 'update_page_object_format', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('page_object_format'),0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object_format'), dbo.qp_action_id('update_page_object_format'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object_format'), dbo.qp_action_id('refresh_page_object_format'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object_format'), dbo.qp_action_id('remove_page_object_format'), 'Remove', 'delete.gif', NULL, 3, 1)
go

--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object_format'), dbo.qp_action_id('update_template_object_format'), 'Save', 'save.gif', NULL, 1, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object_format'), dbo.qp_action_id('refresh_template_object_format'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object_format'), dbo.qp_action_id('remove_template_object_format'), 'Remove', 'delete.gif', NULL, 3, 1)
go

--

Update ENTITY_TYPE
  set DEFAULT_ACTION_ID = dbo.qp_action_id('list_template_object_format')
  where CODE = 'template_object'
go
--

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_template_object_format', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('template_object_format'), '~/PageTemplate/CancelTemplateObjectFormat/')
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL)
values('Cancel', 'cancel_page_object_format', dbo.qp_action_type_id('cancel'), dbo.qp_entity_type_id('page_object_format'), '~/PageTemplate/CancelPageObjectFormat/')
go

Update ENTITY_TYPE
  set CANCEL_ACTION_ID = dbo.qp_action_id('cancel_template_object_format')
  where CODE = 'template_object_format'
go

Update ENTITY_TYPE
  set CANCEL_ACTION_ID = dbo.qp_action_id('cancel_page_object_format')
  where CODE = 'page_object_format'
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.4', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.4 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.4.5
-- Locked Articles
-- **************************************

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('db'), N'Locked Articles List', 'Locked Articles', N'list_locked_article', N'~/Home/LockedArticles/', 1)

INSERT INTO [dbo].[CONTEXT_MENU_ITEM] ([CONTEXT_MENU_ID], [ACTION_ID], [Name], [ORDER], [BOTTOM_SEPARATOR])
VALUES (dbo.qp_context_menu_id('db'), dbo.qp_action_id('list_locked_article'), N'Articles Locked By You', 31, 0)



INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.5', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.5 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.4.6
-- Locked Articles Refresh
-- **************************************

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('db'), N'Refresh Locked Articles', 'Refresh Locked Articles', N'refresh_locked_articles', null, 1)

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('list_locked_article'), dbo.qp_action_id('refresh_locked_articles'), N'Refresh', 10, N'refresh.gif', 1)


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.6', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.6 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.4.7
-- Multiple Unlock, Articles waiting for approval
-- **************************************

INSERT INTO [dbo].[ACTION_TYPE] VALUES('Miltiple Unlock', 'multiple_unlock', 2, 255)

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('multiple_unlock'), dbo.qp_entity_type_id('article'), N'Unlock Articles', 'Unlock Articles', N'unlock_articles', N'~/Home/UnlockArticles/', 0)

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('list_locked_article'), dbo.qp_action_id('unlock_articles'), N'Unlock', 20, N'unlock.gif', 1)



INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('db'), N'Articles waiting your approval', 'Articles For Approval', N'list_articles_for_approval', N'~/Home/ArticlesForApproval/',1)

INSERT INTO [dbo].[CONTEXT_MENU_ITEM] ([CONTEXT_MENU_ID], [ACTION_ID], [Name], [ORDER], [BOTTOM_SEPARATOR])
VALUES (dbo.qp_context_menu_id('db'), dbo.qp_action_id('list_articles_for_approval'), N'Articles waiting your approval', 32, 0)

exec qp_update_translations 'Articles waiting your approval', 'Статьи, ожидающие подтверждения';

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('db'), N'Refresh Articles For Approval', 'Refresh Articles For Approval', N'refresh_articles_for_approval', null, 1)

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('list_articles_for_approval'), dbo.qp_action_id('refresh_articles_for_approval'), N'Refresh', 10, N'refresh.gif', 1)


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.7', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.7 completed'
GO


-- **************************************
-- Max Tertyshnyy
-- version 7.9.4.8
-- Add USE_FOR_DEFAULT_FILTRATION column to CONTENT_ATTRIBUTE table
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'USE_FOR_DEFAULT_FILTRATION' and TABLE_NAME = 'CONTENT_ATTRIBUTE')
ALTER TABLE CONTENT_ATTRIBUTE
  ADD USE_FOR_DEFAULT_FILTRATION BIT NOT NULL CONSTRAINT DF_CONTENT_ATTRIBUTE_USE_FOR_DEFAULT_FILTRATION DEFAULT (0)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.8', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.8 completed'
GO


-- **************************************
-- Alexei Aksenov
-- version 7.9.4.9
-- Add new child article
-- **************************************

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('new'), dbo.qp_entity_type_id('article'), N'New Child Article', 'New Child Article', N'new_child_article', N'~/Article/New/',1)

INSERT INTO [dbo].[CONTEXT_MENU_ITEM] ([CONTEXT_MENU_ID], [ACTION_ID], [Name], [ORDER], [BOTTOM_SEPARATOR])
VALUES (dbo.qp_context_menu_id('article'), dbo.qp_action_id('new_child_article'), N'Add New Child Article', 15, 0)

exec qp_update_translations 'Add New Child Article', 'Добавить дочернюю статью'

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('new_child_article'), dbo.qp_action_id('save_article'), N'Save', 10, N'save.gif', 1)

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('new_child_article'), dbo.qp_action_id('save_article_and_up'), N'Save & Up', 15, N'saveup.gif', 1)

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('new_child_article'), dbo.qp_action_id('refresh_article'), N'Refresh', 20, N'refresh.gif', 1)

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.9', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.9 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.4.10
-- Add refresh button to context menu of virtual field
-- **************************************

INSERT INTO [dbo].[CONTEXT_MENU_ITEM] ([CONTEXT_MENU_ID], [ACTION_ID], [Name], [ORDER], [BOTTOM_SEPARATOR], [ICON])
VALUES (dbo.qp_context_menu_id('virtual_field'), dbo.qp_action_id('update_virtual_field'), N'Update Virtual Field', 5, 1, 'refresh.gif')

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.10', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.10 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.4.11
-- Add remove buttons to user and group properties page
-- **************************************

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('edit_user'), dbo.qp_action_id('remove_user'), N'Remove', 10, N'delete.gif', 1)

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('edit_user_group'), dbo.qp_action_id('remove_user_group'), N'Remove', 10, N'delete.gif', 1)

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.11', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.11 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.4.12
-- Templates
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, IS_INTERFACE)
values('Update Page', 'update_page', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('page'),0)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page'), dbo.qp_action_id('update_page'), 'Save', 'save.gif', NULL, 1, 1)--+
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page'), dbo.qp_action_id('refresh_page'), 'Refresh', 'refresh.gif', NULL, 2, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page'), dbo.qp_action_id('remove_page'), 'Remove', 'delete.gif', NULL, 3, 1)
go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Select Content', 'select_content', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('content'), '~/Content/Select/', 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Select Page', 'select_page', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('page'), '~/PageTemplate/SelectPages/', 1, dbo.qp_view_id('list'), 0)

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.12', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.12 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.4.13
-- Templates
-- **************************************

update ENTITY_TYPE
set DEFAULT_ACTION_ID = dbo.qp_action_id('edit_page_object_format')
where CODE = 'page_object_format'

go

update ENTITY_TYPE
set DEFAULT_ACTION_ID = dbo.qp_action_id('edit_template_object_format')
where CODE = 'template_object_format'

--
go

update ENTITY_TYPE
set [FOLDER_DEFAULT_ACTION_ID] = dbo.qp_action_id('list_page_object_format')
where CODE = 'page_object_format'

go

update ENTITY_TYPE
set [FOLDER_DEFAULT_ACTION_ID] = dbo.qp_action_id('list_template_object_format')
where CODE = 'template_object_format'

--

delete from ACTION_TOOLBAR_BUTTON where PARENT_ACTION_ID = dbo.qp_action_id('list_page_object_format')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format'), dbo.qp_action_id('edit_page_object_format'), 'Properties', 'properties.gif', NULL, 10, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format'), dbo.qp_action_id('remove_page_object_format'), 'Remove', 'delete.gif', NULL, 20, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format'), dbo.qp_action_id('refresh_page_object_formats'), 'Refresh', 'refresh.gif', NULL, 30, 1)
go

--

delete from ACTION_TOOLBAR_BUTTON where PARENT_ACTION_ID = dbo.qp_action_id('list_template_object_format')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format'), dbo.qp_action_id('edit_template_object_format'), 'Properties', 'properties.gif', NULL, 10, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format'), dbo.qp_action_id('remove_template_object_format'), 'Remove', 'delete.gif', NULL, 20, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format'), dbo.qp_action_id('refresh_template_object_formats'), 'Refresh', 'refresh.gif', NULL, 30, 1)
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.13', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.13 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.4.14
-- Templates
-- **************************************

delete from CONTEXT_MENU
where CODE = 'template'

update CONTEXT_MENU
set CODE = 'template'
where CODE = 'page_template'

delete from ACTION_TOOLBAR_BUTTON where PARENT_ACTION_ID = dbo.qp_action_id('list_template_object')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object'), dbo.qp_action_id('edit_template_object'), 'Properties', 'properties.gif', NULL, 10, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object'), dbo.qp_action_id('remove_template_object'), 'Remove', 'delete.gif', NULL, 20, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object'), dbo.qp_action_id('refresh_template_objects'), 'Refresh', 'refresh.gif', NULL, 30, 1)
go

--

delete from ACTION_TOOLBAR_BUTTON where PARENT_ACTION_ID = dbo.qp_action_id('list_page_object')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object'), dbo.qp_action_id('edit_page_object'), 'Properties', 'properties.gif', NULL, 10, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object'), dbo.qp_action_id('remove_page_object'), 'Remove', 'delete.gif', NULL, 20, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object'), dbo.qp_action_id('refresh_page_objects'), 'Refresh', 'refresh.gif', NULL, 30, 1)
go

--

delete from ACTION_TOOLBAR_BUTTON where PARENT_ACTION_ID = dbo.qp_action_id('list_page')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page'), dbo.qp_action_id('edit_page'), 'Properties', 'properties.gif', NULL, 10, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page'), dbo.qp_action_id('remove_page'), 'Remove', 'delete.gif', NULL, 20, 1)
go


insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page'), dbo.qp_action_id('refresh_pages'), 'Refresh', 'refresh.gif', NULL, 30, 1)
go


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.14', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.14 completed'
GO


-- **************************************
-- Alexei Aksenov
-- version 7.9.4.15
-- Add icon for add new child article and translation for new child article
-- **************************************

UPDATE [dbo].[CONTEXT_MENU_ITEM]
   SET [ICON] = 'add.gif'
 WHERE NAME = 'Add New Child Article'

exec qp_update_translations 'New child article', 'Новая дочерняя статья';

exec qp_update_translations 'Articles waiting your approval', 'Статьи, ожидающие Вашего подтверждения';

GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.4.15', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.4.15 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.5.0
-- Release
-- **************************************

update entity_type set disabled = 1 where code = 'template'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.0', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.0 completed'
GO

-- **************************************
-- Max Tertyshnyy
-- version 7.9.5.1
-- Add DISABLE_CHANGING_ACTIONS attribute to Content
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'DISABLE_CHANGING_ACTIONS' and TABLE_NAME = 'CONTENT')
ALTER TABLE CONTENT
  ADD DISABLE_CHANGING_ACTIONS BIT NOT NULL CONSTRAINT DF_CONTENT_DISABLE_CHANGING_ACTIONS DEFAULT (0)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.1', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.1 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.5.2
-- Template Tables FKS
-- **************************************

update [PAGE_TEMPLATE] set LAST_MODIFIED_BY = 1 where LAST_MODIFIED_BY not in (select USER_ID from USERS)
GO

ALTER TABLE [dbo].[PAGE_TEMPLATE]  WITH CHECK ADD CONSTRAINT [FK_PAGE_TEMPLATE_LAST_MODIFIED_BY]  FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO

update [PAGE] set LAST_MODIFIED_BY = 1 where LAST_MODIFIED_BY not in (select USER_ID from USERS)
GO

ALTER TABLE [dbo].[PAGE]  WITH CHECK ADD CONSTRAINT [FK_PAGE_LAST_MODIFIED_BY]  FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO

update [OBJECT] set LAST_MODIFIED_BY = 1 where LAST_MODIFIED_BY not in (select USER_ID from USERS)
GO

ALTER TABLE [dbo].[OBJECT]  WITH CHECK ADD CONSTRAINT [FK_OBJECT_LAST_MODIFIED_BY]  FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO

update [OBJECT_FORMAT] set LAST_MODIFIED_BY = 1 where LAST_MODIFIED_BY not in (select USER_ID from USERS)
GO

ALTER TABLE [dbo].[OBJECT_FORMAT]  WITH CHECK ADD CONSTRAINT [FK_OBJECT_FORMAT_LAST_MODIFIED_BY]  FOREIGN KEY([LAST_MODIFIED_BY])
REFERENCES [dbo].[USERS] ([USER_ID])
GO

UPDATE [dbo].[ENTITY_TYPE] SET [DISABLED] = 0 WHERE CODE = 'template'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.2', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.2 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.5.3
-- Fix URL
-- **************************************

update backend_action set controller_action_url = '~/PageTemplate/NewPageTemplate/' where CODE = 'new_template'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.3', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.3 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.5.4
-- Fix SpellChecker Order
-- **************************************

update ve_command set alias = 'Yandex Spell Checking', row_order = 0, TOOLBAR_IN_ROW_ORDER = 1, GROUP_IN_TOOLBAR_ORDER = 1, COMMAND_IN_GROUP_ORDER = 2 where NAME = 'SpellCheck'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.4', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.4 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.5.5
-- Templates
-- **************************************

DELETE FROM [CONTEXT_MENU]
      WHERE CODE = 'templates'
GO

UPDATE [CONTEXT_MENU]
  SET CODE = 'templates'
Where CODE = 'page_templates'
GO

UPDATE [CONTEXT_MENU_ITEM]
  SET NAME = 'New Template'
WHERE ACTION_ID = dbo.qp_action_id('new_template')

go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, CONFIRM_PHRASE)
values('Multiple Remove Page', 'multiple_remove_page', dbo.qp_action_type_id('multiple_remove'),
 dbo.qp_entity_type_id('page'), '~/PageTemplate/MultipleRemovePage/', 0, 'Do you really want to remove the following pages: {0}?')

update ACTION_TOOLBAR_BUTTON
SET ACTION_ID = dbo.qp_action_id('multiple_remove_page')
where ACTION_ID = dbo.qp_action_id('remove_page') and PARENT_ACTION_ID = dbo.qp_action_id('list_page')

go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, CONFIRM_PHRASE)
values('Multiple Remove Page Object', 'multiple_remove_page_object', dbo.qp_action_type_id('multiple_remove'),
 dbo.qp_entity_type_id('page_object'), '~/PageTemplate/MultipleRemovePageObject/', 0, 'Do you really want to remove the following objects: {0}?')

update ACTION_TOOLBAR_BUTTON
SET ACTION_ID = dbo.qp_action_id('multiple_remove_page_object')
where ACTION_ID = dbo.qp_action_id('remove_page_object') and PARENT_ACTION_ID = dbo.qp_action_id('list_page_object')

go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, CONFIRM_PHRASE)
values('Multiple Remove Template Object', 'multiple_remove_template_object', dbo.qp_action_type_id('multiple_remove'),
 dbo.qp_entity_type_id('page_object'), '~/PageTemplate/MultipleRemoveTemplateObject/', 0, 'Do you really want to remove the following objects: {0}?')

update ACTION_TOOLBAR_BUTTON
SET ACTION_ID = dbo.qp_action_id('multiple_remove_template_object')
where ACTION_ID = dbo.qp_action_id('remove_template_object') and PARENT_ACTION_ID = dbo.qp_action_id('list_template_object')

go

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ORDER] = 10
   WHERE [NAME] = 'Save'
   and (PARENT_ACTION_ID = dbo.qp_action_id('edit_template') or PARENT_ACTION_ID = dbo.qp_action_id('edit_page') or
    PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object') or PARENT_ACTION_ID = dbo.qp_action_id('edit_page_obect')
    or PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object_format') or PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object_format'))


UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ORDER] = 20
   WHERE [NAME] = 'Remove'
   and (PARENT_ACTION_ID = dbo.qp_action_id('edit_template') or PARENT_ACTION_ID = dbo.qp_action_id('edit_page') or
    PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object') or PARENT_ACTION_ID = dbo.qp_action_id('edit_page_obect')
    or PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object_format') or PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object_format'))

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ORDER] = 30
   WHERE [NAME] = 'Refresh'
   and (PARENT_ACTION_ID = dbo.qp_action_id('edit_template') or PARENT_ACTION_ID = dbo.qp_action_id('edit_page') or
    PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object') or PARENT_ACTION_ID = dbo.qp_action_id('edit_page_obect')
    or PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object_format') or PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object_format'))

go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.5', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.5 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.5.6
-- Templates
-- **************************************

delete from BACKEND_ACTION where code = 'select_content'

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Select Content For Object Container', 'select_content_for_object_container', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('content'), '~/Content/SelectForObjectContainer/', 1, dbo.qp_view_id('list'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Select Content For Object Form', 'select_content_for_object_form', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('content'), '~/Content/SelectForObjectForm/', 1, dbo.qp_view_id('list'), 1)





INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.6', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.6 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.5.7
-- Status History
-- **************************************

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('article'), N'Status History List', 'Status History', N'list_status_history', N'~/Article/StatusHistoryList/', 1)

INSERT INTO [dbo].[CONTEXT_MENU_ITEM] ([CONTEXT_MENU_ID], [ACTION_ID], [Name], [ORDER], [BOTTOM_SEPARATOR])
VALUES (dbo.qp_context_menu_id('article'), dbo.qp_action_id('list_status_history'), N'Status History', 55, 0)

exec qp_update_translations 'Status History', 'История изменений';

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_INTERFACE])
VALUES (dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('article'), N'Refresh Status History', 'Refresh Status History', N'refresh_status_history', null, 1)

INSERT INTO [dbo].[ACTION_TOOLBAR_BUTTON] ([PARENT_ACTION_ID], [ACTION_ID], [NAME], [ORDER], [ICON], [IS_COMMAND])
VALUES(dbo.qp_action_id('list_status_history'), dbo.qp_action_id('refresh_status_history'), N'Refresh', 10, N'refresh.gif', 1)

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.7', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.7 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.5.8
-- Templates
-- **************************************

UPDATE [BACKEND_ACTION]
   SET [NAME] = 'Select Page For Object Form'
      ,[CODE] = 'select_page_for_object_form'
 WHERE code = 'select_page'
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.8', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.8 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.5.9
-- Templates
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID, ALLOW_SEARCH)
values('Select Statuses For Workflow', 'multiple_select_statuses_for_workflow', dbo.qp_action_type_id('select'), dbo.qp_entity_type_id('status_type'), '~/StatusType/MultipleSelectForWorkflow/',
 1, dbo.qp_view_id('list'), 0)
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.5.9', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.5.9 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.6.0
-- Articles Export
-- **************************************

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_MULTISTEP])
VALUES (dbo.qp_action_type_id('export'), dbo.qp_entity_type_id('content'), N'Export Articles', 'Export Articles', N'export_articles', N'~/ExportArticles/', 1)

INSERT INTO [dbo].[CONTEXT_MENU_ITEM] ([CONTEXT_MENU_ID], [ACTION_ID], [Name], [ORDER], [BOTTOM_SEPARATOR])
VALUES (dbo.qp_context_menu_id('content'), dbo.qp_action_id('export_articles'), N'Export Articles', 65, 0)

exec qp_update_translations 'Export Articles', 'Экспорт статей';

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.0', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.0 completed'
GO




-- **************************************
-- Zakirov Kirill
-- version 7.9.6.1
-- Assembling Templates
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template', 'assemble_template', dbo.qp_action_type_id('assemble'), dbo.qp_entity_type_id('template'), '~/PageTemplate/AssembleTemplate/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page', 'assemble_page', dbo.qp_action_type_id('assemble'), dbo.qp_entity_type_id('page'), '~/PageTemplate/AssemblePage/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Multiple Assemble Page', 'multiple_assemble_page', dbo.qp_action_type_id('multiple_assemble'), dbo.qp_entity_type_id('page'), '~/PageTemplate/MultipleAssemblePage/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page Object', 'assemble_page_object', dbo.qp_action_type_id('assemble'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/AssemblePageObject/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Multiple Assemble Page Object', 'multiple_assemble_page_object', dbo.qp_action_type_id('multiple_assemble'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/MultipleAssemblePageObject/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template Object', 'assemble_template_object', dbo.qp_action_type_id('assemble'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/AssembleTemplateObject/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Multiple Assemble Template Object', 'multiple_assemble_template_object', dbo.qp_action_type_id('multiple_assemble'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/MultipleAssembleTemplateObject/', 0, 1)

--
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template'), dbo.qp_action_id('assemble_template'), 'Assemble', 'assemble.gif', NULL, 40, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('template'), dbo.qp_action_id('assemble_template'), 'Assemble', 40, 'assemble.gif', 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template'), dbo.qp_action_id('assemble_template'), 'Assemble', 'assemble.gif', NULL, 40, 0)
go

--
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page'), dbo.qp_action_id('multiple_assemble_page'), 'Assemble', 'assemble.gif', NULL, 40, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page'), dbo.qp_action_id('assemble_page'), 'Assemble', 40, 'assemble.gif', 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page'), dbo.qp_action_id('assemble_page'), 'Assemble', 'assemble.gif', NULL, 40, 0)
go
--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object'), dbo.qp_action_id('multiple_assemble_page_object'), 'Assemble', 'assemble.gif', NULL, 30, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_object'), dbo.qp_action_id('assemble_page_object'), 'Assemble', 40, 'assemble.gif', 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object'), dbo.qp_action_id('assemble_page_object'), 'Assemble', 'assemble.gif', NULL, 40, 0)
go
--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object'), dbo.qp_action_id('multiple_assemble_template_object'), 'Assemble', 'assemble.gif', NULL, 40, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('template_object'), dbo.qp_action_id('assemble_template_object'), 'Assemble', 40, 'assemble.gif', 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object'), dbo.qp_action_id('assemble_template_object'), 'Assemble', 'assemble.gif', NULL, 40, 0)
go
--
insert into ACTION_TYPE (NAME, CODE, REQUIRED_PERMISSION_LEVEL_ID, ITEMS_AFFECTED)
VALUES('Assemble Parent', 'assemble_parent', 1, 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template From Template Object', 'assemble_template_from_template_object', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/AssembleTemplateFromTemplateObject/', 0, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object'), dbo.qp_action_id('assemble_template_from_template_object'), 'Assemble Template', 'assemble.gif', NULL, 50, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object'), dbo.qp_action_id('assemble_template_from_template_object'), 'Assemble Template', 'assemble.gif', NULL, 50, 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template From Template Object Format', 'assemble_template_from_template_object_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('template_object_format'), '~/PageTemplate/AssembleTemplateFromTemplateObjectFormat/', 0, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object_format'), dbo.qp_action_id('assemble_template_from_template_object_format'), 'Assemble Template', 'assemble.gif', NULL, 50, 0)
--
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page From Page Object Format', 'assemble_page_from_page_object_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('page_object_format'), '~/PageTemplate/AssemblePageFromPageObjectFormat/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page From Page Object', 'assemble_page_from_page_object', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/AssemblePageFromPageObject/', 0, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object'), dbo.qp_action_id('assemble_page_from_page_object'), 'Assemble Page', 'assemble.gif', NULL, 50, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object'), dbo.qp_action_id('assemble_page_from_page_object'), 'Assemble Page', 'assemble.gif', NULL, 50, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object_format'), dbo.qp_action_id('assemble_page_from_page_object_format'), 'Assemble Page', 'assemble.gif', NULL, 50, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object_format'), dbo.qp_action_id('assemble_page_from_page_object_format'), 'Assemble Page', 'assemble.gif', NULL, 50, 0)

--
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page Object From Page Object Format', 'assemble_page_object_from_page_object_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('page_object_format'), '~/PageTemplate/AssemblePageObjectFromPageObjectFormat/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template Object From Template Object Format', 'assemble_template_object_from_template_ob_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('template_object_format'), '~/PageTemplate/AssembleTemplateObjectFromTemplateObjectFormat/', 0, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object_format'), dbo.qp_action_id('assemble_page_object_from_page_object_format'), 'Assemble Object', 'assemble.gif', NULL, 60, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object_format'), dbo.qp_action_id('assemble_page_object_from_page_object_format'), 'Assemble Object', 'assemble.gif', NULL, 60, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object_format'), dbo.qp_action_id('assemble_template_object_from_template_ob_format'), 'Assemble Object', 'assemble.gif', NULL, 60, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object_format'), dbo.qp_action_id('assemble_template_object_from_template_ob_format'), 'Assemble Object', 'assemble.gif', NULL, 60, 0)


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.1', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.1 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.6.2
-- VE Styles
-- **************************************
update entity_type set order_field = '[ORDER]' where CODE = 'visual_editor_plugin'
update entity_type set order_field = '[ORDER]' where CODE = 'visual_editor_style'
if (select min([order]) from ve_style where is_system = 1) < 10
  update ve_style set [order] = [order] * 10 where IS_SYSTEM = 1
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.2', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.2 completed'
GO

-- **************************************
-- Zakirov Kirill
-- version 7.9.6.3
-- Templates
-- **************************************

exec qp_update_translations 'Select Content For Object Form', 'Выберите контент для объекта '
exec qp_update_translations 'Select Page For Object Form', 'Выберите страницу для объекта '
exec qp_update_translations 'Page', 'Страница '
exec qp_update_translations 'Assemble Object', 'Собрать объект'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.3', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.3 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.6.4
-- Templates
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Capture Lock Template', 'capture_lock_template', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('template'), '~/PageTemplate/CaptureLockTemplate/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Capture Lock Page', 'capture_lock_page', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('page'), '~/PageTemplate/CaptureLockPage/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Capture Lock Page Object', 'capture_lock_page_object', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/CaptureLockPageObject/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Capture Lock Template Object', 'capture_lock_template_object', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/CaptureLockTemplateObject/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Capture Lock Template Object Format', 'capture_lock_template_object_format', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('template_object_format'), '~/PageTemplate/CaptureLockTemplateObjectFormat/', 0)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Capture Lock Page Object Format', 'capture_lock_page_object_format', dbo.qp_action_type_id('change_lock'), dbo.qp_entity_type_id('page_object_format'), '~/PageTemplate/CaptureLockPageObjectFormat/', 0)


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.4', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.4 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.6.5
-- Proper Assembling Templates
-- **************************************
update [BACKEND_ACTION]
set [IS_MULTISTEP] = 1, CONTROLLER_ACTION_URL  = '~/AssembleTemplate/'
where code = 'assemble_template'
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET
      [ACTION_ID] = dbo.qp_action_id('assemble_template')
      where [ACTION_ID] = dbo.qp_action_id('assemble_template_from_template_object')
      or [ACTION_ID] = dbo.qp_action_id('assemble_template_from_template_object_format')
      or [ACTION_ID] = dbo.qp_action_id('assemble_template_from_template_object_format')
      or [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object_format')
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET
      [ACTION_ID] = dbo.qp_action_id('assemble_page')
      where [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object_format')
      or [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object')
      or [ACTION_ID] = dbo.qp_action_id('assemble_template_from_template_object_format')
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET
      [ACTION_ID] = dbo.qp_action_id('assemble_page')
      where [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object_format')
      or [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object')

GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET
      [ACTION_ID] = dbo.qp_action_id('assemble_page_object')
      where [ACTION_ID] = dbo.qp_action_id('assemble_page_object_from_page_object_format')
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET
      [ACTION_ID] = dbo.qp_action_id('assemble_page_object')
      where [ACTION_ID] = dbo.qp_action_id('assemble_page_object_from_page_object_format')
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET
      [ACTION_ID] = dbo.qp_action_id('assemble_template_object')
      where [ACTION_ID] = dbo.qp_action_id('assemble_template_object_from_template_ob_format')
GO

delete from [BACKEND_ACTION]
where code = 'assemble_template_from_template_object'
or code = 'assemble_template_from_template_object_format'
or code = 'assemble_page_from_page_object_format'
or code = 'assemble_page_from_page_object'
or code = 'assemble_page_from_page_object_format'
or code = 'assemble_page_object_from_page_object_format'
or code = 'assemble_template_object_from_template_ob_format'

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.5', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.5 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.6.6
-- Proper Assembling Templates
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template From Template Object', 'assemble_template_from_template_object', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('template'), '~/PageTemplate/AssembleTemplateFromTemplateObject/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template From Template Object Format', 'assemble_template_from_template_object_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('template'), '~/PageTemplate/AssembleTemplateFromTemplateObjectFormat/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Template From Template Object List', 'assemble_template_from_template_object_list', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('template'), '~/PageTemplate/AssembleTemplateFromTemplateObjectList/', 0, 1)


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page From Page Object', 'assemble_page_from_page_object', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('page'), '~/PageTemplate/AssemblePageFromPageObject/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page From Page Object Format', 'assemble_page_from_page_object_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('page'), '~/PageTemplate/AssemblePageFromPageObjectFormat/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Page From Page Object List', 'assemble_page_from_page_object_list', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('page'), '~/PageTemplate/AssemblePageFromPageObjectList/', 0, 1)


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Object From Page Object Format', 'assemble_object_from_page_object_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/AssembleObjectFromPageObjectFormat/', 0, 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Assemble Object From Template Object Format', 'assemble_object_from_template_object_format', dbo.qp_action_type_id('assemble_parent'), dbo.qp_entity_type_id('template_object'), '~/PageTemplate/AssembleObjectFromTemplateObjectFormat/', 0, 1)


UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_template_from_template_object')
  where PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object')
  and NAME = 'Assemble Template'
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_template_from_template_object_format')
where PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object_format')
  and NAME = 'Assemble Template'
GO


UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_template_from_template_object_list')
  where PARENT_ACTION_ID = dbo.qp_action_id('list_template_object')
  and NAME = 'Assemble Template'

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object')
  where PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object')
  and NAME = 'Assemble Page'
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object_format')
  where PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object_format')
  and NAME = 'Assemble Page'
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_page_from_page_object_list')
   where PARENT_ACTION_ID = dbo.qp_action_id('list_page_object')
  and NAME = 'Assemble Page'
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_object_from_page_object_format')
  where PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object_format')
  and NAME = 'Assemble Object'
GO

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ACTION_ID] = dbo.qp_action_id('assemble_object_from_template_object_format')
  where PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object_format')
  and NAME = 'Assemble Object'
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.6', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.6 completed'
GO



-- **************************************
-- Zakirov Kirill
-- version 7.9.6.7
-- Proper Assembling Templates
-- **************************************
delete from [ACTION_TOOLBAR_BUTTON]
where PARENT_ACTION_ID = dbo.qp_action_id('list_template_object_format')
and NAME = 'Assemble Object'
go

delete from [ACTION_TOOLBAR_BUTTON]
where PARENT_ACTION_ID = dbo.qp_action_id('list_page_object_format')
and NAME = 'Assemble Object'
go

delete from [ACTION_TOOLBAR_BUTTON]
where PARENT_ACTION_ID = dbo.qp_action_id('list_page_object_format')
and NAME = 'Assemble Page'
go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.7', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.7 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.6.8
-- Proper Assembling Templates
-- **************************************

UPDATE [BACKEND_ACTION]
   SET [CONTROLLER_ACTION_URL] = '~/AssembleTemplateBase/'
 WHERE CODE = 'assemble_template'
GO

UPDATE [BACKEND_ACTION]
   SET [CONTROLLER_ACTION_URL] = '~/AssembleTemplateFromFormat/'
 WHERE CODE = 'assemble_template_from_template_object_format'
GO

UPDATE [BACKEND_ACTION]
   SET [CONTROLLER_ACTION_URL] = '~/AssembleTemplateFromObject/'
 WHERE CODE = 'assemble_template_from_template_object'
GO

UPDATE [BACKEND_ACTION]
   SET [CONTROLLER_ACTION_URL] = '~/AssembleTemplateFromObjectList/'
 WHERE CODE = 'assemble_template_from_template_object_list'
GO

UPDATE [BACKEND_ACTION]
   SET
      [IS_MULTISTEP] = 1
 where CODE like 'assemble_template_from%'
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.8', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.8 completed'
GO


-- **************************************
-- Zakirov Kirill
-- version 7.9.6.9
-- Promoting page objects
-- **************************************

INSERT INTO [ACTION_TYPE]
           ([NAME]
           ,[CODE]
           ,[REQUIRED_PERMISSION_LEVEL_ID]
           ,[ITEMS_AFFECTED])
     VALUES
           ('Promote'
           ,'promote'
           ,2
           ,1)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION)
values('Promote Page Object', 'promote_page_object', dbo.qp_action_type_id('promote'), dbo.qp_entity_type_id('page_object'), '~/PageTemplate/PromotePageObject/', 0, 0)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_object'), dbo.qp_action_id('promote_page_object'), 'Promote Page Object', 40, 'promote.gif', 1)


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.9', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.9 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.6.10
-- DB-level settings table
-- **************************************

if not exists (select * from sys.tables where name = 'db')

  CREATE TABLE [dbo].[DB](
    [ID] [numeric](18, 0) NOT NULL,
    [RECORD_ACTIONS] [bit] NOT NULL CONSTRAINT [DF_DB_RECORD_ACTIONS]  DEFAULT (0),
    [SINGLE_USER_ID] [numeric](18, 0) NULL,
    CONSTRAINT [PK_DB] PRIMARY KEY CLUSTERED ( [ID] ASC ),
    CONSTRAINT [FK_DB_USER] FOREIGN KEY(SINGLE_USER_ID) REFERENCES [dbo].[USERS] ([USER_ID])
  )
GO

if not exists(select * from db where ID = 1)
insert into db(ID) values(1)
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.10', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.10 completed'
GO

-- **************************************
-- Zakirov Kirill
-- version 7.9.6.11
-- Templates: search
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, DEFAULT_VIEW_TYPE_ID)
values('Search in code', 'search_in_code', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('site'), '~/PageTemplate/Formats/', 1, dbo.qp_view_id('search_in_formats'))

INSERT INTO [VIEW_TYPE]
           ([NAME]
           ,[CODE]
           ,[ICON])
     VALUES
           ('Search in formats'
           ,'search_in_formats'
           ,'actions_log.gif')
GO

INSERT INTO [VIEW_TYPE]
           ([NAME]
           ,[CODE]
           ,[ICON])
     VALUES
           ('Search in templates'
           ,'search_in_templates'
           ,'actions_log.gif')
GO

INSERT INTO [VIEW_TYPE]
           ([NAME]
           ,[CODE]
           ,[ICON])
     VALUES
           ('Search in objects'
           ,'search_in_objects'
           ,'actions_log.gif')
GO


insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('search_in_code'), dbo.qp_view_id('search_in_formats'), '~/PageTemplate/Formats/', 10)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('search_in_code'), dbo.qp_view_id('search_in_templates'), '~/PageTemplate/Templates/', 20)

insert into ACTION_VIEW(ACTION_ID, TYPE_ID, CONTROLLER_ACTION_URL, [ORDER])
values(dbo.qp_action_id('search_in_code'), dbo.qp_view_id('search_in_objects'), '~/PageTemplate/Parameters/', 30)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Refresh Search in Code', 'refresh_search_in_code', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('site'))

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('site'), dbo.qp_action_id('search_in_code'), 'Search in Code', 25, 'search.gif', 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('search_in_code'), dbo.qp_action_id('refresh_search_in_code'), 'Refresh', 'refresh.gif', NULL, 1, 0)

UPDATE [CONTEXT_MENU_ITEM]
   SET [BOTTOM_SEPARATOR] = 0
 WHERE [Action_Id] = dbo.qp_action_id('search_in_articles')
GO

UPDATE BACKEND_ACTION
set DEFAULT_VIEW_TYPE_ID = dbo.qp_view_id('search_in_formats')
where CODE = 'search_in_code'
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Search in templates', 'search_in_templates', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('site'), '~/PageTemplate/Templates/', 1)
GO

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Search in objects', 'search_in_objects', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('site'), '~/PageTemplate/Parameters/', 1)
GO



INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.11', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.11 completed'
GO

-- **************************************
-- Aksenov Alexei
-- version 7.9.6.12
-- Articles Import
-- **************************************

ALTER TABLE [dbo].[BACKEND_ACTION]
ADD HAS_SETTINGS bit
GO

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [IS_MULTISTEP], [HAS_SETTINGS])
VALUES (dbo.qp_action_type_id('import'), dbo.qp_entity_type_id('content'), N'Import Articles', 'Import Articles', N'import_articles', N'~/ImportArticles/', 1, 1)

INSERT INTO [dbo].[CONTEXT_MENU_ITEM] ([CONTEXT_MENU_ID], [ACTION_ID], [Name], [ORDER], [BOTTOM_SEPARATOR])
VALUES (dbo.qp_context_menu_id('content'), dbo.qp_action_id('import_articles'), N'Import Articles', 66, 0)

exec qp_update_translations 'Import Articles', 'Импорт статей';

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.12', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.12 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.6.13
-- Disable Create Content Trigger
-- **************************************

ALTER TRIGGER [dbo].[ti_create_fields] ON [dbo].[CONTENT] FOR INSERT AS BEGIN
    if object_id('tempdb..#disable_ti_create_fields') is null
  begin
    insert into content_attribute (
      content_id, attribute_name, [description],
      attribute_size, required, attribute_type_id, index_flag, permanent_flag, primary_flag, last_modified_by,
      view_in_list
    )
    select i.content_id , 'Title', '&nbsp;', 255, 1, 1, 1, 0, 1, 1, 1 from inserted AS i WHERE i.virtual_type = 0
  end
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.13', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.13 completed'
GO


-- **************************************
-- Aksenov Alexei
-- version 7.9.6.14
-- Multiple article save for import
-- **************************************

--deleted

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.14', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.14 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.6.15
-- Format Versions
-- **************************************


insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION, SHORT_NAME)
values('Template Object Format History', 'list_template_object_format_version', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('template_object_format_version'), '~/PageTemplate/IndexTemplateObjectFormatVersions/', 1, 0, 'Format History')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, HAS_PRE_ACTION, SHORT_NAME)
values('Page Object Format History', 'list_page_object_format_version', dbo.qp_action_type_id('list'), dbo.qp_entity_type_id('page_object_format_version'), '~/PageTemplate/IndexPageObjectFormatVersions/', 1, 0, 'Format History')

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('template_object_format'), dbo.qp_action_id('list_template_object_format_version'), 'Format History', 30, 'properties.gif', 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, [ORDER], ICON, BOTTOM_SEPARATOR)
values(dbo.qp_context_menu_id('page_object_format'), dbo.qp_action_id('list_page_object_format_version'), 'Format History', 30, 'properties.gif', 1)
--
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID,  IS_INTERFACE)
values('Refresh Page Object Format History', 'refresh_page_object_format_versions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page_object_format_version'), 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID,  IS_INTERFACE)
values('Refresh Template Object Format History', 'refresh_template_object_format_versions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template_object_format_version'), 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('refresh_template_object_format_versions'), 'Refresh', 'refresh.gif', NULL, 1, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('refresh_page_object_format_versions'), 'Refresh', 'refresh.gif', NULL, 1, 0)


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.15', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.15 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.6.16
-- Format Version properties
-- **************************************

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Template Object Format Version Properties', 'Preview And Restore', 'edit_template_object_format_version', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('template_object_format_version'), '~/PageTemplate/TemplateObjectFormatVersionProperties/', 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Page Object Format Version Properties', 'Preview And Restore', 'edit_page_object_format_version', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('page_object_format_version'), '~/PageTemplate/PageObjectFormatVersionProperties/', 1)

--
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('edit_page_object_format_version'), 'Preview And Restore', 'properties.gif', NULL, 10, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('edit_template_object_format_version'), 'Preview And Restore', 'properties.gif', NULL, 10, 1)
go

--
insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, SHORT_NAME)
values('Restore Page Object Format Version', 'restore_page_object_format_version', dbo.qp_action_type_id('restore'), dbo.qp_entity_type_id('page_object_format_version'), '~/PageTemplate/RestorePageObjectFormatVersion/', 'Restore')

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, SHORT_NAME)
values('Restore Template Object Format Version', 'restore_template_object_format_version', dbo.qp_action_type_id('restore'), dbo.qp_entity_type_id('template_object_format_version'), '~/PageTemplate/RestoreTemplateObjectFormatVersion/', 'Restore')

--

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_template_object_format_version'), dbo.qp_action_id('restore_template_object_format_version'), 'Restore', 'restore.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('edit_page_object_format_version'), dbo.qp_action_id('restore_page_object_format_version'), 'Restore', 'restore.gif', NULL, 1, 1)



INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.16', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.16 completed'
GO

-- **************************************
-- Aksenov Alexei
-- version 7.9.6.17
-- Passing article values through xml parameter
-- **************************************

CREATE PROCEDURE qp_insert_articles_id
  @articlesCount int,
  @contentId int,
  @statusTypeId int,
  @visibleId int,
  @lastModifiedBy int
AS
BEGIN

  SET NOCOUNT ON;
    DECLARE @NewArticles TABLE ([ID] INT)
  WHILE @articlesCount != 0
  BEGIN
    INSERT into [dbo].[CONTENT_ITEM]
                    ([VISIBLE]
                     ,[STATUS_TYPE_ID]
                     ,[CONTENT_ID]
                     ,[LAST_MODIFIED_BY])
                     OUTPUT inserted.[content_item_id] INTO @NewArticles
             VALUES (@visibleId, @statusTypeId, @contentId, @lastModifiedBy)

             SET @articlesCount = @articlesCount - 1

  END
  SELECT * FROM @NewArticles
END
GO

CREATE PROCEDURE [dbo].[qp_insertArticleValues]
  @xmlParameter xml
AS
BEGIN
  DECLARE @idoc int
  EXEC sp_xml_preparedocument @idoc OUTPUT, @xmlParameter;

  DECLARE @NewArticles TABLE ([ROW_NUMBER] int, CONTENT_ITEM_ID int, ATTRIBUTE_ID int, DATA nvarchar(3500), BLOB_DATA nvarchar(max))

  INSERT INTO @NewArticles
    SELECT * FROM OPENXML(@idoc, '/PARAMETERS/FIELDVALUE')
    WITH(
        [ROW_NUMBER] int './ROW_NUMBER'
        ,CONTENT_ITEM_ID int './CONTENT_ITEM_ID'
        ,ATTRIBUTE_ID int './ATTRIBUTE_ID'
        ,DATA nvarchar(3500) './DATA'
        ,BLOB_DATA nvarchar(max) './BLOB_DATA')

  DECLARE @RowsCount INT
  SET @RowsCount = (SELECT COUNT(*) FROM @NewArticles)

  DECLARE @Iter INT
  SET @Iter = 1

  WHILE @Iter <= @RowsCount
    BEGIN

       DECLARE @val TABLE (CONTENT_ITEM_ID int, ATTRIBUTE_ID int, DATA nvarchar(3500), BLOB_DATA nvarchar(max))
       INSERT INTO @val
         SELECT CONTENT_ITEM_ID
            ,ATTRIBUTE_ID
            ,DATA
            ,BLOB_DATA
         FROM @NewArticles where [ROW_NUMBER] = @Iter

       UPDATE [dbo].[CONTENT_DATA]
       SET [DATA] = (SELECT DATA FROM @val)
        ,[BLOB_DATA] = (SELECT BLOB_DATA FROM @val)
     WHERE attribute_Id = (SELECT ATTRIBUTE_ID FROM @val) AND CONTENT_ITEM_ID = (SELECT CONTENT_ITEM_ID FROM @val)
     SET @Iter = @Iter + 1
     SELECT * FROM @val

     DELETE FROM @val
    END
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.17', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.17 completed'
GO

-- **************************************
-- Aksenov Alexei
-- version 7.9.6.18
-- Passing article values through xml parameter
-- **************************************

ALTER PROCEDURE [dbo].[qp_insertArticleValues]
  @xmlParameter xml
AS
BEGIN
  DECLARE @idoc int
  EXEC sp_xml_preparedocument @idoc OUTPUT, @xmlParameter;

  DECLARE @NewArticles TABLE (CONTENT_ITEM_ID int, ATTRIBUTE_ID int, DATA nvarchar(3500), BLOB_DATA nvarchar(max))

  INSERT INTO @NewArticles
    SELECT * FROM OPENXML(@idoc, '/PARAMETERS/FIELDVALUE')
    WITH(
        CONTENT_ITEM_ID int './CONTENT_ITEM_ID'
        ,ATTRIBUTE_ID int './ATTRIBUTE_ID'
        ,DATA nvarchar(3500) './DATA'
        ,BLOB_DATA nvarchar(max) './BLOB_DATA')

    BEGIN
       UPDATE
      [dbo].[CONTENT_DATA]
    SET
      [dbo].[CONTENT_DATA].[DATA] = [@NewArticles].[DATA],
      [dbo].[CONTENT_DATA].[BLOB_DATA] = [@NewArticles].[BLOB_DATA]
    FROM
      [dbo].[CONTENT_DATA]
    INNER JOIN
      @NewArticles
    ON
      [dbo].[CONTENT_DATA].CONTENT_ITEM_ID = [@NewArticles].CONTENT_ITEM_ID AND
      [dbo].[CONTENT_DATA].ATTRIBUTE_ID = [@NewArticles].ATTRIBUTE_ID

    END
END
GO

IF (OBJECT_ID('qp_insert_articles_id') IS NOT NULL)
  DROP PROCEDURE qp_insert_articles_id
GO


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.18', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.18 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.6.19
-- Simple Remove Content
-- **************************************

delete from BACKEND_ACTION where CODE = 'simple_remove_content'
GO

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [CONFIRM_PHRASE])
VALUES (dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('content'), N'Simple Remove Content', 'Remove Content', N'simple_remove_content', N'~/Content/SimpleRemove/', 'Do you really want to remove the following content: {0}?')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.19', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.19 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.6.20
-- Settings for export
-- **************************************

UPDATE [dbo].[BACKEND_ACTION]
   SET [HAS_SETTINGS] = 1
 WHERE [NAME] = N'Export Articles' AND [TYPE_ID] = dbo.qp_action_type_id('export')
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.20', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.20 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.6.21
-- Format Version properties
-- **************************************
UPDATE [ENTITY_TYPE]
   SET [DEFAULT_ACTION_ID] = dbo.qp_action_id('edit_page_object_format_version')
 WHERE CODE = 'page_object_format_version'
GO

UPDATE [ENTITY_TYPE]
   SET [DEFAULT_ACTION_ID] = dbo.qp_action_id('edit_template_object_format_version')
 WHERE CODE = 'template_object_format_version'
GO

--
insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Compare With Current Template Object Format Version', 'Compare With Current', 'compare_with_cur_template_object_format_version', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('template_object_format_version'), '~/PageTemplate/CompareWithCurrentTemplateObjectFormatVersion/', 1)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Compare With Current Page Object Format Version', 'Compare With Current', 'compare_with_cur_page_object_format_version', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('page_object_format_version'), '~/PageTemplate/CompareWithCurrentPageObjectFormatVersion/', 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('compare_with_cur_page_object_format_version'), 'Compare With Current', 'track.gif', NULL, 30, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('compare_with_cur_template_object_format_version'), 'Compare With Current', 'track.gif', NULL, 30, 1)
go
--

insert into BACKEND_ACTION(NAME, CODE, [TYPE_ID], ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, SHORT_NAME)
values('Compare Template Object Format Versions', 'compare_template_object_format_versions', dbo.qp_action_type_id('compare'), dbo.qp_entity_type_id('template_object_format_version'), '~/PageTemplate/CompareTemplateObjectFormatVersions/', 1, 'Compare')

insert into BACKEND_ACTION(NAME, CODE, [TYPE_ID], ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, SHORT_NAME)
values('Compare Page Object Format Versions', 'compare_page_object_format_versions', dbo.qp_action_type_id('compare'), dbo.qp_entity_type_id('page_object_format_version'), '~/PageTemplate/ComparePageObjectFormatVersions/', 1, 'Compare')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('compare_page_object_format_versions'), 'Compare', 'compare.gif', NULL, 40, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('compare_template_object_format_versions'), 'Compare', 'compare.gif', NULL, 40, 1)
go


INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.21', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.21 completed'
GO



-- **************************************
-- Kirill Zakirov
-- version 7.9.6.22
-- Format Versions
-- **************************************


insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID,  IS_INTERFACE)
values('Refresh Compare Template Object Format Versions', 'Refresh', 'refresh_compare_template_object_format_versions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('template_object_format_version'), 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('compare_template_object_format_versions'), dbo.qp_action_id('refresh_compare_template_object_format_versions'), 'Refresh', 'refresh.gif', NULL, 1, 0)

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID,  IS_INTERFACE)
values('Refresh Compare Page Object Format Versions', 'Refresh', 'refresh_compare_page_object_format_versions', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('page_object_format_version'), 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('compare_page_object_format_versions'), dbo.qp_action_id('refresh_compare_page_object_format_versions'), 'Refresh', 'refresh.gif', NULL, 1, 0)




INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.22', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.22 completed'
GO



-- **************************************
-- Kirill Zakirov
-- version 7.9.6.23
-- Format Versions
-- **************************************

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, CONFIRM_PHRASE)
values('Multiple Remove Template Object Format Version', 'multiple_remove_template_object_format_version', dbo.qp_action_type_id('multiple_remove'),
 dbo.qp_entity_type_id('template_object_format_version'), '~/PageTemplate/MultipleRemoveTemplateObjectFormatVersion/', 0, 'Do you really want to remove the following versions: {0}?')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('multiple_remove_template_object_format_version'), 'Remove', 'delete.gif', NULL, 5, 0)

go

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE, CONFIRM_PHRASE)
values('Multiple Remove Page Object Format Version', 'multiple_remove_page_object_format_version', dbo.qp_action_type_id('multiple_remove'),
 dbo.qp_entity_type_id('page_object_format_version'), '~/PageTemplate/MultipleRemovePageObjectFormatVersion/', 0, 'Do you really want to remove the following versions: {0}?')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('multiple_remove_page_object_format_version'), 'Remove', 'delete.gif', NULL, 5, 0)

go

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.23', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.23 completed'
GO

-- **************************************
-- Aksenov Alexei
-- version 7.9.6.24
-- Styles for import and export + some features
-- **************************************

UPDATE [dbo].[BACKEND_ACTION]
   SET [IS_WINDOW] = 1
      ,[WINDOW_WIDTH] = 600
      ,[WINDOW_HEIGHT] = 400
 WHERE [CODE] = 'export_articles'
GO


UPDATE [dbo].[BACKEND_ACTION]
   SET [IS_WINDOW] = 1
      ,[WINDOW_WIDTH] = 600
      ,[WINDOW_HEIGHT] = 600
 WHERE [CODE] = 'import_articles'
GO

CREATE PROCEDURE [dbo].[qp_insert_m2m_field_Values]
  @xmlParameter xml
AS
BEGIN
  DECLARE @idoc int
  EXEC sp_xml_preparedocument @idoc OUTPUT, @xmlParameter;

INSERT INTO [dbo].[item_to_item] (link_id, l_item_id, r_item_id)
SELECT * FROM OPENXML(@idoc, '/items/item', 1)
    WITH(
        linkId int
        ,id int
        ,linkedId int)
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.24', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.24 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.6.25
-- Simple Remove Site
-- **************************************

delete from BACKEND_ACTION where CODE = 'simple_remove_site'
GO

INSERT INTO [dbo].[BACKEND_ACTION] ([TYPE_ID],[ENTITY_TYPE_ID],[NAME],[SHORT_NAME],[CODE],[CONTROLLER_ACTION_URL], [CONFIRM_PHRASE])
VALUES (dbo.qp_action_type_id('remove'), dbo.qp_entity_type_id('site'), N'Simple Remove Site', 'Remove Site', N'simple_remove_site', N'~/Site/SimpleRemove/', 'Do you really want to remove the following site: {0}?')
GO

if not exists (select * From information_schema.columns where table_name = 'db' and column_name = 'fp_settings')
begin
  alter table db add fp_settings nvarchar(max) NULL
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.25', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.25 completed'
GO

-- **************************************
-- Alexei Aksenov
-- version 7.9.6.26
-- Update articles modified and modifiedBy on import
-- **************************************

CREATE PROCEDURE [dbo].[qp_update_acrticle_modification_date]
  @xmlParameter xml
AS
BEGIN
  DECLARE @idoc int
  EXEC sp_xml_preparedocument @idoc OUTPUT, @xmlParameter;

  DECLARE @ModifiedArticles TABLE (CONTENT_ITEM_ID int, MODIFIED datetime, LAST_MODIFIED_BY int)

INSERT INTO @ModifiedArticles
    SELECT * FROM OPENXML(@idoc, '/items/item')
    WITH(
        CONTENT_ITEM_ID int '@id'
        ,MODIFIED datetime '@modified'
        ,LAST_MODIFIED_BY int '@modifiedBy')

    BEGIN
       UPDATE
      [dbo].[CONTENT_ITEM]
    SET
      [dbo].[CONTENT_ITEM].[MODIFIED] = [@ModifiedArticles].[MODIFIED]
      ,[dbo].[CONTENT_ITEM].[LAST_MODIFIED_BY] = [@ModifiedArticles].[LAST_MODIFIED_BY]
    FROM
      [dbo].[CONTENT_ITEM]
    INNER JOIN
      @ModifiedArticles
    ON
      [dbo].[CONTENT_ITEM].CONTENT_ITEM_ID = [@ModifiedArticles].[CONTENT_ITEM_ID]

    END
END
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.26', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.26 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.6.27
-- DB Settings
-- **************************************

insert into BACKEND_ACTION(NAME, SHORT_NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, CONTROLLER_ACTION_URL, IS_INTERFACE)
values('Database Settings', 'Settings', 'db_settings', dbo.qp_action_type_id('read'), dbo.qp_entity_type_id('db'), '~/Db/Settings/', 1)

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID, NEXT_SUCCESSFUL_ACTION_ID)
values('Update Database Settings', 'update_db_settings', dbo.qp_action_type_id('update'), dbo.qp_entity_type_id('db'), dbo.qp_action_id('db_settings'))

insert into BACKEND_ACTION(NAME, CODE, TYPE_ID, ENTITY_TYPE_ID)
values('Refresh Database Settings', 'refresh_db_settings', dbo.qp_action_type_id('refresh'), dbo.qp_entity_type_id('db'))

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('db_settings'), dbo.qp_action_id('update_db_settings'), 'Save', 'save.gif', NULL, 1, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('db_settings'), dbo.qp_action_id('refresh_db_settings'), 'Refresh', 'refresh.gif', NULL, 2, 1)

insert into CONTEXT_MENU_ITEM(CONTEXT_MENU_ID, ACTION_ID, NAME, ICON, [ORDER])
values(dbo.qp_context_menu_id('db'), dbo.qp_action_id('db_settings'), 'Settings', 'properties.gif', 25)

update CONTEXT_MENU_ITEM set [ORDER] = 70, BOTTOM_SEPARATOR = 0 where CONTEXT_MENU_ID = dbo.qp_context_menu_id('db') and ACTION_ID = dbo.qp_action_id('list_locked_article')
update CONTEXT_MENU_ITEM set [ORDER] = 80, BOTTOM_SEPARATOR = 1 where CONTEXT_MENU_ID = dbo.qp_context_menu_id('db') and ACTION_ID = dbo.qp_action_id('list_articles_for_approval')

exec qp_update_translations 'Settings', 'Настройки'
exec qp_update_translations 'Database Settings', 'Настройки базы данных'
exec qp_update_translations 'Update Database Settings', 'Изменить настройки базы данных'
exec qp_update_translations 'Refresh Database Settings', 'Обновить настройки базы данных'
GO

ALTER TABLE [dbo].[DB]
ADD
  [CREATED] [datetime] NOT NULL CONSTRAINT [DF_DB_CREATED] DEFAULT (getdate()),
  [MODIFIED] [datetime] NOT NULL CONSTRAINT [DF_DB_MODIFIED]  DEFAULT (getdate()),
  [LAST_MODIFIED_BY] [numeric](18, 0) NOT NULL CONSTRAINT [DF_DB_LAST_MODIFIED_BY]  DEFAULT (1)
GO

ALTER TABLE [dbo].[DB] ADD
CONSTRAINT [FK_DB_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY]) REFERENCES [dbo].[USERS] ([USER_ID])
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.27', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.27 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.6.28
-- DB Settings
-- **************************************

exec qp_update_translations 'All Child Permission Modify', 'Изменить все дочерние права доступа'
exec qp_update_translations 'All Child Permission Remove', 'Удалить все дочерние права доступа'
exec qp_update_translations 'Assemble Parent', 'Собрать родителя'
exec qp_update_translations 'Child Permission Modify', 'Изменить дочернее право доступа'
exec qp_update_translations 'Child Permission Remove', 'Удалить дочернее право доступа'
exec qp_update_translations 'Child Permission Save', 'Сохранить дочернее право доступа'
exec qp_update_translations 'Compare', 'Сравнить'
exec qp_update_translations 'Fake', 'Подделка'
exec qp_update_translations 'Miltiple Unlock', 'Множественная разблокировка'
exec qp_update_translations 'Multiple Assemble', 'Множественная сборка'
exec qp_update_translations 'Multiple Child Permission Modify', 'Множественное изменение дочерних прав доступа'
exec qp_update_translations 'Multiple Child Permission Remove', 'Множественное удаление дочерних прав доступа'
exec qp_update_translations 'Promote', 'Повысить'
exec qp_update_translations 'Simple Update', 'Простое обновление'
exec qp_update_translations 'Update and Up', 'Обновить и вернуться'

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.28', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.28 completed'
GO


-- **************************************
-- Kirill Zakirov
-- version 7.9.6.29
-- Templates fixes
-- **************************************

exec qp_update_translations 'Search in code', 'Поиск по коду'
go

update OBJECT_FORMAT_VERSION set LAST_MODIFIED_BY = 1 where LAST_MODIFIED_BY not in (select USER_ID from USERS)
GO

ALTER TABLE [dbo].[OBJECT_FORMAT_VERSION] ADD
CONSTRAINT [FK_OBJECT_FORMAT_VERSION_LAST_MODIFIED_BY] FOREIGN KEY([LAST_MODIFIED_BY]) REFERENCES [dbo].[USERS] ([USER_ID])
GO


UPDATE [CONTEXT_MENU_ITEM]
   SET
      [NAME] = 'Versions'
      ,[ICON] = 'version.gif'

where  ACTION_ID = dbo.qp_action_id('list_template_object_format_version')
or  ACTION_ID = dbo.qp_action_id('list_page_object_format_version')

delete from ACTION_TOOLBAR_BUTTON where PARENT_ACTION_ID = dbo.qp_action_id('list_page_object_format_version') or PARENT_ACTION_ID = dbo.qp_action_id('list_template_object_format_version')

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('multiple_remove_template_object_format_version'), 'Remove', 'delete.gif', NULL, 40, 0)

go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], IS_COMMAND)
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('multiple_remove_page_object_format_version'), 'Remove', 'delete.gif', NULL, 40, 0)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('compare_with_cur_page_object_format_version'), 'Compare With Current', 'compare.gif', NULL, 30, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('compare_with_cur_template_object_format_version'), 'Compare With Current', 'compare.gif', NULL, 30, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('compare_page_object_format_versions'), 'Compare Versions', 'compare.gif', NULL, 20, 1)

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('compare_template_object_format_versions'), 'Compare Versions', 'compare.gif', NULL, 20, 1)
go

--
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('edit_page_object_format_version'), 'Preview', 'properties.gif', NULL, 10, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('edit_template_object_format_version'), 'Preview', 'properties.gif', NULL, 10, 1)
go

--rfrsh
insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_page_object_format_version'), dbo.qp_action_id('refresh_page_object_format_versions'), 'Refresh', 'refresh.gif', NULL, 50, 1)
go

insert into ACTION_TOOLBAR_BUTTON(PARENT_ACTION_ID, ACTION_ID, NAME, ICON, ICON_DISABLED, [ORDER], [IS_COMMAND])
values (dbo.qp_action_id('list_template_object_format_version'), dbo.qp_action_id('refresh_template_object_format_versions'), 'Refresh', 'refresh.gif', NULL, 50, 1)
go

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ORDER] = 60
 WHERE
  (PARENT_ACTION_ID = dbo.qp_action_id('list_template') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('list_page') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('list_template_object') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('list_page_object') and ICON = 'refresh.gif')
GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.29', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.29 completed'
GO

-- **************************************
-- Pavel Celut
-- version 7.9.6.30
-- Refresh for Custom Actions
-- **************************************

ALTER PROCEDURE [dbo].[qp_get_toolbar_buttons_list_by_action_code](@user_id int, @action_code nvarchar(50), @entity_id int)
AS
BEGIN
  DECLARE @action_id int
  SET @action_id = dbo.qp_action_id(@action_code)

  DECLARE @language_id numeric(18, 0)
  SET @language_id = dbo.qp_language(@user_id)

  if EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1 BEGIN
    SELECT
    ba.ID AS ACTION_ID,
    ba.CODE AS ACTION_CODE,
    bat.CODE AS ACTION_TYPE_CODE,
    ba2.ID AS PARENT_ACTION_ID,
    ba2.CODE AS PARENT_ACTION_CODE,
    dbo.qp_translate(atb.NAME, @language_id) AS NAME,
    bat.ITEMS_AFFECTED,
    atb.[ORDER],
    ISNULL(ca.ICON_URL, atb.ICON) AS ICON,
    atb.ICON_DISABLED,
    atb.IS_COMMAND
  FROM
    ACTION_TOOLBAR_BUTTON AS atb
    INNER JOIN BACKEND_ACTION AS ba ON atb.ACTION_ID = ba.ID
    LEFT OUTER JOIN CUSTOM_ACTION AS ca ON ca.ACTION_ID = ba.ID
    INNER JOIN ACTION_TYPE AS bat ON bat.ID = ba.TYPE_ID
    INNER JOIN BACKEND_ACTION AS ba2 ON atb.PARENT_ACTION_ID = ba2.ID
  WHERE
    atb.PARENT_ACTION_ID = @action_id
  ORDER BY
    [ORDER]
  END
  ELSE BEGIN
    DECLARE @entity_code nvarchar(50)
    select @entity_code = dbo.qp_entity_type_code(entity_type_id) from backend_action where code = @action_code

    declare @seqQuery nvarchar(max);
    EXEC [dbo].[qp_GetActionPermissionAsQuery]
      @user_id = @user_id,
      @result = @seqQuery OUTPUT

    declare @fullQuery nvarchar(max);

    select @fullQuery = REPLACE (N'SELECT
      ba.ID AS ACTION_ID,
      ba.CODE AS ACTION_CODE,
      bat.CODE AS ACTION_TYPE_CODE,
      ba2.ID AS PARENT_ACTION_ID,
      ba2.CODE AS PARENT_ACTION_CODE,
      dbo.qp_translate(atb.NAME, @p0) AS NAME,
      bat.ITEMS_AFFECTED,
      atb.[ORDER],
      ISNULL(ca.ICON_URL, atb.ICON) AS ICON,
      atb.ICON_DISABLED,
      atb.IS_COMMAND
    FROM
      ACTION_TOOLBAR_BUTTON AS atb
      INNER JOIN BACKEND_ACTION AS ba ON atb.ACTION_ID = ba.ID
      LEFT OUTER JOIN CUSTOM_ACTION AS ca ON ca.ACTION_ID = ba.ID
      INNER JOIN ACTION_TYPE AS bat ON bat.ID = ba.TYPE_ID
      INNER JOIN PERMISSION_LEVEL PL ON PL.PERMISSION_LEVEL_ID = bat.REQUIRED_PERMISSION_LEVEL_ID
      INNER JOIN BACKEND_ACTION AS ba2 ON atb.PARENT_ACTION_ID = ba2.ID
      INNER JOIN
      (<$_security_insert_$>) SEC ON SEC.BACKEND_ACTION_ID = ba.ID
    WHERE
      atb.PARENT_ACTION_ID = @p1
      AND (SEC.PERMISSION_LEVEL >= PL.PERMISSION_LEVEL or bat.CODE = ''refresh'')
      AND dbo.qp_action_visible(@p2, @p3, @p4, ba.CODE) = 1
    ORDER BY
      [ORDER]', N'<$_security_insert_$>', @seqQuery)

    EXEC sp_executesql @fullQuery,
      N'@p0 numeric(18, 0), @p1 int, @p2 int, @p3 nvarchar(50), @p4 int',
      @p0 = @language_id, @p1 = @action_id, @p2 = @user_id, @p3 = @entity_code, @p4 = @entity_id;
  END
END
GO

update BACKEND_ACTION set [TYPE_ID] = dbo.qp_action_type_id('update') where [TYPE_ID] = dbo.qp_action_type_id('refresh') and CODE like 'custom%'

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.30', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.30 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.6.31
-- Templates
-- **************************************

UPDATE [BACKEND_ACTION]
   SET SHORT_NAME = null
 WHERE CODE = 'compare_template_object_format_versions'
 or CODE = 'compare_page_object_format_versions'

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.31', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.31 completed'
GO


-- **************************************
-- Alexei Aksenov
-- version 7.9.6.32
-- Export/import features, fixes
-- **************************************

ALTER PROCEDURE [dbo].[qp_insertArticleValues]
  @xmlParameter xml
AS
BEGIN
  DECLARE @idoc int
  EXEC sp_xml_preparedocument @idoc OUTPUT, @xmlParameter;

  DECLARE @NewArticles TABLE (CONTENT_ITEM_ID int, ATTRIBUTE_ID int, DATA nvarchar(3500), BLOB_DATA nvarchar(max))

  INSERT INTO @NewArticles
    SELECT * FROM OPENXML(@idoc, '/PARAMETERS/FIELDVALUE')
    WITH(
        CONTENT_ITEM_ID int './CONTENT_ITEM_ID'
        ,ATTRIBUTE_ID int './ATTRIBUTE_ID'
        ,DATA nvarchar(3500) './DATA'
        ,BLOB_DATA nvarchar(max) './BLOB_DATA')

    BEGIN
       UPDATE
      [dbo].[CONTENT_DATA]
    SET
      [dbo].[CONTENT_DATA].[DATA] = CASE WHEN ([@NewArticles].[DATA] IS NULL OR [@NewArticles].[DATA] = '') THEN NULL ELSE [@NewArticles].[DATA] END,
      [dbo].[CONTENT_DATA].[BLOB_DATA] = CASE WHEN ([@NewArticles].[BLOB_DATA] IS NULL OR [@NewArticles].[BLOB_DATA] = '') THEN NULL ELSE [@NewArticles].[BLOB_DATA] END
    FROM
      [dbo].[CONTENT_DATA]
    INNER JOIN
      @NewArticles
    ON
      [dbo].[CONTENT_DATA].CONTENT_ITEM_ID = [@NewArticles].CONTENT_ITEM_ID AND
      [dbo].[CONTENT_DATA].ATTRIBUTE_ID = [@NewArticles].ATTRIBUTE_ID

    END
END
GO

  update [dbo].[context_menu_item]
  SET [ORDER] = 150
  WHERE action_id = dbo.qp_action_id('export_articles')
  GO

  update [dbo].[context_menu_item]
  SET [ORDER] = 155
  WHERE action_id = dbo.qp_action_id('import_articles')
  GO

  update [dbo].[context_menu_item]
  SET [BOTTOM_SEPARATOR] = 1
  WHERE action_id = dbo.qp_action_id('list_child_article_permission')
  GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.32', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.32 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.6.33
-- Grouped Contents, explicit default group
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'GROUP_PARENT_ID' and TABLE_NAME = 'ENTITY_TYPE')
ALTER TABLE [dbo].[ENTITY_TYPE]
ADD
  [GROUP_PARENT_ID] [int] NULL CONSTRAINT [FK_ENTITY_TYPE_GROUP_PARENT_ID] FOREIGN KEY([GROUP_PARENT_ID]) REFERENCES [dbo].[ENTITY_TYPE] ([ID]),
  [GROUP_PARENT_ID_FIELD] [nvarchar](50) NULL
GO


update ENTITY_TYPE set GROUP_PARENT_ID_FIELD = 'CONTENT_GROUP_ID', GROUP_PARENT_ID = dbo.qp_entity_type_id('content_group') where ID = dbo.qp_entity_type_id('content')
update ENTITY_TYPE set GROUP_PARENT_ID_FIELD = 'CONTENT_GROUP_ID', GROUP_PARENT_ID = dbo.qp_entity_type_id('content_group') where ID = dbo.qp_entity_type_id('virtual_content')
update ENTITY_TYPE set SOURCE_SP = null where CODE = 'content_group'
GO

ALTER TABLE [dbo].[CONTENT_GROUP] ADD CONSTRAINT [UNIQUE_CONTENT_GROUP_NAME] UNIQUE NONCLUSTERED
(
  [SITE_ID] ASC,
  [NAME] ASC
)
GO


insert into content_group (site_id, name)
select site_id, 'Default Group' from site
GO

exec qp_drop_existing 'dbo.qp_get_node', 'IsProcedure'
go

exec qp_drop_existing 'dbo.qp_content_group_list', 'IsProcedure'
go


ALTER procedure [dbo].[qp_expand](
  @user_id numeric = 0,
  @code nvarchar(50) = null,
  @id bigint = 0,
  @is_folder bit = 0,
  @is_group bit = 0,
  @group_item_code nvarchar(50) = null,
  @filter_id bigint = 0,
  @count_only bit = 0,
  @count int = 0 output
)
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_GROUP_ID bigint null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    IS_GROUP bit null,
    GROUP_ITEM_CODE nvarchar(50),
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID bigint null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID bigint null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null,
    IS_RECURRING bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50), @group_parent_id_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint, @filter_id_str nvarchar(10)
  declare @default_action_id int, @context_menu_id int
  declare @is_admin bit, @current_is_group bit
  declare @parent_group_code nvarchar(50), @child_group_code nvarchar(50), @current_group_item_code nvarchar(50)
  declare @real_parent_id bigint, @real_parent_id_field nvarchar(50), @real_id_str nvarchar(10)

  set @id_str = CAST(@id as nvarchar(10))

  if (@filter_id = 0)
    set @filter_id_str = ''
  else
    set @filter_id_str = CAST(@filter_id as nvarchar(10))

  select @parent_group_code = ET1.CODE from ENTITY_TYPE ET2 INNER JOIN ENTITY_TYPE ET1 ON ET2.GROUP_PARENT_ID = ET1.ID where ET2.CODE = @code

  if @is_group = 1
  begin
    exec dbo.qp_get_parent_entity_id @id, @code, @parent_entity_id = @real_parent_id output
    set @real_id_str = CAST(@real_parent_id as nvarchar(10))
  end
  else begin
    set @real_parent_id = @id
    set @real_id_str = @id_str
  end

  set @current_is_group = 0
  if @parent_group_code is not null begin
    if @is_folder = 1 begin
      set @current_group_item_code = @code
      set @code = @parent_group_code
      set @current_is_group = 1
    end
  end
  else if @group_item_code is not null begin
    if @is_folder = 0 begin
      set @is_folder = 1
      set @code = @group_item_code
    end
  End

  set @language_id = dbo.qp_language(@user_id)

  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @group_parent_id_field = GROUP_PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE ET
  where
    ID = dbo.qp_entity_type_id(@code)

  if @is_group = 1
  begin
    set @real_parent_id_field = @parent_id_field
    set @parent_id_field = @group_parent_id_field
  end

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'

      set @where = '1 = 1'
      if @parent_id_field is not null and @id_str <> '0' and  @id_str <> ''
        set @where = @where + ' AND ' + @parent_id_field + ' = ' + @id_str

      if @recurring_id_field is not null
      begin
        if @is_folder = 1
          set @where = @where + ' AND ' + @recurring_id_field + ' is null '
        else
          set @where = @where + ' AND ' + @recurring_id_field + ' = ' + @id_str
      end

      if @filter_id_str <> '0' and @filter_id_str <> ''
        set @where = @where + ' AND ' + @id_field + ' = ' + @filter_id_str

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @real_parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@real_parent_id_field) + '=' + @real_id_str
      else if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end
    print @sql
    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql

    --PRINT @sql;


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @real_parent_id,
        PARENT_GROUP_ID = CASE WHEN @is_group = 1 THEN @id ELSE NULL END,
        CODE = @code,
        IS_FOLDER = 0,
        IS_GROUP = @current_is_group,
        GROUP_ITEM_CODE = @current_group_item_code,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id,
        IS_RECURRING = CASE WHEN @recurring_id_field is not null THEN 1 ELSE 0 END
    end
    else
      select @count = COUNT(ID) from @result
  end
  else begin
    if @is_admin = 0
    begin
      declare @entitySecQuery nvarchar(max);
      EXEC [dbo].[qp_GetEntityPermissionAsQuery]
        @user_id = @user_id,
        @SQLOut = @entitySecQuery OUTPUT

      CREATE TABLE #sectmp
      (
        PERMISSION_LEVEL int,
        ENTITY_TYPE_ID int
      );
      set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
      exec sp_executesql @entitySecQuery;
    end

    declare @entitySql nvarchar(max), @condition nvarchar(max)
    set @condition = ' ET.DISABLED = 0 '
    if @code is null
      set @condition = @condition + ' AND ET.PARENT_ID is null '
    else
      set @condition = @condition + ' AND ET.PARENT_ID = dbo.qp_entity_type_id(''' + @code + ''') '

    if @is_admin = 0
      set @condition = @condition + ' AND S.PERMISSION_LEVEL > 0 '

    if @filter_id_str <> '0' and @filter_id_str <> ''
      set @condition = @condition + ' AND ET.ID = ' + @filter_id_str

    if @count_only = 0
    begin
      if @code is not null
        set @entitySql = ' select ET.ID, ' + @id_str + ', dbo.qp_translate(dbo.qp_pluralize(ET.NAME), ' + cast(@language_id as nvarchar(10)) + '), ET.CODE, 1, 0, dbo.qp_get_icon(NULL, dbo.qp_pluralize(ET.CODE), NULL), ET.FOLDER_DEFAULT_ACTION_ID, ET.FOLDER_CONTEXT_MENU_ID ' + CHAR(13)
      else
        set @entitySql = ' select ET.ID, ' + @id_str + ', ET.NAME, ET.CODE, 0, 0, dbo.qp_get_icon(NULL, ET.CODE, NULL), ET.DEFAULT_ACTION_ID, ET.CONTEXT_MENU_ID ' + CHAR(13)
    end
    else
      set @entitySql = ' select @count = COUNT(ET.ID) ' + CHAR(13)

    set @entitySql = @entitySql + ' From ENTITY_TYPE ET ' + CHAR(13)

    if @is_admin = 0
      set @entitySql = @entitySql + ' INNER JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID ' + CHAR(13)

    set @entitySql = @entitySql + ' WHERE ' + @condition  + CHAR(13)

    if @count_only = 0
    begin
      set @entitySql = @entitySql + ' order by ET.[ORDER] ' + CHAR(13)
      print @entitySql
      insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, IS_GROUP, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
      exec sp_executesql @entitySql
    end
    else begin
      print @entitySql
      exec sp_executesql @entitySql, N'@count int output', @count = @count output
    end
  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit, @local_is_recurring bit
    declare @local_is_group bit, @local_group_item_code nvarchar(50)
    declare @children_count int
    set @children_count = 0
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = is_folder,
      @local_is_group = is_group, @local_is_recurring = is_recurring, @local_group_item_code = GROUP_ITEM_CODE from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, @local_is_group, @local_group_item_code, 0, 1, @count = @children_count output
      else
      begin
        if @i = 1 or @local_is_recurring = 1 or @local_is_group = 1
        begin
          exec dbo.qp_expand @user_id, @local_code, @local_id, 0, @local_is_group, @local_group_item_code, 0, 1, @count = @children_count output
        end
      end
      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      TREE_NODE.PARENT_ID,
      TREE_NODE.PARENT_GROUP_ID,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.IS_GROUP,
      TREE_NODE.GROUP_ITEM_CODE,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO

CREATE function [dbo].[qp_default_group_id](@site_id int) returns int
AS
begin
  return (select content_group_id from content_group where site_id = @site_id and name = 'Default Group')
end
GO

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.33', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.33 completed'
GO

-- **************************************
-- Kirill Zakirov
-- version 7.9.6.34
-- templates bug fixes
-- **************************************

UPDATE [BACKEND_ACTION]
   SET [TYPE_ID] = dbo.qp_action_type_id('search')
 WHERE CODE = 'search_in_code'
GO

exec qp_update_translations 'Search in templates', 'Искать в шаблонах';
exec qp_update_translations 'Search in objects', 'Искать в объектах';

UPDATE [ACTION_TOOLBAR_BUTTON]
   SET [ORDER] = 60
 WHERE
  (PARENT_ACTION_ID = dbo.qp_action_id('edit_template') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('edit_page') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('edit_template_object_format') and ICON = 'refresh.gif')
  or
  (PARENT_ACTION_ID = dbo.qp_action_id('edit_page_object_format') and ICON = 'refresh.gif')
GO

UPDATE [BACKEND_ACTION]
   SET [CONFIRM_PHRASE] = 'Do you really want to remove the following object: {0}?'
 WHERE CODE = 'remove_template_object'
GO

UPDATE [BACKEND_ACTION]
   SET [CONFIRM_PHRASE] = 'Do you really want to remove the following object: {0}?'
 WHERE CODE = 'remove_page_object'
GO

UPDATE [BACKEND_ACTION]
   SET [CONFIRM_PHRASE] = 'Do you really want to remove the following format: {0}?'
 WHERE CODE = 'remove_page_object_format'
GO

UPDATE [BACKEND_ACTION]
   SET [CONFIRM_PHRASE] = 'Do you really want to remove the following format: {0}?'
 WHERE CODE = 'remove_template_object_format'
GO

exec qp_update_translations 'Do you really want to remove the following object: {0}?', 'Вы действительно хотите удалить объект {0}?';

exec qp_update_translations 'Do you really want to remove the following format: {0}?', 'Вы действительно хотите удалить формат {0}?';

INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.34', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.34 completed'
GO


-- **************************************
-- Pavel Celut
-- version 7.9.6.35
-- personalize content grouping
-- **************************************

if not exists(select * from INFORMATION_SCHEMA.COLUMNS where COLUMN_NAME = 'ENABLE_CONTENT_GROUPING_IN_TREE' and TABLE_NAME = 'USERS')
ALTER TABLE dbo.[USERS]
  ADD ENABLE_CONTENT_GROUPING_IN_TREE BIT NOT NULL CONSTRAINT DF_ENABLE_CONTENT_GROUPING_IN_TREE DEFAULT (1)
GO


CREATE function dbo.qp_check_entity_grouping(@user_id int, @code nvarchar(50)) returns bit
AS
begin
  declare @result bit
  if @code = 'content' or @code = 'virtual_content'
    select @result = ENABLE_CONTENT_GROUPING_IN_TREE from USERS where USER_ID = @user_id
  else
    set @result = 1
  return @result
end
GO


ALTER procedure [dbo].[qp_expand](
  @user_id numeric = 0,
  @code nvarchar(50) = null,
  @id bigint = 0,
  @is_folder bit = 0,
  @is_group bit = 0,
  @group_item_code nvarchar(50) = null,
  @filter_id bigint = 0,
  @count_only bit = 0,
  @count int = 0 output
)
as
begin
  declare @result table
  (
    NUMBER int primary key identity(1, 1),
    ID bigint not null,
    PARENT_ID bigint null,
    PARENT_GROUP_ID bigint null,
    CODE nvarchar(50) null,
    TITLE nvarchar(255) not null,
    IS_FOLDER bit null,
    IS_GROUP bit null,
    GROUP_ITEM_CODE nvarchar(50),
    ICON nvarchar(255) null,
    ICON_MODIFIER nvarchar(10) null,
    CONTEXT_MENU_ID bigint null,
    CONTEXT_MENU_CODE nvarchar(50) null,
    DEFAULT_ACTION_ID bigint null,
    DEFAULT_ACTION_CODE nvarchar(50) null,
    HAS_CHILDREN bit null,
    IS_RECURRING bit null
  )

  declare @language_id numeric(18, 0)
  declare @source nvarchar(50), @id_field nvarchar(50), @title_field nvarchar(50)
  declare @parent_id_field nvarchar(50), @icon_field nvarchar(50), @group_parent_id_field nvarchar(50)
  declare @icon_modifier_field nvarchar(50), @order_field nvarchar(50)
  declare @folder_icon nvarchar(50), @has_item_nodes bit
  declare @recurring_id_field nvarchar(50), @source_sp nvarchar(50)
  declare @id_str nvarchar(10), @parent_id bigint, @filter_id_str nvarchar(10)
  declare @default_action_id int, @context_menu_id int
  declare @is_admin bit, @current_is_group bit
  declare @parent_group_code nvarchar(50), @child_group_code nvarchar(50), @current_group_item_code nvarchar(50)
  declare @real_parent_id bigint, @real_parent_id_field nvarchar(50), @real_id_str nvarchar(10)

  set @id_str = CAST(@id as nvarchar(10))

  if (@filter_id = 0)
    set @filter_id_str = ''
  else
    set @filter_id_str = CAST(@filter_id as nvarchar(10))

  select @parent_group_code = ET1.CODE from ENTITY_TYPE ET2 INNER JOIN ENTITY_TYPE ET1 ON ET2.GROUP_PARENT_ID = ET1.ID where ET2.CODE = @code
  and dbo.qp_check_entity_grouping(@user_id, @code) = 1

  if @is_group = 1
  begin
    exec dbo.qp_get_parent_entity_id @id, @code, @parent_entity_id = @real_parent_id output
    set @real_id_str = CAST(@real_parent_id as nvarchar(10))
  end
  else begin
    set @real_parent_id = @id
    set @real_id_str = @id_str
  end

  set @current_is_group = 0
  if @parent_group_code is not null begin
    if @is_folder = 1 begin
      set @current_group_item_code = @code
      set @code = @parent_group_code
      set @current_is_group = 1
    end
  end
  else if @group_item_code is not null begin
    if @is_folder = 0 begin
      set @is_folder = 1
      set @code = @group_item_code
    end
  End

  set @language_id = dbo.qp_language(@user_id)

  set @is_admin = 0;
  IF EXISTS (select * from user_group_bind where group_id = 1 and user_id = @user_Id) OR @user_id = 1
    set @is_admin = 1;

  select
    @source = source,
    @source_sp = source_sp,
    @id_field = id_field,
    @title_field = TITLE_FIELD,
    @parent_id_field = PARENT_ID_FIELD,
    @group_parent_id_field = GROUP_PARENT_ID_FIELD,
    @icon_field = ICON_FIELD,
    @icon_modifier_field = ICON_MODIFIER_FIELD,
    @folder_icon = FOLDER_ICON,
    @has_item_nodes = HAS_ITEM_NODES,
    @recurring_id_field = RECURRING_ID_FIELD,
    @order_field = order_field,
    @default_action_id = default_action_id,
    @context_menu_id = CONTEXT_MENU_ID
  from
    ENTITY_TYPE ET
  where
    ID = dbo.qp_entity_type_id(@code)

  if @is_group = 1
  begin
    set @real_parent_id_field = @parent_id_field
    set @parent_id_field = @group_parent_id_field
  end

  if @icon_field is null
    set @icon_field = 'NULL'
  if @icon_modifier_field is null
    set @icon_modifier_field = 'NULL'


  if @is_folder = 1 or @recurring_id_field is not null
  begin
    declare @sql nvarchar(max), @select nvarchar(max), @where nvarchar(max), @order nvarchar(max)

    if @has_item_nodes = 1
    begin
      set @select = @source + '.' + @id_field + ' AS ID, ' + @title_field + ' AS TITLE,  '  + @icon_field + ' AS ICON,  ' + @icon_modifier_field + ' AS ICON_MODIFIER'

      set @where = '1 = 1'
      if @parent_id_field is not null and @id_str <> '0' and  @id_str <> ''
        set @where = @where + ' AND ' + @parent_id_field + ' = ' + @id_str

      if @recurring_id_field is not null
      begin
        if @is_folder = 1
          set @where = @where + ' AND ' + @recurring_id_field + ' is null '
        else
          set @where = @where + ' AND ' + @recurring_id_field + ' = ' + @id_str
      end

      if @filter_id_str <> '0' and @filter_id_str <> ''
        set @where = @where + ' AND ' + @id_field + ' = ' + @filter_id_str

      if @order_field is null
        set @order = @title_field
      else
        set @order = @order_field

    end


    if @source_sp is null
      set @sql = 'select ' + @select + ' from ' +  @source + ' where ' + @where + ' order by ' + @order
    else
    begin
      set @sql = 'exec ' + @source_sp + ' @user_id = ' + cast(@user_id as nvarchar(10)) + ', @permission_level = 1, @select = ''' + @select + ''', @filter = ''' + @where + ''', @order_by = ''' + @order + ''''
      if @real_parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@real_parent_id_field) + '=' + @real_id_str
      else if @parent_id_field is not null
        set @sql = @sql + ', @' + LOWER(@parent_id_field) + '=' + @id_str
      if @recurring_id_field is not null
        if @is_folder = 1
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=0'
        else
          set @sql = @sql + ', @' + LOWER(@recurring_id_field) + '=' + @id_str


    end
    print @sql
    insert into @result (ID, TITLE, ICON, ICON_MODIFIER)
    exec sp_executesql @sql

    --PRINT @sql;


    if @count_only = 0
    begin
      --select ID, @id AS PARENT_ID, TITLE, @code AS CODE, 0 AS IS_FOLDER,  AS ICON, @default_action_id AS DEFAULT_ACTION_ID,  AS , dbo.qp_expand_count(@user_id, @code, ID, 0) AS CHILDREN_COUNT  from @result
      update
        @result
      set
        PARENT_ID = @real_parent_id,
        PARENT_GROUP_ID = CASE WHEN @is_group = 1 THEN @id ELSE NULL END,
        CODE = @code,
        IS_FOLDER = 0,
        IS_GROUP = @current_is_group,
        GROUP_ITEM_CODE = @current_group_item_code,
        ICON = dbo.qp_get_icon(ICON, @code, ICON_MODIFIER),
        DEFAULT_ACTION_ID = @default_action_id,
        CONTEXT_MENU_ID = @context_menu_id,
        IS_RECURRING = CASE WHEN @recurring_id_field is not null THEN 1 ELSE 0 END
    end
    else
      select @count = COUNT(ID) from @result
  end
  else begin
    if @is_admin = 0
    begin
      declare @entitySecQuery nvarchar(max);
      EXEC [dbo].[qp_GetEntityPermissionAsQuery]
        @user_id = @user_id,
        @SQLOut = @entitySecQuery OUTPUT

      CREATE TABLE #sectmp
      (
        PERMISSION_LEVEL int,
        ENTITY_TYPE_ID int
      );
      set @entitySecQuery = N'insert into #sectmp (PERMISSION_LEVEL, ENTITY_TYPE_ID) ' + @entitySecQuery;
      exec sp_executesql @entitySecQuery;
    end

    declare @entitySql nvarchar(max), @condition nvarchar(max)
    set @condition = ' ET.DISABLED = 0 '
    if @code is null
      set @condition = @condition + ' AND ET.PARENT_ID is null '
    else
      set @condition = @condition + ' AND ET.PARENT_ID = dbo.qp_entity_type_id(''' + @code + ''') '

    if @is_admin = 0
      set @condition = @condition + ' AND S.PERMISSION_LEVEL > 0 '

    if @filter_id_str <> '0' and @filter_id_str <> ''
      set @condition = @condition + ' AND ET.ID = ' + @filter_id_str

    if @count_only = 0
    begin
      if @code is not null
        set @entitySql = ' select ET.ID, ' + @id_str + ', dbo.qp_translate(dbo.qp_pluralize(ET.NAME), ' + cast(@language_id as nvarchar(10)) + '), ET.CODE, 1, 0, dbo.qp_get_icon(NULL, dbo.qp_pluralize(ET.CODE), NULL), ET.FOLDER_DEFAULT_ACTION_ID, ET.FOLDER_CONTEXT_MENU_ID ' + CHAR(13)
      else
        set @entitySql = ' select ET.ID, ' + @id_str + ', ET.NAME, ET.CODE, 0, 0, dbo.qp_get_icon(NULL, ET.CODE, NULL), ET.DEFAULT_ACTION_ID, ET.CONTEXT_MENU_ID ' + CHAR(13)
    end
    else
      set @entitySql = ' select @count = COUNT(ET.ID) ' + CHAR(13)

    set @entitySql = @entitySql + ' From ENTITY_TYPE ET ' + CHAR(13)

    if @is_admin = 0
      set @entitySql = @entitySql + ' INNER JOIN #sectmp S ON S.ENTITY_TYPE_ID = ID ' + CHAR(13)

    set @entitySql = @entitySql + ' WHERE ' + @condition  + CHAR(13)

    if @count_only = 0
    begin
      set @entitySql = @entitySql + ' order by ET.[ORDER] ' + CHAR(13)
      print @entitySql
      insert into @result(ID, PARENT_ID, TITLE, CODE, IS_FOLDER, IS_GROUP, ICON, DEFAULT_ACTION_ID, CONTEXT_MENU_ID)
      exec sp_executesql @entitySql
    end
    else begin
      print @entitySql
      exec sp_executesql @entitySql, N'@count int output', @count = @count output
    end
  end

  if @count_only = 0
  begin
    declare @i numeric, @total numeric
    declare @local_code nvarchar(50), @local_id numeric, @local_parent_id numeric, @local_is_folder bit, @local_is_recurring bit
    declare @local_is_group bit, @local_group_item_code nvarchar(50)
    declare @children_count int
    set @children_count = 0
    set @i = 1
    select @total = COUNT(NUMBER) from @result
    while @i <= @total
    begin
      select @local_code = code, @local_id = id, @local_parent_id = parent_id, @local_is_folder = is_folder,
      @local_is_group = is_group, @local_is_recurring = is_recurring, @local_group_item_code = GROUP_ITEM_CODE from @result where NUMBER = @i

      if @local_is_folder = 1
        exec dbo.qp_expand @user_id, @local_code, @local_parent_id, 1, @local_is_group, @local_group_item_code, 0, 1, @count = @children_count output
      else
      begin
        if @i = 1 or @local_is_recurring = 1 or @local_is_group = 1
        begin
          exec dbo.qp_expand @user_id, @local_code, @local_id, 0, @local_is_group, @local_group_item_code, 0, 1, @count = @children_count output
        end
      end
      if @children_count = 0
        update @result set has_children = 0 where NUMBER = @i
      else
        update @result set has_children = 1 where NUMBER = @i

      set @i = @i + 1
    end

    select
      TREE_NODE.ID,
      TREE_NODE.CODE,
      TREE_NODE.PARENT_ID,
      TREE_NODE.PARENT_GROUP_ID,
      TREE_NODE.IS_FOLDER,
      TREE_NODE.IS_GROUP,
      TREE_NODE.GROUP_ITEM_CODE,
      TREE_NODE.ICON,
      TREE_NODE.TITLE,
      dbo.qp_action_code(TREE_NODE.DEFAULT_ACTION_ID) AS DEFAULT_ACTION_CODE,
      ACTION_TYPE.CODE AS DEFAULT_ACTION_TYPE_CODE,
      dbo.qp_context_menu_code(TREE_NODE.CONTEXT_MENU_ID) AS CONTEXT_MENU_CODE,
      TREE_NODE.HAS_CHILDREN
    from
      @result AS TREE_NODE
    left outer join
      BACKEND_ACTION
    on
      TREE_NODE.DEFAULT_ACTION_ID = BACKEND_ACTION.ID
    left outer join
      ACTION_TYPE
    on
      BACKEND_ACTION.TYPE_ID = ACTION_TYPE.ID
  end
end
GO

ALTER TRIGGER [dbo].[tiud_remove_empty_content_groups] ON [dbo].[CONTENT] FOR INSERT, UPDATE, DELETE
AS BEGIN
  DELETE FROM content_group
  WHERE NAME <> 'Default Group'
  AND NOT EXISTS(SELECT * FROM content WHERE content.content_group_id = content_group.content_group_id)
END
GO

update content set content_group_id = dbo.qp_default_group_id(SITE_ID) from content where content_group_id is null

GO
INSERT INTO SYSTEM_INFO
  (field_name, field_value, copyright)
VALUES
  ('version', '7.9.6.35', 'Copyright &copy; 1998-2013 Quantum Art, Inc. All rights reserved.')
GO

PRINT '7.9.6.35 completed'
GO
