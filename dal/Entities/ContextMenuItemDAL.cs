//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Quantumart.QP8.DAL.Entities
{

    // ReSharper disable CollectionNeverUpdated.Global
    // ReSharper disable InconsistentNaming
    // ReSharper disable UnusedMember.Global
    // ReSharper disable UnusedAutoPropertyAccessor.Global
    public partial class ContextMenuItemDAL
    {

        public int ContextMenuId { get; set; }
        public int ActionId { get; set; }
        public string Name { get; set; }
        public int Order { get; set; }
        public string Icon { get; set; }
        public string IconDisabled { get; set; }
        public bool HasBottomSeparator { get; set; }

        public ContextMenuDAL ContextMenu { get; set; }
        public BackendActionDAL Action { get; set; }
    }
        public class ContextMenuItemDALConfiguration : IEntityTypeConfiguration<ContextMenuItemDAL>
        {
            public void Configure(EntityTypeBuilder<ContextMenuItemDAL> builder)
            {
                builder.ToTable("CONTEXT_MENU_ITEM");

                builder.Property(x => x.HasBottomSeparator).HasColumnName("BOTTOM_SEPARATOR");
				builder.Property(x => x.IconDisabled).HasColumnName("ICON_DISABLED");
				builder.Property(x => x.Icon).HasColumnName("ICON");
				builder.Property(x => x.Order).HasColumnName("ORDER");
				builder.Property(x => x.Name).HasColumnName("NAME");
				builder.Property(x => x.ActionId).HasColumnName("ACTION_ID");
				builder.Property(x => x.ContextMenuId).HasColumnName("CONTEXT_MENU_ID");


                builder.HasKey(x => new { x.ContextMenuId, x.ActionId });


                builder.HasOne(x => x.ContextMenu).WithMany(y => y.Items).HasForeignKey(x => x.ContextMenuId);
    			builder.HasOne(x => x.Action).WithMany(y => y.ContextMenuItems).HasForeignKey(x => x.ActionId);

            }
        }
}
