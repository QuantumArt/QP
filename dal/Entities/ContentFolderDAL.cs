//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Quantumart.QP8.DAL.Entities
{

    // ReSharper disable CollectionNeverUpdated.Global
    // ReSharper disable InconsistentNaming
    // ReSharper disable UnusedMember.Global
    // ReSharper disable UnusedAutoPropertyAccessor.Global
    public partial class ContentFolderDAL :  IQpEntityObject
    {

        public decimal ContentId { get; set; }
        public decimal Id { get; set; }
        public Nullable<decimal> ParentId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Filter { get; set; }
        public string Path { get; set; }
        public System.DateTime Created { get; set; }
        public System.DateTime Modified { get; set; }
        public decimal LastModifiedBy { get; set; }

        public ContentDAL Content { get; set; }
        public ICollection<ContentFolderAccessDAL> ContentFolderAccess { get; set; }
        public ICollection<ContentFolderDAL> ContentFolder1 { get; set; }
        public ContentFolderDAL ContentFolder2 { get; set; }
        public UserDAL LastModifiedByUser { get; set; }
    }
        public class ContentFolderDALConfiguration : IEntityTypeConfiguration<ContentFolderDAL>
        {
            public void Configure(EntityTypeBuilder<ContentFolderDAL> builder)
            {
                builder.ToTable("content_FOLDER");

                builder.Property(x => x.ContentId).HasColumnName("content_ID");
				builder.Property(x => x.Id).HasColumnName("FOLDER_ID").ValueGeneratedOnAdd();
				builder.Property(x => x.ParentId).HasColumnName("PARENT_FOLDER_ID");
				builder.Property(x => x.Name).HasColumnName("NAME");
				builder.Property(x => x.Description).HasColumnName("DESCRIPTION");
				builder.Property(x => x.Filter).HasColumnName("FILTER");
				builder.Property(x => x.Path).HasColumnName("PATH");
				builder.Property(x => x.Created).HasColumnName("CREATED");
				builder.Property(x => x.Modified).HasColumnName("MODIFIED");
				builder.Property(x => x.LastModifiedBy).HasColumnName("LAST_MODIFIED_BY");


                builder.HasKey(x => x.Id);

                builder.HasOne(x => x.Content).WithMany(y => y.Folders).HasForeignKey(x => x.ContentId);
    			builder.HasMany(x => x.ContentFolderAccess).WithOne(y => y.ContentFolder).HasForeignKey(y => y.ContentFolderId);
    			builder.HasMany(x => x.ContentFolder1).WithOne(y => y.ContentFolder2).HasForeignKey(y => y.ParentId);
    			builder.HasOne(x => x.ContentFolder2).WithMany(y => y.ContentFolder1).HasForeignKey(x => x.ParentId);
    			builder.HasOne(x => x.LastModifiedByUser).WithMany(y => y.content_FOLDER).HasForeignKey(x => x.LastModifiedBy);

            }
        }
}
