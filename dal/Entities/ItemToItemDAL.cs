//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Quantumart.QP8.DAL.Entities
{

    // ReSharper disable CollectionNeverUpdated.Global
    // ReSharper disable InconsistentNaming
    // ReSharper disable UnusedMember.Global
    // ReSharper disable UnusedAutoPropertyAccessor.Global
    public partial class ItemToItemDAL
    {

        public decimal LinkId { get; set; }
        public decimal LItemId { get; set; }
        public decimal RItemId { get; set; }
        public bool IS_REV { get; set; }
        public bool IS_SELF { get; set; }

        public ArticleDAL Article { get; set; }
        public ArticleDAL Article1 { get; set; }
        public ContentToContentDAL ContentToContent { get; set; }
    }
        public class ItemToItemDALConfiguration : IEntityTypeConfiguration<ItemToItemDAL>
        {
            public void Configure(EntityTypeBuilder<ItemToItemDAL> builder)
            {
                builder.ToTable("item_to_item");

                builder.Property(x => x.IS_SELF).HasColumnName("IS_SELF");
				builder.Property(x => x.IS_REV).HasColumnName("IS_REV");
				builder.Property(x => x.LinkId).HasColumnName("link_id");
				builder.Property(x => x.LItemId).HasColumnName("l_item_id");
				builder.Property(x => x.RItemId).HasColumnName("r_item_id");


                builder.HasKey(x => new { x.LinkId, x.LItemId, x.RItemId });


                builder.HasOne(x => x.Article).WithMany(y => y.ItemToItem).HasForeignKey(x => x.LItemId);
    			builder.HasOne(x => x.Article1).WithMany(y => y.BackItemToItem).HasForeignKey(x => x.RItemId);
    			builder.HasOne(x => x.ContentToContent).WithMany(y => y.ItemToItem).HasForeignKey(x => x.LinkId);

            }
        }
}
