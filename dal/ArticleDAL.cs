//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
namespace Quantumart.QP8.DAL
{
    
    // ReSharper disable CollectionNeverUpdated.Global
    // ReSharper disable InconsistentNaming
    // ReSharper disable UnusedMember.Global
    // ReSharper disable UnusedAutoPropertyAccessor.Global
    public partial class ArticleDAL :  IQpEntityObject
    {
    
        public decimal Id { get; set; }
        public decimal Visible { get; set; }
        public decimal StatusTypeId { get; set; }
        public System.DateTime Created { get; set; }
        public System.DateTime Modified { get; set; }
        public decimal ContentId { get; set; }
        public decimal LastModifiedBy { get; set; }
        public Nullable<decimal> LockedBy { get; set; }
        public Nullable<System.DateTime> Locked { get; set; }
        public decimal Archived { get; set; }
        public bool NotForReplication { get; set; }
        public bool Delayed { get; set; }
        public bool Splitted { get; set; }
        public bool PermanentLock { get; set; }
        public bool CancelSplit { get; set; }
        public System.Guid UniqueId { get; set; }
    
        public ArticleWorkflowBindDAL WorkflowBinding { get; set; }
        public ContentDAL Content { get; set; }
        public ICollection<ContentDataDAL> ContentData { get; set; }
        public ICollection<ArticlePermissionDAL> AccessRules { get; set; }
        public ICollection<WaitingForApprovalDAL> WaitingForApproval { get; set; }
        public UserDAL LockedByUser { get; set; }
        public ICollection<ArticleScheduleDAL> Schedules { get; set; }
        public ICollection<ArticleStatusHistoryDAL> StatusHistory { get; set; }
        public StatusTypeDAL Status { get; set; }
        public ICollection<ArticleVersionDAL> Versions { get; set; }
        public ICollection<ItemToItemDAL> ItemToItem { get; set; }
        public ICollection<ItemToItemDAL> BackItemToItem { get; set; }
        public ICollection<ItemToItemVersionDAL> ItemToItemVersions { get; set; }
        public UserDAL LastModifiedByUser { get; set; }
        public ICollection<UserDefaultFilterItemDAL> USER_DEFAULT_FILTER { get; set; }
    }
        public class ArticleDALConfiguration : IEntityTypeConfiguration<ArticleDAL>
        {
            public void Configure(EntityTypeBuilder<ArticleDAL> builder)
            {
                builder.ToTable("CONTENT_ITEM");
    
                builder.Property(x => x.UniqueId).HasColumnName("UNIQUE_ID");
				builder.Property(x => x.CancelSplit).HasColumnName("CANCEL_SPLIT");
				builder.Property(x => x.Splitted).HasColumnName("SPLITTED");
				builder.Property(x => x.Id).HasColumnName("CONTENT_ITEM_ID");
				builder.Property(x => x.Visible).HasColumnName("VISIBLE");
				builder.Property(x => x.StatusTypeId).HasColumnName("STATUS_TYPE_ID");
				builder.Property(x => x.Created).HasColumnName("CREATED");
				builder.Property(x => x.Modified).HasColumnName("MODIFIED");
				builder.Property(x => x.ContentId).HasColumnName("CONTENT_ID");
				builder.Property(x => x.LastModifiedBy).HasColumnName("LAST_MODIFIED_BY");
				builder.Property(x => x.LockedBy).HasColumnName("locked_by");
				builder.Property(x => x.Locked).HasColumnName("LOCKED");
				builder.Property(x => x.PermanentLock).HasColumnName("PERMANENT_LOCK");
				builder.Property(x => x.Archived).HasColumnName("ARCHIVE");
				builder.Property(x => x.NotForReplication).HasColumnName("not_for_replication");
				builder.Property(x => x.Delayed).HasColumnName("SCHEDULE_NEW_VERSION_PUBLICATION");
				
    
                builder.HasKey(x => x.Id);
    
                builder.HasOne(x => x.WorkflowBinding).WithOne(y => y.Article).HasForeignKey<ArticleWorkflowBindDAL>(y => y.ArticleId);
    			builder.HasOne(x => x.Content).WithMany(y => y.Articles).HasForeignKey(x => x.ContentId);
    			builder.HasMany(x => x.ContentData).WithOne(y => y.Article).HasForeignKey(y => y.ArticleId);
    			builder.HasMany(x => x.AccessRules).WithOne(y => y.Article).HasForeignKey(y => y.ArticleId);
    			builder.HasMany(x => x.WaitingForApproval).WithOne(y => y.Article).HasForeignKey(y => y.ArticleId);
    			builder.HasOne(x => x.LockedByUser).WithMany(y => y.LockedByArticles).HasForeignKey(x => x.LockedBy);
    			builder.HasMany(x => x.Schedules).WithOne(y => y.Article).HasForeignKey(y => y.ArticleId);
    			builder.HasMany(x => x.StatusHistory).WithOne(y => y.Article).HasForeignKey(y => y.ArticleId);
    			builder.HasOne(x => x.Status).WithMany(y => y.Articles).HasForeignKey(x => x.StatusTypeId);
    			builder.HasMany(x => x.Versions).WithOne(y => y.Article).HasForeignKey(y => y.ArticleId);
    			builder.HasMany(x => x.ItemToItem).WithOne(y => y.Article).HasForeignKey(y => y.LItemId);
    			builder.HasMany(x => x.BackItemToItem).WithOne(y => y.Article1).HasForeignKey(y => y.RItemId);
    			builder.HasMany(x => x.ItemToItemVersions).WithOne(y => y.Article).HasForeignKey(y => y.LinkedItemId);
    			builder.HasOne(x => x.LastModifiedByUser).WithMany().HasForeignKey(x => x.LastModifiedBy);
    			builder.HasMany(x => x.USER_DEFAULT_FILTER).WithOne(y => y.Article).HasForeignKey(y => y.ArticleId);
    			
            }
        }
}
