//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
namespace Quantumart.QP8.DAL
{
    
    // ReSharper disable CollectionNeverUpdated.Global
    // ReSharper disable InconsistentNaming
    // ReSharper disable UnusedMember.Global
    // ReSharper disable UnusedAutoPropertyAccessor.Global
    public partial class ActionViewDAL
    {
    
        public int ActionId { get; set; }
        public int ViewTypeId { get; set; }
        public bool PreventDefaultBehavior { get; set; }
        public string ControllerActionUrl { get; set; }
        public int Order { get; set; }
    
        public BackendActionDAL BackendAction { get; set; }
        public ViewTypeDAL ViewType { get; set; }
    }
        public class ActionViewDALConfiguration : IEntityTypeConfiguration<ActionViewDAL>
        {
            public void Configure(EntityTypeBuilder<ActionViewDAL> builder)
            {
                builder.ToTable("ACTION_VIEW");
    
                builder.Property(x => x.ActionId).HasColumnName("ACTION_ID");
				builder.Property(x => x.ViewTypeId).HasColumnName("TYPE_ID");
				builder.Property(x => x.PreventDefaultBehavior).HasColumnName("PREVENT_DEFAULT_BEHAVIOR");
				builder.Property(x => x.ControllerActionUrl).HasColumnName("CONTROLLER_ACTION_URL");
				builder.Property(x => x.Order).HasColumnName("ORDER");
				
    
                builder.HasKey(x => new { x.ActionId, x.ViewTypeId });

    
                builder.HasOne(x => x.BackendAction).WithMany(y => y.Views).HasForeignKey(x => x.ActionId);
    			builder.HasOne(x => x.ViewType).WithMany(y => y.Views).HasForeignKey(x => x.ViewTypeId);
    			
            }
        }
}
