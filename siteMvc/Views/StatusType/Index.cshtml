@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.StatusType.StatusTypeListViewModel

@using (Html.BeginDocumentPadding())
{
	if (Model.ShowAddNewItemButton)
	{
		using (Html.BeginLinkButtonsList())
		{
			@Html.AddNewItemLink(Model)
		}
	}

    @(Html.Telerik().Grid<StatusTypeListItem>().Name(Model.MainComponentId)
        .DataKeys(k => k.Add(s => s.Id))
        .Columns(c =>
        {
            c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
                   .Width(30)
                   .HtmlAttributes(new { @class = "id" });

            c.Bound(s => s.Name).Title(EntityObjectStrings.Name)
                .HtmlAttributes(new { @class = "title" });
            c.Bound(s => s.Description).Title(EntityObjectStrings.Description);
            c.Bound(s => s.Weight).Title(StatusTypeStrings.Weight);
			c.Bound(s => s.Created).Title(EntityObjectStrings.Created);
            c.Bound(s => s.Modified).Title(EntityObjectStrings.Modified);
            c.Bound(s => s.LastModifiedByLogin).Title(EntityObjectStrings.LastModifiedBy);
        })
        .DataBinding(db => db.Ajax()
                .Select(Model.GettingDataActionName, "StatusType")
        )
        .EnableCustomBinding(true)
        .Sortable()
        .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
        .Selectable(s => s.Enabled(true))
        .ClientEvents(e =>
            e.OnDataBinding("$q.preventDefaultFunction")
             .OnRowDataBound("$q.preventDefaultFunction")
        )
    )
}

@Html.PrepareAndRunInitScript(Model)
