@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model  Quantumart.QP8.WebMvc.ViewModels.PageTemplate.ObjectViewModel

<script type="text/html" id="@Html.UniqueId("SortingItems_template")">
	<span data-bind="click: addItem">
        @Html.SimpleAddActionLink(TemplateStrings.AddSortExpression)
	</span>
	<table>
		<thead>
			<tr>
				<td/>
				<td>@TemplateStrings.Field</td>
				<td>@TemplateStrings.SortOrder</td>
			</tr>
		</thead>
		<tbody data-bind ="foreach: items">
			<tr>
				<td data-bind="text: $index() + 1"></td>
				<td><select data-bind="options: $root.fields, event: { change: $root.onItemChanged }, value: Field, css: { 'input-validation-error': Invalid}"></select></td>				
				<td><select data-bind="options: $root.orders, event: { change: $root.onItemChanged }, value: Order, css: { 'input-validation-error': Invalid}"></select></td>
                <td> <img src="@Url.Content("~/Content/qp8/icons/16x16/delete.gif")" data-bind="click: $root.removeItem"/></td>
			</tr>
		</tbody>
	</table>
</script>

<script type="text/html" id="@Html.UniqueId("Data_DefaultValues_template")">
	<span data-bind="click: addItem">
        @Html.SimpleAddActionLink(TemplateStrings.AddDefaultValue)
	</span>
	<table>
		<thead>
			<tr>
				<td/>
				<td>@EntityObjectStrings.Name</td>
				<td>@EntityObjectStrings.Value</td>
			</tr>
		</thead>
		<tbody data-bind ="foreach: items">
			<tr>
				<td data-bind="text: $index() + 1"></td>
				<td><input class="textbox" data-bind="value: VariableName, event: { change: $root.onItemChanged }, css: { 'input-validation-error': Invalid}"></td>
				<td><input class="textbox" data-bind="value: VariableValue, event: { change: $root.onItemChanged }, css: { 'input-validation-error': Invalid}"></td>
                <td> <img src="@Url.Content("~/Content/qp8/icons/16x16/delete.gif")" data-bind="click: $root.removeItem"/></td>
			</tr>
		</tbody>
	</table>
</script>

@using (Html.BeginTabForm(Model))
{
    @Html.Partial("Locking", Model)
    
	using (Html.BeginFieldGroup(NotificationStrings.BasicParameters))
	{
        if (Model.IsNew && Model.Data.PageOrTemplate)
	    {
		    @Html.CheckBoxFieldFor(s => s.Data.OverrideTemplateObject, "ParentTemplateObjectsPanel", htmlAttributes: new Dictionary<string, object> { { "class", "checkbox simple-checkbox overrideChkbx" } })
            using (Html.BeginPanel("ParentTemplateObjectsPanel"))
            {
                @Html.SelectFieldFor(model => model.Data.ParentObjectId, Html.List(Model.ParentTemplateObjectsAsListItems), htmlAttributes: new Dictionary<string, object> {{"data-objects", Model.ParentTemplateObjectsData}, {"class", "dropDownList dataList parentTemplateObjectsSelector"}})
            }
        }
        if (!Model.IsNew || !Model.Data.OverrideTemplateObject)
        {
            @Html.TextBoxFieldFor(s => s.Data.Name, htmlAttributes: (Model.Data.ParentObjectId != null || (Model.Data.InheritedObjects != null && Model.Data.InheritedObjects.Count() > 0)) ? new Dictionary<string, object> { { "disabled", "" }, { "class", "name textbox simple-text" } } : new Dictionary<string, object> {{ "class", "name textbox simple-text" }})
        }
        if (Model.Data.IsSiteDotNet)
        {
            @Html.TextBoxFieldFor(s => s.Data.NetName, htmlAttributes: (Model.Data.ParentObjectId != null || (Model.Data.InheritedObjects != null && Model.Data.InheritedObjects.Count() > 0)) ? new Dictionary<string, object> { { "disabled", "" }, { "class", "netName textbox simple-text" } } : new Dictionary<string, object> { { "class", "netName textbox simple-text" } })
        }
        @Html.TextAreaFieldFor(s => s.Data.Description)
        @Html.SelectFieldFor(model => model.Data.TypeId, Html.List(Model.Types), htmlAttributes: new Dictionary<string, object> { { "class", "dropDownList  typeDlist" } })
        
        if (!Model.Data.PageOrTemplate)
        {
            @Html.CheckBoxFieldFor(s => s.Data.Global, htmlAttributes: new Dictionary<string, object> { { "class", "checkbox simple-checkbox globalChkbx" }, { "data-visibleTypes", Model.ShowGlobalTypeIds} })
        }
        
        if (!Model.IsNew) {
            @Html.SelectFieldFor(model => model.Data.DefaultFormatId, Html.List(Model.DefaultFormats), Model.SelectDefaultFormatOptions)
        }
        
        @Html.CheckBoxFieldFor(s => s.Data.AllowStageEdit)
        
        if (Model.Data.PageTemplate.SiteIsDotNet)
	    {            
            @Html.CheckBoxFieldFor(s => s.Data.EnableViewState)
            @Html.CheckBoxFieldFor(s => s.Data.DisableDatabind)
            @Html.TextBoxFieldFor(s => s.Data.ControlCustomClass)
        }
        @Html.CheckBoxFieldFor(s => s.Data.UseDefaultValues, "UseDefaultValuesPanel")
        using (Html.BeginPanel("UseDefaultValuesPanel"))
        {
           @Html.AggregationListFieldFor(s => s.Data.DefaultValues, Model.Data.DefaultValues, "VariableName,VariableValue")
        }
    }
                        
        using (Html.BeginPanel("Publishing_Container_Panel"))
        {
        using (Html.BeginFieldGroup(TemplateStrings.Source))
	    {
            <div class="containerContentSelector">
              @Html.SingleItemPickerFieldFor(s => s.Data.Container.ContentId,
                Model.ContainerContentListItem,
                new EntityDataListArgs
                {
                  EntityTypeCode = EntityTypeCode.Content,
                  ParentEntityId = Model.Data.PageTemplate.SiteId,
                  SelectActionCode = ActionCode.SelectContentForObjectContainer,
                  //ReadActionCode = ActionCode.ContentProperties,
                  ListId = -1 * DateTime.Now.Millisecond,
                  MaxListHeight = 200,
                  MaxListWidth = 350,
                  ShowIds = true
                },
                new ControlOptions())
            </div>
            @Html.CheckBoxFieldFor(s => s.Data.Container.AllowDynamicContentChanging, "AllowDynamicContentChangingPanel")
            using (Html.BeginPanel("AllowDynamicContentChangingPanel"))
            {
                @Html.TextBoxFieldFor(s => s.Data.Container.DynamicContentVariable)
            }
        }
        
        using (Html.BeginFieldGroup(TemplateStrings.Filtering))
	    {
            <dl data-field_form_name="Data.Container.FilterValue" class="row">
	            <dt class="label">
	            <label for="tab1_Data_Container_FilterValue">@TemplateStrings.Filter</label>
	            </dt>
	            <dd class="field">
                    @Html.TextAreaFor(s => s.Data.Container.FilterValue, new Dictionary<string, object> 
					    { 						    
                            { "data-height", "102px"},
                            { "class", "textbox codeBehind highlightedTextarea simple-text " + Model.FilterHtaClass }
					    })
	            <em class="validators"></em>
	            <em class="description">"[content_item_id] = " + NumValue("id") <br/> "[Name] = '" + StrValue("name") + "'"</em>
                </dd>
            </dl>
            
            @Html.CheckBoxFieldFor(s => s.Data.Container.ScheduleDependence)

            @Html.CheckBoxFieldFor(s => s.Data.Container.ShowArchived)
            
            @Html.MultipleItemPickerFieldFor(x => x.ActiveStatusTypeIds, Model.ActiveStatusTypeListItems, Model.EntityDataListArgs, new Dictionary<string, object> {{ "data-published-id", Model.PublishedId }, {"data-has-workflow", Model.HasWorkflow}})
    
            @Html.CheckBoxFieldFor(s => s.Data.Container.ApplySecurity, "ApplySecurityPanel")
            using (Html.BeginPanel("ApplySecurityPanel"))
            {                                         
                @Html.RadioFieldFor(s => s.Data.Container.UseLevelFiltration, Html.List(Model.FiltrationLevels))
                
                @Html.SelectFieldFor(model => model.Data.Container.StartLevel, Html.List(Model.PermissionLevels))

                @Html.SelectFieldFor(model => model.Data.Container.EndLevel, Html.List(Model.PermissionLevels))
            }
        }
        
        using (Html.BeginFieldGroup(TemplateStrings.Order))
	    {
            @Html.RadioFieldFor(s => s.Data.Container.RotateContent, Html.List(Model.ReturnArticlesModes))
            
            <div class="sortingItems">
                @Html.AggregationListFieldFor(s => s.SortingItems, Model.SortingItems, "Field,Order", Model.Data.Container.AdditionalDataForAggregationList)
            </div>
            
            @Html.CheckBoxFieldFor(s => s.Data.Container.AllowOrderDynamic, "AllowOrderDynamicPanel")
            using (Html.BeginPanel("AllowOrderDynamicPanel"))
            {
                @Html.TextBoxFieldFor(s => s.Data.Container.OrderDynamic)
            }
	        
        }

        using (Html.BeginFieldGroup(TemplateStrings.Paging))
	    {
            <div class="option-with-def-value">
                @Html.RadioFieldFor(s => s.SelectionIsStarting, Html.List(Model.SelectionStartingModes))
            </div>
    
            using (Html.BeginPanel("FromTheSpecialPanel"))
            {                
                @Html.TextBoxFieldFor(s => s.Data.Container.SelectStart)
            }
            using (Html.BeginPanel("FromTheFirstPanel"))
            {
            }
            
            <div class="option-with-def-value">
                @Html.RadioFieldFor(s => s.SelectionIncludes, Html.List(Model.SelectionIncludeModes))
            </div>
    
            using (Html.BeginPanel("SpecialArticlesPanel"))
            {
                @Html.TextBoxFieldFor(s => s.Data.Container.SelectTotal)
            }
            using (Html.BeginPanel("AllArticlesPanel"))
            {
            }
        }
        
        using (Html.BeginFieldGroup(TemplateStrings.Caching))
	    { 
            @Html.CheckBoxFieldFor(s => s.Data.Container.EnableDataCaching, "EnableDataCachingPanel")
            using (Html.BeginPanel("EnableDataCachingPanel"))
            {
                @Html.NumericFieldFor(s => s.Data.Container.Duration, 0, 3600)
            }
        
            @Html.CheckBoxFieldFor(s => s.Data.Container.ReturnLastModified)
        }
        }
        
        
        using (Html.BeginPanel("Publishing_Form_Panel"))
        {                         
            using (Html.BeginFieldGroup("FormParameters"))
            {
              @Html.SingleItemPickerFieldFor(s => s.Data.ContentForm.ContentId,
                Model.FormContentListItem,
                new EntityDataListArgs
                {
                  EntityTypeCode = EntityTypeCode.Content,
                  ParentEntityId = Model.Data.PageTemplate.SiteId,
                  SelectActionCode = ActionCode.SelectContentForObjectForm,
                  //ReadActionCode = ActionCode.ContentProperties,
                  ListId = -2 * DateTime.Now.Millisecond,
                  MaxListHeight = 200,
                  MaxListWidth = 350,
                  ShowIds = true
                },
                new ControlOptions())

              @Html.CheckBoxFieldFor(s => s.Data.ContentForm.GenerateUpdateScript)

              @Html.SingleItemPickerFieldFor(s => s.Data.ContentForm.ThankYouPageId,
                Model.SitePageListItem,
                new EntityDataListArgs
                {
                  EntityTypeCode = EntityTypeCode.Page,
                  ParentEntityId = Model.Data.PageTemplate.Id,
                  SelectActionCode = ActionCode.SelectPageForObjectForm,
                  ReadActionCode = ActionCode.PageProperties,
                  ListId = -3 * DateTime.Now.Millisecond,
                  MaxListHeight = 200,
                  MaxListWidth = 350,
                  ShowIds = true
                },
                new ControlOptions())

              @Html.SelectFieldFor(model => model.Data.ContentForm.NetLanguageId, Html.List(Model.NetLanguages))
            }
        }
        
    
    @Html.Partial("Version", Model.Data)
	@Html.Partial("EntityDirectLink", Model)

}
@Html.PrepareInitScript(Model)
<script type="text/javascript">	
	
    @(Model.ContextObjectName).setInitializedCallback(function() {
		this.viewMediator = new Quantumart.QP8.BackendTemplateObjectPropertiesMediator('@(Html.UniqueId("editingForm"))');
	});
    
    @(Model.ContextObjectName).setTerminatingCallback(function() {
        this.viewMediator.dispose();
        this.viewMediator = null;
    });
</script>
@Html.RunInitScript(Model)
