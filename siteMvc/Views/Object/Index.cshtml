@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.PageTemplate.ObjectListViewModel

@using (Html.BeginDocumentPadding())
{
  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }

  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $('#@Model.MainComponentId').qpGrid({
        columns: [
          {
            field: '',
            headerTemplate: '<input type="checkbox" name="SelectHeader" value="" />',
            headerAttributes: { 'class': 't-select-header' },
            template: '<input type="checkbox" name="SelectedNotificationsIDs" value="#= Id #" />',
            sortable: false,
            attributes: { 'class': 't-select-cell' },
            width: 30,
          },
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 30 },
          {
            field: 'Icon',
            headerTemplate: '',
            template: '<img src="@Url.GetThemeSmallIconsImageFolderUrl()/#= Icon #" title="" class="smallIcon" />',
            width: 15,
          },
          {
            field: 'LockedBy',
            headerTemplate: '<img src="@(Url.GetThemeRootImageFolderUrl())/grid/header_icons/lock.gif" style="width: 16px; height: 16px;" class="t-image" alt="" />',
            headerAttributes: { 'class': 't-image-header' },
            template: '<img src="@(Url.GetThemeSmallIconsImageFolderUrl())/#= LockedByIcon #" title="#= LockedByToolTip #" class="smallIcon" />',
            attributes: { 'style': 'text-align: center;' },
            width: 30,
          },
          @if (Model.IsTemplateObject)
          {
            <text>
            {
              field: 'Overriden',
              headerTemplate: '<img class="smallIcon" src="@Url.Content("~/Content/QP8/icons/16x16/template_object_redefined.gif")" style="filter: grayscale(100%);" />',
              template: '# if (Overriden) { # <img class="smallIcon" src="@Url.Content("~/Content/QP8/icons/16x16/template_object_redefined.gif")" /> # } #',
              width: 15,
            },
            </text>
          }
          else
          {
            <text>
            {
              field: 'ParentId',
              headerTemplate: '<img class="smallIcon" src="@Url.Content("~/Content/QP8/icons/16x16/page_object_redefined.gif")" style="filter: grayscale(100%);"  />',
              template: '# if (ParentId != null) { # <img class="smallIcon" src="@Url.Content("~/Content/QP8/icons/16x16/page_object_redefined.gif")" /> # } #',
              width: 15,
            },
            </text>
          }
          { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' } },
          { field: 'TypeName', title: '@TemplateStrings.Type' },
          { field: 'Description', title: '@EntityObjectStrings.Description' },
          { field: 'Created', title: '@EntityObjectStrings.Created' },
          { field: 'Modified', title: '@EntityObjectStrings.Modified' },
          { field: 'LastModifiedByLogin', title: '@EntityObjectStrings.LastModifiedBy' },
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action(Model.GettingDataActionName, "Object", new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
            },
          },
          pageSize: @Default.GridPageSize,
        },
      });
    });
  </script>
}

@Html.PrepareAndRunInitScript(Model)
