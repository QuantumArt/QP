@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Content.ContentListViewModel

@using (Html.BeginDocumentPadding())
{
  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
			@Html.AddNewItemLink(Model)
    }
  }
    <div id="@Model.MainComponentId"></div>
    <script>
      $(document).ready(function () {
        $(`#${'@Model.MainComponentId'}`).kendoGrid({
          columns: [
            { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 50 },
            { field: 'GroupName', title: '@ContentStrings.GroupName' },
            { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' }, width: 133 },
            @if (Model.ActionCode == ActionCode.MultipleSelectContent)
            {
              @:{ field: 'SiteName', title: '@ContentStrings.ParentSiteName' },
            }
            { field: 'Description', title: '@EntityObjectStrings.Description' },
            @if (Model.IsVirtual)
            {
              @:{ field: 'VirtualType', title: '@ContentStrings.VirtualType' },
            }
            { field: 'Created', title: '@EntityObjectStrings.Created' },
            { field: 'Modified', title: '@EntityObjectStrings.Modified' },
            { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy', width: 100 },
          ],
          pageable: true,
          sortable: true,
          autoBind: false,
          dataSource: {
             transport: {
               read: {
                 url: "@Url.Action("Grid", "Content", new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
                 type: 'post',
                 dataType: 'json',
               },
               parameterMap: function(data) {
                 console.log(data);
                 var result = { page: data.page, pageSize: data.pageSize };
                 if (data.sort && data.sort.length) {
                   result.orderBy = `${data.sort[0].field}-${data.sort[0].dir}`;
                 }
                 return result;
               },
            },
            schema: {
              data: 'data',
              total: 'total',
            },
            pageSize: @Default.GridPageSize,
            serverPaging: true,
            serverSorting: true,
          },
        });
      });
    </script>

    @*@(Html.Telerik().Grid<ContentListItem>().Name(Model.MainComponentId)
        .DataKeys(k => k.Add(s => s.Id))
        .Columns(c =>
            {
                c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
                    .Width(30)
                    .HtmlAttributes(new { @class = "id" });
                c.Bound(s => s.GroupName).Title(ContentStrings.GroupName); 
                c.Bound(s => s.Name)
                    .Title(EntityObjectStrings.Name)
                    .HtmlAttributes(new { @class = "title" });

                if (Model.ActionCode == ActionCode.MultipleSelectContent) c.Bound(s => s.SiteName).Title(ContentStrings.ParentSiteName);

                c.Bound(s => s.Description).Title(EntityObjectStrings.Description);
                if (Model.IsVirtual) c.Bound(s => s.VirtualType).Title(ContentStrings.VirtualType);
                c.Bound(s => s.Created).Title(EntityObjectStrings.Created);
                c.Bound(s => s.Modified).Title(EntityObjectStrings.Modified);
                c.Bound(s => s.LastModifiedByUser).Title(EntityObjectStrings.LastModifiedBy);
            })
        .DataBinding(db => db.Ajax().Select(Model.GetDataAction, "Content"))
        .EnableCustomBinding(true)
        .Sortable()
        .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
        .Selectable(s => s.Enabled(true))
        .ClientEvents(e =>
            e
                .OnDataBinding("$q.preventDefaultFunction")
                .OnRowDataBound("$q.preventDefaultFunction")
        )
    )*@
}

@Html.PrepareAndRunInitScript(Model)

@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
