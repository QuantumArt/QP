@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Content.ContentListViewModel

@using (Html.BeginDocumentPadding())
{
  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
       @Html.AddNewItemLink(Model)
    }
  }
  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $(`#${'@Model.MainComponentId'}`).kendoGrid({
        columns: [
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 50 },
          { field: 'GroupName', title: '@ContentStrings.GroupName' },
          { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' }, width: 133 },
          @if (Model.ActionCode == ActionCode.MultipleSelectContent)
          {
            @:{ field: 'SiteName', title: '@ContentStrings.ParentSiteName' },
          }
          { field: 'Description', title: '@EntityObjectStrings.Description' },
          @if (Model.IsVirtual)
          {
            @:{ field: 'VirtualType', title: '@ContentStrings.VirtualType' },
          }
          { field: 'Created', title: '@EntityObjectStrings.Created' },
          { field: 'Modified', title: '@EntityObjectStrings.Modified' },
          { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy', width: 100 },
        ],
        selectable: true,
        pageable: {
          alwaysVisible: false,
        },
        sortable: {
          allowUnsort: true,
        },
        autoBind: false,
        dataSource: {
            transport: {
              read: {
                url: "@Url.Action(Model.GetDataActionName, "Content", new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
                type: 'post',
                dataType: 'json',
              },
              parameterMap: function(data) {
                var result = { page: data.page, pageSize: data.pageSize };
                if (data.sort && data.sort.length) {
                  result.orderBy = `${data.sort[0].field}-${data.sort[0].dir}`;
                }
                if (data.searchQuery) {
                  result.searchQuery = data.searchQuery;
                }
                return result;
              },
          },
          schema: {
            data: 'data',
            total: 'total',
          },
          pageSize: @Default.GridPageSize,
          serverPaging: true,
          serverSorting: true,
        },
      });
    });
  </script>
}

@Html.PrepareAndRunInitScript(Model)

@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
