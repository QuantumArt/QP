@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Content.ContentSelectableListViewModel

@using (Html.BeginDocumentPadding())
{
  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $(`#${'@Model.MainComponentId'}`).qpGrid({
        columns: [
          {
            field: '',
            headerTemplate: '<input type="checkbox" name="SelectHeader" value="" />',
            headerAttributes: { 'class': 't-select-header' },
            template: '<input type="checkbox" name="selectedContentIDs" value="#:Id#" />',
            sortable: false,
            attributes: { 'class': 't-select-cell' },
            width: 35,
          },
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 50 },
          { field: 'GroupName', title: '@ContentStrings.GroupName', attributes: { 'class': 'title' } },
          { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' } },
          { field: 'SiteName', title: '@ContentStrings.ParentSiteName' },
          { field: 'Description', title: '@EntityObjectStrings.Description' },
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action(Model.GetDataAction, "Content", new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
            },
          },
          pageSize: @Default.GridPageSize,
        },
      });
    });
  </script>
  @*@(Html.Telerik().Grid<ContentListItem>().Name(Model.MainComponentId)
        .DataKeys(k => k.Add(s => s.Id))
        .Columns(c =>
            {
                c.Bound("")
                    .Title(@"<input type='checkbox' />")
                    .Width(30)
                    .HeaderHtmlAttributes(new { @class = "t-select-header" })
                    .ClientTemplate(@"<input type='checkbox' name='selectedContentIDs' value='<#= Id #>' />")
                    .HtmlAttributes(new { @class = "t-select-cell" })
                    .Sortable(false);

                c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
                    .Width(30)
                    .HtmlAttributes(new { @class = "id" });
                c.Bound(s => s.GroupName).Title(ContentStrings.GroupName);
                c.Bound(s => s.Name)
                    .Title(EntityObjectStrings.Name)
                    .HtmlAttributes(new { @class = "title" });

                c.Bound(s => s.SiteName).Title(ContentStrings.ParentSiteName);

                c.Bound(s => s.Description).Title(EntityObjectStrings.Description);

            })
        .DataBinding(db => db.Ajax()
            .Select(Model.GetDataAction, "Content")
        )
        .EnableCustomBinding(true)
        .Sortable()
        .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
        .Selectable(s => s.Enabled(true))
        .ClientEvents(e =>
            e
                .OnDataBinding("$q.preventDefaultFunction")
                .OnRowDataBound("$q.preventDefaultFunction")
        )
    )*@
}

@Html.PrepareAndRunInitScript(Model)
