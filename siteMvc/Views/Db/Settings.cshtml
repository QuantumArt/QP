@using Quantumart.QP8.BLL
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.DbViewModel

@using (Html.BeginTabForm(Model))
{
  using (Html.BeginFieldGroup(DBStrings.RecordActions))
  {
    @Html.CheckBoxFieldFor(s => s.Data.RecordActions, "OverridePanel")
    using (Html.BeginPanel("OverridePanel"))
    {
      if (Model.Data.SingleUserId != null && Model.Data.SingleUserId != QPContext.CurrentUserId)
      {
        @Html.CheckBoxFieldFor(s => s.OverrideRecordsUser)
      }

      @Html.CheckBoxFieldFor(s => s.OverrideRecordsFile)
    }

    <dl class="row">
      <dt class="label"></dt>
      <dd class="field">
        <span class="downloadRecords linkButton actionLink actionlink">
          <a href="javascript: void(0)" class="@(ViewBag.IsRecordAvailableForDownload ? string.Empty : "disabled")">
            <span class="icon download"><img src="Content/Common/0.gif" alt="download record"></span>
            <span class="text">@DBStrings.DownloadRecordedActions</span>
          </a>
        </span>
      </dd>
    </dl>

  }


  using (Html.BeginFieldGroup(DBStrings.ReplayActions))
  {
    <dl class="row">
      <dt class="label">@DBStrings.RecordedActionsXml:</dt>
      <dd class="field">
        <textarea class="recordedRecordsXmlArea textbox hta-XmlTextArea highlightedTextarea dropzone"></textarea>
      </dd>
    </dl>

    <dl class="row">
      <dt class="label"></dt>
      <dd class="field">
        <input class="generateNewFieldIds checkbox simple-checkbox" type="checkbox" value="true">
        <label>@DBStrings.GenerateNewFieldIds</label>
      </dd>
    </dl>

    <dl class="row">
      <dt class="label"></dt>
      <dd class="field">
        <input class="generateNewContentIds checkbox simple-checkbox" type="checkbox" value="true">
        <label>@DBStrings.GenerateNewContentIds</label>
      </dd>
    </dl>

    <dl class="row">
      <dt class="label"></dt>
      <dd class="field">
        <input class="useGuidSubstitution checkbox simple-checkbox" type="checkbox" value="true">
        <label>@DBStrings.UseGuidSubstitution</label>
      </dd>
    </dl>

    <dl class="row">
      <dt class="label"></dt>
      <dd class="field">
        <span class="replayRecords linkButton actionLink">
          <a href="javascript: void(0)">
            <span class="icon restore"><img src="Content/Common/0.gif" alt="replay record"></span>
            <span class="text">@DBStrings.ReplayActions</span>
          </a>
        </span>
      </dd>
    </dl>

  }

  using (Html.BeginFieldGroup(DBStrings.OtherSettings))
  {

    @Html.CheckBoxFieldFor(s => s.Data.AutoOpenHome)
    @Html.CheckBoxFieldFor(s => s.Data.UseAdSyncService)
    @Html.CheckBoxFieldFor(s => s.Data.UseTokens)
    @Html.CheckBoxFieldFor(s => s.Data.UseDpc)
    @Html.CheckBoxFieldFor(s => s.Data.UseCdc)

    @Html.AggregationListFieldFor(s => s.Data.AppSettings, Model.Data.AppSettings, "Key,Value")
  }

  @Html.Partial("Version", Model.Data)
	@Html.Partial("EntityDirectLink", Model)
}

<script type="text/html" id="@Html.UniqueId("Data_AppSettings_template")">
	<span data-bind="click: addItem">
    @Html.SimpleAddActionLink(DBStrings.AddAppSetting)
	</span>
	<table>
		<thead>
			<tr>
				<td/>
				<td>@DBStrings.Key</td>
				<td>@DBStrings.Value</td>
			</tr>
		</thead>
		<tbody data-bind ="foreach: items">
			<tr>
				<td data-bind="text: $index() + 1"></td>
				<td><input class="textbox" data-bind="value: Key, event: { change: $root.onItemChanged }, css: { 'input-validation-error': Invalid}"></td>
				<td><input class="textbox" data-bind="value: Value, event: { change: $root.onItemChanged }, css: { 'input-validation-error': Invalid}"></td>
        <td><img src="@Url.Content("~/Content/qp8/icons/16x16/delete.gif")" alt="delete" data-bind="click: $root.removeItem"/></td>
			</tr>
		</tbody>
	</table>
</script>

@Html.PrepareInitScript(Model)
<script>
  //# sourceURL=dbsettings.js
  var $editingForm = $("#@Model.UniqueId("editingForm")");
  @(Model.ContextObjectName).setInitializedCallback(function() {
    $editingForm.on('click', '.downloadRecords', function() {
      $c.downloadFile("@Url.Action("GetRecordedUserActions")");
    });

    $editingForm.on('click', '.downloadRecords .disabled', function(e) {
      e.preventDefault();
    });

    $editingForm.on('click', '.replayRecords', function() {
      $q.showLoader();
      $q.postAjax("@Url.Action("ReplayRecordedUserActions")", {
        xmlString: $editingForm.find('.recordedRecordsXmlArea').data('codeMirror').getValue(),
        generateNewFieldIds: $editingForm.find('.generateNewFieldIds').prop('checked'),
        generateNewContentIds: $editingForm.find('.generateNewContentIds').prop('checked'),
        useGuidSubstitution: $editingForm.find('.useGuidSubstitution').prop('checked')
      }, function(data, response) {
        $q.alertSuccess(response.message);
      });
    });
  });

  @(Model.ContextObjectName).setTerminatingCallback(function() {
    $editingForm.off('click');
  });
</script>
@Html.RunInitScript(Model)
