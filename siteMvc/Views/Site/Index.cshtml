@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.SiteListViewModel

@using (Html.BeginDocumentPadding())
{
    if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
    {
        using (Html.BeginLinkButtonsList())
        {
            @Html.AddNewItemLink(Model)
        }
    }

    @(Html.Telerik().Grid<SiteListItem>().Name(Model.MainComponentId)
        .DataKeys(k => k.Add(s => s.Id))
        .Columns(c =>
        {
            c.Bound("")
                .Title(@"<input type='checkbox' />")
                .Width(30)
                .HeaderHtmlAttributes(new { @class = "t-select-header" })
                .ClientTemplate(@"<input type='checkbox' name='SelectedSitesIDs' value='<#= Id #>' />")
                .HtmlAttributes(new { @class = "t-select-cell" })
                .Sortable(false);

            c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
                .Width(30)
                .HtmlAttributes(new { @class = "id" });
            c.Bound(s => s.IsLive)
                .Title("")
                .Width(30)
                .ClientTemplate(String.Format(Model.IconFormat, Url.GetThemeSmallIconsImageFolderUrl(), "site<#= IsLive #>.gif", ""))
                .HtmlAttributes(new { style = "text-align: center;" });
            c.Bound(s => s.LockedBy)
                .Title(String.Format("<img src=\"{0}\" style=\"width: 16px; height: 16px;\" class=\"t-image\" alt=\"\" />", Url.GetThemeRootImageFolderUrl() + "/grid/header_icons/lock.gif"))
                .Width(30)
                .HeaderHtmlAttributes(new { @class = "t-image-header" })
                .ClientTemplate(String.Format(Model.IconFormat, Url.GetThemeSmallIconsImageFolderUrl(), "<#= LockedByIcon #>", "<#= LockedByToolTip #>"))
                .HtmlAttributes(new { style = "text-align: center;" });
            c.Bound(s => s.Name)
                .Title(EntityObjectStrings.Name)
                .HtmlAttributes(new { @class = "title" });
            c.Bound(s => s.Description)
                .Title(EntityObjectStrings.Description);
            c.Bound(s => s.Dns)
                .Title(SiteStrings.Dns);
            c.Bound(s => s.UploadUrl)
                .Title(SiteStrings.UploadUrl);
            c.Bound(s => s.Created)
                .Title(EntityObjectStrings.Created);
            c.Bound(s => s.Modified)
                .Title(EntityObjectStrings.Modified);
            c.Bound(s => s.LastModifiedByUser)
                .Title(EntityObjectStrings.LastModifiedBy);
        })
        .DataBinding(db => db.Ajax().Select(Model.GettingDataActionName, "Site"))
        .EnableCustomBinding(true)
        .Sortable()
        .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
        .Selectable(s => s.Enabled(true))
        .ClientEvents(e => e
            .OnDataBinding("$q.preventDefaultFunction")
            .OnRowDataBound("$q.preventDefaultFunction")
        )
    )
}

@Html.PrepareAndRunInitScript(Model)

@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
