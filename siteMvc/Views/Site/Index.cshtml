@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Site.SiteListViewModel

@using (Html.BeginDocumentPadding())
{
  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }

  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
       var bodyIconTpl = function (settings) {
        return function () {
          return '<img ' +
            'src="' +
            '@Url.GetThemeSmallIconsImageFolderUrl()' + '/site' + settings.src + '.gif"' +
            'class="smallIcon"' +
            'title="' + (settings.title || settings.src) + '"'
            '/>';
        };
      };
      var headIconTpl = function (settings) {
        return function () {
          return '<img ' +
            'src="' +
            '@Url.GetThemeRootImageFolderUrl()' + settings.url + '"' +
            'style="width: 16px; height: 16px;"' +
            'class="t-image"' +
            'title="' + settings.title + '"' +
            'alt="' + (settings.alt || settings.title) + '"' +
            '/>';
        };
      };

       $('#@Model.MainComponentId').qpGrid({
         columns: [
           {
             field: '',
             headerTemplate: '<input type="checkbox" name="SelectHeader" value="" />',
             headerAttributes: { 'class': 't-select-header' },
             template: '<input type="checkbox" name="SelectedSitesIDs" value="#:Id#" />',
             sortable: false,
             attributes: { 'class': 't-select-cell' },
             width: 35
           },
           { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 30 },
           {
             field: 'IsLive',
             title: '@string.Empty',
             attributes: { 'class': 'isCentered' },
             width: 30,
             template: bodyIconTpl({ src: @Model.IconFormat }),
           },
           {
             field: 'LockedBy',
             headerTemplate: headIconTpl({ url: 'grid/header_icons/lock.gif', title: '@ArticleStrings.IsLockedHeaderTooltip' }),
             headerAttributes: { 'class': 't-image-header'},
             attributes: { 'class': 'isCentered' },
             width: 30,
             template: bodyIconTpl({ icon: '@FieldName.LockedByIcon', tooltip: '@FieldName.LockedByTooltip' }),
           },
           { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' } },
           { field: 'Description', title: '@EntityObjectStrings.Description' },
           { field: 'Dns', title: '@SiteStrings.Dns' },
           { field: 'UploadUrl', title: '@SiteStrings.UploadUrl' },
           { field: 'Created', title: '@EntityObjectStrings.Created' },
           { field: 'Modified', title: '@EntityObjectStrings.Modified' },
           { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy' }
         ],
         dataSource: {
           transport: {
             read: {
               url: "@Url.Action(Model.GettingDataActionName, "Site", new { tabId = Model.TabId, parentId = Model.ParentEntityId} )"
             }
           },
           pagesize: '@Default.GridPageSize',
         },
       });
    });
  </script>         
}

@Html.PrepareAndRunInitScript(Model)
