@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Site.SiteListViewModel

@using (Html.BeginDocumentPadding())
{
  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }

  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $('#@Model.MainComponentId').qpGrid({
        columns: [
          {
            field: '',
            headerTemplate: '<input type="checkbox" name="SelectHeader" value="" />',
            headerAttributes: { 'class': 't-select-header' },
            template: '<input type="checkbox" name="SelectedSitesIDs" value="#= Id #" />',
            sortable: false,
            attributes: { 'class': 't-select-cell' },
            width: 35
          },
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 30 },
          {
            field: 'IsLive',
            headerTemplate: '',
            attributes: { 'class': 'isCentered' },
            width: 30,
            template: '<img src="@Url.GetThemeSmallIconsImageFolderUrl()/site#= IsLive #.gif" title="" class="smallIcon" />',
          },
          {
            field: 'LockedBy',
            headerAttributes: { 'class': 't-image-header'},
            headerTemplate: '<img src="@Url.GetThemeRootImageFolderUrl()/grid/header_icons/lock.gif" style="width: 16px; height: 16px;" class="t-image" alt="" />',
            attributes: { 'class': 'isCentered' },
            template: '<img src="@Url.GetThemeSmallIconsImageFolderUrl()/#= LockedByIcon #" title="#= LockedByToolTip #" class="smallIcon" />',
            width: 30,
          },
          { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' } },
          { field: 'Description', title: '@EntityObjectStrings.Description' },
          { field: 'Dns', title: '@SiteStrings.Dns' },
          { field: 'UploadUrl', title: '@SiteStrings.UploadUrl' },
          { field: 'Created', title: '@EntityObjectStrings.Created' },
          { field: 'Modified', title: '@EntityObjectStrings.Modified' },
          { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy' }
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action(Model.GettingDataActionName, "Site", new { tabId = Model.TabId, parentId = Model.ParentEntityId, IDs = Model.SelectedIDs } )"
            }
          },
          pagesize: '@Default.GridPageSize',
        },
      });
    });
  </script>
}

@Html.PrepareAndRunInitScript(Model)
