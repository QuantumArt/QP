@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.PageTemplate.PageListViewModel

@using (Html.BeginDocumentPadding())
{
  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }

  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $('#@Model.MainComponentId').qpGrid({
        columns: [
          {
            field: '',
            headerTemplate: '<input type="checkbox" />',
            headerAttributes: { 'class': 't-select-header' },
            width: 30,
            template: '<input type="checkbox" name="SelectedNotificationsIDs" value="#= Id #" />',
            attributes: { 'class': 't-select-cell' },
            sortable: false,
          },
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 30 },
          {
            field: 'GenerateTrace',
            title: '',
            width: 15,
            template: '<img class="smallIcon" # if (GenerateTrace) { # src="@Url.Content("~/Content/qp8/icons/16x16/page1.gif")" # } else { # src="@Url.Content("~/Content/qp8/icons/16x16/page0.gif")" # } # />',
          },
          {
            field: 'LockedBy',
            headerTemplate: '<img src="@Url.GetThemeRootImageFolderUrl()/grid/header_icons/lock.gif" style="width: 16px; height: 16px;" class="t-image" alt="" />',
            headerAttributes: { 'class': 't-image-header' },
            width: 30,
            template: '<img src="@Url.GetThemeSmallIconsImageFolderUrl()/#= LockedByIcon #" title="#= LockedByToolTip #" class="smallIcon" />',
            attributes: { 'style': 'text-align: center;' },
          },
          {
            field: 'Reassemble',
            title: '',
            width: 15,
            template: '<img class="smallIcon" # if (Reassemble) { # src="@Url.Content("~/Content/qp8/icons/16x16/reassemble.gif")" # } # />',
          },
          { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' } },
          { field: 'FileName', title: '@TemplateStrings.FileName' },
          { field: 'Folder', title: '@TemplateStrings.Folder' },
          { field: 'Description', title: '@EntityObjectStrings.Description' },
          { field: 'Created', title: '@NotificationStrings.ForCreate' },
          { field: 'Modified', title: '@NotificationStrings.ForModify' },
          { field: 'LastModifiedByLogin', title: '@EntityObjectStrings.LastModifiedBy' },
          { field: 'Assembled', title: '@TemplateStrings.Assembled' },
        ],
        dataSource: {
          transport: {
            read: {
              url: '@Url.Action(Model.GettingDataActionName, "Page", new { tabId = Model.TabId, parentId = Model.ParentEntityId } )',
            },
          },
          pageSize: @Default.GridPageSize,
        },
      });
    });
  </script>
}

@Html.PrepareAndRunInitScript(Model)
