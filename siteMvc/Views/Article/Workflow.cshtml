@using Quantumart.QP8.Resources
@using Quantumart.QP8.Constants
@model Quantumart.QP8.WebMvc.ViewModels.Article.ArticleViewModel

@using (Html.BeginFieldGroup(ArticleStrings.WorkflowGroup))
{

  if (Model.Data.CollaborativePublishedArticle != 0 && Model.Data.ParentContentId != 0)
  {
    @Html.CheckboxListFieldFor(
                     model => model.CheckedCollaborativeArticle,
                     Html.List(Model.CollaborativePublishedArticlesList),
                     new EntityDataListArgs { MaxListHeight = 200,
                                          EntityTypeCode = EntityTypeCode.Article,
                                          ParentEntityId = Model.Data.ParentContentId,
                                          ReadActionCode = ActionCode.EditArticle,
                                          ListId = -1 * DateTime.Now.Millisecond,
                                          ShowIds = true },
                 new Dictionary<string, object> { { "id", Model.UniqueId("CollaborativePublishing") } }
                 )

  }

  if (Model.Data.Workflow.IsAssigned && Model.Data.IsUpdatableWithWorkflow)
  {
    if (Model.Data.Workflow.Workflow.UseDirectionControls)
    {
      @Html.RadioFieldFor(s => s.Data.Direction, Html.List(Model.DirectionTypes),
        options: new ControlOptions
        {
          HtmlAttributes = new Dictionary<string, object> {{ "class", "workflowDirections" }}
        })
    }

    using (Html.BeginPanel("statusPanel", !Model.Data.Workflow.Workflow.UseDirectionControls, false))
    {
      @Html.SelectFieldFor(s => s.Data.StatusTypeId, Html.List(Model.AvailableStatuses))
    }

    using (Html.BeginPanel("cancelSplitPanel"))
    {
      @Html.CheckBoxFieldFor(s => s.Data.CancelSplit, "cancelSplitWarningPanel")

      using (Html.BeginPanel("cancelSplitWarningPanel"))
      {
        @Html.Warning(Html.Raw(ArticleStrings.CancelSplitWarning));
      }
    }

    using (Html.BeginPanel("maxStatusPanel"))
    {
      @Html.CheckBoxFieldFor(s => s.Data.Delayed, "delayedPanel")
      using (Html.BeginPanel("delayedPanel", true))
      {
        @Html.DateTimeFieldFor(s => s.Data.Schedule.PublicationDate)
      }

    }
    if (Model.Data.StatusHistoryListItem != null)
    {
      @Html.HtmlFieldFor(s => s.Data.StatusHistoryListItem.Comment,
                      @<div>
                        (@Html.DisplayTextFor(s => s.Data.StatusHistoryListItem.ActionDate) - @Html.DisplayTextFor(s => s.Data.StatusHistoryListItem.ActionMadeBy))
                        @Html.DisplayTextFor(s => s.Data.StatusHistoryListItem.Comment)
                      </div>
                                                                 )
    }
    using (Html.BeginPanel("comment"))
    {
      @Html.HtmlFieldFor(s => s.Data.Comment,
                          @<div class="qp-expandedContent">
                            @Html.QpTextAreaFor(s => s.Data.Comment, new Dictionary<string, object> { { "class", "textbox" } })
                          </div>
                                                                     )}

  }
  else
  {
    @Html.DisplayField("StatusTypeId", ArticleStrings.Status, Model.Data.Status.Name)
  }



}
