@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Article.ArticleViewModel

@if (!Model.Data.IsUpdatableWithWorkflow)
{
    @Html.Warning(Html.Raw(Model.WorkflowWarning))
}

@if (Model.Data.ViewType == ArticleViewType.ReadOnlyBecauseOfRelationSecurity)
{
    @Html.Warning(Html.Raw(Model.RelationSecurityWarning))
}

@using (Html.BeginTabForm(Model))
{
  if (Model.ShowLockInfo)
  {
    <partial name="Locking" model="@Model" />
  }

  if (Model.Data.UseVariations)
  {
    using (Html.BeginFieldGroup(ArticleStrings.VariationGroup))
    {
            <div class="variationInfo">
              <div class="variationInfoItem currentInfo"></div>
              <div class="variationInfoItem totalInfo">@Html.Raw(ArticleStrings.TotalVariationsMessage)</div>
              <div style="display:none" class="variationInfoItem removeItem">@Html.Raw(Model.RemoveVariationCode)</div>
            </div>
    }
  }

  using (Html.BeginFieldGroup(ArticleStrings.CustomFieldsGroup))
  {
    if (Model.Data.UseVariations)
    {
            @Html.HiddenFor(n => n.VariationModel, new { id = Html.UniqueId("VariationModel"), @class = "variationModel textbox simple-text" })
            @Html.HiddenFor(n => n.CurrentContext, new { id = Html.UniqueId("CurrentContext"), @class = "currentContext qp-notChangeTrack textbox simple-text" })
            @Html.HiddenFor(n => n.ContextModel, new { id = Html.UniqueId("ContextModel"), @class = "contextModel qp-notChangeTrack" })
            @Html.HiddenFor(n => n.ErrorModel, new { id = Html.UniqueId("ErrorModel"), @class = "errorModel qp-notChangeTrack textbox simple-text" })
    }

    foreach (var pair in Model.Data.VariationEditableFieldValues)
    {
            @Html.Field(pair, forceReadonly: Model.IsChangingActionsProhibited)
    }
  }

  using (Html.BeginFieldGroup(ArticleStrings.UniqueId))
  {
        @Html.TextBoxField(s => s.Data.UniqueId, Model.Data.UniqueIdStr, Model.IsReadOnly)
  }

  if (!Model.IsReadOnly)
  {
    <partial name="Schedule" model="@Model" />
    <partial name="Workflow" model="@Model" />
  }

  <partial name="Version" model="@Model.Data" />
    <partial name="EntityDirectLink" model="@Model" />
}

@Html.PrepareInitScript(Model)
@Html.CustomScript(Model.Data.Content.Site.ContentFormScript, Model.ContextObjectName)
@Html.CustomScript(Model.Data.Content.FormScript, Model.ContextObjectName)
@foreach (var aggrArticle in Model.Data.AggregatedArticles)
{
    @Html.CustomScript(aggrArticle.Content.FormScript, Model.ContextObjectName)
}
<script>
  var $editingForm = $("#@Model.UniqueId("editingForm")");
  @(Model.ContextObjectName).setInitializedCallback(function() {
    $(".workflowDirections input[type='radio']", $editingForm).click(function (e) {
      const value = $(e.currentTarget).val();
      const currentStatus = $("dl[data-field_form_name='StatusTypeId'] span", $editingForm).text();
      const $a = $("select[name='Data.StatusTypeId']", $editingForm)
      let targetValue = 0;
      if (value === 'Forwards') {
        targetValue = $a.children("option:last").val();

      } else if (value === 'Backwards') {
        $a.children("option").each(function (index, elem) {
          if ($(elem).text() === currentStatus) { return false; }
          targetValue = $(elem).val();
        })
      } else {
        targetValue = $("option").filter(function() {
          return $(this).text() === currentStatus;
        }).first().attr("value");
      }
      if (targetValue) { $a.val(targetValue); }
    });
	});

	@(Model.ContextObjectName).setTerminatingCallback(function() {
    $(".workflowDirections input[type='radio']", $editingForm).unbind();
	});
</script>
@Html.RunInitScript(Model)
