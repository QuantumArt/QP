@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.EntityPermissions.PermissionListViewModel

@using (Html.BeginDocumentPadding())
{
  if (Model.ShowDisableArticlePermissionForContentWarning)
  {
    @Html.Warning(
      Html.Raw(EntityPermissionStrings.ContentArticlePermissionIsDisabled),
      Html.BackendActionLink(
      Model.UniqueId("eapActionLink"),
      EntityPermissionStrings.EnableContentArticlePermissionAction,
      Model.ParentArticle.ContentId,
      string.Empty,
      0,
      ActionTypeCode.SimpleUpdate,
      ActionCode.EnableArticlesPermissions
      )
    )
  }

  if (Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }

  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $('#@Model.MainComponentId').qpGrid({
        columns: [
          {
            field: '',
            headerTemplate: '<input type="checkbox" name="SelectHeader" value="" />',
            headerAttributes: { 'class': 't-select-header' },
            template: '<input type="checkbox" name="SelectedSitePermissionIDs" value="#= Id #" />',
            sortable: false,
            attributes: { 'class': 't-select-cell' },
            width: 35,
          },
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 50 },
          { field: 'UserLogin', title: '@EntityPermissionStrings.User' },
          { field: 'GroupName', title: '@EntityPermissionStrings.Group' },
          { field: 'LevelName', title: '@EntityPermissionStrings.PermissionLevel' },
          @if (Model.IsPropagateable) {
            <text>
              {
                field: 'PropagateToItems',
                title: '@EntityPermissionStrings.PropagateToItems',
                template: '<input type="checkbox" disabled="disabled" # if (PropagateToItems) { # checked="checked" # } # />',
                attributes: { 'class': 'isCentered' },
                headerAttributes: { 'class': 'isCentered' },
              },
            </text>
          }
          @if (Model.CanHide)
          {
            <text>
              {
                field: 'Hide',
                title: '@EntityPermissionStrings.Hide',
                template: '<input type="checkbox" disabled="disabled" # if (Hide) { # checked="checked" # } # />',
                attributes: { 'class': 'isCentered' },
                headerAttributes: { 'class': 'isCentered' },
              },
            </text>
          }
          { field: 'Created', title: '@EntityObjectStrings.Created' },
          { field: 'Modified', title: '@EntityObjectStrings.Modified' },
          { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy' },
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action(Model.GettingDataActionName, Model.GettingDataControllerName, new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
            },
          },
          pageSize: @Default.GridPageSize,
        },
        class: 'pep-grid',
      })
    });
  </script>
}

@Html.PrepareAndRunInitScript(Model)
