@using Quantumart.QP8.Resources
@using Quantumart.QP8.WebMvc.ViewModels
@model Quantumart.QP8.WebMvc.ViewModels.MultistepSettings.ImportViewModel

@using (Html.BeginTabForm(Model))
{
  using (Html.BeginFieldGroup(MultistepActionStrings.SelectFile))
  {
    if (Model.UploaderType == UploaderType.Silverlight && Model.AllowUpload)
    {
      <div id="@Html.UniqueId("silverlightUploader")" class='l-sl-uploader'></div>
    }
    else if (Model.UploaderType == UploaderType.Html && Model.AllowUpload)
    {
      <div class="l-html-uploader">
        @(Html.Telerik().Upload()
          .Name(Html.UniqueId("mvcUploader"))
          .Async(async => async.Save("UploadFile", "Library"))
          .Multiple(true)
          .ShowFileList(false)
        )
      </div>
    }
    else if (Model.UploaderType == UploaderType.PlUpload && Model.AllowUpload)
    {
      <div class="l-pl-uploader-container" id="@Html.UniqueId("upload_pl_cont_import")" style="display:inline-block;margin-bottom:10px">
        <div id="@Html.UniqueId("upload_pl_import_btn")" class="pl_upload_button" style="display:inline-block; vertical-align: baseline;">
          <input type="button" value="@LibraryStrings.Upload" />
        </div>
        <div class="lop-pbar-container" style="display: none; vertical-align: middle; margin-bottom: 5px;">
          <div class="lop-pbar"></div>
        </div>
      </div>

      @Html.TextBoxFieldFor(model => model.FileName, new Dictionary<string, object> { { "disabled", "disabled" } })
      @Html.HiddenFor(model => model.FileName)
    }

    @Html.CheckBoxFieldFor(model => model.NoHeaders, string.Empty, false, new Dictionary<string, object> { { "class", "noPaddingForCheckbox" } })
  }

  using (Html.BeginFieldGroup(TemplateStrings.RegionalAndLanguageSettings))
  {
    @Html.SelectFieldFor(model => model.Encoding, Html.List(Model.Charsets))
    @Html.SelectFieldFor(model => model.Culture, Html.List(Model.Locales))
  }

  using (Html.BeginFieldGroup(MultistepActionStrings.SelectDelimiter))
  {
    @Html.RadioFieldFor(s => s.Delimiter, Html.List(Model.Delimiters))
    @Html.SelectFieldFor(s => s.LineSeparator, Html.List(Model.LineSeparators))
  }

  using (Html.BeginFieldGroup(MultistepActionStrings.SettingsOnInsert))
  {
    @Html.SelectFieldFor(model => model.ImportAction, Html.List(Model.ImportActions))
    @Html.SelectFieldFor(model => model.UniqueFieldToUpdate, new List<QPSelectListItem>(), new Dictionary<string, object> { { "class", "dropDownList dataList fields" } }, required: true)
    if (Model.UniqueContentFieldsToUpdate.Count > 1)
    {
      @Html.SelectFieldFor(model => model.UniqueContentFieldId, Html.List(Model.UniqueContentFieldsToUpdate), new Dictionary<string, object> { { "class", "dropDownList dataList" } })
    }
  }

  <div id="@Html.UniqueId("mapping_fields_selects")" style="display:none;">
    @Html.Partial("~/Views/Shared/MultistepSettingsTemplates/_ImportFieldGroupTemplate.cshtml", Model.FieldGroup)
  </div>
}
