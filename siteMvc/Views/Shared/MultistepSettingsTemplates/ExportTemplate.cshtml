@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.MultistepSettings.ExportViewModel

@using (Html.BeginTabForm(Model))
{
    using (Html.BeginFieldGroup(TemplateStrings.RegionalAndLanguageSettings))
    {
        @Html.SelectFieldFor(m => m.Encoding, Html.List(Model.Charsets))
        @Html.SelectFieldFor(m => m.Culture, Html.List(Model.Locales))
    }

    using (Html.BeginFieldGroup(MultistepActionStrings.FormatSettings))
    {
        @Html.RadioFieldFor(m => m.Delimiter, Html.List(Model.Delimiters))
        @Html.SelectFieldFor(m => m.LineSeparator, Html.List(Model.LineSeparators))
        @Html.SelectFieldFor(m => m.OrderByField, Html.List(Model.Fields))
        if (Model.Ids != null)
        {
          <input id="@Html.UniqueId("idsToExport")" data-ids="@string.Join(",", Model.Ids)" hidden="hidden" />
        }
    }

    using (Html.BeginFieldGroup(ImportStrings.SelectFields))
    {
        EntityDataListArgs entityData;
        @Html.CheckBoxFieldFor(s => s.AllFields, "SelectFields", true)
        using (Html.BeginPanel("SelectFields"))
        {
            entityData = new EntityDataListArgs
            {
                EntityTypeCode = EntityTypeCode.Field,
                ParentEntityId = Model.ContentId,
                SelectActionCode = ActionCode.MultipleSelectFieldForExport,
                ListId = -1 * DateTime.Now.Millisecond,
                MaxListHeight = 200,
                MaxListWidth = 350,
                EnableCopy = false,
                ShowIds = true
            };

            @Html.CheckBoxFieldFor(m => m.ExcludeSystemFields)
            @Html.MultipleItemPickerFieldFor(m => m.CustomFields, Model.GetList(Model.CustomFields), entityData, new Dictionary<string, object> { { "id", Model.CustomFieldsElementId } })
        }

        entityData = new EntityDataListArgs
        {
            EntityTypeCode = EntityTypeCode.Field,
            ParentEntityId = Model.ContentId,
            SelectActionCode = ActionCode.MultipleSelectFieldForExportExpanded,
            ListId = -2 * DateTime.Now.Millisecond,
            MaxListHeight = 200,
            MaxListWidth = 350,
            EnableCopy = false,
            ShowIds = true
        };

        @Html.MultipleItemPickerFieldFor(m => m.FieldsToExpand, Model.GetList(Model.FieldsToExpand), entityData, new Dictionary<string, object> { { "id", Model.FieldsToExpandElementId } })
    }
}
