@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.EntityPermissions.ChildEntityPermissionListViewModel

@using (Html.BeginDocumentPadding())
{
	using (Html.BeginLinkButtonsList())
	{
		if (Model.ShowParentPermissionButton)
		{ 			
			@Html.ParentPermissionLink(Model)
		}
        @Html.UnselectLink(Model)
	}
	
	<div id="@Model.SearchBlockId" class="alMainContaner">
		@Html.Partial("UserAndGroupSearchBlock", Model)		

		@(Html.Telerik().Grid<ChildEntityPermissionListItem>().Name(Model.MainComponentId)
            .DataKeys(k => k.Add(s => s.Id))
            .Columns(c =>
            {
                c.Bound("")
                    .Title(@"<input type='checkbox' />")
                    .Width(30)
                    .HeaderHtmlAttributes(new { @class = "t-select-header" })
                    .ClientTemplate(@"<input type='checkbox' name='SelectedSitePermissionIDs' value='<#= Id #>' />")
                    .HtmlAttributes(new { @class = "t-select-cell" })
                    .Sortable(false);

                c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
                       .Width(30)
                       .HtmlAttributes(new { @class = "id" });

                c.Bound(s => s.Title).Title(EntityPermissionStrings.ParentEntityTitle);
                c.Bound(s => s.LevelName).Title(EntityPermissionStrings.PermissionLevel);

                c.Bound(s => s.IsExplicit)
                    .ClientTemplate(@"<input type=""checkbox"" disabled=""disabled"" <# if (IsExplicit)  { #> checked=""checked"" <# } #>/>")
                    .Title(EntityPermissionStrings.IsExplicit);

                if (Model.IsPropagateable)
                {
                    c.Bound(s => s.PropagateToItems)
                        .ClientTemplate(@"<input type=""checkbox"" disabled=""disabled"" <# if (PropagateToItems)  { #> checked=""checked"" <# } #>/>")
                        .Title(EntityPermissionStrings.PropagateToItems);
                }

                if (Model.CanHide)
                {
                    c.Bound(s => s.Hide)
                        .ClientTemplate(@"<input type=""checkbox"" disabled=""disabled"" <# if (Hide)  { #> checked=""checked"" <# } #>/>")
                        .Title(EntityPermissionStrings.Hide);
                }

            })
            .DataBinding(db => db.Ajax()
                    .Select(Model.GettingDataActionName, Model.GettingDataControllerName)
            )
            .EnableCustomBinding(true)
            .Sortable()
            .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
            .Selectable(s => s.Enabled(true))
            .ClientEvents(e =>
                e.OnDataBinding("$q.preventDefaultFunction")
                 .OnRowDataBound("$q.preventDefaultFunction")
            )
            .HtmlAttributes(new { @class = "pep-grid" })
		)		
	</div>
}

@Html.PrepareInitScript(Model)
<script type="text/javascript">
	@(Model.ContextObjectName).setInitializedCallback(function() {
		this.mediatorComponent = new Quantumart.QP8.BackendChildEntityPermissionList("@Model.SearchBlockId");
		this.modifyEventArgsContext = this.mediatorComponent.modifyEventArgsContext;		
	});
	@(Model.ContextObjectName).setTerminatingCallback(function() {								
		this.mediatorComponent.dispose();
		this.mediatorComponent = null;
	});
</script>
@Html.RunInitScript(Model)

@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
