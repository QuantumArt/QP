@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.EntityPermissions.ChildEntityPermissionListViewModel

@using (Html.BeginDocumentPadding())
{
  using (Html.BeginLinkButtonsList())
  {
    if (Model.ShowParentPermissionButton)
    {
      @Html.ParentPermissionLink(Model)
    }
    @Html.UnselectLink(Model)
  }

<div id="@Model.SearchBlockId" class="alMainContaner">
  @Html.Partial("UserAndGroupSearchBlock", Model)
  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $('#@Model.MainComponentId').qpGrid({
        columns: [
          {
            field: '',
            headerTemplate: '<input type="checkbox" name="SelectHeader" value="" />',
            headerAttributes: { 'class': 't-select-header' },
            template: '<input type="checkbox" name="SelectedSitePermissionIDs" value="#:Id#" />',
            sortable: false,
            attributes: { 'class': 't-select-cell' },
            width: 35,
          },
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 50 },
          { field: 'Title', title: '@EntityPermissionStrings.ParentEntityTitle' },
          { field: 'LevelName', title: '@EntityPermissionStrings.PermissionLevel', attributes: { 'class': 'isCentered' }, headerAttributes: { 'class': 'isCentered' } },
          {
            field: 'IsExplicit',
            title: '@EntityPermissionStrings.IsExplicit',
            template: '<input type="checkbox" disabled="disabled" checked="#:IsExplicit#" />',
            attributes: { 'class': 'isCentered' },
            headerAttributes: { 'class': 'isCentered' },
          },
          @if (Model.IsPropagateable) {
            <text>
              {
                field: 'PropagateToItems',
                title: '@EntityPermissionStrings.PropagateToItems',
                template: '<input type="checkbox" disabled="disabled" checked="#:PropagateToItems#" />',
                attributes: { 'class': 'isCentered' },
                headerAttributes: { 'class': 'isCentered' },
              },
            </text>
          }
          @if (Model.CanHide)
          {
            <text>
              {
                field: 'Hide',
                title: '@EntityPermissionStrings.Hide',
                template: '<input type="checkbox" disabled="disabled" value="#:Hide#" />',
                attributes: { 'class': 'isCentered' },
                headerAttributes: { 'class': 'isCentered' },
              },
            </text>
          }
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action(Model.GettingDataActionName, Model.GettingDataControllerName, new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
            },
          },
          pageSize: @Default.GridPageSize,
        },
        class: 'pep-grid',
      })
    });
  </script>
</div>
}

@Html.PrepareInitScript(Model)
<script type="text/javascript">
  @(Model.ContextObjectName).setInitializedCallback(function () {
    console.log('setInitializedCallback');
    this.mediatorComponent = new Quantumart.QP8.BackendChildEntityPermissionList('@Model.SearchBlockId', '@Model.MainComponentId');
    this.modifyEventArgsContext = this.mediatorComponent.modifyEventArgsContext;
  });
  @(Model.ContextObjectName).setTerminatingCallback(function() {
    this.mediatorComponent.dispose();
    this.mediatorComponent = null;
  });
</script>
@Html.RunInitScript(Model)
