@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.CustomAction.CustomActionViewModel

@using (Html.BeginTabForm(Model))
{ 
	using (Html.BeginFieldGroup(CustomActionStrings.BasicParametersTitle))
	{
		@Html.TextBoxFieldFor(s => s.Data.Name)
		@Html.TextAreaFieldFor(s => s.Data.Description)

		@Html.SelectFieldFor(model => model.CustomActionTypeId, Html.List(Model.ActionTypeList), new SelectOptions {DefaultOption = CustomActionStrings.DefaultActionTypeOption})
		@Html.SelectFieldFor(model => model.CustomActionEntityTypeId, Html.List(Model.EntityTypeList), 
			new Dictionary<string, object> { { "id", Model.CustomActionEntityTypesElementId } },
			new SelectOptions {DefaultOption = CustomActionStrings.DefaultEntityTypeOption}
		)

		using(Html.BeginPanel("siteSelectionModePanel"))
		{
			@Html.RadioFieldFor(model => model.SiteSelectionMode, Html.List(Model.SiteSelectionModes))
		  @Html.MultipleItemPickerFieldFor(model => model.SelectedSiteIDs, Model.SelectedSiteListItems, new EntityDataListArgs
		  {
		    EntityTypeCode = EntityTypeCode.Site,
		    ParentEntityId = 0,
		    SelectActionCode = ActionCode.MultipleSelectSites,
		    ListId = -1 * DateTime.Now.Millisecond,
		    MaxListHeight = 200,
		    MaxListWidth = 350
		  })
		}

		using (Html.BeginPanel("contentSelectionModePanel"))
		{ 
			@Html.RadioFieldFor(model => model.ContentSelectionMode, Html.List(Model.ContentSelectionModes))
		  @Html.MultipleItemPickerFieldFor(model => model.SelectedContentIDs, Model.SelectedContentListItems, new EntityDataListArgs
		  {
		    EntityTypeCode = EntityTypeCode.Content,
		    ParentEntityId = 0,
		    SelectActionCode = ActionCode.MultipleSelectContentForCustomAction,
		    ListId = -1 * DateTime.Now.Millisecond,
		    MaxListHeight = 200,
		    MaxListWidth = 350
		  }, new Dictionary<string, object> { { "id", Model.ContentsElementId } })
		}
		
		@Html.TextBoxFieldFor(model => model.Data.Url)
		@Html.TextBoxFieldFor(model => model.Data.IconUrl)

		@Html.NumericFieldFor(model => model.Order)

		@Html.CheckBoxFieldFor(model => model.Data.ShowInMenu);
		
		@Html.CheckBoxFieldFor(model => model.Data.ShowInToolbar, "showOnToolbarForActionsPanel")
		using (Html.BeginPanel("showOnToolbarForActionsPanel"))
		{ 			
			@Html.CheckboxListFieldFor(model => model.SelectedActions, Enumerable.Empty<QPSelectListItem>(), new EntityDataListArgs { MaxListHeight = 200 }, new Dictionary<string, object> { { "id", Model.ToolbarButtonParentActionsElementId } })
		}
		
		@Html.CheckBoxFieldFor(model => model.Data.Action.IsInterface, htmlAttributes: new Dictionary<string, object> { { "id", Model.IsInterfaceElementId } })
		using (Html.BeginPanel(Model.ActionWindowPanelElementId, Model.Data.Action.IsInterface, true))
		{ 
			@Html.CheckBoxFieldFor(model => model.Data.Action.IsWindow, "actionWindowSizePanel")
			using (Html.BeginPanel("actionWindowSizePanel"))
			{ 
				@Html.NumericFieldFor(model => model.Data.Action.WindowWidth)
				@Html.NumericFieldFor(model => model.Data.Action.WindowHeight)
			}
		}
		using (Html.BeginPanel(Model.PreActionPanelElementId, !Model.Data.Action.IsInterface, true))
		{ 
			@Html.TextBoxFieldFor(model => model.Data.Action.ConfirmPhrase)
			@Html.CheckBoxFieldFor(model => model.Data.Action.HasPreAction)
		}
	}
			
	@Html.Partial("Version", Model.Data)
	@Html.Partial("EntityDirectLink", Model)

}

@Html.PrepareInitScript(Model)
<script type="text/javascript">		
	@(Model.ContextObjectName).setInitializedCallback(function() {				
		this.customActionEntityTypesObserver = new Quantumart.QP8.CustomActionEntityTypesObserver("@Model.CustomActionEntityTypesElementId", "@Model.ToolbarButtonParentActionsElementId", "@Model.ContentsElementId");
		this.customActionEntityTypesObserver.updateActionList("@Model.SelectedActionsString");		

		this.isInterfaceSelectorObserver = new Quantumart.QP8.CustomActionIsInterfaceSelectorObserver("@Model.IsInterfaceElementId", "@Model.ActionWindowPanelElementId", "@Model.PreActionPanelElementId");		
		this.isInterfaceSelectorObserver.show();
	});	
	@(Model.ContextObjectName).setTerminatingCallback(function() {								
		this.customActionEntityTypesObserver.dispose();
		this.customActionEntityTypesObserver = null;

		this.isInterfaceSelectorObserver.dispose();
		this.isInterfaceSelectorObserver = null;
	});
</script>
@Html.RunInitScript(Model)
@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
