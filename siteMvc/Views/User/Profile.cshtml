@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.User.ProfileViewModel

@using (Html.BeginTabForm(Model))
{
    using (Html.BeginFieldGroup(UserStrings.ProfileData))
    {
        @Html.TextBoxFieldFor(n => n.Data.FirstName)
        @Html.TextBoxFieldFor(n => n.Data.LastName)
        @Html.TextBoxFieldFor(n => n.Data.Email)
        @Html.SelectFieldFor(n => n.Data.LanguageId, Html.List(Model.AvailableLanguages))
        @Html.PasswordFieldFor(n => n.Data.NewPassword)
        @Html.PasswordFieldFor(n => n.Data.NewPasswordCopy)
    }

    <partial name="ContentDefaultFilters" model="@Model" />

    using (Html.BeginFieldGroup(UserStrings.ViewSettings))
    {
        @Html.CheckBoxFieldFor(n => n.Data.EnableContentGroupingInTree)

      <dl class="row">
        <dt class="label"></dt>
        <dd class="field">
          <span class="allowNotifications linkButton actionLink">
            <a href="javascript: void(0)">
              <span class="icon expandParents"><img src="Static/Common/0.gif" alt="allow push notifications"></span>
              <span class="text">@DBStrings.AllowNotifications</span>
            </a>
          </span>
        </dd>
      </dl>
    }
}

@Html.PrepareInitScript(Model)
<script type="text/javascript">
  var $editingForm = $("#@Model.UniqueId("editingForm")");
	@(Model.ContextObjectName).setInitializedCallback(function() {
	  this.contentDefaultFiltersMediator = new Quantumart.QP8.ContentDefaultFiltersMediator("@Model.ContentFilterElementId");

    $editingForm.on('click', '.allowNotifications', function() {
      if (!("Notification" in window)) {
         console.warn("This browser does not support desktop notification");
      }

      else if (Notification.permission === "granted") {
         console.info("Notification permission granted");
      }

      else if (Notification.permission !== 'denied') {
        Notification.requestPermission(function (permission) {
          if (permission === "granted") {
            console.info("Notification permission granted");
          } else {
             console.warn("Notification permission not granted");
          }
        });
      }
    });

	});

  @(Model.ContextObjectName).setHostLoadedCallback(function() {
    if(this.contentDefaultFiltersMediator){
      this.contentDefaultFiltersMediator.initialize();
    }
  });

  @(Model.ContextObjectName).setTerminatingCallback(function() {
    if(this.contentDefaultFiltersMediator){
      this.contentDefaultFiltersMediator.dispose();
    }
    $editingForm.off('click')
  });
</script>
@Html.RunInitScript(Model)
