@using Quantumart.QP8.BLL.Services.DTO
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.User.UserSelectableListViewModel

@using (Html.BeginDocumentPadding())
{
    @(Html.Telerik().Grid<UserListItem>().Name(Model.MainComponentId)
        .DataKeys(k => k.Add(s => s.Id))
        .Columns(c =>
        {
            if (Model.IsMultiple)
            {
                c.Bound("")
                        .Title(@"<input type='checkbox' />")
                        .Width(30)
                        .HeaderHtmlAttributes(new { @class = "t-select-header" })
                        .ClientTemplate(@"<input type='checkbox' name='selectedUserIDs' value='<#= Id #>' />")
                        .HtmlAttributes(new { @class = "t-select-cell" })
                        .Sortable(false);
            }

            c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
                   .Width(30)
                   .HtmlAttributes(new { @class = "id" });

            c.Bound(s => s.Disabled)
                    .Title("")
                    .Width(30)
                    .ClientTemplate(string.Format(Model.IconFormat, Url.GetThemeSmallIconsImageFolderUrl(), "<#= DisabledIcon #>", "<#= DisabledText #>"))
                    .HtmlAttributes(new { style = "text-align: center;" });

            c.Bound(s => s.Login).Title(UserStrings.Login);
            c.Bound(s => s.FirstName).Title(UserStrings.FirstName);
            c.Bound(s => s.LastName).Title(UserStrings.LastName);
            c.Bound(s => s.Email).Title(UserStrings.Email);

        })
        .DataBinding(db => db.Ajax()
                .Select(Model.GettingDataActionName, "User")
        )
        .EnableCustomBinding(true)
        .Sortable()
        .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
        .Selectable(s => s.Enabled(true))
        .ClientEvents(e =>
            e.OnDataBinding("$q.preventDefaultFunction")
             .OnRowDataBound("$q.preventDefaultFunction")
        )
    )
}

@Html.PrepareAndRunInitScript(Model)

@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
