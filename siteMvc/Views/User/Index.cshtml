@using Quantumart.QP8.BLL.Services.DTO
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.User.UserListViewModel

@using (Html.BeginDocumentPadding())
{
  if (Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }
  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      var bodyIconTpl = function (settings) {
        return function (dataItem) {
          return '<img ' +
            'src="' +
            '@Url.GetThemeSmallIconsImageFolderUrl()' + dataItem[settings.icon] + '"' +
            'style="width: 16px; height: 16px;"' +
            'class="t-image"' +
            'title="' + (dataItem[settings.tooltip] || dataItem[settings.icon]) + '"' +
            'alt="' + (dataItem[settings.tooltip] || dataItem[settings.icon]) + '"' +
            '/>';
        };
      };
      $(`#${'@Model.MainComponentId'}`).qpGrid({
        columns: [
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 50 },
          {
            field: 'Disabled',
            title: ' ',
            template: bodyIconTpl({ icon: 'DisabledIcon', tooltip: 'DisabledText' }),
            attributes: { 'class': 'isCentered' },
            width: 50
          },
          { field: 'Login', title: '@UserStrings.Login', attributes: { 'class': 'title' } },
          { field: 'FirstName', title: '@UserStrings.FirstName' },
          { field: 'LastName', title: '@UserStrings.LastName' },
          { field: 'Email', title: '@UserStrings.Email' },
          { field: 'Language', title: '@UserStrings.Language' },
          { field: 'LastLogOn', title: '@UserStrings.LastLogOn' },
          { field: 'Created', title: '@EntityObjectStrings.Created' },
          { field: 'Modified', title: '@EntityObjectStrings.Modified' },
          { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy' },
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action(Model.GettingDataActionName, "User", new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
            },
          },
          pageSize: @Default.GridPageSize,
        },
      });
    });
  </script>

  @*@(Html.Telerik().Grid<UserListItem>().Name(Model.MainComponentId)
            .DataKeys(k => k.Add(s => s.Id))
            .Columns(c =>
            {
              c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
             .Width(30)
             .HtmlAttributes(new { @class = "id" });

              c.Bound(s => s.Disabled)
              .Title("")
              .Width(30)
              .ClientTemplate(string.Format(Model.IconFormat, Url.GetThemeSmallIconsImageFolderUrl(), "<#= DisabledIcon #>", "<#= DisabledText #>"))
              .HtmlAttributes(new { style = "text-align: center;" });

              c.Bound(s => s.Login).Title(UserStrings.Login)
          .HtmlAttributes(new { @class = "title" });

              c.Bound(s => s.FirstName).Title(UserStrings.FirstName);
              c.Bound(s => s.LastName).Title(UserStrings.LastName);
              c.Bound(s => s.Email).Title(UserStrings.Email);
              c.Bound(s => s.Language).Title(UserStrings.Language);
              c.Bound(s => s.LastLogOn).Title(UserStrings.LastLogOn);


              c.Bound(s => s.Created).Title(EntityObjectStrings.Created);
              c.Bound(s => s.Modified).Title(EntityObjectStrings.Modified);
              c.Bound(s => s.LastModifiedByUser).Title(EntityObjectStrings.LastModifiedBy);
            })
            .DataBinding(db => db.Ajax()
                    .Select(Model.GettingDataActionName, "User")
            )
            .EnableCustomBinding(true)
            .Sortable()
            .Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
            .Selectable(s => s.Enabled(true))
            .ClientEvents(e =>
                e.OnDataBinding("$q.preventDefaultFunction")
                 .OnRowDataBound("$q.preventDefaultFunction")
            )
  )*@
}

@Html.PrepareAndRunInitScript(Model)
