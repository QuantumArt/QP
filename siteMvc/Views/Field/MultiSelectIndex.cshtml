@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Field.FieldSelectableListViewModel

@using (Html.BeginDocumentPadding())
{

  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }

  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      $('#@Model.MainComponentId').qpGrid({
        columns: [
          {
              field: '',
              headerTemplate: '<input type="checkbox" name="SelectHeader" value="" />',
              headerAttributes: { 'class': 't-select-header' },
              template: '<input type="checkbox" name="selectedContentIDs" value="#= Id #" />',
              sortable: false,
              attributes: { 'class': 't-select-cell' },
              width: 35
          },
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 30 },
          {
            field: 'TypeCode',
            headerTemplate: '',
            attributes: { 'style': 'text-align: center;' },
            template: '<img src="@Url.GetThemeSmallIconsImageFolderUrl()/#= TypeIcon #" title="#= TypeName #" class="smallIcon" />',
            width: 30
          },
          { field: 'ContentName', title: '@TemplateStrings.Content', attributes: { 'class': 'title' } },
          { field: 'FieldName', title: '@EntityObjectStrings.Name', attributes: { 'class' : 'title' } },
          { field: 'FriendlyName', title: '@FieldStrings.FriendlyName' },
          { field: 'Description', title: '@EntityObjectStrings.Description' },
          { field: 'TypeName', title: '@FieldStrings.FieldType' },
          { field: 'Size', title: '@FieldStrings.SizeTitle' },
          {
            field: 'Required',
            title: '@FieldStrings.Required',
            template: '<input type="checkbox" disabled="disabled" # if (Required) { # checked="checked" # } # />',
            attributes: { 'class': 'isCentered' },
            headerAttributes: { 'class': 'isCentered' },
          },
          {
            field: 'Indexed',
            title: '@FieldStrings.Indexed',
            template: '<input type="checkbox" disabled="disabled" # if (Indexed) { # checked="checked" # } # />',
            attributes: { 'class': 'isCentered' },
            headerAttributes: { 'class': 'isCentered' },
           },
           {
            field: 'MapAsProperty',
            title: '@FieldStrings.MapAsProperty',
            template: '<input type="checkbox" disabled="disabled" # if (MapAsProperty) { # checked="checked" # } # />',
            attributes: { 'class': 'isCentered' },
            headerAttributes: { 'class': 'isCentered' },
          },
          {
            field: 'ViewInList',
            title: '@FieldStrings.ViewInList',
            template: '<input type="checkbox" disabled="disabled" # if (ViewInList) { # checked="checked" # } # />',
            attributes: { 'class': 'isCentered' },
            headerAttributes: { 'class': 'isCentered' },
           },
           { field: 'Created', title: '@EntityObjectStrings.Created' },
           { field: 'Modified', title: '@EntityObjectStrings.Modified' },
           { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy' },
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action(Model.GetDataAction, "Field", new { tabId = Model.TabId, parentId = Model.ParentEntityId })"
            },
          },
          pagesize: '@Default.GridPageSize',
        },
      });
    });
  </script>
}

@Html.PrepareAndRunInitScript(Model)
