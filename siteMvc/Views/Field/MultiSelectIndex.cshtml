@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Field.FieldSelectableListViewModel

@using (Html.BeginDocumentPadding())
{

	if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
    {
        using (Html.BeginLinkButtonsList())
        {
		    @Html.AddNewItemLink(Model)
        }
    }

    @(Html.Telerik().Grid<FieldListItem>().Name(Model.MainComponentId)
		.DataKeys(k => k.Add(s => s.Id))
		.Columns(c =>
		{
			c.Bound("")
				.Title(@"<input type='checkbox' />")
				.Width(30)
				.HeaderHtmlAttributes(new { @class = "t-select-header" })
				.ClientTemplate(@"<input type='checkbox' name='selectedContentIDs' value='<#= Id #>' />")
				.HtmlAttributes(new { @class = "t-select-cell" })
				.Sortable(false);

			c.Bound(s => s.Id).Title(EntityObjectStrings.ID)
				.Width(30)
				.HtmlAttributes(new { @class = "id" })
				;


			c.Bound(s => s.TypeCode)
				.Title("")
				.Width(30)
				.ClientTemplate(String.Format(Model.IconFormat, Url.GetThemeSmallIconsImageFolderUrl(), "<#= TypeIcon #>", "<#= Type #>"))
				.HtmlAttributes(new { style = "text-align: center;" });

			c.Bound(s => s.ContentName)
			 .Title(TemplateStrings.Content)
			 .HtmlAttributes(new { @class = "title" });

			c.Bound(s => s.FieldName)
				.Title(EntityObjectStrings.Name)
				.HtmlAttributes(new { @class = "title" });

			c.Bound(s => s.FriendlyName)
				.Title(FieldStrings.FriendlyName);

			c.Bound(s => s.Description).Title(EntityObjectStrings.Description);
			c.Bound(s => s.TypeName).Title(FieldStrings.FieldType);
			c.Bound(s => s.Size).Title(FieldStrings.SizeTitle);

			c.Bound(s => s.Required)
				.ClientTemplate(@"<input type=""checkbox"" disabled=""disabled"" <# if (Required)  { #> checked=""checked"" <# } #> />")
				.Title(FieldStrings.Required);
			c.Bound(s => s.Indexed)
				.ClientTemplate(@"<input type=""checkbox"" disabled=""disabled"" <# if (Indexed)  { #> checked=""checked"" <# } #> />")
				.Title(FieldStrings.Indexed);
			c.Bound(s => s.MapAsProperty)
				.ClientTemplate(@"<input type=""checkbox"" disabled=""disabled"" <# if (MapAsProperty)  { #> checked=""checked"" <# } #> />")
				.Title(FieldStrings.MapAsProperty);
			c.Bound(s => s.ViewInList)
				.ClientTemplate(@"<input type=""checkbox"" disabled=""disabled"" <# if (ViewInList)  { #> checked=""checked"" <# } #> />")
				.Title(FieldStrings.ViewInList);
			c.Bound(s => s.Created).Title(EntityObjectStrings.Created);
			c.Bound(s => s.Modified).Title(EntityObjectStrings.Modified);
			c.Bound(s => s.LastModifiedByUser).Title(EntityObjectStrings.LastModifiedBy);
		})
		.DataBinding(db => db.Ajax()
			.Select(Model.GetDataAction, "Field")
		)
		.EnableCustomBinding(true)
		.Sortable()
		.Pageable(p => p.Style(GridPagerStyles.NextPreviousAndNumeric).PageSize(Default.GridPageSize))
		.Selectable(s => s.Enabled(true))
		.ClientEvents(e =>
			e
				.OnDataBinding("$q.preventDefaultFunction")
				.OnRowDataBound("$q.preventDefaultFunction")
		)
    )
}

@Html.PrepareAndRunInitScript(Model)

@Html.Telerik().ScriptRegistrar().DefaultGroup(g => g.Enabled(false))
