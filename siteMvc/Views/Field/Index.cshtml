@using Quantumart.QP8.BLL.ListItems
@using Quantumart.QP8.Constants
@using Quantumart.QP8.Resources
@model Quantumart.QP8.WebMvc.ViewModels.Field.FieldListViewModel

@using (Html.BeginDocumentPadding())
{

  if (!Model.IsReadOnly && Model.ShowAddNewItemButton)
  {
    using (Html.BeginLinkButtonsList())
    {
      @Html.AddNewItemLink(Model)
    }
  }
  <div id="@Model.MainComponentId"></div>
  <script>
    $(function () {
      var iconTpl = function (settings) {
        return function (dataItem) {
          return '<img ' +
            'src="' +
            '@Url.GetThemeSmallIconsImageFolderUrl()' + dataItem[settings.icon] + '"' +
            'style="width: 16px; height: 16px;"' +
            'class="smallIcon"' +
            'title="' + (dataItem[settings.tooltip] || dataItem[settings.icon]) + '"' +
            'alt="' + (dataItem[settings.tooltip] || dataItem[settings.icon]) + '"' +
            '/>';
        };
      };
      var checkboxTpl = function (settings) {
        return function (dataItem) {
          return '<input type="checkbox" disabled' + (dataItem[settings.predicate] && ' checked="checked"');
        };
      };
      $('#@Model.MainComponentId').qpGrid({
        columns: [
          { field: 'Id', title: '@EntityObjectStrings.ID', attributes: { 'class': 'id' }, width: 50 },
          { field: 'TypeCode', title: 'Type', template: iconTpl({ icon: 'TypeIcon', tooltip: 'TypeName' }), attributes: { 'class': 'isCentered' }, width: 47 },
          { field: 'Name', title: '@EntityObjectStrings.Name', attributes: { 'class': 'title' }, width: 133 },
          { field: 'FriendlyName', title: '@FieldStrings.FriendlyName' },
          { field: 'Description', title: '@EntityObjectStrings.Description' },
          { field: 'TypeName', title: '@FieldStrings.FieldType' },
          { field: 'Size', title: '@FieldStrings.SizeTitle' },
          { field: 'Required', title: '@FieldStrings.Required', template: checkboxTpl({ predicate: 'Required' }), attributes: { 'class': 'isCentered' }, width: 60 },
          { field: 'Indexed', title: '@FieldStrings.Indexed', template: checkboxTpl({ predicate: 'Indexed' }), attributes: { 'class': 'isCentered' }, width: 60 },
          { field: 'MapAsProperty', title: '@FieldStrings.MapAsProperty', template: checkboxTpl({ predicate: 'MapAsProperty' }), attributes: { 'class': 'isCentered' }, width: 60 },
          { field: 'ViewInList', title: '@FieldStrings.ViewInList', template: checkboxTpl({ predicate: 'ViewInList' }), attributes: { 'class': 'isCentered' }, width: 60 },
          { field: 'Created', title: '@EntityObjectStrings.Created' },
          { field: 'Modified', title: '@EntityObjectStrings.Modified' },
          { field: 'LastModifiedByUser', title: '@EntityObjectStrings.LastModifiedBy' },
        ],
        dataSource: {
          transport: {
            read: {
              url: "@Url.Action("_Index", "Field", new { tabId = Model.TabId, parentId = Model.ParentEntityId } )",
            },
          },
          pageSize: @Default.GridPageSize,
        },
      });
    });
  </script>
}

@Html.PrepareAndRunInitScript(Model)
