<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewGroup" xml:space="preserve">
    <value>Add new Group</value>
  </data>
  <data name="BasicParameters" xml:space="preserve">
    <value>Basic Parameters</value>
  </data>
  <data name="BindedUserIDs" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="BuiltInUsersCouldntBeRemoved" xml:space="preserve">
    <value>Built-in users could not be removed from built-in group. Users: {0}</value>
  </data>
  <data name="CannotRemoveBuitInGroup" xml:space="preserve">
    <value>You cannot remove built-in user group.</value>
  </data>
  <data name="ConfirmHasChildren" xml:space="preserve">
    <value>Group has children. Continue?</value>
  </data>
  <data name="GroupCouldntBeAdminDescendant" xml:space="preserve">
    <value>Group used parallel workflow could not be Administrators group descendant</value>
  </data>
  <data name="GroupCouldntBindAdminDescendantUsers" xml:space="preserve">
    <value>Group used parallel workflow could not contain users bound to Administrators group or it descendants. Users: {0}</value>
  </data>
  <data name="GroupCouldntBindWorkflowGroupUsers" xml:space="preserve">
    <value>Administrators group or it descendants could not contain users bound to groups used parallel workflow. Users: {0}</value>
  </data>
  <data name="GroupCouldntUseWorkflow" xml:space="preserve">
    <value>Group used parallel workflow could not be parent</value>
  </data>
  <data name="GroupHasNotBeenCreated" xml:space="preserve">
    <value>New user group has not been created.</value>
  </data>
  <data name="GroupNotFound" xml:space="preserve">
    <value>User group is not found (Id={0})</value>
  </data>
  <data name="IsGroupCycle" xml:space="preserve">
    <value>There is a cycle in the group hierarchy</value>
  </data>
  <data name="NotificationsExist" xml:space="preserve">
    <value>You cannot remove group because there are notifications received by users in group. Notifications: {0}</value>
  </data>
  <data name="ParentCouldntUseWorkflow" xml:space="preserve">
    <value>Parent group could not use parallel workflow</value>
  </data>
  <data name="ParentGroup" xml:space="preserve">
    <value>Parent Group</value>
  </data>
  <data name="SelectParentGroup" xml:space="preserve">
    <value>Select Parent Group</value>
  </data>
  <data name="SharedArticles" xml:space="preserve">
    <value>Shared Ownership</value>
  </data>
  <data name="UseParallelWorkflow" xml:space="preserve">
    <value>Parallel Workflow</value>
  </data>
  <data name="CanUnlockItems" xml:space="preserve">
    <value>Group members can unlock entities</value>
  </data>
  <data name="WorkflowsExist" xml:space="preserve">
    <value>You cannot remove group because there are workflows which involve users in group. Workflows: {0}</value>
  </data>
  <data name="NtGroup" xml:space="preserve">
    <value>NT-group</value>
  </data>
  <data name="NtGroupInvalidFormat" xml:space="preserve">
    <value>Invalid NT-group</value>
  </data>
  <data name="NtGroupLengthExceeded" xml:space="preserve">
    <value>The length of NT-group should not exceed {1} characters!</value>
  </data>
  <data name="CanManageScheduledTasks" xml:space="preserve">
    <value>Group members can manage scheduled tasks</value>
  </data>
</root>
